{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/bg.png","path":"images/bg.png","modified":1,"renderable":0},{"_id":"source/images/img.png","path":"images/img.png","modified":1,"renderable":0},{"_id":"source/images/post/animal-6997104_1920.jpg","path":"images/post/animal-6997104_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/JVM.jpg","path":"images/post/JVM.jpg","modified":1,"renderable":0},{"_id":"source/images/post/animal-7027635_1920.jpg","path":"images/post/animal-7027635_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/ball-1845546_1920.jpg","path":"images/post/ball-1845546_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/boat-6860983_1920.jpg","path":"images/post/boat-6860983_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/bird-7016926_1920.jpg","path":"images/post/bird-7016926_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/butterfly-6876992_1920.jpg","path":"images/post/butterfly-6876992_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/cat.jpg","path":"images/post/cat.jpg","modified":1,"renderable":0},{"_id":"source/images/post/cow-g348e762cd_1920.jpg","path":"images/post/cow-g348e762cd_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/cinque-terre-4237666_1920.jpg","path":"images/post/cinque-terre-4237666_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/desert-gee44587c8_1280.jpg","path":"images/post/desert-gee44587c8_1280.jpg","modified":1,"renderable":0},{"_id":"source/images/post/field-g9907973de_1920.jpg","path":"images/post/field-g9907973de_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/field-gd599d1ced_1920.jpg","path":"images/post/field-gd599d1ced_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/dog-5146351_1920.jpg","path":"images/post/dog-5146351_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/pexels-darius-krause-3215770.jpg","path":"images/post/pexels-darius-krause-3215770.jpg","modified":1,"renderable":0},{"_id":"source/images/post/hydrangea-6974362_1920.jpg","path":"images/post/hydrangea-6974362_1920.jpg","modified":1,"renderable":0},{"_id":"source/images/post/pexels-victor-dunn-11389730.jpg","path":"images/post/pexels-victor-dunn-11389730.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w-17344475757651.jpg","path":"gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w-17344475757651.jpg","modified":1,"renderable":0},{"_id":"source/images/post/river-gb44d67b82_1280.png","path":"images/post/river-gb44d67b82_1280.png","modified":1,"renderable":0},{"_id":"source/images/post/robin-6619184_1920(1652146401).jpg","path":"images/post/robin-6619184_1920(1652146401).jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/IMG_20231005_162838.jpg","path":"gallery/movie.assets/IMG_20231005_162838.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w.jpg","path":"gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-1984820019cb2dbee66f41293bbbca55_r.jpg","path":"gallery/movie.assets/v2-1984820019cb2dbee66f41293bbbca55_r.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/IMG_20231005_165945.jpg","path":"gallery/movie.assets/IMG_20231005_165945.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-1b6891a61f0a0dfad186b68398462ebe_1440w.jpg","path":"gallery/movie.assets/v2-1b6891a61f0a0dfad186b68398462ebe_1440w.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w-17344476842432.jpg","path":"gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w-17344476842432.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w.jpg","path":"gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-43de9aa5b22ce344152998bc8880fd1f_r.png","path":"gallery/movie.assets/v2-43de9aa5b22ce344152998bc8880fd1f_r.png","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-790e32bd569efae20fae0be3284ab133_1440w.jpg","path":"gallery/movie.assets/v2-790e32bd569efae20fae0be3284ab133_1440w.jpg","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-89620c3fe3f6b393b90487b29c9b9925_r.png","path":"gallery/movie.assets/v2-89620c3fe3f6b393b90487b29c9b9925_r.png","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-8ed1f732ac454c960c6f9257f21934ef_1440w.png","path":"gallery/movie.assets/v2-8ed1f732ac454c960c6f9257f21934ef_1440w.png","modified":1,"renderable":0},{"_id":"source/gallery/movie.assets/v2-b3bfab6cb34e3ba3e1e20d376601c1e9_1440w.jpg","path":"gallery/movie.assets/v2-b3bfab6cb34e3ba3e1e20d376601c1e9_1440w.jpg","modified":1,"renderable":0},{"_id":"source/gallery/images/wallpaper/1734426279945.png","path":"gallery/images/wallpaper/1734426279945.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/gallery/life/lushan.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734428226216},{"_id":"source/_data/friends.json","hash":"27895f6c03445bdf145e6aa92e280065cf68736f","modified":1650734374901},{"_id":"source/_data/musics.json","hash":"bfbdd096f9979a133a29e4575cf36df4d56af303","modified":1650735392979},{"_id":"source/categories/index.md","hash":"a2687ceab20db42fad6dd8b2c3047d5a685c6464","modified":1734426159092},{"_id":"source/_posts/2021-09-16-Java系列 Java基础（一）基础语法.md","hash":"d29664b8f033aa1ee5434c7ee182eb24d1d06155","modified":1734426581646},{"_id":"source/_posts/2021-09-22-Hexo-GitPage-部署.md","hash":"347df6a3cf341a2a79f58223519916f5079e8606","modified":1734351071022},{"_id":"source/_posts/2021-09-23-Typora-emoji-表情包.md","hash":"7b9492802586619edafb39b4d5eae78c8de5d8d7","modified":1734351071034},{"_id":"source/_posts/2021-09-24-Hexo-文章置顶.md","hash":"9bc7118c941465bbdd03dd463f620b6468d41936","modified":1734351071042},{"_id":"source/_posts/2021-09-24-Hexo-文章添加字数统计和阅读时长.md","hash":"e7115b941abddb3cd83ae19707483ae47b8b6904","modified":1734351071027},{"_id":"source/_posts/2021-10-15-Java-日志从入门到实战.md","hash":"40a30f1389b38c9238a45844d9b85045874a1bf1","modified":1734351071050},{"_id":"source/_posts/2021-10-12-Vue-从入门到入土.md","hash":"f0d3b46aab0713d046701f4d0a1ce8873394a981","modified":1734351071030},{"_id":"source/_posts/2022-02-22-Spring-Boot-常见面试题.md","hash":"ab1fa172ed2544f5580b3d4498502671638fde34","modified":1734351071045},{"_id":"source/_posts/2022-02-23-Spring-Cloud-常见面试题.md","hash":"f3328220f65cd8b1f83bd43f7d3d6bbacd22b52c","modified":1734351071062},{"_id":"source/_posts/2022-03-03-解析城市地铁AFC系统.md","hash":"6228a090de8f013a6594672b42b3daa7991da19a","modified":1734351071069},{"_id":"source/_posts/2022-03-02-Java-八股文指南.md","hash":"ef5a094d253652d617fce9ba05c117af5e2b401a","modified":1734351071064},{"_id":"source/_posts/2022-03-04-自定义注解应用场景和使用示例.md","hash":"dff13dd35a23c9df23b3d3dd2452e5165b017ab3","modified":1734351071077},{"_id":"source/_posts/2022-03-18-谷粒商城学习.md","hash":"509b15dec449889b2d183073ac75af9e4aae4209","modified":1734351071084},{"_id":"source/_posts/2022-03-08-深入理解消息队列.md","hash":"d27766de4f77e2c88b0f69a8fcf34a6daf36cdf7","modified":1734351071072},{"_id":"source/_posts/2022-03-02-深入解析JVM-.md","hash":"dc0e2d68aee8d3cfdfa4ede69e571ea65a06c498","modified":1734398030596},{"_id":"source/_posts/2022-03-27-东航MU5732客机坠毁事故.md","hash":"1a9c41327d8fb9728abd616390e5f0c9f7fe1ebf","modified":1734351071080},{"_id":"source/_posts/2022-05-10-TCP-简介.md","hash":"0fdb1ef1ebe586a623c50fe4d2783f8a08bebf74","modified":1734398030599},{"_id":"source/_posts/2022-08-25-Spring-Cloud-核心知识总结.md","hash":"dec562e7c7778be41c63b5480898fc24405ee9e5","modified":1734351071087},{"_id":"source/_posts/2022-08-25-面试官对线.md","hash":"9727fbece056fcc0e7fd6e1fe74f40329e01dfb2","modified":1734351071089},{"_id":"source/_drafts/2021-09-16-My-New-Post.md","hash":"b85693bda31e1a3e9c8c6f1d14b6b13d744b044c","modified":1734272907676},{"_id":"source/_posts/2022-09-09-JAVA多线程.md","hash":"20f935e52fd978e2ed4b2b40f3fea2b5af70c130","modified":1734351071093},{"_id":"source/_posts/2022-02-24-深入理解幂等性.md","hash":"c4ad2d94ee2a44b343c7b820203877599426e6a2","modified":1734351071059},{"_id":"source/_drafts/2022-04-28-ssm-项目搭建.md","hash":"15c4b017e5f2ab50748aedffa65842b34708a5a9","modified":1734272907463},{"_id":"source/_drafts/2022-03-08-深入理解Spring-MVC架构.md","hash":"24902bf884ad5df4af91ff54e76b4a9b9c493a47","modified":1734272907575},{"_id":"source/_drafts/2022-04-28-SpringMVC-系列-视图解析器-InternalResourceViewResolver.md","hash":"4e378959367fe9646071cb35861250c3863fb1e2","modified":1734272907565},{"_id":"source/about/index.md","hash":"4f0f6f0e7f4c6d5d6c1175547ea33aefbb27e8a3","modified":1734342057057},{"_id":"source/_drafts/miniprogram.md","hash":"fb18a5100bde1d5ce1e9c0b5144e2324b0b1ab74","modified":1632800151719},{"_id":"source/friends/index.md","hash":"bf1f59c7f8ce654025763d7b4837146ac12624f2","modified":1734341787199},{"_id":"source/_drafts/2022-04-28-浅谈SpringMVC-框架.md","hash":"2d121da5fbaa6535affa6ce23186fe8253919ebd","modified":1734272907431},{"_id":"source/gallery/life.md","hash":"4bbb3fe1a147b55aa27796e82bd62452470bfe52","modified":1734431922961},{"_id":"source/gallery/index.md","hash":"4c5499036af5715d049435bd42c2c16d45bf6319","modified":1734441678829},{"_id":"source/gallery/movie.md","hash":"1a17cd1f046c50471e7ec37eae649ebf0161c443","modified":1734448012155},{"_id":"source/live/index.md","hash":"54f9d7d7fb708ac1d3563124c9ba8b5c040cf132","modified":1646296769320},{"_id":"source/images/avatar.jpg","hash":"790cad1cca8ce9bf2ef4ec464d4eba7a45d1302a","modified":1734331186339},{"_id":"source/live/xxx.md","hash":"fae79732bb4900aa35ffa4ec3bc5328fb802f0d9","modified":1631771113288},{"_id":"source/gallery/wallpaper.md","hash":"1a6df9759655063aed8a7228aa3b9bd3294e4a56","modified":1734427304046},{"_id":"source/movies/index.md","hash":"71fa5408d6a8a6611653e907bff9cacd9ba5c187","modified":1734341699738},{"_id":"source/images/img.png","hash":"6429a61e0f5874b91fbbbff578dc2e2648e6dc5b","modified":1632466624933},{"_id":"source/tags/index.md","hash":"05761e310dcad3e032e12f0d88c097f1608f0d8d","modified":1631757061434},{"_id":"source/images/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1734419686197},{"_id":"source/_posts/2021-09-24-Hexo-显示文章摘要.md","hash":"7119d05ae5b78b6c0e811259c2b92a7087a8c0b7","modified":1734351071039},{"_id":"source/photo/index.md","hash":"45baa90485a77eae5dbb12905da8c66da0f16ca8","modified":1631763361191},{"_id":"source/gallery/life/dali.md","hash":"9f9add9cc2952dd55b7f2f61f78a7e53e2a847d6","modified":1734438837227},{"_id":"source/music/index.md","hash":"a7844b08b6dc8cf6133eea8403c6fd9748ea542b","modified":1734341692108},{"_id":"source/_posts/2021-09-16-Java系列 Java基础（一）基础语法.assets/未命名绘图.drawio.png","hash":"5ab074d87dbf51e31474cebf95c58d89a353f4f3","modified":1734425278539},{"_id":"source/_posts/2021-09-16-Java系列 Java基础（一）基础语法.assets/位移.png","hash":"e67fbaec7c534ee236b5d32d28577487bb69a7ba","modified":1734425615991},{"_id":"source/_posts/2021-09-16-Java系列 Java基础（一）基础语法.assets/位移-17344259387251.png","hash":"e67fbaec7c534ee236b5d32d28577487bb69a7ba","modified":1734425938766},{"_id":"source/gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w-17344475757651.jpg","hash":"c2f28ad6b8c229cf5e7325daeee0a033d6180946","modified":1734447575799},{"_id":"source/gallery/movie.assets/917b0e7d41b6a3b81ba0b1bc7ef854a3_1440w.jpg","hash":"c2f28ad6b8c229cf5e7325daeee0a033d6180946","modified":1734447561228},{"_id":"source/gallery/movie.assets/v2-b3bfab6cb34e3ba3e1e20d376601c1e9_1440w.jpg","hash":"0cad4a4aff2955eae292a31008985f3583c030f8","modified":1734447575799},{"_id":"source/gallery/images/wallpaper/1734426279945.png","hash":"9d70402dd51382d0001d4730683609f9f3d47303","modified":1734426279957},{"_id":"source/_posts/2021-09-18-Java-基础.md","hash":"f31038c233a985cee33b958b9f2489ea0179912a","modified":1734422025856},{"_id":"source/_posts/Java系列 Java基础（一）基础语法.md","hash":"7b46684c9d9f8531715db2e62202b2347a266de5","modified":1734438792079},{"_id":"source/_posts/微服务","hash":"6c69ddf56ca4195c64124eff2fe4f6ef5886785a","modified":1661416880442},{"_id":"source/images/post/desert-gee44587c8_1280.jpg","hash":"93d6dcdc10e32da39abaf9b391c8e51cf5c8a0df","modified":1646211222513},{"_id":"source/images/post/boat-6860983_1920.jpg","hash":"0eb47f9f9a7e44d1b52eb6da313408f717c0f07f","modified":1646212009029},{"_id":"source/images/post/bird-7016926_1920.jpg","hash":"3f2254349a8a648967907ab39dc256d70a03ae2b","modified":1646211731903},{"_id":"source/images/post/butterfly-6876992_1920.jpg","hash":"8dda6949b62bfc07638b436bbfa3229901372fa4","modified":1646671408910},{"_id":"source/images/post/hydrangea-6974362_1920.jpg","hash":"64fef388b976a47512d78338b5f56ab32dd1a517","modified":1646274043022},{"_id":"source/images/post/pexels-darius-krause-3215770.jpg","hash":"54ae9d2bccb8a6788f48780b335875ee5b01e21e","modified":1649339072159},{"_id":"source/images/post/robin-6619184_1920(1652146401).jpg","hash":"66afeed306026a8439154f8708d58b5208d28f96","modified":1652146409697},{"_id":"source/gallery/movie.assets/v2-1b6891a61f0a0dfad186b68398462ebe_1440w.jpg","hash":"9dc122b50910c3f33b6a1e4df6c00cc1bfede2f2","modified":1734447575809},{"_id":"source/gallery/movie.assets/v2-89620c3fe3f6b393b90487b29c9b9925_r.png","hash":"608b582baf70340e05b266ffc84c36f01cad7282","modified":1734447575811},{"_id":"source/gallery/movie.assets/v2-790e32bd569efae20fae0be3284ab133_1440w.jpg","hash":"28570e501307d77fdf8046589c476cbe56356f3c","modified":1734447575808},{"_id":"source/_posts/2021-10-12-互联网图书合集.md","hash":"7929b90d06870399e78d072fc847aab85553ed00","modified":1734351071054},{"_id":"source/images/post/JVM.jpg","hash":"d8e85e47274887ba651ed6e64e6d170e54d1d231","modified":1646210336726},{"_id":"source/images/post/animal-7027635_1920.jpg","hash":"f93733592d9e8f4add28e4d2e1e1982110bec2c6","modified":1646212324454},{"_id":"source/images/post/cow-g348e762cd_1920.jpg","hash":"921b68bdcfa0f9f4110919ce0119f768578b8364","modified":1646211380493},{"_id":"source/images/post/river-gb44d67b82_1280.png","hash":"259326fd1447600130506c118f4f5b2605e64d1d","modified":1649339193117},{"_id":"source/gallery/movie.assets/v2-1984820019cb2dbee66f41293bbbca55_r.jpg","hash":"e9bc05e2132000dab4e71bb55199eb21996e520b","modified":1734447575937},{"_id":"source/gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w-17344476842432.jpg","hash":"f287f499d2b471b547728e9927d41cdf951c1ba0","modified":1734447684253},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1734419685624},{"_id":"source/gallery/movie.assets/v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w.jpg","hash":"f287f499d2b471b547728e9927d41cdf951c1ba0","modified":1734447575864},{"_id":"themes/butterfly/README_CN.md","hash":"6e79be6f188bd671eb6ef1084ea7dd757fa2b3e9","modified":1734419685629},{"_id":"source/gallery/movie.assets/v2-43de9aa5b22ce344152998bc8880fd1f_r.png","hash":"0fe0e65e5f7e0a95dac08e311e3f216478e43c4a","modified":1734447575890},{"_id":"themes/butterfly/README.md","hash":"310bf423097f1cefb6121ce3f115b2ef68aacc44","modified":1734419685627},{"_id":"themes/butterfly/_config.yml","hash":"30b0e274e266a2c4566bd5122681b41f7a7affea","modified":1734419685631},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1734419685636},{"_id":"themes/butterfly/plugins.yml","hash":"a244af3b578de079666bd87c3055917220e63c25","modified":1734419685951},{"_id":"themes/butterfly/package.json","hash":"0436a88252893e1e351b4b23ea05fcb071544395","modified":1734419685948},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1734419685639},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1734419685644},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1734419685641},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1734419685605},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1734419685656},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1734419685648},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1734419685646},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1734419685653},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1734419685940},{"_id":"themes/butterfly/layout/page.pug","hash":"a59b90dd3f845ef6bac18091c55e8e019f4fe7a3","modified":1734419685941},{"_id":"themes/butterfly/layout/post.pug","hash":"d000b6a16418c1d95d4ce49ff9346416bbb151d3","modified":1734419685944},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1734419685946},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1734419685611},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1734419685623},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1734419685619},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1734419685642},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1734419685615},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"cd2e0141d7bbd2bd348703ead52c8060904ab338","modified":1734419685660},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1734419685609},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"345cb07213cdf66cfef7d9699c60f5f3297e9585","modified":1734419685709},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1734419685663},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"24a88d138ccabf29698a6cfe399b2e10f126367f","modified":1734419685983},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"d4f3a798cdded0c0744efab3b1397b00cdb0c6e5","modified":1734419685764},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"eb31f49a826c1f95890078745e55c9a2ccb319f9","modified":1734419685752},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7d3581a446285b0cd9362266d54b59fe8768af9e","modified":1734419685762},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1734419685991},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1734419685988},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"82548510310fb44587371fcc9afd7f0bbdb673b1","modified":1734419685665},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1734419685986},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"39325366b622cfd2089cb1c9344d89f2edd79816","modified":1734419685993},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1734419685962},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1734419685997},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"072f042e069e7a0523fa439569c0c672f389b5c4","modified":1734419685967},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1734419685963},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1734419685970},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1734419685973},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1734419685965},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1734419686186},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1734419686195},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1734419685960},{"_id":"themes/butterfly/source/img/avatar.jpg","hash":"790cad1cca8ce9bf2ef4ec464d4eba7a45d1302a","modified":1734331186339},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1734419685956},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1734419686000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1734419685995},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1734419686200},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1734419686197},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1734419686006},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"e0abf9f0ec51a78258bbf0101632e7dd2c54db25","modified":1734419686008},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1734419686010},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1734419686016},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1734419686018},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1734419686003},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1734419686022},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1734419686014},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1734419686020},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"67c1aad5ddfe56deae672146c2774379aa65af95","modified":1734419686026},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"68644b981bd292fed530a597679a1f687be8cf7d","modified":1734420293231},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1734419686024},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1734419685977},{"_id":"themes/butterfly/source/js/main.js","hash":"9fb88eb196f9368768aaa554c679129e4969f069","modified":1734419686204},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1734419686213},{"_id":"themes/butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1734419686215},{"_id":"themes/butterfly/source/css/var.styl","hash":"8cc7b245da61e35cfcc80cafb4e553b5fa968111","modified":1734419686180},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1734419686012},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"2beb68bdd43b09a539c8f4ed0cb7c0838c03409a","modified":1734419685670},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e5a26d2e2ca789dffc6bd9cfc13ff9e530c9911c","modified":1734419685672},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"c681697eac3657c2c3e921c2774d67bb93d47331","modified":1734419685677},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1734419685681},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"fbe602e22ee4a60d711485ad925dfe06b92a4c76","modified":1734419685674},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1734419685683},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1734419685687},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1734419685679},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1734419685695},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1734419685702},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"f4f590102c1937d63da5edf35f2ff37f5932ccc1","modified":1734419685691},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"cd507e58852dc59a72e624fc1b22dc9b138c2575","modified":1734419685698},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1734419685706},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1734419685736},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"77eca4f5dbf38c2c805b732ff8d7d9c1560b6f16","modified":1734419685732},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a6c3a4a608f540d05105a7ae19e2f5719c2a3f71","modified":1734419685745},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1734419685727},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1734419685742},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1734419685740},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1734419685749},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1734419686179},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1734419685715},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1734419685756},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1734419685718},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1734419685720},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1734419685747},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1734419685759},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1734419685909},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1734419685761},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"4ae59a48f8984ce8316cfc82756180dc496774eb","modified":1734419685917},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1734419685913},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1734419685921},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1734419685919},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1734419685924},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1734419685922},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1734419685915},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1734419685927},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1734419685929},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1734419685938},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1734419685933},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1734419685776},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1734419685931},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"5da5f11a0f7f0fc06732df412bb77a7dddc41429","modified":1734419685935},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1734419685883},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1734419685846},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0c1affa498b28e79e5a465f3f8f18035993bcb88","modified":1734419685881},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1734419685904},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1734419686211},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"e2fa3804c0fef70bb6fa884f1055c978725ccef2","modified":1734419685906},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1734419685885},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1734419686209},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1734419686063},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1734419686068},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1734419686059},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1734419686065},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1734419686061},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"316447b94933af2cc580cc9c2b8b42e3875b8c08","modified":1734419686072},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1734419686070},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1734419686076},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1734419686080},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1734419686074},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1734419686078},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1734419686087},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1734419686036},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1734419686055},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1734419686083},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1734419686033},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1734419686040},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1734419686092},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1734419686095},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1734419686114},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1734419686110},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1734419686103},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1734419686117},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1734419686107},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1734419686127},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1734419686124},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1734419686133},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1734419686121},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1734419686139},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1734419686151},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1734419686136},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1734419686145},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1734419686161},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1734419686158},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1734419686155},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1734419686164},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1734419686166},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1734419686170},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1734419686177},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1734419686172},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1734419685770},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1734419685781},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1734419685773},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1734419686148},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1734419685779},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1734419685784},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1734419685788},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1734419685791},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1734419685786},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1734419685794},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1734419685795},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2c6eb1b0b3586ce6a92228f809be37642a2010b0","modified":1734419685801},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"8b21906b1b3f3faa19bdc16f4167b0b5d487c9ac","modified":1734419685799},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"9ed621742714de6de6593490e3d4aaa3f30a4791","modified":1734419685804},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"d040c00332e83c985dbc0e76e3242336edbcd764","modified":1734419685820},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1734419685803},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"be40f20273c31e8b37353d9705ad9b9c693e16a2","modified":1734419685814},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"966ef931a9545cdde8c270322e8650b54b965935","modified":1734419685823},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"dd5c7e808654aefeb3fcc81c7b0911cff1ee8776","modified":1734419685826},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8f3d4c33ec3d1be4bd203ba2461db9ccfad63f23","modified":1734419685817},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1734419685830},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"6ddd9dce1a553a0d24509d7f9c78b9f6742be030","modified":1734419685834},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"830bafcf50180fed4fcf76f0da277d702e66a5b3","modified":1734419685836},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"8869bac6ec822a70dfe432d7bd5e599750441ddb","modified":1734419685838},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f71d8acf5b0f3ece91ae1e018962c73b50941a45","modified":1734419685810},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1734419685829},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"a3f409a0c1ed3df8c920f7d32b86c3832459f3bf","modified":1734419685849},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"46c177643a8e65f036cb08c29387d4ab29485859","modified":1734419685840},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bfc6e6690e70c5bd646bdff354b750ebd782f4ad","modified":1734419685844},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"bd87dc207f1cab66e48496548b18f0dd9021eb91","modified":1734419685851},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1734419685897},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1734419685854},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"5227663ccbe86c830447e4dcc594202b1582595d","modified":1734419685842},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1734419685857},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"49aece5be2a0a8e414257ecbfc2abd7d0d5f8c64","modified":1734419685855},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1734419685899},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"7e3b4e1124c9917b820e96bd0c915c08da68aecd","modified":1734419685863},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b82c936cb73c325fcac69832a3e475ed732e06f9","modified":1734419685867},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"86cf7ba9cae6eb8bee0ca792df7a82f58c8451ff","modified":1734419685860},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1734419685902},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"619c41729691a54871b49da54ea27657d1b58e7e","modified":1734419685865},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"16796729df739a47508999b5467a57037ee6e9df","modified":1734419685873},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1734419685869},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1734419686049},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"393a327a7f41de070abd53cd95149d3e7e1bbf61","modified":1734419685878},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"988f75833dcb18d4a02c34cdea51e39434ea5723","modified":1734419685875},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"eee2c6b5c73ea280c7b683a1d117cab5a2ea5f66","modified":1734419685872},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1734419685888},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1734419685890},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1734419685893},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1734419685892},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1734419686046},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1734419686051},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1734419686053},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1734419686043},{"_id":"source/images/post/field-g9907973de_1920.jpg","hash":"aea30e32940ff3482b63ee59f0abf93ad3895e4f","modified":1646211256732},{"_id":"source/images/post/animal-6997104_1920.jpg","hash":"20b3394d95f0b5018ab8b5110ec03c8b9194a291","modified":1646211973635},{"_id":"source/images/post/ball-1845546_1920.jpg","hash":"30bfd04871bda7082e73a8f9af62cdb212e25c8e","modified":1646212160809},{"_id":"source/images/post/dog-5146351_1920.jpg","hash":"6f5219e5363f9018dcc84e6767175a312f0bcfbb","modified":1646213509129},{"_id":"source/images/post/cat.jpg","hash":"fc885738a6a46e66fa54ca82fb98487a0ae4c8a9","modified":1646212533303},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1734419686192},{"_id":"source/gallery/movie.assets/IMG_20231005_165945.jpg","hash":"4236218ecf375fae829a0d41c7053ec7dddd4797","modified":1734447576037},{"_id":"source/gallery/movie.assets/v2-8ed1f732ac454c960c6f9257f21934ef_1440w.png","hash":"f326c8e3f922a138938e7e381d971a7078bd9aad","modified":1734447576074},{"_id":"source/images/post/field-gd599d1ced_1920.jpg","hash":"3bd040d8541f2906a6cf155acfd170a3c6fceef7","modified":1646211632387},{"_id":"source/gallery/movie.assets/IMG_20231005_162838.jpg","hash":"25c9c42ef685fb0d1be5edf878fc664e63d9e614","modified":1734447576108},{"_id":"source/images/post/cinque-terre-4237666_1920.jpg","hash":"cd9c60d97f7b8c6e5f41b8c0950bcb00f9744048","modified":1646211969770},{"_id":"source/images/bg.png","hash":"c699da67f7e887d811f7230e39fcd2b09ff77d4c","modified":1734340204446},{"_id":"source/images/post/pexels-victor-dunn-11389730.jpg","hash":"98a089d49b87ddb37637ff6d171c2099680594a0","modified":1648459352206}],"Category":[{"name":"JAVA","_id":"cm4sllynd0004j0krgexaf7oz"},{"name":"Hexo","_id":"cm4sllyo0000ij0kr8oogg2qv"},{"name":"Markdown","_id":"cm4sllyof000zj0kr3xqf1mko"},{"name":"Vue系列","_id":"cm4sllyol0017j0kr6zprfmj4"},{"name":"面试","_id":"cm4sllyov001nj0krbi4ibhd4"},{"name":"书籍","_id":"cm4sllypg0022j0kr3i81gl2f"},{"name":"地铁AFC","_id":"cm4sllypp002ej0krckvva10w"},{"name":"后端","_id":"cm4sllypt002nj0krbpbi4ycr"},{"name":"项目","_id":"cm4sllypx002vj0kr3py672wo"},{"name":"网络","_id":"cm4sllyq00031j0krcnsz4og8"},{"name":"生活","_id":"cm4sllyq5003bj0kr80gc9t0c"},{"name":"对线","_id":"cm4sllyq6003gj0krgfetb15p"},{"name":"Spring Cloud","_id":"cm4sllyq7003kj0krhmdkf3gt"},{"name":"Spring","_id":"cm4sllyqa003qj0krb37v5dyv"},{"name":"学习","_id":"cm4sllyqb003uj0kr6k7eec2b"},{"name":"SpringMVC","_id":"cm4sllyqc003zj0krgb9mha0g"},{"name":"小程序","_id":"cm4sllyqf0048j0krcreles3f"}],"Data":[{"_id":"musics","data":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}]},{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"分类","date":"2021-09-15T16:00:00.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \"分类\"\ndate: 2021-09-16\ntype: \"categories\"\ncomments: false\n---","updated":"2024-12-17T09:02:39.092Z","path":"categories/index.html","layout":"page","_id":"cm4sllymt0000j0kr6yibgniw","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"title":"关于我","date":"2021-09-15T16:00:00.000Z","type":"about","comments":0,"_content":"## 欢迎来到我的博客\n\n90后java程序员，现居南昌，从事java开发6年，以下是我的技能树\n\n`主动技能：Spring、SpringBoot、SpringCloud、SpringAlibaba `\n\n`辅助技能：Mysql、Mybatis Plus、Redis、RabbitMQ、Linux、Git、Idea`\n\n`被动技能：Vue、Uniapp、Python、微信小程序`\n\n## 写博客目的\n\n建立博客的初衷是为了记录学习情况以及技术分享，主要的还是Java相关的技术记录。之后会有自己的技术文章输出。\n此外在这里会分享一些自己生活的记录\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-09-16\ntype: \"about\"\ncomments: false\n---\n## 欢迎来到我的博客\n\n90后java程序员，现居南昌，从事java开发6年，以下是我的技能树\n\n`主动技能：Spring、SpringBoot、SpringCloud、SpringAlibaba `\n\n`辅助技能：Mysql、Mybatis Plus、Redis、RabbitMQ、Linux、Git、Idea`\n\n`被动技能：Vue、Uniapp、Python、微信小程序`\n\n## 写博客目的\n\n建立博客的初衷是为了记录学习情况以及技术分享，主要的还是Java相关的技术记录。之后会有自己的技术文章输出。\n此外在这里会分享一些自己生活的记录\n","updated":"2024-12-16T09:40:57.057Z","path":"about/index.html","layout":"page","_id":"cm4sllyn80002j0krcfefcut0","content":"<h2 id=\"欢迎来到我的博客\"><a href=\"#欢迎来到我的博客\" class=\"headerlink\" title=\"欢迎来到我的博客\"></a>欢迎来到我的博客</h2><p>90后java程序员，现居南昌，从事java开发6年，以下是我的技能树</p>\n<p><code>主动技能：Spring、SpringBoot、SpringCloud、SpringAlibaba </code></p>\n<p><code>辅助技能：Mysql、Mybatis Plus、Redis、RabbitMQ、Linux、Git、Idea</code></p>\n<p><code>被动技能：Vue、Uniapp、Python、微信小程序</code></p>\n<h2 id=\"写博客目的\"><a href=\"#写博客目的\" class=\"headerlink\" title=\"写博客目的\"></a>写博客目的</h2><p>建立博客的初衷是为了记录学习情况以及技术分享，主要的还是Java相关的技术记录。之后会有自己的技术文章输出。<br>此外在这里会分享一些自己生活的记录</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<h2 id=\"欢迎来到我的博客\"><a href=\"#欢迎来到我的博客\" class=\"headerlink\" title=\"欢迎来到我的博客\"></a>欢迎来到我的博客</h2><p>90后java程序员，现居南昌，从事java开发6年，以下是我的技能树</p>\n<p><code>主动技能：Spring、SpringBoot、SpringCloud、SpringAlibaba </code></p>\n<p><code>辅助技能：Mysql、Mybatis Plus、Redis、RabbitMQ、Linux、Git、Idea</code></p>\n<p><code>被动技能：Vue、Uniapp、Python、微信小程序</code></p>\n<h2 id=\"写博客目的\"><a href=\"#写博客目的\" class=\"headerlink\" title=\"写博客目的\"></a>写博客目的</h2><p>建立博客的初衷是为了记录学习情况以及技术分享，主要的还是Java相关的技术记录。之后会有自己的技术文章输出。<br>此外在这里会分享一些自己生活的记录</p>\n"},{"title":"相册","date":"2024-12-17T07:47:04.000Z","_content":"\n<div class=\"gallery-group-main\">\n  {% galleryGroup '生活' '旅行和生活' '/gallery/life' https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png %}\n  {% galleryGroup '美剧' '绝命毒师' '/gallery/movie' https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png %}\n </div>\n\n","source":"gallery/index.md","raw":"---\ntitle: 相册\ndate: 2024-12-17 15:47:04\n---\n\n<div class=\"gallery-group-main\">\n  {% galleryGroup '生活' '旅行和生活' '/gallery/life' https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png %}\n  {% galleryGroup '美剧' '绝命毒师' '/gallery/movie' https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png %}\n </div>\n\n","updated":"2024-12-17T13:21:18.829Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"cm4sllynh0006j0kr47b537io","content":"<div class=\"gallery-group-main\">\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">生活</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life'></a>\n  </figcaption>\n  </figure>\n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">美剧</div>\n  <p>绝命毒师</p>\n  <a href='/gallery/movie'></a>\n  </figcaption>\n  </figure>\n  \n </div>\n\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-group-main\">\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">生活</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life'></a>\n  </figcaption>\n  </figure>\n  \n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">美剧</div>\n  <p>绝命毒师</p>\n  <a href='/gallery/movie'></a>\n  </figcaption>\n  </figure>\n  \n </div>\n\n"},{"title":"友链","date":"2022-04-23T17:18:03.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: 友链\ndate: 2022-04-24 01:18:03\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-12-16T09:36:27.199Z","path":"friends/index.html","comments":1,"_id":"cm4sllynl0008j0krf3zvfogi","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"_content":"<div class=\"gallery-group-main\">\n  {% galleryGroup '大理' '旅行和生活' '/gallery/life/dali' ![大理扎染](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png) %}\n\n  {% galleryGroup '庐山' '旅行和生活' '/gallery/life/lushan' https://img2023.cnblogs.com/blog/2233039/202403/2233039-20240301000822337-2125206689.jpg %}\n\n </div>\n\n","source":"gallery/life.md","raw":"<div class=\"gallery-group-main\">\n  {% galleryGroup '大理' '旅行和生活' '/gallery/life/dali' ![大理扎染](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png) %}\n\n  {% galleryGroup '庐山' '旅行和生活' '/gallery/life/lushan' https://img2023.cnblogs.com/blog/2233039/202403/2233039-20240301000822337-2125206689.jpg %}\n\n </div>\n\n","date":"2024-12-17T10:38:42.961Z","updated":"2024-12-17T10:38:42.961Z","path":"gallery/life.html","title":"","comments":1,"layout":"page","_id":"cm4sllynp000aj0krd33p3lkk","content":"<div class=\"gallery-group-main\">\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/!%5B%E5%A4%A7%E7%90%86%E6%89%8E%E6%9F%93%5D(https:/gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png)' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">大理</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life/dali'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://img2023.cnblogs.com/blog/2233039/202403/2233039-20240301000822337-2125206689.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">庐山</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life/lushan'></a>\n  </figcaption>\n  </figure>\n  \n\n </div>\n\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-group-main\">\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='/!%5B%E5%A4%A7%E7%90%86%E6%89%8E%E6%9F%93%5D(https:/gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171741826.png)' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">大理</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life/dali'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://img2023.cnblogs.com/blog/2233039/202403/2233039-20240301000822337-2125206689.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">庐山</div>\n  <p>旅行和生活</p>\n  <a href='/gallery/life/lushan'></a>\n  </figcaption>\n  </figure>\n  \n\n </div>\n\n"},{"title":"生活","date":"2021-09-16T05:44:54.000Z","type":"live","comments":0,"_content":"","source":"live/index.md","raw":"---\ntitle: 生活\ndate: 2021-09-16 13:44:54\ntype: \"live\"\ncomments: false\n---\n","updated":"2022-03-03T08:39:29.320Z","path":"live/index.html","layout":"page","_id":"cm4sllynu000ej0kr7fau1dwf","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"_content":"{% gallery true,220,5 %}\n\n![v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172305140.jpg)\n\n![v2-8ed1f732ac454c960c6f9257f21934ef_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306807.png)\n\n![v2-43de9aa5b22ce344152998bc8880fd1f_r](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306978.png)\n\n![v2-790e32bd569efae20fae0be3284ab133_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306661.jpg)\n\n![v2-89620c3fe3f6b393b90487b29c9b9925_r](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306023.png)\n\n\n\n{% endgallery %}","source":"gallery/movie.md","raw":"{% gallery true,220,5 %}\n\n![v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172305140.jpg)\n\n![v2-8ed1f732ac454c960c6f9257f21934ef_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306807.png)\n\n![v2-43de9aa5b22ce344152998bc8880fd1f_r](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306978.png)\n\n![v2-790e32bd569efae20fae0be3284ab133_1440w](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306661.jpg)\n\n![v2-89620c3fe3f6b393b90487b29c9b9925_r](https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306023.png)\n\n\n\n{% endgallery %}","date":"2024-12-17T15:06:52.155Z","updated":"2024-12-17T15:06:52.155Z","path":"gallery/movie.html","title":"","comments":1,"layout":"page","_id":"cm4sllyny000gj0kr3nhias1d","content":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172305140.jpg\",\"alt\":\"v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306807.png\",\"alt\":\"v2-8ed1f732ac454c960c6f9257f21934ef_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306978.png\",\"alt\":\"v2-43de9aa5b22ce344152998bc8880fd1f_r\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306661.jpg\",\"alt\":\"v2-790e32bd569efae20fae0be3284ab133_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306023.png\",\"alt\":\"v2-89620c3fe3f6b393b90487b29c9b9925_r\"}]</div>\n    </div>","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172305140.jpg\",\"alt\":\"v2-3e84bdd7038daa8d4a8ea3778f103a54_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306807.png\",\"alt\":\"v2-8ed1f732ac454c960c6f9257f21934ef_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306978.png\",\"alt\":\"v2-43de9aa5b22ce344152998bc8880fd1f_r\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306661.jpg\",\"alt\":\"v2-790e32bd569efae20fae0be3284ab133_1440w\"},{\"url\":\"https://blog-image-1259764116.cos.ap-guangzhou.myqcloud.com/202412172306023.png\",\"alt\":\"v2-89620c3fe3f6b393b90487b29c9b9925_r\"}]</div>\n    </div>"},{"_content":"title: xxx\ntype: xxx\nlayout: false\n","source":"live/xxx.md","raw":"title: xxx\ntype: xxx\nlayout: false\n","date":"2023-04-25T16:52:23.444Z","updated":"2021-09-16T05:45:13.288Z","path":"live/xxx.html","title":"","comments":1,"layout":"page","_id":"cm4sllyo2000lj0kr5wtg4n3h","content":"<p>title: xxx<br>type: xxx<br>layout: false</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<p>title: xxx<br>type: xxx<br>layout: false</p>\n"},{"_content":"{% gallery true, 220,10 %}\n![1734426279945](images/wallpaper/1734426279945.png){% endgallery %}\n{% gallery true,,10 %}\n![1734426279945](images/wallpaper/1734426279945.png)\n{% endgallery %}\n\n","source":"gallery/wallpaper.md","raw":"{% gallery true, 220,10 %}\n![1734426279945](images/wallpaper/1734426279945.png){% endgallery %}\n{% gallery true,,10 %}\n![1734426279945](images/wallpaper/1734426279945.png)\n{% endgallery %}\n\n","date":"2024-12-17T09:21:44.046Z","updated":"2024-12-17T09:21:44.046Z","path":"gallery/wallpaper.html","title":"","comments":1,"layout":"page","_id":"cm4sllyo5000oj0kr8tko5wm6","content":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"images/wallpaper/1734426279945.png\",\"alt\":\"1734426279945\"}]</div>\n    </div>\n<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"images/wallpaper/1734426279945.png\",\"alt\":\"1734426279945\"}]</div>\n    </div>\n\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"images/wallpaper/1734426279945.png\",\"alt\":\"1734426279945\"}]</div>\n    </div>\n<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[{\"url\":\"images/wallpaper/1734426279945.png\",\"alt\":\"1734426279945\"}]</div>\n    </div>\n\n"},{"title":"movies","date":"2024-12-16T09:34:59.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2024-12-16 17:34:59\n---\n","updated":"2024-12-16T09:34:59.738Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cm4sllyoa000uj0kr7yp74w71","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"title":"music","date":"2024-12-16T09:34:52.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2024-12-16 17:34:52\n---\n","updated":"2024-12-16T09:34:52.108Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm4sllyod000wj0kr9s7c8iui","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2023-04-25T16:52:23.457Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: \ntype: \"tags\" # 或者 \"categories\"/\"about\"\ncomments: false\n---\n","updated":"2021-09-16T01:51:01.434Z","path":"tags/index.html","layout":"page","_id":"cm4sllyog0011j0krdgorf2u7","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"title":"相册","date":"2021-09-15T16:00:00.000Z","type":"photo","comments":0,"_content":"","source":"photo/index.md","raw":"---\ntitle: \"相册\"\ndate: 2021-09-16\ntype: \"photo\"\ncomments: false\n---\n","updated":"2021-09-16T03:36:01.191Z","path":"photo/index.html","layout":"page","_id":"cm4sllyoi0014j0kr20gmh3vx","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"_content":"","source":"gallery/life/lushan.md","raw":"","date":"2024-12-17T09:37:06.216Z","updated":"2024-12-17T09:37:06.216Z","path":"gallery/life/lushan.html","title":"","comments":1,"layout":"page","_id":"cm4sllyom0019j0krfifkdjek","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"_content":"{% gallery true,220,5 %}\n\n{% endgallery %}\n","source":"gallery/life/dali.md","raw":"{% gallery true,220,5 %}\n\n{% endgallery %}\n","date":"2024-12-17T12:33:57.227Z","updated":"2024-12-17T12:33:57.227Z","path":"gallery/life/dali.html","title":"","comments":1,"layout":"page","_id":"cm4sllyoo001cj0kr5m4g0z15","content":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[]</div>\n    </div>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<div class=\"gallery-container\" data-type=\"data\" data-button=\"true\">\n      <div class=\"gallery-items\">[]</div>\n    </div>\n"}],"Post":[{"title":"Java系列|Java基础（一）|基础语法","author":"stormLing","summary":"万丈高楼拔地起，根深方能入云霄","abbrlink":60642,"date":"2021-09-16T00:00:00.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n\n# Java系列 | Java基础（一)| 基础语法\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。\n\n想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。\n\n所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n---------\n\n### 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 `C++` 语言的各种优点，还摒弃了 `C++` 里难以理解的多继承、指针等概念，因此 `Java` 语言具有功能强大和简单易用两个特征。`Java` 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* **面向对象**（封装，继承，多态）；\n* **平台无关性**：Java 是 “【**一次编写，到处运行**（`Write Once，Run any Where`）】” 的语言，因此采用 `Java` 语言编写的程序具有很好的可移植性，而保证这一点的正是 `Java` 的虚拟机机制。在引入虚拟机之后，`Java` 语言在不同的平台上运行不需要重新编译。\n* **支持多线程**：`C++` 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计\n* 编译与解释并存；\n\n### JVM、JDK 和 JRE 有什么区别？\n\n**`JVM`**：`Java Virtual Machine`，`Java` 虚拟机，`Java` 程序运行在 `Java` 虚拟机上。针对不同系统的实现（`Windows，Linux，macOS`）不同的 `JVM`，因此 `Java` 语言可以实现跨平台。\n\n**`JRE`**：`Java` 运⾏时环境。它是运⾏已编译 `Java` 程序所需的所有内容的集合，包括【 `Java` 虚拟机（`JVM`）、`Java` 类库、`Java` 命令和其他的⼀些基础构件】。但是，它不能⽤于创建新程序。\n\n**`JDK`**: `Java Development Kit`，它是功能⻬全的 `Java SDK。`它拥有 `JRE` 所拥有的⼀切，还有编译器（`javac`）和⼯具（如 `javadoc` 和 `jdb`）。它能够创建和编译程序。\n\n简单来说，**`JDK > JRE > JVM`**\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 `Java` 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：`Java` 程序是通过 `Java` 虚拟机在系统平台上运行的，只要该系统可以安装相应的 `Java` 虚拟机，该系统就可以运行 `java` 程序。\n\n### 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 `Java` 程序经过编译之类产生的`. class` 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（`.java`）编译成虚拟机可以识别理解的字节码 (`.class`)\n* **解释**：虚拟机执行 `Java` 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 `Java` 程序编译成 `Java` 虚拟机能识别的 `Java` 字节码，不同的平台安装对应的 `Java` 虚拟机，这样就可以可以实现 `Java` 语言的平台无关性。\n\n### 为什么说 Java 语言 “编译与解释并存”？\n\n> 编译型：一次性翻译\n> 解释性：逐行翻译\n> Java 程序 先编译 后解释 【.java -->.class -->机器码】\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n- **编译型语言**：指编译器针对特定的操作系统将源代码**一次性翻译**成可被该平台执行的机器码；\n- **解释型语言**：指解释器对源程序**逐行解释**成特定平台的机器码并立即执行。\n\n**Java** 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过**先编译**，**后解释**两个步骤。\n\n1. **编译**：`.java` 编译 `.class` 。`Java` 编写的程序需要先经过编译步骤，生成字节码（`.class` 文件）\n\n2. **解释**：这种字节码必须再经过 `JVM`，解释成操作系统能识别的**机器码**，在由操作系统执行。\n\n   因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n--------\n\n### Java 有哪些数据类型？\n\n**定义：**`Java` 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\n`Java` 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型`（byte、short、long）`\n* 浮点类型`（float、long）`\n* 字符型`（char）`\n* 布尔型`（boolean）`\n\n`Java` 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（`class`）\n* 接口（`interface`）\n* 数组 (`array`[])\n\n### 自动类型转换、强制类型转换？看看这几行代码？\n\n`Java` 所有的数值型变量可以相互转换。\n\n当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n下面是一个例子：\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（`double`）赋值给浮点型（`float`）属于下转型（`down-casting，`也称为**窄化**）会造成**精度损失**，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 `short s1 = 1; s1 = s1 + 1;` 编译出错，由于 1 是 `int` 类型，因此 `s1+1` 运算结果也是 int 型，需要强制转换类型才能赋值给 `short` 型。\n\n而 `short s1 = 1; s1 += 1`; 可以正确编译，因为 `s1+=` 1; 相当于 `s1 = (short(s1 + 1)`; 其中有隐含的强制类型转换。\n\n### 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\n`Java` 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n```\n\n### & 和 && 有什么区别？\n\n- & ：【**逻辑与**】两边都是`true`，结果为 `true`；反之为`false`；不管如何两边都会计算\n\n- && ：【**短路与**】左边为 false ，不计算右边，结果为 `false`；左边为`true`，才计算右边，若为 `true` 结果为`true` ；反之为 false\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为\n\n```java\nusername != null &&!username.equals(\"\")\n```\n\n二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 `NullPointerException` 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### switch 是否能作用在 byte/long/String 上？\n\n- Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n- Java 5 开始，Java 中引入了**枚举类型**， expr 也可以是 `enum` 类型。\n\n- Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n- java 17 开始，预览版，支持使用 Long\n- java 21 开始，为正式版\n\n### break ,continue ,return 的区别及作用？\n\n* `break` 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* `continue` 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* `return` 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png) \n\n###  用最有效率的方法计算 2 乘以 8？\n\n`2 << 3`。**位运算**，数字的二进制位左移三位相当于乘以 `2` 的三次方。\n\n![位移](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png)  \n\n### 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，`Java` 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符`（++)` 和自减运算符（--）。\n\n`++ 和 --` 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 `JVM` 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\n","source":"_posts/2021-09-16-Java系列 Java基础（一）基础语法.md","raw":"---\ntitle: Java系列|Java基础（一）|基础语法\ntags:\n  - JAVA\n  - JVM\ncategories: JAVA\nauthor: stormLing\nsummary: 万丈高楼拔地起，根深方能入云霄\nabbrlink: 60642\ndate: 2021-09-16 08:00:00\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n\n# Java系列 | Java基础（一)| 基础语法\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。\n\n想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。\n\n所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n---------\n\n### 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 `C++` 语言的各种优点，还摒弃了 `C++` 里难以理解的多继承、指针等概念，因此 `Java` 语言具有功能强大和简单易用两个特征。`Java` 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* **面向对象**（封装，继承，多态）；\n* **平台无关性**：Java 是 “【**一次编写，到处运行**（`Write Once，Run any Where`）】” 的语言，因此采用 `Java` 语言编写的程序具有很好的可移植性，而保证这一点的正是 `Java` 的虚拟机机制。在引入虚拟机之后，`Java` 语言在不同的平台上运行不需要重新编译。\n* **支持多线程**：`C++` 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计\n* 编译与解释并存；\n\n### JVM、JDK 和 JRE 有什么区别？\n\n**`JVM`**：`Java Virtual Machine`，`Java` 虚拟机，`Java` 程序运行在 `Java` 虚拟机上。针对不同系统的实现（`Windows，Linux，macOS`）不同的 `JVM`，因此 `Java` 语言可以实现跨平台。\n\n**`JRE`**：`Java` 运⾏时环境。它是运⾏已编译 `Java` 程序所需的所有内容的集合，包括【 `Java` 虚拟机（`JVM`）、`Java` 类库、`Java` 命令和其他的⼀些基础构件】。但是，它不能⽤于创建新程序。\n\n**`JDK`**: `Java Development Kit`，它是功能⻬全的 `Java SDK。`它拥有 `JRE` 所拥有的⼀切，还有编译器（`javac`）和⼯具（如 `javadoc` 和 `jdb`）。它能够创建和编译程序。\n\n简单来说，**`JDK > JRE > JVM`**\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 `Java` 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：`Java` 程序是通过 `Java` 虚拟机在系统平台上运行的，只要该系统可以安装相应的 `Java` 虚拟机，该系统就可以运行 `java` 程序。\n\n### 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 `Java` 程序经过编译之类产生的`. class` 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（`.java`）编译成虚拟机可以识别理解的字节码 (`.class`)\n* **解释**：虚拟机执行 `Java` 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 `Java` 程序编译成 `Java` 虚拟机能识别的 `Java` 字节码，不同的平台安装对应的 `Java` 虚拟机，这样就可以可以实现 `Java` 语言的平台无关性。\n\n### 为什么说 Java 语言 “编译与解释并存”？\n\n> 编译型：一次性翻译\n> 解释性：逐行翻译\n> Java 程序 先编译 后解释 【.java -->.class -->机器码】\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n- **编译型语言**：指编译器针对特定的操作系统将源代码**一次性翻译**成可被该平台执行的机器码；\n- **解释型语言**：指解释器对源程序**逐行解释**成特定平台的机器码并立即执行。\n\n**Java** 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过**先编译**，**后解释**两个步骤。\n\n1. **编译**：`.java` 编译 `.class` 。`Java` 编写的程序需要先经过编译步骤，生成字节码（`.class` 文件）\n\n2. **解释**：这种字节码必须再经过 `JVM`，解释成操作系统能识别的**机器码**，在由操作系统执行。\n\n   因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n--------\n\n### Java 有哪些数据类型？\n\n**定义：**`Java` 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\n`Java` 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型`（byte、short、long）`\n* 浮点类型`（float、long）`\n* 字符型`（char）`\n* 布尔型`（boolean）`\n\n`Java` 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（`class`）\n* 接口（`interface`）\n* 数组 (`array`[])\n\n### 自动类型转换、强制类型转换？看看这几行代码？\n\n`Java` 所有的数值型变量可以相互转换。\n\n当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n下面是一个例子：\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（`double`）赋值给浮点型（`float`）属于下转型（`down-casting，`也称为**窄化**）会造成**精度损失**，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 `short s1 = 1; s1 = s1 + 1;` 编译出错，由于 1 是 `int` 类型，因此 `s1+1` 运算结果也是 int 型，需要强制转换类型才能赋值给 `short` 型。\n\n而 `short s1 = 1; s1 += 1`; 可以正确编译，因为 `s1+=` 1; 相当于 `s1 = (short(s1 + 1)`; 其中有隐含的强制类型转换。\n\n### 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\n`Java` 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n```\n\n### & 和 && 有什么区别？\n\n- & ：【**逻辑与**】两边都是`true`，结果为 `true`；反之为`false`；不管如何两边都会计算\n\n- && ：【**短路与**】左边为 false ，不计算右边，结果为 `false`；左边为`true`，才计算右边，若为 `true` 结果为`true` ；反之为 false\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为\n\n```java\nusername != null &&!username.equals(\"\")\n```\n\n二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 `NullPointerException` 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### switch 是否能作用在 byte/long/String 上？\n\n- Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n- Java 5 开始，Java 中引入了**枚举类型**， expr 也可以是 `enum` 类型。\n\n- Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n- java 17 开始，预览版，支持使用 Long\n- java 21 开始，为正式版\n\n### break ,continue ,return 的区别及作用？\n\n* `break` 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* `continue` 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* `return` 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png) \n\n###  用最有效率的方法计算 2 乘以 8？\n\n`2 << 3`。**位运算**，数字的二进制位左移三位相当于乘以 `2` 的三次方。\n\n![位移](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png)  \n\n### 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，`Java` 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符`（++)` 和自减运算符（--）。\n\n`++ 和 --` 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 `JVM` 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\n","slug":"Java系列 Java基础（一）基础语法","published":1,"updated":"2024-12-17T09:09:41.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyn00001j0krgrt0hig6","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<h1 id=\"Java系列-Java基础（一-基础语法\"><a href=\"#Java系列-Java基础（一-基础语法\" class=\"headerlink\" title=\"Java系列 | Java基础（一)| 基础语法\"></a>Java系列 | Java基础（一)| 基础语法</h1><p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。</p>\n<p>想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。</p>\n<p>所以赶紧来看看，这些基础有没有你不会的！</p>\n<h2 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h2><h3 id=\"什么是-Java？\"><a href=\"#什么是-Java？\" class=\"headerlink\" title=\"什么是 Java？\"></a>什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 <code>C++</code> 语言的各种优点，还摒弃了 <code>C++</code> 里难以理解的多继承、指针等概念，因此 <code>Java</code> 语言具有功能强大和简单易用两个特征。<code>Java</code> 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"Java-语言有哪些特点？\"><a href=\"#Java-语言有哪些特点？\" class=\"headerlink\" title=\"Java 语言有哪些特点？\"></a>Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li><strong>面向对象</strong>（封装，继承，多态）；</li>\n<li><strong>平台无关性</strong>：Java 是 “【<strong>一次编写，到处运行</strong>（<code>Write Once，Run any Where</code>）】” 的语言，因此采用 <code>Java</code> 语言编写的程序具有很好的可移植性，而保证这一点的正是 <code>Java</code> 的虚拟机机制。在引入虚拟机之后，<code>Java</code> 语言在不同的平台上运行不需要重新编译。</li>\n<li><strong>支持多线程</strong>：<code>C++</code> 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"JVM、JDK-和-JRE-有什么区别？\"><a href=\"#JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"JVM、JDK 和 JRE 有什么区别？\"></a>JVM、JDK 和 JRE 有什么区别？</h3><p>**<code>JVM</code>**：<code>Java Virtual Machine</code>，<code>Java</code> 虚拟机，<code>Java</code> 程序运行在 <code>Java</code> 虚拟机上。针对不同系统的实现（<code>Windows，Linux，macOS</code>）不同的 <code>JVM</code>，因此 <code>Java</code> 语言可以实现跨平台。</p>\n<p>**<code>JRE</code>**：<code>Java</code> 运⾏时环境。它是运⾏已编译 <code>Java</code> 程序所需的所有内容的集合，包括【 <code>Java</code> 虚拟机（<code>JVM</code>）、<code>Java</code> 类库、<code>Java</code> 命令和其他的⼀些基础构件】。但是，它不能⽤于创建新程序。</p>\n<p><strong><code>JDK</code></strong>: <code>Java Development Kit</code>，它是功能⻬全的 <code>Java SDK。</code>它拥有 <code>JRE</code> 所拥有的⼀切，还有编译器（<code>javac</code>）和⼯具（如 <code>javadoc</code> 和 <code>jdb</code>）。它能够创建和编译程序。</p>\n<p>简单来说，**<code>JDK &gt; JRE &gt; JVM</code>**</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"说说什么是跨平台性？原理是什么\"><a href=\"#说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"说说什么是跨平台性？原理是什么\"></a>说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 <code>Java</code> 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：<code>Java</code> 程序是通过 <code>Java</code> 虚拟机在系统平台上运行的，只要该系统可以安装相应的 <code>Java</code> 虚拟机，该系统就可以运行 <code>java</code> 程序。</p>\n<h3 id=\"什么是字节码？采用字节码的好处是什么\"><a href=\"#什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"什么是字节码？采用字节码的好处是什么?\"></a>什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 <code>Java</code> 程序经过编译之类产生的<code>. class</code> 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（<code>.java</code>）编译成虚拟机可以识别理解的字节码 (<code>.class</code>)</li>\n<li><strong>解释</strong>：虚拟机执行 <code>Java</code> 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 <code>Java</code> 程序编译成 <code>Java</code> 虚拟机能识别的 <code>Java</code> 字节码，不同的平台安装对应的 <code>Java</code> 虚拟机，这样就可以可以实现 <code>Java</code> 语言的平台无关性。</p>\n<h3 id=\"为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"为什么说 Java 语言 “编译与解释并存”？\"></a>为什么说 Java 语言 “编译与解释并存”？</h3><blockquote>\n<p>编译型：一次性翻译<br>解释性：逐行翻译<br>Java 程序 先编译 后解释 【.java –&gt;.class –&gt;机器码】</p>\n</blockquote>\n<p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<ul>\n<li><strong>编译型语言</strong>：指编译器针对特定的操作系统将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码；</li>\n<li><strong>解释型语言</strong>：指解释器对源程序<strong>逐行解释</strong>成特定平台的机器码并立即执行。</li>\n</ul>\n<p><strong>Java</strong> 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过<strong>先编译</strong>，<strong>后解释</strong>两个步骤。</p>\n<ol>\n<li><p><strong>编译</strong>：<code>.java</code> 编译 <code>.class</code> 。<code>Java</code> 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件）</p>\n</li>\n<li><p><strong>解释</strong>：这种字节码必须再经过 <code>JVM</code>，解释成操作系统能识别的<strong>机器码</strong>，在由操作系统执行。</p>\n<p>因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"Java-有哪些数据类型？\"><a href=\"#Java-有哪些数据类型？\" class=\"headerlink\" title=\"Java 有哪些数据类型？\"></a>Java 有哪些数据类型？</h3><p><strong>定义：</strong><code>Java</code> 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p><code>Java</code> 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型<code>（byte、short、long）</code></li>\n<li>浮点类型<code>（float、long）</code></li>\n<li>字符型<code>（char）</code></li>\n<li>布尔型<code>（boolean）</code></li>\n</ul>\n<p><code>Java</code> 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（<code>class</code>）</li>\n<li>接口（<code>interface</code>）</li>\n<li>数组 (<code>array</code>[])</li>\n</ul>\n<h3 id=\"自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"自动类型转换、强制类型转换？看看这几行代码？\"></a>自动类型转换、强制类型转换？看看这几行代码？</h3><p><code>Java</code> 所有的数值型变量可以相互转换。</p>\n<p>当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<p>下面是一个例子：</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（<code>double</code>）赋值给浮点型（<code>float</code>）属于下转型（<code>down-casting，</code>也称为<strong>窄化</strong>）会造成<strong>精度损失</strong>，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 <code>short s1 = 1; s1 = s1 + 1;</code> 编译出错，由于 1 是 <code>int</code> 类型，因此 <code>s1+1</code> 运算结果也是 int 型，需要强制转换类型才能赋值给 <code>short</code> 型。</p>\n<p>而 <code>short s1 = 1; s1 += 1</code>; 可以正确编译，因为 <code>s1+=</code> 1; 相当于 <code>s1 = (short(s1 + 1)</code>; 其中有隐含的强制类型转换。</p>\n<h3 id=\"什么是自动拆箱-封箱？\"><a href=\"#什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"什么是自动拆箱 / 封箱？\"></a>什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p><code>Java</code> 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n</code></pre>\n<h3 id=\"amp-和-amp-amp-有什么区别？\"><a href=\"#amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"&amp; 和 &amp;&amp; 有什么区别？\"></a>&amp; 和 &amp;&amp; 有什么区别？</h3><ul>\n<li><p>&amp; ：【<strong>逻辑与</strong>】两边都是<code>true</code>，结果为 <code>true</code>；反之为<code>false</code>；不管如何两边都会计算</p>\n</li>\n<li><p>&amp;&amp; ：【<strong>短路与</strong>】左边为 false ，不计算右边，结果为 <code>false</code>；左边为<code>true</code>，才计算右边，若为 <code>true</code> 结果为<code>true</code> ；反之为 false</p>\n</li>\n</ul>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为</p>\n<pre class=\" language-java\"><code class=\"language-java\">username <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 <code>NullPointerException</code> 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"switch-是否能作用在-byte-long-String-上？\"><a href=\"#switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"switch 是否能作用在 byte/long/String 上？\"></a>switch 是否能作用在 byte/long/String 上？</h3><ul>\n<li><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n</li>\n<li><p>Java 5 开始，Java 中引入了<strong>枚举类型</strong>， expr 也可以是 <code>enum</code> 类型。</p>\n</li>\n<li><p>Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n</li>\n<li><p>java 17 开始，预览版，支持使用 Long</p>\n</li>\n<li><p>java 21 开始，为正式版</p>\n</li>\n</ul>\n<h3 id=\"break-continue-return-的区别及作用？\"><a href=\"#break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"break ,continue ,return 的区别及作用？\"></a>break ,continue ,return 的区别及作用？</h3><ul>\n<li><code>break</code> 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li><code>continue</code> 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li><code>return</code> 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"> </p>\n<h3 id=\"用最有效率的方法计算-2-乘以-8？\"><a href=\"#用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"用最有效率的方法计算 2 乘以 8？\"></a>用最有效率的方法计算 2 乘以 8？</h3><p><code>2 &lt;&lt; 3</code>。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 <code>2</code> 的三次方。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png\" alt=\"位移\">  </p>\n<h3 id=\"说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"说说自增自减运算？看下这几个代码运行结果？\"></a>说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，<code>Java</code> 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符<code>（++)</code> 和自减运算符（–）。</p>\n<p><code>++ 和 --</code> 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 <code>JVM</code> 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>；\n<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\ni<span class=\"token operator\">++</span>；\ni <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count = \"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">autoAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> coutn <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<h1 id=\"Java系列-Java基础（一-基础语法\"><a href=\"#Java系列-Java基础（一-基础语法\" class=\"headerlink\" title=\"Java系列 | Java基础（一)| 基础语法\"></a>Java系列 | Java基础（一)| 基础语法</h1><p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。</p>\n<p>想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。</p>\n<p>所以赶紧来看看，这些基础有没有你不会的！</p>\n<h2 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h2><h3 id=\"什么是-Java？\"><a href=\"#什么是-Java？\" class=\"headerlink\" title=\"什么是 Java？\"></a>什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 <code>C++</code> 语言的各种优点，还摒弃了 <code>C++</code> 里难以理解的多继承、指针等概念，因此 <code>Java</code> 语言具有功能强大和简单易用两个特征。<code>Java</code> 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"Java-语言有哪些特点？\"><a href=\"#Java-语言有哪些特点？\" class=\"headerlink\" title=\"Java 语言有哪些特点？\"></a>Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li><strong>面向对象</strong>（封装，继承，多态）；</li>\n<li><strong>平台无关性</strong>：Java 是 “【<strong>一次编写，到处运行</strong>（<code>Write Once，Run any Where</code>）】” 的语言，因此采用 <code>Java</code> 语言编写的程序具有很好的可移植性，而保证这一点的正是 <code>Java</code> 的虚拟机机制。在引入虚拟机之后，<code>Java</code> 语言在不同的平台上运行不需要重新编译。</li>\n<li><strong>支持多线程</strong>：<code>C++</code> 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"JVM、JDK-和-JRE-有什么区别？\"><a href=\"#JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"JVM、JDK 和 JRE 有什么区别？\"></a>JVM、JDK 和 JRE 有什么区别？</h3><p>**<code>JVM</code>**：<code>Java Virtual Machine</code>，<code>Java</code> 虚拟机，<code>Java</code> 程序运行在 <code>Java</code> 虚拟机上。针对不同系统的实现（<code>Windows，Linux，macOS</code>）不同的 <code>JVM</code>，因此 <code>Java</code> 语言可以实现跨平台。</p>\n<p>**<code>JRE</code>**：<code>Java</code> 运⾏时环境。它是运⾏已编译 <code>Java</code> 程序所需的所有内容的集合，包括【 <code>Java</code> 虚拟机（<code>JVM</code>）、<code>Java</code> 类库、<code>Java</code> 命令和其他的⼀些基础构件】。但是，它不能⽤于创建新程序。</p>\n<p><strong><code>JDK</code></strong>: <code>Java Development Kit</code>，它是功能⻬全的 <code>Java SDK。</code>它拥有 <code>JRE</code> 所拥有的⼀切，还有编译器（<code>javac</code>）和⼯具（如 <code>javadoc</code> 和 <code>jdb</code>）。它能够创建和编译程序。</p>\n<p>简单来说，**<code>JDK &gt; JRE &gt; JVM</code>**</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"说说什么是跨平台性？原理是什么\"><a href=\"#说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"说说什么是跨平台性？原理是什么\"></a>说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 <code>Java</code> 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：<code>Java</code> 程序是通过 <code>Java</code> 虚拟机在系统平台上运行的，只要该系统可以安装相应的 <code>Java</code> 虚拟机，该系统就可以运行 <code>java</code> 程序。</p>\n<h3 id=\"什么是字节码？采用字节码的好处是什么\"><a href=\"#什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"什么是字节码？采用字节码的好处是什么?\"></a>什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 <code>Java</code> 程序经过编译之类产生的<code>. class</code> 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（<code>.java</code>）编译成虚拟机可以识别理解的字节码 (<code>.class</code>)</li>\n<li><strong>解释</strong>：虚拟机执行 <code>Java</code> 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 <code>Java</code> 程序编译成 <code>Java</code> 虚拟机能识别的 <code>Java</code> 字节码，不同的平台安装对应的 <code>Java</code> 虚拟机，这样就可以可以实现 <code>Java</code> 语言的平台无关性。</p>\n<h3 id=\"为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"为什么说 Java 语言 “编译与解释并存”？\"></a>为什么说 Java 语言 “编译与解释并存”？</h3><blockquote>\n<p>编译型：一次性翻译<br>解释性：逐行翻译<br>Java 程序 先编译 后解释 【.java –&gt;.class –&gt;机器码】</p>\n</blockquote>\n<p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<ul>\n<li><strong>编译型语言</strong>：指编译器针对特定的操作系统将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码；</li>\n<li><strong>解释型语言</strong>：指解释器对源程序<strong>逐行解释</strong>成特定平台的机器码并立即执行。</li>\n</ul>\n<p><strong>Java</strong> 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过<strong>先编译</strong>，<strong>后解释</strong>两个步骤。</p>\n<ol>\n<li><p><strong>编译</strong>：<code>.java</code> 编译 <code>.class</code> 。<code>Java</code> 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件）</p>\n</li>\n<li><p><strong>解释</strong>：这种字节码必须再经过 <code>JVM</code>，解释成操作系统能识别的<strong>机器码</strong>，在由操作系统执行。</p>\n<p>因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n</li>\n</ol>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><h3 id=\"Java-有哪些数据类型？\"><a href=\"#Java-有哪些数据类型？\" class=\"headerlink\" title=\"Java 有哪些数据类型？\"></a>Java 有哪些数据类型？</h3><p><strong>定义：</strong><code>Java</code> 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p><code>Java</code> 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型<code>（byte、short、long）</code></li>\n<li>浮点类型<code>（float、long）</code></li>\n<li>字符型<code>（char）</code></li>\n<li>布尔型<code>（boolean）</code></li>\n</ul>\n<p><code>Java</code> 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（<code>class</code>）</li>\n<li>接口（<code>interface</code>）</li>\n<li>数组 (<code>array</code>[])</li>\n</ul>\n<h3 id=\"自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"自动类型转换、强制类型转换？看看这几行代码？\"></a>自动类型转换、强制类型转换？看看这几行代码？</h3><p><code>Java</code> 所有的数值型变量可以相互转换。</p>\n<p>当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<p>下面是一个例子：</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（<code>double</code>）赋值给浮点型（<code>float</code>）属于下转型（<code>down-casting，</code>也称为<strong>窄化</strong>）会造成<strong>精度损失</strong>，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 <code>short s1 = 1; s1 = s1 + 1;</code> 编译出错，由于 1 是 <code>int</code> 类型，因此 <code>s1+1</code> 运算结果也是 int 型，需要强制转换类型才能赋值给 <code>short</code> 型。</p>\n<p>而 <code>short s1 = 1; s1 += 1</code>; 可以正确编译，因为 <code>s1+=</code> 1; 相当于 <code>s1 = (short(s1 + 1)</code>; 其中有隐含的强制类型转换。</p>\n<h3 id=\"什么是自动拆箱-封箱？\"><a href=\"#什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"什么是自动拆箱 / 封箱？\"></a>什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p><code>Java</code> 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n</code></pre>\n<h3 id=\"amp-和-amp-amp-有什么区别？\"><a href=\"#amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"&amp; 和 &amp;&amp; 有什么区别？\"></a>&amp; 和 &amp;&amp; 有什么区别？</h3><ul>\n<li><p>&amp; ：【<strong>逻辑与</strong>】两边都是<code>true</code>，结果为 <code>true</code>；反之为<code>false</code>；不管如何两边都会计算</p>\n</li>\n<li><p>&amp;&amp; ：【<strong>短路与</strong>】左边为 false ，不计算右边，结果为 <code>false</code>；左边为<code>true</code>，才计算右边，若为 <code>true</code> 结果为<code>true</code> ；反之为 false</p>\n</li>\n</ul>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为</p>\n<pre><code class=\"java\">username != null &amp;&amp;!username.equals(&quot;&quot;)\n</code></pre>\n<p>二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 <code>NullPointerException</code> 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"switch-是否能作用在-byte-long-String-上？\"><a href=\"#switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"switch 是否能作用在 byte/long/String 上？\"></a>switch 是否能作用在 byte/long/String 上？</h3><ul>\n<li><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n</li>\n<li><p>Java 5 开始，Java 中引入了<strong>枚举类型</strong>， expr 也可以是 <code>enum</code> 类型。</p>\n</li>\n<li><p>Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n</li>\n<li><p>java 17 开始，预览版，支持使用 Long</p>\n</li>\n<li><p>java 21 开始，为正式版</p>\n</li>\n</ul>\n<h3 id=\"break-continue-return-的区别及作用？\"><a href=\"#break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"break ,continue ,return 的区别及作用？\"></a>break ,continue ,return 的区别及作用？</h3><ul>\n<li><code>break</code> 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li><code>continue</code> 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li><code>return</code> 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"> </p>\n<h3 id=\"用最有效率的方法计算-2-乘以-8？\"><a href=\"#用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"用最有效率的方法计算 2 乘以 8？\"></a>用最有效率的方法计算 2 乘以 8？</h3><p><code>2 &lt;&lt; 3</code>。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 <code>2</code> 的三次方。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/2024/12/202412171707119.png\" alt=\"位移\">  </p>\n<h3 id=\"说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"说说自增自减运算？看下这几个代码运行结果？\"></a>说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，<code>Java</code> 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符<code>（++)</code> 和自减运算符（–）。</p>\n<p><code>++ 和 --</code> 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre><code class=\"java\">int i  = 1;\ni = i++;\nSystem.out.println(i);\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 <code>JVM</code> 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre><code class=\"java\">int i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre><code class=\"java\">int count = 0;\nfor(int i = 0;i &lt; 100;i++)\n&#123;\n    count = count++;\n&#125;\nSystem.out.println(&quot;count = &quot;+count);\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre><code class=\"java\">int autoAdd(int count)\n&#123;\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n&#125;\n</code></pre>\n"},{"title":"Java 基础","author":"potato","summary":"万丈高楼拔地起，根深方能入云霄","abbrlink":4321,"date":"2021-09-18T02:29:39.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n=========\n\n### 1. 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### 2.Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* 面向对象（封装，继承，多态）；\n* 平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。\n* 支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；\n* 编译与解释并存；\n\n### 3.JVM、JDK 和 JRE 有什么区别？\n\n**JVM**：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\n**JRE**：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\n**JDK**: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n简单来说，JDK 包含 JRE，JRE 包含 JVM。\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 4. 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。\n\n### 5. 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)\n* **解释**：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。\n\n### 6. 为什么说 Java 语言 “编译与解释并存”？\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。\n\n比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。\n\nJava 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（`\\*.class` 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n========\n\n### 7.Java 有哪些数据类型？\n\n**定义：**Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\nJava 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型（byte、short、long）\n* 浮点类型（float、long）\n* 字符型（char）\n* 布尔型（boolean）\n\nJava 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（class）\n* 接口（interface）\n* 数组 ([])\n\n### 8. 自动类型转换、强制类型转换？看看这几行代码？\n\nJava 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。\n\n而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。\n\n### 9. 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\nJava 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n\n\n```\n\n### 10.& 和 && 有什么区别？\n\n& 运算符有两种用法：`短路与`、`逻辑与`。\n\n&& 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。\n\n&& 之所以称为短路运算是因为，如果 && 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 && 而不是 &。\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为`username != null &&!username.equals(\"\")`，二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### 11.switch 是否能作用在 byte/long/String 上？\n\nJava5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。\n\n从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n\n### 12.break ,continue ,return 的区别及作用？\n\n* break 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* continue 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* return 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png)\n\n### 13. 用最有效率的方法计算 2 乘以 8？\n\n2 << 3。**位运算**，数字的二进制位左移三位相当于乘以 2 的三次方。\n\n### 14. 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（--）。\n\n++ 和 -- 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\nPS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。\n\n面向对象\n========\n\n### 15. ⾯向对象和⾯向过程的区别?\n\n* **⾯向过程** ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。\n* **⾯向对象** ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。\n\n用一个比喻：面向过程是编年体；面向对象是纪传体。\n\n![面向对象和面向过程的区别](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png)\n\n### 16. 面向对象有哪些特性\n\n![面向对象三大特征](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png)\n\n* **封装**\n\n  封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。\n* **继承**\n\n  继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。\n\n> 关于继承有以下三个要点：\n\n1. ⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。\n2. ⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。\n3. ⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。\n\n* **多态**\n\n  所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。\n\n  在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。\n\n### 17. 重载（overload）和重写（override）的区别？\n\n方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\n\n* 重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；\n* 重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\n\n方法重载的规则：\n\n1. 方法名一致，参数列表中参数的顺序，类型，个数不同。\n2. 重载与方法的返回值无关，存在于父类和子类，同类中。\n3. 可以抛出不同的异常，可以有不同修饰符。\n\n### 18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\n\nJava 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n* **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。\n* **private** : 在同一类内可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**\n* **public** : 对所有类可见。可以修饰类、接口、变量、方法\n* **protected** : 对同一包内的类和所有子类可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**。\n\n![访问修饰符和可见性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png)\n\n### 19.this 关键字有什么作用？\n\nthis 是自身的一个对象，代表对象本身，可以理解为：**指向对象本身的一个指针**。\n\nthis 的用法在 Java 中大体可以分为 3 种：\n\n1. 普通的直接引用，this 相当于是指向当前对象本身\n2. 形参与成员变量名字重名，用 this 来区分：\n\n```java\npublic Person(String name,int age){\n    this.name=name;\n    this.age=age;\n}\n```\n\n3. 引用本类的构造函数\n\n### 20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\n\n1. 接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。\n2. 接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。\n3. ⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。\n4. 接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。\n5. 从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。\n\n> 1. 在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。\n> 2. jdk9 的接⼝被允许定义私有⽅法 。\n\n总结⼀下 jdk7~jdk9 Java 中接⼝的变化：\n\n1. 在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。\n2. jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。\n3. jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。\n\n### 21. 成员变量与局部变量的区别有哪些？\n\n1. **从语法形式上看**：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n2. **从变量在内存中的存储⽅式来看**：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。\n3. **从变量在内存中的⽣存时间上看**：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。\n4. **成员变量如果没有被赋初值**：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。\n\n### 22. 静态变量和实例变量的区别？静态方法、实例方法呢？\n\n> 静态变量和实例变量的区别？\n\n**静态变量:** 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。\n\n**实例变量:** 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。\n\n> 静态⽅法和实例⽅法有何不同?\n\n类似地。\n\n**静态方法**：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ \" **类名. ⽅法名** \"的⽅式，也可以使⽤\" **对象名. ⽅法名** \" 的⽅式。静态方法里不能访问类的非静态成员变量和方法。\n\n**实例⽅法**：依存于类的实例，需要使用 \" **对象名. ⽅法名** \" 的⽅式调用；可以访问类的所有成员变量和方法。\n\n### 24.final 关键字有什么作用？\n\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n\n* 被 final 修饰的类不可以被继承\n* 被 final 修饰的方法不可以被重写\n* 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n  例如：\n\n  ```java\n          final StringBuilder sb = new StringBuilder(\"abc\");\n          sb.append(\"d\");\n          System.out.println(sb);  //abcd\n  ```\n\n  一张图说明：\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png)final 修饰变量\n\n### 25.final、finally、finalize 的区别？\n\n* final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。\n* finally 作为异常处理的一部分，它只能在 `try/catch` 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，`System.exit (0)` 可以阻断 finally 执行。\n* finalize 是在 `java.lang.Object` 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 `gc` 启动，该对象被回收的时候被调用。\n\n  一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。\n\n### 26.== 和 equals 的区别？\n\n**==** : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 **== **比较的是值，引⽤数据类型** ==** 比较的是内存地址)。\n\n**equals()** : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：\n\n* 默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。\n* 自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。\n\n举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：\n\n```java\npublic class Person {\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &&\n                Objects.equals(name, person.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(no, name);\n    }\n}\n\n\n```\n\n### 27.hashCode 与 equals?\n\n这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”\n\n> 什么是 HashCode？\n\nhashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。\n\n```java\npublic native int hashCode();\n```\n\n哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！\n\n> 为什么要有 hashCode？\n\n上面已经讲了，主要是在哈希表这种结构中用的到。\n\n例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：[面渣逆袭：Java 集合连环三十问](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect)\n\n> 为什么重写 quals 时必须重写 hashCode ⽅法？\n\n如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，**equals** ⽅法被覆盖过，则 **hashCode** ⽅法也必须被覆盖。\n\nhashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）\n\n> 为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？\n\n因为可能会**碰撞**， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。\n\n### 28.Java 是值传递，还是引用传递？\n\nJava 语言是**值传递**。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。\n\nJVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。\n\n而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png)Java 引用数据值传递示意图\n\n### 29. 深拷贝和浅拷贝?\n\n* **浅拷贝**：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。\n* **深拷贝**：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。\n\n例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png)浅拷贝和深拷贝示意图\n\n因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。\n\n> 浅拷贝如何实现呢？\n\nObject 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。\n\n> 深拷贝如何实现呢？\n\n* 重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。\n* 序列化：可以先讲原对象序列化，再反序列化成拷贝对象。\n\n### 30.Java 创建对象有哪几种方式？\n\nJava 中有以下四种创建对象的方式:\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png)Java 创建对象的四种方式\n\n* new 创建新对象\n* 通过反射机制\n* 采用 clone 机制\n* 通过序列化机制\n\n前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。\n\n常用类\n======\n\nString\n------\n\n### 31.String 是 Java 基本数据类型吗？可以被继承吗？\n\n> String 是 Java 基本数据类型吗？\n\n不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。\n\nString 是一个比较特殊的引用数据类型。\n\n> String 类可以继承吗？\n\n不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。\n\n### 32.String 和 StringBuilder、StringBuffer 的区别？\n\n* String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\n* StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\n* StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n\n### 33.String str1 = new String(\"abc\") 和 String str2 = \"abc\" 和  区别？\n\n两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png)堆与常量池中的 String\n\n但是不同的是，String str1 = new String(\"abc\") 还会通过 new String() 在堆里创建一个 \"abc\" 字符串对象实例。所以后者可以理解为被前者包含。\n\n> String s = new String(\"abc\") 创建了几个对象？\n\n很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。\n\n当字符创常量池没有 “abc”，此时会创建如下两个对象：\n\n* 一个是字符串字面量 \"abc\" 所对应的、字符串常量池中的实例\n* 另一个是通过 new String() 创建并初始化的，内容与 \"abc\" 相同的实例，在堆中。\n\n### 34.String 不是不可变类吗？字符串拼接是如何实现的？\n\nString 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。\n\n例如：\n\n```\nString a = \"hello \";\nString b = \"world!\";\nString ab = a + b;\n\n\n```\n\n在 **jdk1.8 之前**，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。\n\n内存如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png)jdk1.8 之前的字符串拼接\n\n在 **Java8 时** JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。\n\n下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。\n\n```java\nstack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n\n```\n\n也就是说其实上面的代码其实相当于：\n\n```java\nString a = \"hello \";\nString b = \"world!\";\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n\n```\n\n此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。\n\n当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。\n\n### 35.intern 方法有什么作用？\n\nJDK 源码里已经对这个方法进行了说明：\n\n```java\n     * <p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * <p>\n\n\n```\n\n意思也很好懂：\n\n* 如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串\n* 否则，将此 String 对象添加到池中，并返回 String 对象的引用\n\nInteger\n-------\n\n### 36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\n\n答案是 a 和 b 相等，c 和 d 不相等。\n\n* 对于基本数据类型 == 比较的值\n* 对于引用数据类型 == 比较的是地址\n\nInteger a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。\n\n如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false\n\n```java\n    public static void main(String[] args) {\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    }\n\n\n```\n\n> 什么是 Integer 缓存？\n\n因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置`JVM-XX:AutoBoxCacheMax=`来修改缓存的最大值，最小值改不了。\n\n实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png)Integer.valueOf\n\n很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。\n\nIntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。\n\n```java\n private static class IntegerCache {\n     ……\n     static {\n            //创建Integer对象存储\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     } \n }\n\n\n```\n\n### 37.String 怎么转成 Integer 的？原理？\n\nPS: 这道题印象中在一些面经中出场过几次。\n\nString 转成 Integer，主要有两个方法：\n\n* Integer.parseInt(String s)\n* Integer.valueOf(String s)\n\n不管哪一种，最终还是会调用 Integer 类内中的`parseInt(String s, int radix)`方法。\n\n抛去一些边界之类的看看核心代码：\n\n```\npublic static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len > 0) {\n            …… \n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            }\n        } \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    }\n\n\n\n```\n\n去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png)parseInt 示意图\n\nObject\n------\n\n### 38.Object 类的常见方法?\n\nObject 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png)Object 类的方法\n\n**对象比较**：\n\n* public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。\n* public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。\n\n**对象拷贝**：\n\n* protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。\n\n**对象转字符串：**\n\n* public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n\n**多线程调度：**\n\n* public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n* public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n* public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。\n* public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。\n* public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念\n\n**反射：**\n\n* public final native Class<?> getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n\n**垃圾回收：**\n\n* protected void finalize() throws Throwable ：通知垃圾收集器回收对象。\n\n异常处理\n========\n\n### 39.Java 中异常处理体系?\n\nJava 的异常体系是分为多层的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png)Java 异常体系\n\n`Throwable`是 Java 语言中所有错误或异常的基类。Throwable 又分为`Error`和`Exception`，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。`Exception`是程序问题导致的异常，又分为两种：\n\n* CheckedException 受检异常：编译器会强制检查并要求处理的异常。\n* RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等\n\n### 40. 异常的处理方式？\n\n针对异常的处理主要有两种方式：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png)异常处理\n\n* **遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）**\n\n抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。\n\nthrows 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。\n\n* **try catch 捕获异常**\n\n在 catch 语句块中补货发生的异常，并进行处理。\n\n```java\n       try {\n            //包含可能会出现异常的代码以及声明异常的方法\n        }catch(Exception e) {\n            //捕获异常并进行处理\n        }finally {                                                       }\n            //可选，必执行的代码\n        }\n\n\n```\n\ntry-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。\n\n### 41. 三道经典异常处理代码题\n\n> 题目 1\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test());\n    }\n    public static int test() {\n        try {\n            return 1;\n        } catch (Exception e) {\n            return 2;\n        } finally {\n            System.out.print(\"3\");\n        }\n    }\n}\n\n\n```\n\n执行结果：31。\n\ntry、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。\n\n> 题目 2\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        try {\n            return 2;\n        } finally {\n            return 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：3。\n\ntry 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。\n\nfinally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。\n\n> 题目 3\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        int i = 0;\n        try {\n            i = 2;\n            return i;\n        } finally {\n            i = 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：2。\n\n大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？\n\n但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。\n\nI/O\n===\n\n### 42.Java 中 IO 流分为几种?\n\n流按照不同的特点，有很多种划分方式。\n\n* 按照流的流向分，可以分为**输入流**和**输出流**；\n* 按照操作单元划分，可以划分为**字节流**和**字符流**；\n* 按照流的角色划分为**节点流**和**处理流**\n\nJava Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n* **InputStream**/**Reader**: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n* **OutputStream**/**Writer**: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg)IO - 操作方式分类 - 图片来源参考 [2]\n\n> IO 流用到了什么设计模式？\n\n其实，Java 的 IO 流体系还用到了一个设计模式——**装饰器模式**。\n\nInputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png)Java IO 流用到装饰器模式\n\n### 43. 既然有了字节流, 为什么还要有字符流?\n\n其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。\n\n所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n### 44.BIO、NIO、AIO？\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png)BIO、NIO、AIO\n\n**BIO**(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即**客户端有连接请求时服务器端就需要启动一个线程进行处理**，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png)BIO、NIO、AIO\n\nBIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。\n\n**NIO** ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。\n\nNIO 是**同步非阻塞**的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png)NIO 线程\n\nNIO 的数据是面向**缓冲区 Buffer** 的，必须从 Buffer 中读取或写入。\n\n所以完整的 NIO 示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png)NIO 完整示意图\n\n可以看出，NIO 的运行机制：\n\n* 每个 Channel 对应一个 Buffer。\n* Selector 对应一个线程，一个线程对应多个 Channel。\n* Selector 会根据不同的事件，在各个通道上切换。\n* Buffer 是内存块，底层是数据。\n\n**AIO**：JDK 7 引入了 Asynchronous I/O，是**异步不阻塞**的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\nPS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：[面试字节，被操作系统问挂了](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect)\n\n序列化\n======\n\n### 45. 什么是序列化？什么是反序列化？\n\n什么是序列化，序列化就是**把 Java 对象转为二进制流**，方便存储和传输。\n\n所以**反序列化就是把二进制流恢复成对象**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png)序列化和反序列化\n\n类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。\n\n> Serializable 接口有什么用？\n\n这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。\n\n> serialVersionUID 又有什么用？\n\nserialVersionUID 就是起验证作用。\n\n```\nprivate static final long serialVersionUID = 1L;\n\n\n```\n\n我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。\n\n这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。\n\n如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。\n\n所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。\n\n因为类的结构变了，所以 serialVersionUID 就不一致。\n\n> Java 序列化不包含静态变量？\n\n序列化的时候是不包含静态变量的。\n\n> 如果有些变量不想序列化，怎么办？\n\n对于不想进行序列化的变量，使用`transient`关键字修饰。\n\n`transient` 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 `transient` 修饰的变量值不会被持久化和恢复。`transient` 只能修饰变量，不能修饰类和方法。\n\n### 46. 说说有几种序列化方式？\n\nJava 序列化方式有很多，常见的有三种：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png)Java 常见序列化方式\n\n* Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 `ObjectOutputStream`和对象输入流`ObjectI叩utStream`。\n* Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。\n* ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。\n\n泛型\n====\n\n### 47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\n\n> 什么是泛型？\n\nJava 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n```\nList<Integer> list = new ArrayList<>();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(\"a\");\nClass<? extends List> clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(\"add\", Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, \"kl\");\n\nSystem.out.println(list);\n\n\n```\n\n泛型一般有三种使用方式: **泛型类**、**泛型接口**、**泛型方法**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png)泛型类、泛型接口、泛型方法\n\n**1. 泛型类**：\n\n```\n//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n\n\n```\n\n如何实例化泛型类：\n\n```\nGeneric<Integer> genericInteger = new Generic<Integer>(123456);\n\n\n```\n\n**2. 泛型接口** ：\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n\n\n```\n\n实现泛型接口，指定类型：\n\n```\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n\n\n```\n\n**3. 泛型方法** ：\n\n```\n   public static < E > void printArray( E[] inputArray )\n   {\n         for ( E element : inputArray ){\n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n\n\n```\n\n使用：\n\n```\n// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n\n\n```\n\n> 泛型常用的通配符有哪些？\n\n**常用的通配符为：T，E，K，V，？**\n\n* ？表示不确定的 java 类型\n* T (type) 表示具体的一个 java 类型\n* K V (key value) 分别代表 java 键值中的 Key Value\n* E (element) 代表 Element\n\n> 什么是泛型擦除？\n\n所谓的泛型擦除，官方名叫 “类型擦除”。\n\nJava 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。\n\n也就是说，在运行的时候是没有泛型的。\n\n例如这段代码，往一群猫里放条狗：\n\n```\nLinkedList<Cat> cats = new LinkedList<Cat>();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n\n```\n\n因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java **运行**环境）看来和下面这段没区别：\n\n```\nLinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n\n```\n\n为什么要类型擦除呢？\n\n主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。\n\n注解\n====\n\n### 48. 说一下你对注解的理解？\n\n**Java 注解本质上是一个标记**，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png)Java 注解和帽子\n\n注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。\n\n有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。\n\n例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。\n\n注解生命周期有三大类，分别是：\n\n* RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件\n* RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了\n* RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息\n\n所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。\n\n像常见的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png)Override 注解\n\n就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。\n\n再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以**在运行的时候可以通过反射得到注解的信息**，还能拿到标记的值 required 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png)Autowired 注解\n\n反射\n====\n\n### 49. 什么是反射？应用？原理？\n\n> 什么是反射？\n\n我们通常都是利用`new`方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。\n\n而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到**反射**。\n\n通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n\n反射最核心的四个类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png)Java 反射相关类\n\n> 反射的应用场景？\n\n一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。\n\n但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\n\n像 Spring 里的很多 **注解** ，它真正的功能实现就是利用反射。\n\n就像为什么我们使用 Spring 的时候 ，一个`@Component`注解就声明了一个类为 Spring Bean 呢？为什么通过一个 `@Value`注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\n\n这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。\n\n> 反射的原理？\n\n我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。\n\nJDK1.8 新特性\n=============\n\nJDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。\n\n### 50.JDK1.8 都有哪些新特性？\n\nJDK1.8 有不少新特性，我们经常接触到的新特性如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png)JDK1.8 主要新特性\n\n* 接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可\n* Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。\n* Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。\n\n  Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。\n\n  简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\n* 日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。\n* Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。\n\n### 51.Lambda 表达式了解多少？\n\nLambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。\n\n比如我们以前使用 Runnable 创建并运行线程：\n\n```\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Thread is running before Java8!\");\n            }\n        }).start();\n\n\n```\n\n这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：\n\n```\nnew Thread( () -> System.out.println(\"Thread is running since Java8!\") ).start();\n\n\n```\n\n当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\n\n所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\n\n> Java8 有哪些内置函数式接口？\n\nJDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 **Comparator** 和 **Runnable**，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。\n\n除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。\n\n### 52.Optional 了解吗？\n\n`Optional`是用于防范`NullPointerException`。\n\n可以将 `Optional` 看做是包装对象（可能是 `null`, 也有可能非 `null`）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 `Optional` 来包装它，这也是在 Java 8 被推荐使用的做法。\n\n```\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n\n\n```\n\n### 53.Stream 流用过吗？\n\n`Stream` 流，简单来说，使用 `java.util.Stream` 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 _中间操作_ 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 `Stream` 流。\n\nStream 流一般用于集合，我们对一个集合做几个常见操作：\n\n```\nList<String> stringCollection = new ArrayList<>();\nstringCollection.add(\"ddd2\");\nstringCollection.add(\"aaa2\");\nstringCollection.add(\"bbb1\");\nstringCollection.add(\"aaa1\");\nstringCollection.add(\"bbb3\");\nstringCollection.add(\"ccc\");\nstringCollection.add(\"bbb2\");\nstringCollection.add(\"ddd1\");\n\n\n```\n\n* **Filter 过滤**\n\n```\nstringCollection\n    .stream()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa2\", \"aaa1\"\n\n\n\n```\n\n* **Sorted 排序**\n\n```\nstringCollection\n    .stream()\n    .sorted()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa1\", \"aaa2\"\n\n\n```\n\n* **Map 转换**\n\n```\nstringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -> b.compareTo(a))\n    .forEach(System.out::println);\n\n// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\"\n\n\n```\n\n* **Match 匹配**\n\n```\n// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -> s.startsWith(\"z\"));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n\n```\n\n* **Count 计数**\n\n`count` 是一个终端操作，它能够统计 `stream` 流中的元素总数，返回值是 `long` 类型。\n\n```\n// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -> s.startsWith(\"b\"))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n\n```\n\n* **Reduce**\n\n`Reduce` 中文翻译为：_减少、缩小_。通过入参的 `Function`，我们能够将 `list` 归约成一个值。它的返回类型是 `Optional` 类型。\n\n```\nOptional<String> reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -> s1 + \"#\" + s2);\n\nreduced.ifPresent(System.out::println);\n// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\"\n\n\n```\n\n以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png)Java Stream 流\n\n> 简单事情重复做，重复事情认真做，认真事情有创造性地做。\n>\n> 我是**三分恶**，一个能文能武的程序员，**点赞**、**关注**不迷路，咱们下期见！\n\n**参考：**\n\n* [1]. Java 基础高频面试题（2021 年最新版）：https://blog.csdn.net/v123411739/article/details/115364158\n* [2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：https://segmentfault.com/a/1190000039897611\n* [3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：https://blog.csdn.net/wo541075754/article/details/108604389\n* [4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：https://cloud.tencent.com/developer/article/1686226\n* [5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：https://hello.blog.csdn.net/article/details/108374856\n* [6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：https://juejin.cn/post/6938224339347046408#heading-12\n* [7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：https://juejin.cn/post/6844904125700784136\n* [8]. Java 基础知识面试题（2020 最新版）：https://thinkwon.blog.csdn.net/article/details/104390612\n* [9].Java 基础面试题（2021 最新版）：https://www.jianshu.com/p/7687559d29a3\n* [10]. 干货 | Java8 新特性教程 ：https://juejin.cn/post/6844903761547100168#heading-5\n* [11]. 面向对象和面向过程分别是什么？：https://www.zhihu.com/question/28790424)\n* [12]. 《疯狂 Java 讲义》\n* [13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：https://segmentfault.com/a/1190000021047883\n* [14]. 什么是泛型擦除？：https://www.zhihu.com/question/452958728/answer/1817841881\n* [15]. 学会反射后，我被录取了（干货）：https://www.cnblogs.com/cxuanBlog/p/13551797.html\n\n··········  END  ··············\n\n公众号\n\n专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 [**JavaGuide 知识星球**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect)。这是星球的详细介绍以及加入方法：[**JavaGuide 知识星球详细介绍**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect) （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。\n\n如果本文对你有帮助的话，欢迎**点赞** & **在看** & **分享**，这对我继续分享 & 创作优质文章非常重要。感谢🙏🏻\n\n[![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png)](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect)\n","source":"_posts/2021-09-18-Java-基础.md","raw":"---\ntitle: Java 基础\ntags:\n  - JAVA\n  - JVM\n  - JAVA基础\ncategories: JAVA\nauthor: potato\nsummary: 万丈高楼拔地起，根深方能入云霄\nabbrlink: 4321\ndate: 2021-09-18 10:29:39\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n=========\n\n### 1. 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### 2.Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* 面向对象（封装，继承，多态）；\n* 平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。\n* 支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；\n* 编译与解释并存；\n\n### 3.JVM、JDK 和 JRE 有什么区别？\n\n**JVM**：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\n**JRE**：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\n**JDK**: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n简单来说，JDK 包含 JRE，JRE 包含 JVM。\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 4. 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。\n\n### 5. 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)\n* **解释**：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。\n\n### 6. 为什么说 Java 语言 “编译与解释并存”？\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。\n\n比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。\n\nJava 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（`\\*.class` 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n========\n\n### 7.Java 有哪些数据类型？\n\n**定义：**Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\nJava 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型（byte、short、long）\n* 浮点类型（float、long）\n* 字符型（char）\n* 布尔型（boolean）\n\nJava 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（class）\n* 接口（interface）\n* 数组 ([])\n\n### 8. 自动类型转换、强制类型转换？看看这几行代码？\n\nJava 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。\n\n而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。\n\n### 9. 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\nJava 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n\n\n```\n\n### 10.& 和 && 有什么区别？\n\n& 运算符有两种用法：`短路与`、`逻辑与`。\n\n&& 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。\n\n&& 之所以称为短路运算是因为，如果 && 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 && 而不是 &。\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为`username != null &&!username.equals(\"\")`，二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### 11.switch 是否能作用在 byte/long/String 上？\n\nJava5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。\n\n从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n\n### 12.break ,continue ,return 的区别及作用？\n\n* break 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* continue 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* return 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png)\n\n### 13. 用最有效率的方法计算 2 乘以 8？\n\n2 << 3。**位运算**，数字的二进制位左移三位相当于乘以 2 的三次方。\n\n### 14. 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（--）。\n\n++ 和 -- 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\nPS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。\n\n面向对象\n========\n\n### 15. ⾯向对象和⾯向过程的区别?\n\n* **⾯向过程** ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。\n* **⾯向对象** ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。\n\n用一个比喻：面向过程是编年体；面向对象是纪传体。\n\n![面向对象和面向过程的区别](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png)\n\n### 16. 面向对象有哪些特性\n\n![面向对象三大特征](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png)\n\n* **封装**\n\n  封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。\n* **继承**\n\n  继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。\n\n> 关于继承有以下三个要点：\n\n1. ⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。\n2. ⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。\n3. ⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。\n\n* **多态**\n\n  所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。\n\n  在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。\n\n### 17. 重载（overload）和重写（override）的区别？\n\n方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\n\n* 重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；\n* 重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\n\n方法重载的规则：\n\n1. 方法名一致，参数列表中参数的顺序，类型，个数不同。\n2. 重载与方法的返回值无关，存在于父类和子类，同类中。\n3. 可以抛出不同的异常，可以有不同修饰符。\n\n### 18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\n\nJava 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n* **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。\n* **private** : 在同一类内可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**\n* **public** : 对所有类可见。可以修饰类、接口、变量、方法\n* **protected** : 对同一包内的类和所有子类可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**。\n\n![访问修饰符和可见性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png)\n\n### 19.this 关键字有什么作用？\n\nthis 是自身的一个对象，代表对象本身，可以理解为：**指向对象本身的一个指针**。\n\nthis 的用法在 Java 中大体可以分为 3 种：\n\n1. 普通的直接引用，this 相当于是指向当前对象本身\n2. 形参与成员变量名字重名，用 this 来区分：\n\n```java\npublic Person(String name,int age){\n    this.name=name;\n    this.age=age;\n}\n```\n\n3. 引用本类的构造函数\n\n### 20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\n\n1. 接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。\n2. 接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。\n3. ⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。\n4. 接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。\n5. 从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。\n\n> 1. 在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。\n> 2. jdk9 的接⼝被允许定义私有⽅法 。\n\n总结⼀下 jdk7~jdk9 Java 中接⼝的变化：\n\n1. 在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。\n2. jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。\n3. jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。\n\n### 21. 成员变量与局部变量的区别有哪些？\n\n1. **从语法形式上看**：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n2. **从变量在内存中的存储⽅式来看**：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。\n3. **从变量在内存中的⽣存时间上看**：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。\n4. **成员变量如果没有被赋初值**：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。\n\n### 22. 静态变量和实例变量的区别？静态方法、实例方法呢？\n\n> 静态变量和实例变量的区别？\n\n**静态变量:** 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。\n\n**实例变量:** 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。\n\n> 静态⽅法和实例⽅法有何不同?\n\n类似地。\n\n**静态方法**：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ \" **类名. ⽅法名** \"的⽅式，也可以使⽤\" **对象名. ⽅法名** \" 的⽅式。静态方法里不能访问类的非静态成员变量和方法。\n\n**实例⽅法**：依存于类的实例，需要使用 \" **对象名. ⽅法名** \" 的⽅式调用；可以访问类的所有成员变量和方法。\n\n### 24.final 关键字有什么作用？\n\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n\n* 被 final 修饰的类不可以被继承\n* 被 final 修饰的方法不可以被重写\n* 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n  例如：\n\n  ```java\n          final StringBuilder sb = new StringBuilder(\"abc\");\n          sb.append(\"d\");\n          System.out.println(sb);  //abcd\n  ```\n\n  一张图说明：\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png)final 修饰变量\n\n### 25.final、finally、finalize 的区别？\n\n* final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。\n* finally 作为异常处理的一部分，它只能在 `try/catch` 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，`System.exit (0)` 可以阻断 finally 执行。\n* finalize 是在 `java.lang.Object` 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 `gc` 启动，该对象被回收的时候被调用。\n\n  一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。\n\n### 26.== 和 equals 的区别？\n\n**==** : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 **== **比较的是值，引⽤数据类型** ==** 比较的是内存地址)。\n\n**equals()** : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：\n\n* 默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。\n* 自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。\n\n举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：\n\n```java\npublic class Person {\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &&\n                Objects.equals(name, person.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(no, name);\n    }\n}\n\n\n```\n\n### 27.hashCode 与 equals?\n\n这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”\n\n> 什么是 HashCode？\n\nhashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。\n\n```java\npublic native int hashCode();\n```\n\n哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！\n\n> 为什么要有 hashCode？\n\n上面已经讲了，主要是在哈希表这种结构中用的到。\n\n例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：[面渣逆袭：Java 集合连环三十问](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect)\n\n> 为什么重写 quals 时必须重写 hashCode ⽅法？\n\n如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，**equals** ⽅法被覆盖过，则 **hashCode** ⽅法也必须被覆盖。\n\nhashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）\n\n> 为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？\n\n因为可能会**碰撞**， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。\n\n### 28.Java 是值传递，还是引用传递？\n\nJava 语言是**值传递**。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。\n\nJVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。\n\n而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png)Java 引用数据值传递示意图\n\n### 29. 深拷贝和浅拷贝?\n\n* **浅拷贝**：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。\n* **深拷贝**：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。\n\n例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png)浅拷贝和深拷贝示意图\n\n因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。\n\n> 浅拷贝如何实现呢？\n\nObject 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。\n\n> 深拷贝如何实现呢？\n\n* 重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。\n* 序列化：可以先讲原对象序列化，再反序列化成拷贝对象。\n\n### 30.Java 创建对象有哪几种方式？\n\nJava 中有以下四种创建对象的方式:\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png)Java 创建对象的四种方式\n\n* new 创建新对象\n* 通过反射机制\n* 采用 clone 机制\n* 通过序列化机制\n\n前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。\n\n常用类\n======\n\nString\n------\n\n### 31.String 是 Java 基本数据类型吗？可以被继承吗？\n\n> String 是 Java 基本数据类型吗？\n\n不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。\n\nString 是一个比较特殊的引用数据类型。\n\n> String 类可以继承吗？\n\n不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。\n\n### 32.String 和 StringBuilder、StringBuffer 的区别？\n\n* String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\n* StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\n* StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n\n### 33.String str1 = new String(\"abc\") 和 String str2 = \"abc\" 和  区别？\n\n两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png)堆与常量池中的 String\n\n但是不同的是，String str1 = new String(\"abc\") 还会通过 new String() 在堆里创建一个 \"abc\" 字符串对象实例。所以后者可以理解为被前者包含。\n\n> String s = new String(\"abc\") 创建了几个对象？\n\n很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。\n\n当字符创常量池没有 “abc”，此时会创建如下两个对象：\n\n* 一个是字符串字面量 \"abc\" 所对应的、字符串常量池中的实例\n* 另一个是通过 new String() 创建并初始化的，内容与 \"abc\" 相同的实例，在堆中。\n\n### 34.String 不是不可变类吗？字符串拼接是如何实现的？\n\nString 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。\n\n例如：\n\n```\nString a = \"hello \";\nString b = \"world!\";\nString ab = a + b;\n\n\n```\n\n在 **jdk1.8 之前**，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。\n\n内存如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png)jdk1.8 之前的字符串拼接\n\n在 **Java8 时** JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。\n\n下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。\n\n```java\nstack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n\n```\n\n也就是说其实上面的代码其实相当于：\n\n```java\nString a = \"hello \";\nString b = \"world!\";\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n\n```\n\n此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。\n\n当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。\n\n### 35.intern 方法有什么作用？\n\nJDK 源码里已经对这个方法进行了说明：\n\n```java\n     * <p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * <p>\n\n\n```\n\n意思也很好懂：\n\n* 如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串\n* 否则，将此 String 对象添加到池中，并返回 String 对象的引用\n\nInteger\n-------\n\n### 36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\n\n答案是 a 和 b 相等，c 和 d 不相等。\n\n* 对于基本数据类型 == 比较的值\n* 对于引用数据类型 == 比较的是地址\n\nInteger a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。\n\n如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false\n\n```java\n    public static void main(String[] args) {\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    }\n\n\n```\n\n> 什么是 Integer 缓存？\n\n因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置`JVM-XX:AutoBoxCacheMax=`来修改缓存的最大值，最小值改不了。\n\n实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png)Integer.valueOf\n\n很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。\n\nIntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。\n\n```java\n private static class IntegerCache {\n     ……\n     static {\n            //创建Integer对象存储\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     } \n }\n\n\n```\n\n### 37.String 怎么转成 Integer 的？原理？\n\nPS: 这道题印象中在一些面经中出场过几次。\n\nString 转成 Integer，主要有两个方法：\n\n* Integer.parseInt(String s)\n* Integer.valueOf(String s)\n\n不管哪一种，最终还是会调用 Integer 类内中的`parseInt(String s, int radix)`方法。\n\n抛去一些边界之类的看看核心代码：\n\n```\npublic static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len > 0) {\n            …… \n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            }\n        } \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    }\n\n\n\n```\n\n去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png)parseInt 示意图\n\nObject\n------\n\n### 38.Object 类的常见方法?\n\nObject 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png)Object 类的方法\n\n**对象比较**：\n\n* public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。\n* public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。\n\n**对象拷贝**：\n\n* protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。\n\n**对象转字符串：**\n\n* public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n\n**多线程调度：**\n\n* public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n* public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n* public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。\n* public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。\n* public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念\n\n**反射：**\n\n* public final native Class<?> getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n\n**垃圾回收：**\n\n* protected void finalize() throws Throwable ：通知垃圾收集器回收对象。\n\n异常处理\n========\n\n### 39.Java 中异常处理体系?\n\nJava 的异常体系是分为多层的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png)Java 异常体系\n\n`Throwable`是 Java 语言中所有错误或异常的基类。Throwable 又分为`Error`和`Exception`，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。`Exception`是程序问题导致的异常，又分为两种：\n\n* CheckedException 受检异常：编译器会强制检查并要求处理的异常。\n* RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等\n\n### 40. 异常的处理方式？\n\n针对异常的处理主要有两种方式：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png)异常处理\n\n* **遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）**\n\n抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。\n\nthrows 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。\n\n* **try catch 捕获异常**\n\n在 catch 语句块中补货发生的异常，并进行处理。\n\n```java\n       try {\n            //包含可能会出现异常的代码以及声明异常的方法\n        }catch(Exception e) {\n            //捕获异常并进行处理\n        }finally {                                                       }\n            //可选，必执行的代码\n        }\n\n\n```\n\ntry-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。\n\n### 41. 三道经典异常处理代码题\n\n> 题目 1\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test());\n    }\n    public static int test() {\n        try {\n            return 1;\n        } catch (Exception e) {\n            return 2;\n        } finally {\n            System.out.print(\"3\");\n        }\n    }\n}\n\n\n```\n\n执行结果：31。\n\ntry、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。\n\n> 题目 2\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        try {\n            return 2;\n        } finally {\n            return 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：3。\n\ntry 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。\n\nfinally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。\n\n> 题目 3\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        int i = 0;\n        try {\n            i = 2;\n            return i;\n        } finally {\n            i = 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：2。\n\n大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？\n\n但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。\n\nI/O\n===\n\n### 42.Java 中 IO 流分为几种?\n\n流按照不同的特点，有很多种划分方式。\n\n* 按照流的流向分，可以分为**输入流**和**输出流**；\n* 按照操作单元划分，可以划分为**字节流**和**字符流**；\n* 按照流的角色划分为**节点流**和**处理流**\n\nJava Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n* **InputStream**/**Reader**: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n* **OutputStream**/**Writer**: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg)IO - 操作方式分类 - 图片来源参考 [2]\n\n> IO 流用到了什么设计模式？\n\n其实，Java 的 IO 流体系还用到了一个设计模式——**装饰器模式**。\n\nInputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png)Java IO 流用到装饰器模式\n\n### 43. 既然有了字节流, 为什么还要有字符流?\n\n其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。\n\n所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n### 44.BIO、NIO、AIO？\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png)BIO、NIO、AIO\n\n**BIO**(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即**客户端有连接请求时服务器端就需要启动一个线程进行处理**，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png)BIO、NIO、AIO\n\nBIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。\n\n**NIO** ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。\n\nNIO 是**同步非阻塞**的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png)NIO 线程\n\nNIO 的数据是面向**缓冲区 Buffer** 的，必须从 Buffer 中读取或写入。\n\n所以完整的 NIO 示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png)NIO 完整示意图\n\n可以看出，NIO 的运行机制：\n\n* 每个 Channel 对应一个 Buffer。\n* Selector 对应一个线程，一个线程对应多个 Channel。\n* Selector 会根据不同的事件，在各个通道上切换。\n* Buffer 是内存块，底层是数据。\n\n**AIO**：JDK 7 引入了 Asynchronous I/O，是**异步不阻塞**的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\nPS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：[面试字节，被操作系统问挂了](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect)\n\n序列化\n======\n\n### 45. 什么是序列化？什么是反序列化？\n\n什么是序列化，序列化就是**把 Java 对象转为二进制流**，方便存储和传输。\n\n所以**反序列化就是把二进制流恢复成对象**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png)序列化和反序列化\n\n类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。\n\n> Serializable 接口有什么用？\n\n这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。\n\n> serialVersionUID 又有什么用？\n\nserialVersionUID 就是起验证作用。\n\n```\nprivate static final long serialVersionUID = 1L;\n\n\n```\n\n我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。\n\n这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。\n\n如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。\n\n所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。\n\n因为类的结构变了，所以 serialVersionUID 就不一致。\n\n> Java 序列化不包含静态变量？\n\n序列化的时候是不包含静态变量的。\n\n> 如果有些变量不想序列化，怎么办？\n\n对于不想进行序列化的变量，使用`transient`关键字修饰。\n\n`transient` 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 `transient` 修饰的变量值不会被持久化和恢复。`transient` 只能修饰变量，不能修饰类和方法。\n\n### 46. 说说有几种序列化方式？\n\nJava 序列化方式有很多，常见的有三种：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png)Java 常见序列化方式\n\n* Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 `ObjectOutputStream`和对象输入流`ObjectI叩utStream`。\n* Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。\n* ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。\n\n泛型\n====\n\n### 47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\n\n> 什么是泛型？\n\nJava 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n```\nList<Integer> list = new ArrayList<>();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(\"a\");\nClass<? extends List> clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(\"add\", Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, \"kl\");\n\nSystem.out.println(list);\n\n\n```\n\n泛型一般有三种使用方式: **泛型类**、**泛型接口**、**泛型方法**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png)泛型类、泛型接口、泛型方法\n\n**1. 泛型类**：\n\n```\n//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n\n\n```\n\n如何实例化泛型类：\n\n```\nGeneric<Integer> genericInteger = new Generic<Integer>(123456);\n\n\n```\n\n**2. 泛型接口** ：\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n\n\n```\n\n实现泛型接口，指定类型：\n\n```\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n\n\n```\n\n**3. 泛型方法** ：\n\n```\n   public static < E > void printArray( E[] inputArray )\n   {\n         for ( E element : inputArray ){\n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n\n\n```\n\n使用：\n\n```\n// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n\n\n```\n\n> 泛型常用的通配符有哪些？\n\n**常用的通配符为：T，E，K，V，？**\n\n* ？表示不确定的 java 类型\n* T (type) 表示具体的一个 java 类型\n* K V (key value) 分别代表 java 键值中的 Key Value\n* E (element) 代表 Element\n\n> 什么是泛型擦除？\n\n所谓的泛型擦除，官方名叫 “类型擦除”。\n\nJava 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。\n\n也就是说，在运行的时候是没有泛型的。\n\n例如这段代码，往一群猫里放条狗：\n\n```\nLinkedList<Cat> cats = new LinkedList<Cat>();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n\n```\n\n因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java **运行**环境）看来和下面这段没区别：\n\n```\nLinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n\n```\n\n为什么要类型擦除呢？\n\n主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。\n\n注解\n====\n\n### 48. 说一下你对注解的理解？\n\n**Java 注解本质上是一个标记**，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png)Java 注解和帽子\n\n注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。\n\n有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。\n\n例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。\n\n注解生命周期有三大类，分别是：\n\n* RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件\n* RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了\n* RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息\n\n所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。\n\n像常见的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png)Override 注解\n\n就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。\n\n再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以**在运行的时候可以通过反射得到注解的信息**，还能拿到标记的值 required 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png)Autowired 注解\n\n反射\n====\n\n### 49. 什么是反射？应用？原理？\n\n> 什么是反射？\n\n我们通常都是利用`new`方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。\n\n而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到**反射**。\n\n通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n\n反射最核心的四个类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png)Java 反射相关类\n\n> 反射的应用场景？\n\n一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。\n\n但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\n\n像 Spring 里的很多 **注解** ，它真正的功能实现就是利用反射。\n\n就像为什么我们使用 Spring 的时候 ，一个`@Component`注解就声明了一个类为 Spring Bean 呢？为什么通过一个 `@Value`注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\n\n这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。\n\n> 反射的原理？\n\n我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。\n\nJDK1.8 新特性\n=============\n\nJDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。\n\n### 50.JDK1.8 都有哪些新特性？\n\nJDK1.8 有不少新特性，我们经常接触到的新特性如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png)JDK1.8 主要新特性\n\n* 接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可\n* Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。\n* Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。\n\n  Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。\n\n  简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\n* 日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。\n* Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。\n\n### 51.Lambda 表达式了解多少？\n\nLambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。\n\n比如我们以前使用 Runnable 创建并运行线程：\n\n```\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Thread is running before Java8!\");\n            }\n        }).start();\n\n\n```\n\n这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：\n\n```\nnew Thread( () -> System.out.println(\"Thread is running since Java8!\") ).start();\n\n\n```\n\n当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\n\n所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\n\n> Java8 有哪些内置函数式接口？\n\nJDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 **Comparator** 和 **Runnable**，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。\n\n除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。\n\n### 52.Optional 了解吗？\n\n`Optional`是用于防范`NullPointerException`。\n\n可以将 `Optional` 看做是包装对象（可能是 `null`, 也有可能非 `null`）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 `Optional` 来包装它，这也是在 Java 8 被推荐使用的做法。\n\n```\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n\n\n```\n\n### 53.Stream 流用过吗？\n\n`Stream` 流，简单来说，使用 `java.util.Stream` 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 _中间操作_ 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 `Stream` 流。\n\nStream 流一般用于集合，我们对一个集合做几个常见操作：\n\n```\nList<String> stringCollection = new ArrayList<>();\nstringCollection.add(\"ddd2\");\nstringCollection.add(\"aaa2\");\nstringCollection.add(\"bbb1\");\nstringCollection.add(\"aaa1\");\nstringCollection.add(\"bbb3\");\nstringCollection.add(\"ccc\");\nstringCollection.add(\"bbb2\");\nstringCollection.add(\"ddd1\");\n\n\n```\n\n* **Filter 过滤**\n\n```\nstringCollection\n    .stream()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa2\", \"aaa1\"\n\n\n\n```\n\n* **Sorted 排序**\n\n```\nstringCollection\n    .stream()\n    .sorted()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa1\", \"aaa2\"\n\n\n```\n\n* **Map 转换**\n\n```\nstringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -> b.compareTo(a))\n    .forEach(System.out::println);\n\n// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\"\n\n\n```\n\n* **Match 匹配**\n\n```\n// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -> s.startsWith(\"z\"));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n\n```\n\n* **Count 计数**\n\n`count` 是一个终端操作，它能够统计 `stream` 流中的元素总数，返回值是 `long` 类型。\n\n```\n// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -> s.startsWith(\"b\"))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n\n```\n\n* **Reduce**\n\n`Reduce` 中文翻译为：_减少、缩小_。通过入参的 `Function`，我们能够将 `list` 归约成一个值。它的返回类型是 `Optional` 类型。\n\n```\nOptional<String> reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -> s1 + \"#\" + s2);\n\nreduced.ifPresent(System.out::println);\n// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\"\n\n\n```\n\n以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png)Java Stream 流\n\n> 简单事情重复做，重复事情认真做，认真事情有创造性地做。\n>\n> 我是**三分恶**，一个能文能武的程序员，**点赞**、**关注**不迷路，咱们下期见！\n\n**参考：**\n\n* [1]. Java 基础高频面试题（2021 年最新版）：https://blog.csdn.net/v123411739/article/details/115364158\n* [2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：https://segmentfault.com/a/1190000039897611\n* [3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：https://blog.csdn.net/wo541075754/article/details/108604389\n* [4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：https://cloud.tencent.com/developer/article/1686226\n* [5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：https://hello.blog.csdn.net/article/details/108374856\n* [6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：https://juejin.cn/post/6938224339347046408#heading-12\n* [7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：https://juejin.cn/post/6844904125700784136\n* [8]. Java 基础知识面试题（2020 最新版）：https://thinkwon.blog.csdn.net/article/details/104390612\n* [9].Java 基础面试题（2021 最新版）：https://www.jianshu.com/p/7687559d29a3\n* [10]. 干货 | Java8 新特性教程 ：https://juejin.cn/post/6844903761547100168#heading-5\n* [11]. 面向对象和面向过程分别是什么？：https://www.zhihu.com/question/28790424)\n* [12]. 《疯狂 Java 讲义》\n* [13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：https://segmentfault.com/a/1190000021047883\n* [14]. 什么是泛型擦除？：https://www.zhihu.com/question/452958728/answer/1817841881\n* [15]. 学会反射后，我被录取了（干货）：https://www.cnblogs.com/cxuanBlog/p/13551797.html\n\n··········  END  ··············\n\n公众号\n\n专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 [**JavaGuide 知识星球**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect)。这是星球的详细介绍以及加入方法：[**JavaGuide 知识星球详细介绍**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect) （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。\n\n如果本文对你有帮助的话，欢迎**点赞** & **在看** & **分享**，这对我继续分享 & 创作优质文章非常重要。感谢🙏🏻\n\n[![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png)](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect)\n","slug":"Java-基础","published":1,"updated":"2024-12-17T07:53:45.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyn90003j0krgwcv778f","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！</p>\n<h1 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h1><h3 id=\"1-什么是-Java？\"><a href=\"#1-什么是-Java？\" class=\"headerlink\" title=\"1. 什么是 Java？\"></a>1. 什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"2-Java-语言有哪些特点？\"><a href=\"#2-Java-语言有哪些特点？\" class=\"headerlink\" title=\"2.Java 语言有哪些特点？\"></a>2.Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li>\n<li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"3-JVM、JDK-和-JRE-有什么区别？\"><a href=\"#3-JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"3.JVM、JDK 和 JRE 有什么区别？\"></a>3.JVM、JDK 和 JRE 有什么区别？</h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p><strong>JRE</strong>：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"4-说说什么是跨平台性？原理是什么\"><a href=\"#4-说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"4. 说说什么是跨平台性？原理是什么\"></a>4. 说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p>\n<h3 id=\"5-什么是字节码？采用字节码的好处是什么\"><a href=\"#5-什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"5. 什么是字节码？采用字节码的好处是什么?\"></a>5. 什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)</li>\n<li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p>\n<h3 id=\"6-为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#6-为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"6. 为什么说 Java 语言 “编译与解释并存”？\"></a>6. 为什么说 Java 语言 “编译与解释并存”？</h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p>\n<p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p>\n<p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"7-Java-有哪些数据类型？\"><a href=\"#7-Java-有哪些数据类型？\" class=\"headerlink\" title=\"7.Java 有哪些数据类型？\"></a>7.Java 有哪些数据类型？</h3><p><strong>定义：</strong>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型（byte、short、long）</li>\n<li>浮点类型（float、long）</li>\n<li>字符型（char）</li>\n<li>布尔型（boolean）</li>\n</ul>\n<p>Java 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（class）</li>\n<li>接口（interface）</li>\n<li>数组 ([])</li>\n</ul>\n<h3 id=\"8-自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#8-自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"8. 自动类型转换、强制类型转换？看看这几行代码？\"></a>8. 自动类型转换、强制类型转换？看看这几行代码？</h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>\n<p>而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。</p>\n<h3 id=\"9-什么是自动拆箱-封箱？\"><a href=\"#9-什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"9. 什么是自动拆箱 / 封箱？\"></a>9. 什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n\n</code></pre>\n<h3 id=\"10-amp-和-amp-amp-有什么区别？\"><a href=\"#10-amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"10.&amp; 和 &amp;&amp; 有什么区别？\"></a>10.&amp; 和 &amp;&amp; 有什么区别？</h3><p>&amp; 运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p>\n<p>&amp;&amp; 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p>\n<p>&amp;&amp; 之所以称为短路运算是因为，如果 &amp;&amp; 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 &amp;&amp; 而不是 &amp;。</p>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"11-switch-是否能作用在-byte-long-String-上？\"><a href=\"#11-switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"11.switch 是否能作用在 byte/long/String 上？\"></a>11.switch 是否能作用在 byte/long/String 上？</h3><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n<p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p>\n<p>从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n<h3 id=\"12-break-continue-return-的区别及作用？\"><a href=\"#12-break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"12.break ,continue ,return 的区别及作用？\"></a>12.break ,continue ,return 的区别及作用？</h3><ul>\n<li>break 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li>continue 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li>return 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"></p>\n<h3 id=\"13-用最有效率的方法计算-2-乘以-8？\"><a href=\"#13-用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"13. 用最有效率的方法计算 2 乘以 8？\"></a>13. 用最有效率的方法计算 2 乘以 8？</h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p>\n<h3 id=\"14-说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#14-说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"14. 说说自增自减运算？看下这几个代码运行结果？\"></a>14. 说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（–）。</p>\n<p>++ 和 – 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>；\n<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\ni<span class=\"token operator\">++</span>；\ni <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count = \"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">autoAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> coutn <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h3 id=\"15-⾯向对象和⾯向过程的区别\"><a href=\"#15-⾯向对象和⾯向过程的区别\" class=\"headerlink\" title=\"15. ⾯向对象和⾯向过程的区别?\"></a>15. ⾯向对象和⾯向过程的区别?</h3><ul>\n<li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li>\n<li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li>\n</ul>\n<p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png\" alt=\"面向对象和面向过程的区别\"></p>\n<h3 id=\"16-面向对象有哪些特性\"><a href=\"#16-面向对象有哪些特性\" class=\"headerlink\" title=\"16. 面向对象有哪些特性\"></a>16. 面向对象有哪些特性</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png\" alt=\"面向对象三大特征\"></p>\n<ul>\n<li><p><strong>封装</strong></p>\n<p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p>\n</li>\n<li><p><strong>继承</strong></p>\n<p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p>\n</li>\n</ul>\n<blockquote>\n<p>关于继承有以下三个要点：</p>\n</blockquote>\n<ol>\n<li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</li>\n<li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</li>\n<li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</li>\n</ol>\n<ul>\n<li><p><strong>多态</strong></p>\n<p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p>\n<p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p>\n</li>\n</ul>\n<h3 id=\"17-重载（overload）和重写（override）的区别？\"><a href=\"#17-重载（overload）和重写（override）的区别？\" class=\"headerlink\" title=\"17. 重载（overload）和重写（override）的区别？\"></a>17. 重载（overload）和重写（override）的区别？</h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p>\n<ul>\n<li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li>\n<li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</li>\n</ul>\n<p>方法重载的规则：</p>\n<ol>\n<li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li>\n<li>重载与方法的返回值无关，存在于父类和子类，同类中。</li>\n<li>可以抛出不同的异常，可以有不同修饰符。</li>\n</ol>\n<h3 id=\"18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\"><a href=\"#18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\" class=\"headerlink\" title=\"18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\"></a>18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？</h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png\" alt=\"访问修饰符和可见性\"></p>\n<h3 id=\"19-this-关键字有什么作用？\"><a href=\"#19-this-关键字有什么作用？\" class=\"headerlink\" title=\"19.this 关键字有什么作用？\"></a>19.this 关键字有什么作用？</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p>\n<p>this 的用法在 Java 中大体可以分为 3 种：</p>\n<ol>\n<li>普通的直接引用，this 相当于是指向当前对象本身</li>\n<li>形参与成员变量名字重名，用 this 来区分：</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\">\n<li>引用本类的构造函数</li>\n</ol>\n<h3 id=\"20-抽象类-abstract-class-和接口-interface-有什么区别？\"><a href=\"#20-抽象类-abstract-class-和接口-interface-有什么区别？\" class=\"headerlink\" title=\"20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\"></a>20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？</h3><ol>\n<li>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</li>\n<li>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</li>\n<li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</li>\n<li>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</li>\n<li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</li>\n</ol>\n<blockquote>\n<ol>\n<li>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</li>\n<li>jdk9 的接⼝被允许定义私有⽅法 。</li>\n</ol>\n</blockquote>\n<p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p>\n<ol>\n<li>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</li>\n<li>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</li>\n<li>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li>\n</ol>\n<h3 id=\"21-成员变量与局部变量的区别有哪些？\"><a href=\"#21-成员变量与局部变量的区别有哪些？\" class=\"headerlink\" title=\"21. 成员变量与局部变量的区别有哪些？\"></a>21. 成员变量与局部变量的区别有哪些？</h3><ol>\n<li><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</li>\n<li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li>\n<li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li>\n</ol>\n<h3 id=\"22-静态变量和实例变量的区别？静态方法、实例方法呢？\"><a href=\"#22-静态变量和实例变量的区别？静态方法、实例方法呢？\" class=\"headerlink\" title=\"22. 静态变量和实例变量的区别？静态方法、实例方法呢？\"></a>22. 静态变量和实例变量的区别？静态方法、实例方法呢？</h3><blockquote>\n<p>静态变量和实例变量的区别？</p>\n</blockquote>\n<p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p>\n<p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p>\n<blockquote>\n<p>静态⽅法和实例⽅法有何不同?</p>\n</blockquote>\n<p>类似地。</p>\n<p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ “ <strong>类名. ⽅法名</strong> “的⽅式，也可以使⽤” <strong>对象名. ⽅法名</strong> “ 的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p>\n<p><strong>实例⽅法</strong>：依存于类的实例，需要使用 “ <strong>对象名. ⽅法名</strong> “ 的⽅式调用；可以访问类的所有成员变量和方法。</p>\n<h3 id=\"24-final-关键字有什么作用？\"><a href=\"#24-final-关键字有什么作用？\" class=\"headerlink\" title=\"24.final 关键字有什么作用？\"></a>24.final 关键字有什么作用？</h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n<p>例如：</p>\n<pre class=\" language-java\"><code class=\"language-java\">        <span class=\"token keyword\">final</span> StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//abcd</span>\n</code></pre>\n<p>一张图说明：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png\">final 修饰变量</p>\n</li>\n</ul>\n<h3 id=\"25-final、finally、finalize-的区别？\"><a href=\"#25-final、finally、finalize-的区别？\" class=\"headerlink\" title=\"25.final、finally、finalize 的区别？\"></a>25.final、finally、finalize 的区别？</h3><ul>\n<li><p>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p>\n</li>\n<li><p>finally 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p>\n</li>\n<li><p>finalize 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p>\n<p>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p>\n</li>\n</ul>\n<h3 id=\"26-和-equals-的区别？\"><a href=\"#26-和-equals-的区别？\" class=\"headerlink\" title=\"26.== 和 equals 的区别？\"></a>26.== 和 equals 的区别？</h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 <strong>== <strong>比较的是值，引⽤数据类型</strong> ==</strong> 比较的是内存地址)。</p>\n<p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：</p>\n<ul>\n<li>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。</li>\n<li>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</li>\n</ul>\n<p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String no<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"27-hashCode-与-equals\"><a href=\"#27-hashCode-与-equals\" class=\"headerlink\" title=\"27.hashCode 与 equals?\"></a>27.hashCode 与 equals?</h3><p>这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p>\n<blockquote>\n<p>什么是 HashCode？</p>\n</blockquote>\n<p>hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p>\n<blockquote>\n<p>为什么要有 hashCode？</p>\n</blockquote>\n<p>上面已经讲了，主要是在哈希表这种结构中用的到。</p>\n<p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect\">面渣逆袭：Java 集合连环三十问</a></p>\n<blockquote>\n<p>为什么重写 quals 时必须重写 hashCode ⽅法？</p>\n</blockquote>\n<p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p>\n<p>hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<blockquote>\n<p>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</p>\n</blockquote>\n<p>因为可能会<strong>碰撞</strong>， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。</p>\n<h3 id=\"28-Java-是值传递，还是引用传递？\"><a href=\"#28-Java-是值传递，还是引用传递？\" class=\"headerlink\" title=\"28.Java 是值传递，还是引用传递？\"></a>28.Java 是值传递，还是引用传递？</h3><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p>\n<p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p>\n<p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png\">Java 引用数据值传递示意图</p>\n<h3 id=\"29-深拷贝和浅拷贝\"><a href=\"#29-深拷贝和浅拷贝\" class=\"headerlink\" title=\"29. 深拷贝和浅拷贝?\"></a>29. 深拷贝和浅拷贝?</h3><ul>\n<li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li>\n<li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li>\n</ul>\n<p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png\">浅拷贝和深拷贝示意图</p>\n<p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p>\n<blockquote>\n<p>浅拷贝如何实现呢？</p>\n</blockquote>\n<p>Object 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。</p>\n<blockquote>\n<p>深拷贝如何实现呢？</p>\n</blockquote>\n<ul>\n<li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li>\n<li>序列化：可以先讲原对象序列化，再反序列化成拷贝对象。</li>\n</ul>\n<h3 id=\"30-Java-创建对象有哪几种方式？\"><a href=\"#30-Java-创建对象有哪几种方式？\" class=\"headerlink\" title=\"30.Java 创建对象有哪几种方式？\"></a>30.Java 创建对象有哪几种方式？</h3><p>Java 中有以下四种创建对象的方式:</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png\">Java 创建对象的四种方式</p>\n<ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<p>前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p>\n<h1 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"31-String-是-Java-基本数据类型吗？可以被继承吗？\"><a href=\"#31-String-是-Java-基本数据类型吗？可以被继承吗？\" class=\"headerlink\" title=\"31.String 是 Java 基本数据类型吗？可以被继承吗？\"></a>31.String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote>\n<p>String 是 Java 基本数据类型吗？</p>\n</blockquote>\n<p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p>\n<p>String 是一个比较特殊的引用数据类型。</p>\n<blockquote>\n<p>String 类可以继承吗？</p>\n</blockquote>\n<p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p>\n<h3 id=\"32-String-和-StringBuilder、StringBuffer-的区别？\"><a href=\"#32-String-和-StringBuilder、StringBuffer-的区别？\" class=\"headerlink\" title=\"32.String 和 StringBuilder、StringBuffer 的区别？\"></a>32.String 和 StringBuilder、StringBuffer 的区别？</h3><ul>\n<li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li>\n<li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li>\n<li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</li>\n</ul>\n<h3 id=\"33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\"><a href=\"#33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\" class=\"headerlink\" title=\"33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？\"></a>33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png\">堆与常量池中的 String</p>\n<p>但是不同的是，String str1 = new String(“abc”) 还会通过 new String() 在堆里创建一个 “abc” 字符串对象实例。所以后者可以理解为被前者包含。</p>\n<blockquote>\n<p>String s = new String(“abc”) 创建了几个对象？</p>\n</blockquote>\n<p>很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。</p>\n<p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p>\n<ul>\n<li>一个是字符串字面量 “abc” 所对应的、字符串常量池中的实例</li>\n<li>另一个是通过 new String() 创建并初始化的，内容与 “abc” 相同的实例，在堆中。</li>\n</ul>\n<h3 id=\"34-String-不是不可变类吗？字符串拼接是如何实现的？\"><a href=\"#34-String-不是不可变类吗？字符串拼接是如何实现的？\" class=\"headerlink\" title=\"34.String 不是不可变类吗？字符串拼接是如何实现的？\"></a>34.String 不是不可变类吗？字符串拼接是如何实现的？</h3><p>String 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。</p>\n<p>例如：</p>\n<pre><code>String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nString ab = a + b;\n\n</code></pre>\n<p>在 <strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p>\n<p>内存如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png\">jdk1.8 之前的字符串拼接</p>\n<p>在 <strong>Java8 时</strong> JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。</p>\n<p>下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。</p>\n<pre class=\" language-java\"><code class=\"language-java\">stack<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n     <span class=\"token number\">0</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">2</span>                  <span class=\"token comment\" spellcheck=\"true\">// String hello</span>\n     <span class=\"token number\">2</span><span class=\"token operator\">:</span> astore_1\n     <span class=\"token number\">3</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">3</span>                  <span class=\"token comment\" spellcheck=\"true\">// String world!</span>\n     <span class=\"token number\">5</span><span class=\"token operator\">:</span> astore_2\n     <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span>           #<span class=\"token number\">4</span>                  <span class=\"token comment\" spellcheck=\"true\">// class java/lang/StringBuilder</span>\n     <span class=\"token number\">9</span><span class=\"token operator\">:</span> dup\n    <span class=\"token number\">10</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">5</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.\"&lt;init>\":()V</span>\n    <span class=\"token number\">13</span><span class=\"token operator\">:</span> aload_1\n    <span class=\"token number\">14</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">6</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>\n    <span class=\"token number\">17</span><span class=\"token operator\">:</span> aload_2\n    <span class=\"token number\">18</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">6</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>\n    <span class=\"token number\">21</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">7</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>\n    <span class=\"token number\">24</span><span class=\"token operator\">:</span> astore_3\n    <span class=\"token number\">25</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n\n\n</code></pre>\n<p>也就是说其实上面的代码其实相当于：</p>\n<pre class=\" language-java\"><code class=\"language-java\">String a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">;</span>\nString b <span class=\"token operator\">=</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span>\nStringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString ab <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。</p>\n<p>当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。</p>\n<h3 id=\"35-intern-方法有什么作用？\"><a href=\"#35-intern-方法有什么作用？\" class=\"headerlink\" title=\"35.intern 方法有什么作用？\"></a>35.intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p>\n<pre class=\" language-java\"><code class=\"language-java\">     <span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n     <span class=\"token operator\">*</span> When the intern method is invoked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> the pool already contains a\n     <span class=\"token operator\">*</span> string equal to <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object as determined by\n     <span class=\"token operator\">*</span> the <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@link</span> #<span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> method<span class=\"token punctuation\">,</span> then the string from the pool is\n     <span class=\"token operator\">*</span> returned<span class=\"token punctuation\">.</span> Otherwise<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object is added to the\n     <span class=\"token operator\">*</span> pool and a reference to <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object is returned<span class=\"token punctuation\">.</span>\n     <span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n\n</code></pre>\n<p>意思也很好懂：</p>\n<ul>\n<li>如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li>\n<li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li>\n</ul>\n<h2 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h2><h3 id=\"36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\"><a href=\"#36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\" class=\"headerlink\" title=\"36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\"></a>36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h3><p>答案是 a 和 b 相等，c 和 d 不相等。</p>\n<ul>\n<li>对于基本数据类型 == 比较的值</li>\n<li>对于引用数据类型 == 比较的是地址</li>\n</ul>\n<p>Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。</p>\n<p>如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false</p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Integer a <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        Integer b <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        Integer b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//false</span>\n\n        Integer c <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        Integer d <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//false</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<blockquote>\n<p>什么是 Integer 缓存？</p>\n</blockquote>\n<p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p>\n<p>实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png\">Integer.valueOf</p>\n<p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。</p>\n<p>IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。</p>\n<pre class=\" language-java\"><code class=\"language-java\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerCache</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n     ……\n     <span class=\"token keyword\">static</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//创建Integer对象存储</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cache<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                cache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         ……\n     <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"37-String-怎么转成-Integer-的？原理？\"><a href=\"#37-String-怎么转成-Integer-的？原理？\" class=\"headerlink\" title=\"37.String 怎么转成 Integer 的？原理？\"></a>37.String 怎么转成 Integer 的？原理？</h3><p>PS: 这道题印象中在一些面经中出场过几次。</p>\n<p>String 转成 Integer，主要有两个方法：</p>\n<ul>\n<li>Integer.parseInt(String s)</li>\n<li>Integer.valueOf(String s)</li>\n</ul>\n<p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p>\n<p>抛去一些边界之类的看看核心代码：</p>\n<pre><code>public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    &#123;\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len &gt; 0) &#123;\n            …… \n            while (i &lt; len) &#123;\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            &#125;\n        &#125; \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    &#125;\n\n\n</code></pre>\n<p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png\">parseInt 示意图</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"38-Object-类的常见方法\"><a href=\"#38-Object-类的常见方法\" class=\"headerlink\" title=\"38.Object 类的常见方法?\"></a>38.Object 类的常见方法?</h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png\">Object 类的方法</p>\n<p><strong>对象比较</strong>：</p>\n<ul>\n<li>public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。</li>\n<li>public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。</li>\n</ul>\n<p><strong>对象拷贝</strong>：</p>\n<ul>\n<li>protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。</li>\n</ul>\n<p><strong>对象转字符串：</strong></p>\n<ul>\n<li>public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li>\n</ul>\n<p><strong>多线程调度：</strong></p>\n<ul>\n<li>public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li>\n<li>public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li>\n<li>public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li>\n<li>public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。</li>\n<li>public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</li>\n</ul>\n<p><strong>反射：</strong></p>\n<ul>\n<li>public final native Class&lt;?&gt; getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</li>\n</ul>\n<p><strong>垃圾回收：</strong></p>\n<ul>\n<li>protected void finalize() throws Throwable ：通知垃圾收集器回收对象。</li>\n</ul>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h3 id=\"39-Java-中异常处理体系\"><a href=\"#39-Java-中异常处理体系\" class=\"headerlink\" title=\"39.Java 中异常处理体系?\"></a>39.Java 中异常处理体系?</h3><p>Java 的异常体系是分为多层的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png\">Java 异常体系</p>\n<p><code>Throwable</code>是 Java 语言中所有错误或异常的基类。Throwable 又分为<code>Error</code>和<code>Exception</code>，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。<code>Exception</code>是程序问题导致的异常，又分为两种：</p>\n<ul>\n<li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。</li>\n<li>RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li>\n</ul>\n<h3 id=\"40-异常的处理方式？\"><a href=\"#40-异常的处理方式？\" class=\"headerlink\" title=\"40. 异常的处理方式？\"></a>40. 异常的处理方式？</h3><p>针对异常的处理主要有两种方式：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png\">异常处理</p>\n<ul>\n<li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li>\n</ul>\n<p>抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。</p>\n<p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p>\n<ul>\n<li><strong>try catch 捕获异常</strong></li>\n</ul>\n<p>在 catch 语句块中补货发生的异常，并进行处理。</p>\n<pre class=\" language-java\"><code class=\"language-java\">       <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//包含可能会出现异常的代码以及声明异常的方法</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//捕获异常并进行处理</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>                                                       <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//可选，必执行的代码</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p>\n<h3 id=\"41-三道经典异常处理代码题\"><a href=\"#41-三道经典异常处理代码题\" class=\"headerlink\" title=\"41. 三道经典异常处理代码题\"></a>41. 三道经典异常处理代码题</h3><blockquote>\n<p>题目 1</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：31。</p>\n<p>try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。</p>\n<blockquote>\n<p>题目 2</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：3。</p>\n<p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p>\n<p>finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。</p>\n<blockquote>\n<p>题目 3</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：2。</p>\n<p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p>\n<p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><h3 id=\"42-Java-中-IO-流分为几种\"><a href=\"#42-Java-中-IO-流分为几种\" class=\"headerlink\" title=\"42.Java 中 IO 流分为几种?\"></a>42.Java 中 IO 流分为几种?</h3><p>流按照不同的特点，有很多种划分方式。</p>\n<ul>\n<li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li>\n</ul>\n<p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p>\n<ul>\n<li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>\n<li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg\">IO - 操作方式分类 - 图片来源参考 [2]</p>\n<blockquote>\n<p>IO 流用到了什么设计模式？</p>\n</blockquote>\n<p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p>\n<p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png\">Java IO 流用到装饰器模式</p>\n<h3 id=\"43-既然有了字节流-为什么还要有字符流\"><a href=\"#43-既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"43. 既然有了字节流, 为什么还要有字符流?\"></a>43. 既然有了字节流, 为什么还要有字符流?</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p>\n<p>所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h3 id=\"44-BIO、NIO、AIO？\"><a href=\"#44-BIO、NIO、AIO？\" class=\"headerlink\" title=\"44.BIO、NIO、AIO？\"></a>44.BIO、NIO、AIO？</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png\">BIO、NIO、AIO</p>\n<p><strong>BIO</strong>(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png\">BIO、NIO、AIO</p>\n<p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>\n<p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。</p>\n<p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png\">NIO 线程</p>\n<p>NIO 的数据是面向<strong>缓冲区 Buffer</strong> 的，必须从 Buffer 中读取或写入。</p>\n<p>所以完整的 NIO 示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png\">NIO 完整示意图</p>\n<p>可以看出，NIO 的运行机制：</p>\n<ul>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 是内存块，底层是数据。</li>\n</ul>\n<p><strong>AIO</strong>：JDK 7 引入了 Asynchronous I/O，是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n<p>PS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect\">面试字节，被操作系统问挂了</a></p>\n<h1 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h1><h3 id=\"45-什么是序列化？什么是反序列化？\"><a href=\"#45-什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"45. 什么是序列化？什么是反序列化？\"></a>45. 什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p>\n<p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png\">序列化和反序列化</p>\n<p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p>\n<blockquote>\n<p>Serializable 接口有什么用？</p>\n</blockquote>\n<p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p>\n<blockquote>\n<p>serialVersionUID 又有什么用？</p>\n</blockquote>\n<p>serialVersionUID 就是起验证作用。</p>\n<pre><code>private static final long serialVersionUID = 1L;\n\n</code></pre>\n<p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p>\n<p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p>\n<p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p>\n<p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p>\n<p>因为类的结构变了，所以 serialVersionUID 就不一致。</p>\n<blockquote>\n<p>Java 序列化不包含静态变量？</p>\n</blockquote>\n<p>序列化的时候是不包含静态变量的。</p>\n<blockquote>\n<p>如果有些变量不想序列化，怎么办？</p>\n</blockquote>\n<p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p>\n<p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p>\n<h3 id=\"46-说说有几种序列化方式？\"><a href=\"#46-说说有几种序列化方式？\" class=\"headerlink\" title=\"46. 说说有几种序列化方式？\"></a>46. 说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png\">Java 常见序列化方式</p>\n<ul>\n<li>Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectI叩utStream</code>。</li>\n<li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li>\n<li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li>\n</ul>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"><a href=\"#47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\" class=\"headerlink\" title=\"47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"></a>47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><blockquote>\n<p>什么是泛型？</p>\n</blockquote>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(&quot;a&quot;);\nClass&lt;? extends List&gt; clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(&quot;add&quot;, Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, &quot;kl&quot;);\n\nSystem.out.println(list);\n\n</code></pre>\n<p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png\">泛型类、泛型接口、泛型方法</p>\n<p><strong>1. 泛型类</strong>：</p>\n<pre><code>//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic&lt;T&gt;&#123;\n\n    private T key;\n\n    public Generic(T key) &#123;\n        this.key = key;\n    &#125;\n\n    public T getKey()&#123;\n        return key;\n    &#125;\n&#125;\n\n</code></pre>\n<p>如何实例化泛型类：</p>\n<pre><code>Generic&lt;Integer&gt; genericInteger = new Generic&lt;Integer&gt;(123456);\n\n</code></pre>\n<p><strong>2. 泛型接口</strong> ：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;T&gt;&#123;\n    @Override\n    public T method() &#123;\n        return null;\n    &#125;\n&#125;\n\n</code></pre>\n<p>实现泛型接口，指定类型：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;\n    @Override\n    public String method() &#123;\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>3. 泛型方法</strong> ：</p>\n<pre><code>   public static &lt; E &gt; void printArray( E[] inputArray )\n   &#123;\n         for ( E element : inputArray )&#123;\n            System.out.printf( &quot;%s &quot;, element );\n         &#125;\n         System.out.println();\n    &#125;\n\n</code></pre>\n<p>使用：</p>\n<pre><code>// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = &#123; 1, 2, 3 &#125;;\nString[] stringArray = &#123; &quot;Hello&quot;, &quot;World&quot; &#125;;\nprintArray( intArray  );\nprintArray( stringArray  );\n\n</code></pre>\n<blockquote>\n<p>泛型常用的通配符有哪些？</p>\n</blockquote>\n<p><strong>常用的通配符为：T，E，K，V，？</strong></p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个 java 类型</li>\n<li>K V (key value) 分别代表 java 键值中的 Key Value</li>\n<li>E (element) 代表 Element</li>\n</ul>\n<blockquote>\n<p>什么是泛型擦除？</p>\n</blockquote>\n<p>所谓的泛型擦除，官方名叫 “类型擦除”。</p>\n<p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p>\n<p>也就是说，在运行的时候是没有泛型的。</p>\n<p>例如这段代码，往一群猫里放条狗：</p>\n<pre><code>LinkedList&lt;Cat&gt; cats = new LinkedList&lt;Cat&gt;();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n</code></pre>\n<p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java <strong>运行</strong>环境）看来和下面这段没区别：</p>\n<pre><code>LinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n</code></pre>\n<p>为什么要类型擦除呢？</p>\n<p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h3 id=\"48-说一下你对注解的理解？\"><a href=\"#48-说一下你对注解的理解？\" class=\"headerlink\" title=\"48. 说一下你对注解的理解？\"></a>48. 说一下你对注解的理解？</h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png\">Java 注解和帽子</p>\n<p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p>\n<p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p>\n<p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p>\n<p>注解生命周期有三大类，分别是：</p>\n<ul>\n<li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li>\n<li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li>\n<li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li>\n</ul>\n<p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p>\n<p>像常见的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png\">Override 注解</p>\n<p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p>\n<p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png\">Autowired 注解</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h3 id=\"49-什么是反射？应用？原理？\"><a href=\"#49-什么是反射？应用？原理？\" class=\"headerlink\" title=\"49. 什么是反射？应用？原理？\"></a>49. 什么是反射？应用？原理？</h3><blockquote>\n<p>什么是反射？</p>\n</blockquote>\n<p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。</p>\n<p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p>\n<p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>\n<p>反射最核心的四个类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png\">Java 反射相关类</p>\n<blockquote>\n<p>反射的应用场景？</p>\n</blockquote>\n<p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p>\n<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p>\n<p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p>\n<p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>\n<p>这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p>\n<blockquote>\n<p>反射的原理？</p>\n</blockquote>\n<p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p>\n<h1 id=\"JDK1-8-新特性\"><a href=\"#JDK1-8-新特性\" class=\"headerlink\" title=\"JDK1.8 新特性\"></a>JDK1.8 新特性</h1><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p>\n<h3 id=\"50-JDK1-8-都有哪些新特性？\"><a href=\"#50-JDK1-8-都有哪些新特性？\" class=\"headerlink\" title=\"50.JDK1.8 都有哪些新特性？\"></a>50.JDK1.8 都有哪些新特性？</h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png\">JDK1.8 主要新特性</p>\n<ul>\n<li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p>\n</li>\n<li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p>\n</li>\n<li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p>\n<p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p>\n<p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n</li>\n<li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p>\n</li>\n<li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p>\n</li>\n</ul>\n<h3 id=\"51-Lambda-表达式了解多少？\"><a href=\"#51-Lambda-表达式了解多少？\" class=\"headerlink\" title=\"51.Lambda 表达式了解多少？\"></a>51.Lambda 表达式了解多少？</h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p>\n<p>比如我们以前使用 Runnable 创建并运行线程：</p>\n<pre><code>        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                System.out.println(&quot;Thread is running before Java8!&quot;);\n            &#125;\n        &#125;).start();\n\n</code></pre>\n<p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p>\n<pre><code>new Thread( () -&gt; System.out.println(&quot;Thread is running since Java8!&quot;) ).start();\n\n</code></pre>\n<p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p>\n<p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p>\n<blockquote>\n<p>Java8 有哪些内置函数式接口？</p>\n</blockquote>\n<p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p>\n<p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p>\n<h3 id=\"52-Optional-了解吗？\"><a href=\"#52-Optional-了解吗？\" class=\"headerlink\" title=\"52.Optional 了解吗？\"></a>52.Optional 了解吗？</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p>\n<p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p>\n<pre><code>Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);\n\noptional.isPresent();           // true\noptional.get();                 // &quot;bam&quot;\noptional.orElse(&quot;fallback&quot;);    // &quot;bam&quot;\n\noptional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // &quot;b&quot;\n\n</code></pre>\n<h3 id=\"53-Stream-流用过吗？\"><a href=\"#53-Stream-流用过吗？\" class=\"headerlink\" title=\"53.Stream 流用过吗？\"></a>53.Stream 流用过吗？</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p>\n<p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p>\n<pre><code>List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();\nstringCollection.add(&quot;ddd2&quot;);\nstringCollection.add(&quot;aaa2&quot;);\nstringCollection.add(&quot;bbb1&quot;);\nstringCollection.add(&quot;aaa1&quot;);\nstringCollection.add(&quot;bbb3&quot;);\nstringCollection.add(&quot;ccc&quot;);\nstringCollection.add(&quot;bbb2&quot;);\nstringCollection.add(&quot;ddd1&quot;);\n\n</code></pre>\n<ul>\n<li><strong>Filter 过滤</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa2&quot;, &quot;aaa1&quot;\n\n\n</code></pre>\n<ul>\n<li><strong>Sorted 排序</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .sorted()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa1&quot;, &quot;aaa2&quot;\n\n</code></pre>\n<ul>\n<li><strong>Map 转换</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -&gt; b.compareTo(a))\n    .forEach(System.out::println);\n\n// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;\n\n</code></pre>\n<ul>\n<li><strong>Match 匹配</strong></li>\n</ul>\n<pre><code>// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -&gt; s.startsWith(&quot;z&quot;));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n</code></pre>\n<ul>\n<li><strong>Count 计数</strong></li>\n</ul>\n<p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p>\n<pre><code>// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -&gt; s.startsWith(&quot;b&quot;))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n</code></pre>\n<ul>\n<li><strong>Reduce</strong></li>\n</ul>\n<p><code>Reduce</code> 中文翻译为：_减少、缩小_。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p>\n<pre><code>Optional&lt;String&gt; reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -&gt; s1 + &quot;#&quot; + s2);\n\nreduced.ifPresent(System.out::println);\n// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;\n\n</code></pre>\n<p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png\">Java Stream 流</p>\n<blockquote>\n<p>简单事情重复做，重复事情认真做，认真事情有创造性地做。</p>\n<p>我是<strong>三分恶</strong>，一个能文能武的程序员，<strong>点赞</strong>、<strong>关注</strong>不迷路，咱们下期见！</p>\n</blockquote>\n<p><strong>参考：</strong></p>\n<ul>\n<li>[1]. Java 基础高频面试题（2021 年最新版）：<a href=\"https://blog.csdn.net/v123411739/article/details/115364158\">https://blog.csdn.net/v123411739/article/details/115364158</a></li>\n<li>[2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：<a href=\"https://segmentfault.com/a/1190000039897611\">https://segmentfault.com/a/1190000039897611</a></li>\n<li>[3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：<a href=\"https://blog.csdn.net/wo541075754/article/details/108604389\">https://blog.csdn.net/wo541075754/article/details/108604389</a></li>\n<li>[4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：<a href=\"https://cloud.tencent.com/developer/article/1686226\">https://cloud.tencent.com/developer/article/1686226</a></li>\n<li>[5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：<a href=\"https://hello.blog.csdn.net/article/details/108374856\">https://hello.blog.csdn.net/article/details/108374856</a></li>\n<li>[6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：<a href=\"https://juejin.cn/post/6938224339347046408#heading-12\">https://juejin.cn/post/6938224339347046408#heading-12</a></li>\n<li>[7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：<a href=\"https://juejin.cn/post/6844904125700784136\">https://juejin.cn/post/6844904125700784136</a></li>\n<li>[8]. Java 基础知识面试题（2020 最新版）：<a href=\"https://thinkwon.blog.csdn.net/article/details/104390612\">https://thinkwon.blog.csdn.net/article/details/104390612</a></li>\n<li>[9].Java 基础面试题（2021 最新版）：<a href=\"https://www.jianshu.com/p/7687559d29a3\">https://www.jianshu.com/p/7687559d29a3</a></li>\n<li>[10]. 干货 | Java8 新特性教程 ：<a href=\"https://juejin.cn/post/6844903761547100168#heading-5\">https://juejin.cn/post/6844903761547100168#heading-5</a></li>\n<li>[11]. 面向对象和面向过程分别是什么？：<a href=\"https://www.zhihu.com/question/28790424\">https://www.zhihu.com/question/28790424</a>)</li>\n<li>[12]. 《疯狂 Java 讲义》</li>\n<li>[13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：<a href=\"https://segmentfault.com/a/1190000021047883\">https://segmentfault.com/a/1190000021047883</a></li>\n<li>[14]. 什么是泛型擦除？：<a href=\"https://www.zhihu.com/question/452958728/answer/1817841881\">https://www.zhihu.com/question/452958728/answer/1817841881</a></li>\n<li>[15]. 学会反射后，我被录取了（干货）：<a href=\"https://www.cnblogs.com/cxuanBlog/p/13551797.html\">https://www.cnblogs.com/cxuanBlog/p/13551797.html</a></li>\n</ul>\n<p>··········  END  ··············</p>\n<p>公众号</p>\n<p>专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球</strong></a>。这是星球的详细介绍以及加入方法：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球详细介绍</strong></a> （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</p>\n<p>如果本文对你有帮助的话，欢迎<strong>点赞</strong> &amp; <strong>在看</strong> &amp; <strong>分享</strong>，这对我继续分享 &amp; 创作优质文章非常重要。感谢🙏🏻</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png\"></a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！</p>\n<h1 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h1><h3 id=\"1-什么是-Java？\"><a href=\"#1-什么是-Java？\" class=\"headerlink\" title=\"1. 什么是 Java？\"></a>1. 什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"2-Java-语言有哪些特点？\"><a href=\"#2-Java-语言有哪些特点？\" class=\"headerlink\" title=\"2.Java 语言有哪些特点？\"></a>2.Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li>\n<li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"3-JVM、JDK-和-JRE-有什么区别？\"><a href=\"#3-JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"3.JVM、JDK 和 JRE 有什么区别？\"></a>3.JVM、JDK 和 JRE 有什么区别？</h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p><strong>JRE</strong>：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"4-说说什么是跨平台性？原理是什么\"><a href=\"#4-说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"4. 说说什么是跨平台性？原理是什么\"></a>4. 说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p>\n<h3 id=\"5-什么是字节码？采用字节码的好处是什么\"><a href=\"#5-什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"5. 什么是字节码？采用字节码的好处是什么?\"></a>5. 什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)</li>\n<li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p>\n<h3 id=\"6-为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#6-为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"6. 为什么说 Java 语言 “编译与解释并存”？\"></a>6. 为什么说 Java 语言 “编译与解释并存”？</h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p>\n<p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p>\n<p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"7-Java-有哪些数据类型？\"><a href=\"#7-Java-有哪些数据类型？\" class=\"headerlink\" title=\"7.Java 有哪些数据类型？\"></a>7.Java 有哪些数据类型？</h3><p><strong>定义：</strong>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型（byte、short、long）</li>\n<li>浮点类型（float、long）</li>\n<li>字符型（char）</li>\n<li>布尔型（boolean）</li>\n</ul>\n<p>Java 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（class）</li>\n<li>接口（interface）</li>\n<li>数组 ([])</li>\n</ul>\n<h3 id=\"8-自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#8-自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"8. 自动类型转换、强制类型转换？看看这几行代码？\"></a>8. 自动类型转换、强制类型转换？看看这几行代码？</h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>\n<p>而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。</p>\n<h3 id=\"9-什么是自动拆箱-封箱？\"><a href=\"#9-什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"9. 什么是自动拆箱 / 封箱？\"></a>9. 什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n\n</code></pre>\n<h3 id=\"10-amp-和-amp-amp-有什么区别？\"><a href=\"#10-amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"10.&amp; 和 &amp;&amp; 有什么区别？\"></a>10.&amp; 和 &amp;&amp; 有什么区别？</h3><p>&amp; 运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p>\n<p>&amp;&amp; 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p>\n<p>&amp;&amp; 之所以称为短路运算是因为，如果 &amp;&amp; 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 &amp;&amp; 而不是 &amp;。</p>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"11-switch-是否能作用在-byte-long-String-上？\"><a href=\"#11-switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"11.switch 是否能作用在 byte/long/String 上？\"></a>11.switch 是否能作用在 byte/long/String 上？</h3><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n<p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p>\n<p>从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n<h3 id=\"12-break-continue-return-的区别及作用？\"><a href=\"#12-break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"12.break ,continue ,return 的区别及作用？\"></a>12.break ,continue ,return 的区别及作用？</h3><ul>\n<li>break 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li>continue 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li>return 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"></p>\n<h3 id=\"13-用最有效率的方法计算-2-乘以-8？\"><a href=\"#13-用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"13. 用最有效率的方法计算 2 乘以 8？\"></a>13. 用最有效率的方法计算 2 乘以 8？</h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p>\n<h3 id=\"14-说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#14-说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"14. 说说自增自减运算？看下这几个代码运行结果？\"></a>14. 说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（–）。</p>\n<p>++ 和 – 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre><code class=\"java\">int i  = 1;\ni = i++;\nSystem.out.println(i);\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre><code class=\"java\">int i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre><code class=\"java\">int count = 0;\nfor(int i = 0;i &lt; 100;i++)\n&#123;\n    count = count++;\n&#125;\nSystem.out.println(&quot;count = &quot;+count);\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre><code class=\"java\">int autoAdd(int count)\n&#123;\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n&#125;\n</code></pre>\n<p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h3 id=\"15-⾯向对象和⾯向过程的区别\"><a href=\"#15-⾯向对象和⾯向过程的区别\" class=\"headerlink\" title=\"15. ⾯向对象和⾯向过程的区别?\"></a>15. ⾯向对象和⾯向过程的区别?</h3><ul>\n<li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li>\n<li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li>\n</ul>\n<p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png\" alt=\"面向对象和面向过程的区别\"></p>\n<h3 id=\"16-面向对象有哪些特性\"><a href=\"#16-面向对象有哪些特性\" class=\"headerlink\" title=\"16. 面向对象有哪些特性\"></a>16. 面向对象有哪些特性</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png\" alt=\"面向对象三大特征\"></p>\n<ul>\n<li><p><strong>封装</strong></p>\n<p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p>\n</li>\n<li><p><strong>继承</strong></p>\n<p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p>\n</li>\n</ul>\n<blockquote>\n<p>关于继承有以下三个要点：</p>\n</blockquote>\n<ol>\n<li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</li>\n<li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</li>\n<li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</li>\n</ol>\n<ul>\n<li><p><strong>多态</strong></p>\n<p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p>\n<p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p>\n</li>\n</ul>\n<h3 id=\"17-重载（overload）和重写（override）的区别？\"><a href=\"#17-重载（overload）和重写（override）的区别？\" class=\"headerlink\" title=\"17. 重载（overload）和重写（override）的区别？\"></a>17. 重载（overload）和重写（override）的区别？</h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p>\n<ul>\n<li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li>\n<li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</li>\n</ul>\n<p>方法重载的规则：</p>\n<ol>\n<li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li>\n<li>重载与方法的返回值无关，存在于父类和子类，同类中。</li>\n<li>可以抛出不同的异常，可以有不同修饰符。</li>\n</ol>\n<h3 id=\"18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\"><a href=\"#18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\" class=\"headerlink\" title=\"18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\"></a>18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？</h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png\" alt=\"访问修饰符和可见性\"></p>\n<h3 id=\"19-this-关键字有什么作用？\"><a href=\"#19-this-关键字有什么作用？\" class=\"headerlink\" title=\"19.this 关键字有什么作用？\"></a>19.this 关键字有什么作用？</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p>\n<p>this 的用法在 Java 中大体可以分为 3 种：</p>\n<ol>\n<li>普通的直接引用，this 相当于是指向当前对象本身</li>\n<li>形参与成员变量名字重名，用 this 来区分：</li>\n</ol>\n<pre><code class=\"java\">public Person(String name,int age)&#123;\n    this.name=name;\n    this.age=age;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>引用本类的构造函数</li>\n</ol>\n<h3 id=\"20-抽象类-abstract-class-和接口-interface-有什么区别？\"><a href=\"#20-抽象类-abstract-class-和接口-interface-有什么区别？\" class=\"headerlink\" title=\"20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\"></a>20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？</h3><ol>\n<li>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</li>\n<li>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</li>\n<li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</li>\n<li>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</li>\n<li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</li>\n</ol>\n<blockquote>\n<ol>\n<li>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</li>\n<li>jdk9 的接⼝被允许定义私有⽅法 。</li>\n</ol>\n</blockquote>\n<p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p>\n<ol>\n<li>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</li>\n<li>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</li>\n<li>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li>\n</ol>\n<h3 id=\"21-成员变量与局部变量的区别有哪些？\"><a href=\"#21-成员变量与局部变量的区别有哪些？\" class=\"headerlink\" title=\"21. 成员变量与局部变量的区别有哪些？\"></a>21. 成员变量与局部变量的区别有哪些？</h3><ol>\n<li><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</li>\n<li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li>\n<li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li>\n</ol>\n<h3 id=\"22-静态变量和实例变量的区别？静态方法、实例方法呢？\"><a href=\"#22-静态变量和实例变量的区别？静态方法、实例方法呢？\" class=\"headerlink\" title=\"22. 静态变量和实例变量的区别？静态方法、实例方法呢？\"></a>22. 静态变量和实例变量的区别？静态方法、实例方法呢？</h3><blockquote>\n<p>静态变量和实例变量的区别？</p>\n</blockquote>\n<p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p>\n<p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p>\n<blockquote>\n<p>静态⽅法和实例⽅法有何不同?</p>\n</blockquote>\n<p>类似地。</p>\n<p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ “ <strong>类名. ⽅法名</strong> “的⽅式，也可以使⽤” <strong>对象名. ⽅法名</strong> “ 的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p>\n<p><strong>实例⽅法</strong>：依存于类的实例，需要使用 “ <strong>对象名. ⽅法名</strong> “ 的⽅式调用；可以访问类的所有成员变量和方法。</p>\n<h3 id=\"24-final-关键字有什么作用？\"><a href=\"#24-final-关键字有什么作用？\" class=\"headerlink\" title=\"24.final 关键字有什么作用？\"></a>24.final 关键字有什么作用？</h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n<p>例如：</p>\n<pre><code class=\"java\">        final StringBuilder sb = new StringBuilder(&quot;abc&quot;);\n        sb.append(&quot;d&quot;);\n        System.out.println(sb);  //abcd\n</code></pre>\n<p>一张图说明：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png\">final 修饰变量</p>\n</li>\n</ul>\n<h3 id=\"25-final、finally、finalize-的区别？\"><a href=\"#25-final、finally、finalize-的区别？\" class=\"headerlink\" title=\"25.final、finally、finalize 的区别？\"></a>25.final、finally、finalize 的区别？</h3><ul>\n<li><p>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p>\n</li>\n<li><p>finally 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p>\n</li>\n<li><p>finalize 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p>\n<p>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p>\n</li>\n</ul>\n<h3 id=\"26-和-equals-的区别？\"><a href=\"#26-和-equals-的区别？\" class=\"headerlink\" title=\"26.== 和 equals 的区别？\"></a>26.== 和 equals 的区别？</h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 <strong>== <strong>比较的是值，引⽤数据类型</strong> ==</strong> 比较的是内存地址)。</p>\n<p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：</p>\n<ul>\n<li>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。</li>\n<li>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</li>\n</ul>\n<p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p>\n<pre><code class=\"java\">public class Person &#123;\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) &#123;\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &amp;&amp;\n                Objects.equals(name, person.name);\n    &#125;\n\n    @Override\n    public int hashCode() &#123;\n        return Objects.hash(no, name);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"27-hashCode-与-equals\"><a href=\"#27-hashCode-与-equals\" class=\"headerlink\" title=\"27.hashCode 与 equals?\"></a>27.hashCode 与 equals?</h3><p>这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p>\n<blockquote>\n<p>什么是 HashCode？</p>\n</blockquote>\n<p>hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p>\n<pre><code class=\"java\">public native int hashCode();\n</code></pre>\n<p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p>\n<blockquote>\n<p>为什么要有 hashCode？</p>\n</blockquote>\n<p>上面已经讲了，主要是在哈希表这种结构中用的到。</p>\n<p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect\">面渣逆袭：Java 集合连环三十问</a></p>\n<blockquote>\n<p>为什么重写 quals 时必须重写 hashCode ⽅法？</p>\n</blockquote>\n<p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p>\n<p>hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<blockquote>\n<p>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</p>\n</blockquote>\n<p>因为可能会<strong>碰撞</strong>， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。</p>\n<h3 id=\"28-Java-是值传递，还是引用传递？\"><a href=\"#28-Java-是值传递，还是引用传递？\" class=\"headerlink\" title=\"28.Java 是值传递，还是引用传递？\"></a>28.Java 是值传递，还是引用传递？</h3><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p>\n<p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p>\n<p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png\">Java 引用数据值传递示意图</p>\n<h3 id=\"29-深拷贝和浅拷贝\"><a href=\"#29-深拷贝和浅拷贝\" class=\"headerlink\" title=\"29. 深拷贝和浅拷贝?\"></a>29. 深拷贝和浅拷贝?</h3><ul>\n<li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li>\n<li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li>\n</ul>\n<p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png\">浅拷贝和深拷贝示意图</p>\n<p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p>\n<blockquote>\n<p>浅拷贝如何实现呢？</p>\n</blockquote>\n<p>Object 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。</p>\n<blockquote>\n<p>深拷贝如何实现呢？</p>\n</blockquote>\n<ul>\n<li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li>\n<li>序列化：可以先讲原对象序列化，再反序列化成拷贝对象。</li>\n</ul>\n<h3 id=\"30-Java-创建对象有哪几种方式？\"><a href=\"#30-Java-创建对象有哪几种方式？\" class=\"headerlink\" title=\"30.Java 创建对象有哪几种方式？\"></a>30.Java 创建对象有哪几种方式？</h3><p>Java 中有以下四种创建对象的方式:</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png\">Java 创建对象的四种方式</p>\n<ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<p>前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p>\n<h1 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"31-String-是-Java-基本数据类型吗？可以被继承吗？\"><a href=\"#31-String-是-Java-基本数据类型吗？可以被继承吗？\" class=\"headerlink\" title=\"31.String 是 Java 基本数据类型吗？可以被继承吗？\"></a>31.String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote>\n<p>String 是 Java 基本数据类型吗？</p>\n</blockquote>\n<p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p>\n<p>String 是一个比较特殊的引用数据类型。</p>\n<blockquote>\n<p>String 类可以继承吗？</p>\n</blockquote>\n<p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p>\n<h3 id=\"32-String-和-StringBuilder、StringBuffer-的区别？\"><a href=\"#32-String-和-StringBuilder、StringBuffer-的区别？\" class=\"headerlink\" title=\"32.String 和 StringBuilder、StringBuffer 的区别？\"></a>32.String 和 StringBuilder、StringBuffer 的区别？</h3><ul>\n<li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li>\n<li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li>\n<li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</li>\n</ul>\n<h3 id=\"33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\"><a href=\"#33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\" class=\"headerlink\" title=\"33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？\"></a>33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png\">堆与常量池中的 String</p>\n<p>但是不同的是，String str1 = new String(“abc”) 还会通过 new String() 在堆里创建一个 “abc” 字符串对象实例。所以后者可以理解为被前者包含。</p>\n<blockquote>\n<p>String s = new String(“abc”) 创建了几个对象？</p>\n</blockquote>\n<p>很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。</p>\n<p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p>\n<ul>\n<li>一个是字符串字面量 “abc” 所对应的、字符串常量池中的实例</li>\n<li>另一个是通过 new String() 创建并初始化的，内容与 “abc” 相同的实例，在堆中。</li>\n</ul>\n<h3 id=\"34-String-不是不可变类吗？字符串拼接是如何实现的？\"><a href=\"#34-String-不是不可变类吗？字符串拼接是如何实现的？\" class=\"headerlink\" title=\"34.String 不是不可变类吗？字符串拼接是如何实现的？\"></a>34.String 不是不可变类吗？字符串拼接是如何实现的？</h3><p>String 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。</p>\n<p>例如：</p>\n<pre><code>String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nString ab = a + b;\n\n</code></pre>\n<p>在 <strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p>\n<p>内存如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png\">jdk1.8 之前的字符串拼接</p>\n<p>在 <strong>Java8 时</strong> JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。</p>\n<p>下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。</p>\n<pre><code class=\"java\">stack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n</code></pre>\n<p>也就是说其实上面的代码其实相当于：</p>\n<pre><code class=\"java\">String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n</code></pre>\n<p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。</p>\n<p>当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。</p>\n<h3 id=\"35-intern-方法有什么作用？\"><a href=\"#35-intern-方法有什么作用？\" class=\"headerlink\" title=\"35.intern 方法有什么作用？\"></a>35.intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p>\n<pre><code class=\"java\">     * &lt;p&gt;\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this &#123;@code String&#125; object as determined by\n     * the &#123;@link #equals(Object)&#125; method, then the string from the pool is\n     * returned. Otherwise, this &#123;@code String&#125; object is added to the\n     * pool and a reference to this &#123;@code String&#125; object is returned.\n     * &lt;p&gt;\n\n</code></pre>\n<p>意思也很好懂：</p>\n<ul>\n<li>如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li>\n<li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li>\n</ul>\n<h2 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h2><h3 id=\"36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\"><a href=\"#36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\" class=\"headerlink\" title=\"36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\"></a>36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h3><p>答案是 a 和 b 相等，c 和 d 不相等。</p>\n<ul>\n<li>对于基本数据类型 == 比较的值</li>\n<li>对于引用数据类型 == 比较的是地址</li>\n</ul>\n<p>Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。</p>\n<p>如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false</p>\n<pre><code class=\"java\">    public static void main(String[] args) &#123;\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    &#125;\n\n</code></pre>\n<blockquote>\n<p>什么是 Integer 缓存？</p>\n</blockquote>\n<p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p>\n<p>实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png\">Integer.valueOf</p>\n<p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。</p>\n<p>IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。</p>\n<pre><code class=\"java\"> private static class IntegerCache &#123;\n     ……\n     static &#123;\n            //创建Integer对象存储\n            for(int k = 0; k &lt; cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     &#125; \n &#125;\n\n</code></pre>\n<h3 id=\"37-String-怎么转成-Integer-的？原理？\"><a href=\"#37-String-怎么转成-Integer-的？原理？\" class=\"headerlink\" title=\"37.String 怎么转成 Integer 的？原理？\"></a>37.String 怎么转成 Integer 的？原理？</h3><p>PS: 这道题印象中在一些面经中出场过几次。</p>\n<p>String 转成 Integer，主要有两个方法：</p>\n<ul>\n<li>Integer.parseInt(String s)</li>\n<li>Integer.valueOf(String s)</li>\n</ul>\n<p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p>\n<p>抛去一些边界之类的看看核心代码：</p>\n<pre><code>public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    &#123;\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len &gt; 0) &#123;\n            …… \n            while (i &lt; len) &#123;\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            &#125;\n        &#125; \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    &#125;\n\n\n</code></pre>\n<p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png\">parseInt 示意图</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"38-Object-类的常见方法\"><a href=\"#38-Object-类的常见方法\" class=\"headerlink\" title=\"38.Object 类的常见方法?\"></a>38.Object 类的常见方法?</h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png\">Object 类的方法</p>\n<p><strong>对象比较</strong>：</p>\n<ul>\n<li>public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。</li>\n<li>public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。</li>\n</ul>\n<p><strong>对象拷贝</strong>：</p>\n<ul>\n<li>protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。</li>\n</ul>\n<p><strong>对象转字符串：</strong></p>\n<ul>\n<li>public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li>\n</ul>\n<p><strong>多线程调度：</strong></p>\n<ul>\n<li>public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li>\n<li>public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li>\n<li>public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li>\n<li>public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。</li>\n<li>public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</li>\n</ul>\n<p><strong>反射：</strong></p>\n<ul>\n<li>public final native Class&lt;?&gt; getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</li>\n</ul>\n<p><strong>垃圾回收：</strong></p>\n<ul>\n<li>protected void finalize() throws Throwable ：通知垃圾收集器回收对象。</li>\n</ul>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h3 id=\"39-Java-中异常处理体系\"><a href=\"#39-Java-中异常处理体系\" class=\"headerlink\" title=\"39.Java 中异常处理体系?\"></a>39.Java 中异常处理体系?</h3><p>Java 的异常体系是分为多层的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png\">Java 异常体系</p>\n<p><code>Throwable</code>是 Java 语言中所有错误或异常的基类。Throwable 又分为<code>Error</code>和<code>Exception</code>，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。<code>Exception</code>是程序问题导致的异常，又分为两种：</p>\n<ul>\n<li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。</li>\n<li>RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li>\n</ul>\n<h3 id=\"40-异常的处理方式？\"><a href=\"#40-异常的处理方式？\" class=\"headerlink\" title=\"40. 异常的处理方式？\"></a>40. 异常的处理方式？</h3><p>针对异常的处理主要有两种方式：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png\">异常处理</p>\n<ul>\n<li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li>\n</ul>\n<p>抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。</p>\n<p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p>\n<ul>\n<li><strong>try catch 捕获异常</strong></li>\n</ul>\n<p>在 catch 语句块中补货发生的异常，并进行处理。</p>\n<pre><code class=\"java\">       try &#123;\n            //包含可能会出现异常的代码以及声明异常的方法\n        &#125;catch(Exception e) &#123;\n            //捕获异常并进行处理\n        &#125;finally &#123;                                                       &#125;\n            //可选，必执行的代码\n        &#125;\n\n</code></pre>\n<p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p>\n<h3 id=\"41-三道经典异常处理代码题\"><a href=\"#41-三道经典异常处理代码题\" class=\"headerlink\" title=\"41. 三道经典异常处理代码题\"></a>41. 三道经典异常处理代码题</h3><blockquote>\n<p>题目 1</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test());\n    &#125;\n    public static int test() &#123;\n        try &#123;\n            return 1;\n        &#125; catch (Exception e) &#123;\n            return 2;\n        &#125; finally &#123;\n            System.out.print(&quot;3&quot;);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：31。</p>\n<p>try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。</p>\n<blockquote>\n<p>题目 2</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test1());\n    &#125;\n    public static int test1() &#123;\n        try &#123;\n            return 2;\n        &#125; finally &#123;\n            return 3;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：3。</p>\n<p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p>\n<p>finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。</p>\n<blockquote>\n<p>题目 3</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test1());\n    &#125;\n    public static int test1() &#123;\n        int i = 0;\n        try &#123;\n            i = 2;\n            return i;\n        &#125; finally &#123;\n            i = 3;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：2。</p>\n<p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p>\n<p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><h3 id=\"42-Java-中-IO-流分为几种\"><a href=\"#42-Java-中-IO-流分为几种\" class=\"headerlink\" title=\"42.Java 中 IO 流分为几种?\"></a>42.Java 中 IO 流分为几种?</h3><p>流按照不同的特点，有很多种划分方式。</p>\n<ul>\n<li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li>\n</ul>\n<p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p>\n<ul>\n<li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>\n<li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg\">IO - 操作方式分类 - 图片来源参考 [2]</p>\n<blockquote>\n<p>IO 流用到了什么设计模式？</p>\n</blockquote>\n<p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p>\n<p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png\">Java IO 流用到装饰器模式</p>\n<h3 id=\"43-既然有了字节流-为什么还要有字符流\"><a href=\"#43-既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"43. 既然有了字节流, 为什么还要有字符流?\"></a>43. 既然有了字节流, 为什么还要有字符流?</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p>\n<p>所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h3 id=\"44-BIO、NIO、AIO？\"><a href=\"#44-BIO、NIO、AIO？\" class=\"headerlink\" title=\"44.BIO、NIO、AIO？\"></a>44.BIO、NIO、AIO？</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png\">BIO、NIO、AIO</p>\n<p><strong>BIO</strong>(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png\">BIO、NIO、AIO</p>\n<p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>\n<p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。</p>\n<p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png\">NIO 线程</p>\n<p>NIO 的数据是面向<strong>缓冲区 Buffer</strong> 的，必须从 Buffer 中读取或写入。</p>\n<p>所以完整的 NIO 示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png\">NIO 完整示意图</p>\n<p>可以看出，NIO 的运行机制：</p>\n<ul>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 是内存块，底层是数据。</li>\n</ul>\n<p><strong>AIO</strong>：JDK 7 引入了 Asynchronous I/O，是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n<p>PS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect\">面试字节，被操作系统问挂了</a></p>\n<h1 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h1><h3 id=\"45-什么是序列化？什么是反序列化？\"><a href=\"#45-什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"45. 什么是序列化？什么是反序列化？\"></a>45. 什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p>\n<p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png\">序列化和反序列化</p>\n<p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p>\n<blockquote>\n<p>Serializable 接口有什么用？</p>\n</blockquote>\n<p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p>\n<blockquote>\n<p>serialVersionUID 又有什么用？</p>\n</blockquote>\n<p>serialVersionUID 就是起验证作用。</p>\n<pre><code>private static final long serialVersionUID = 1L;\n\n</code></pre>\n<p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p>\n<p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p>\n<p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p>\n<p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p>\n<p>因为类的结构变了，所以 serialVersionUID 就不一致。</p>\n<blockquote>\n<p>Java 序列化不包含静态变量？</p>\n</blockquote>\n<p>序列化的时候是不包含静态变量的。</p>\n<blockquote>\n<p>如果有些变量不想序列化，怎么办？</p>\n</blockquote>\n<p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p>\n<p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p>\n<h3 id=\"46-说说有几种序列化方式？\"><a href=\"#46-说说有几种序列化方式？\" class=\"headerlink\" title=\"46. 说说有几种序列化方式？\"></a>46. 说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png\">Java 常见序列化方式</p>\n<ul>\n<li>Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectI叩utStream</code>。</li>\n<li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li>\n<li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li>\n</ul>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"><a href=\"#47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\" class=\"headerlink\" title=\"47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"></a>47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><blockquote>\n<p>什么是泛型？</p>\n</blockquote>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(&quot;a&quot;);\nClass&lt;? extends List&gt; clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(&quot;add&quot;, Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, &quot;kl&quot;);\n\nSystem.out.println(list);\n\n</code></pre>\n<p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png\">泛型类、泛型接口、泛型方法</p>\n<p><strong>1. 泛型类</strong>：</p>\n<pre><code>//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic&lt;T&gt;&#123;\n\n    private T key;\n\n    public Generic(T key) &#123;\n        this.key = key;\n    &#125;\n\n    public T getKey()&#123;\n        return key;\n    &#125;\n&#125;\n\n</code></pre>\n<p>如何实例化泛型类：</p>\n<pre><code>Generic&lt;Integer&gt; genericInteger = new Generic&lt;Integer&gt;(123456);\n\n</code></pre>\n<p><strong>2. 泛型接口</strong> ：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;T&gt;&#123;\n    @Override\n    public T method() &#123;\n        return null;\n    &#125;\n&#125;\n\n</code></pre>\n<p>实现泛型接口，指定类型：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;\n    @Override\n    public String method() &#123;\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>3. 泛型方法</strong> ：</p>\n<pre><code>   public static &lt; E &gt; void printArray( E[] inputArray )\n   &#123;\n         for ( E element : inputArray )&#123;\n            System.out.printf( &quot;%s &quot;, element );\n         &#125;\n         System.out.println();\n    &#125;\n\n</code></pre>\n<p>使用：</p>\n<pre><code>// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = &#123; 1, 2, 3 &#125;;\nString[] stringArray = &#123; &quot;Hello&quot;, &quot;World&quot; &#125;;\nprintArray( intArray  );\nprintArray( stringArray  );\n\n</code></pre>\n<blockquote>\n<p>泛型常用的通配符有哪些？</p>\n</blockquote>\n<p><strong>常用的通配符为：T，E，K，V，？</strong></p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个 java 类型</li>\n<li>K V (key value) 分别代表 java 键值中的 Key Value</li>\n<li>E (element) 代表 Element</li>\n</ul>\n<blockquote>\n<p>什么是泛型擦除？</p>\n</blockquote>\n<p>所谓的泛型擦除，官方名叫 “类型擦除”。</p>\n<p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p>\n<p>也就是说，在运行的时候是没有泛型的。</p>\n<p>例如这段代码，往一群猫里放条狗：</p>\n<pre><code>LinkedList&lt;Cat&gt; cats = new LinkedList&lt;Cat&gt;();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n</code></pre>\n<p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java <strong>运行</strong>环境）看来和下面这段没区别：</p>\n<pre><code>LinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n</code></pre>\n<p>为什么要类型擦除呢？</p>\n<p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h3 id=\"48-说一下你对注解的理解？\"><a href=\"#48-说一下你对注解的理解？\" class=\"headerlink\" title=\"48. 说一下你对注解的理解？\"></a>48. 说一下你对注解的理解？</h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png\">Java 注解和帽子</p>\n<p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p>\n<p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p>\n<p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p>\n<p>注解生命周期有三大类，分别是：</p>\n<ul>\n<li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li>\n<li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li>\n<li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li>\n</ul>\n<p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p>\n<p>像常见的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png\">Override 注解</p>\n<p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p>\n<p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png\">Autowired 注解</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h3 id=\"49-什么是反射？应用？原理？\"><a href=\"#49-什么是反射？应用？原理？\" class=\"headerlink\" title=\"49. 什么是反射？应用？原理？\"></a>49. 什么是反射？应用？原理？</h3><blockquote>\n<p>什么是反射？</p>\n</blockquote>\n<p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。</p>\n<p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p>\n<p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>\n<p>反射最核心的四个类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png\">Java 反射相关类</p>\n<blockquote>\n<p>反射的应用场景？</p>\n</blockquote>\n<p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p>\n<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p>\n<p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p>\n<p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>\n<p>这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p>\n<blockquote>\n<p>反射的原理？</p>\n</blockquote>\n<p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p>\n<h1 id=\"JDK1-8-新特性\"><a href=\"#JDK1-8-新特性\" class=\"headerlink\" title=\"JDK1.8 新特性\"></a>JDK1.8 新特性</h1><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p>\n<h3 id=\"50-JDK1-8-都有哪些新特性？\"><a href=\"#50-JDK1-8-都有哪些新特性？\" class=\"headerlink\" title=\"50.JDK1.8 都有哪些新特性？\"></a>50.JDK1.8 都有哪些新特性？</h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png\">JDK1.8 主要新特性</p>\n<ul>\n<li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p>\n</li>\n<li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p>\n</li>\n<li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p>\n<p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p>\n<p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n</li>\n<li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p>\n</li>\n<li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p>\n</li>\n</ul>\n<h3 id=\"51-Lambda-表达式了解多少？\"><a href=\"#51-Lambda-表达式了解多少？\" class=\"headerlink\" title=\"51.Lambda 表达式了解多少？\"></a>51.Lambda 表达式了解多少？</h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p>\n<p>比如我们以前使用 Runnable 创建并运行线程：</p>\n<pre><code>        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                System.out.println(&quot;Thread is running before Java8!&quot;);\n            &#125;\n        &#125;).start();\n\n</code></pre>\n<p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p>\n<pre><code>new Thread( () -&gt; System.out.println(&quot;Thread is running since Java8!&quot;) ).start();\n\n</code></pre>\n<p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p>\n<p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p>\n<blockquote>\n<p>Java8 有哪些内置函数式接口？</p>\n</blockquote>\n<p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p>\n<p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p>\n<h3 id=\"52-Optional-了解吗？\"><a href=\"#52-Optional-了解吗？\" class=\"headerlink\" title=\"52.Optional 了解吗？\"></a>52.Optional 了解吗？</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p>\n<p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p>\n<pre><code>Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);\n\noptional.isPresent();           // true\noptional.get();                 // &quot;bam&quot;\noptional.orElse(&quot;fallback&quot;);    // &quot;bam&quot;\n\noptional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // &quot;b&quot;\n\n</code></pre>\n<h3 id=\"53-Stream-流用过吗？\"><a href=\"#53-Stream-流用过吗？\" class=\"headerlink\" title=\"53.Stream 流用过吗？\"></a>53.Stream 流用过吗？</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p>\n<p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p>\n<pre><code>List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();\nstringCollection.add(&quot;ddd2&quot;);\nstringCollection.add(&quot;aaa2&quot;);\nstringCollection.add(&quot;bbb1&quot;);\nstringCollection.add(&quot;aaa1&quot;);\nstringCollection.add(&quot;bbb3&quot;);\nstringCollection.add(&quot;ccc&quot;);\nstringCollection.add(&quot;bbb2&quot;);\nstringCollection.add(&quot;ddd1&quot;);\n\n</code></pre>\n<ul>\n<li><strong>Filter 过滤</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa2&quot;, &quot;aaa1&quot;\n\n\n</code></pre>\n<ul>\n<li><strong>Sorted 排序</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .sorted()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa1&quot;, &quot;aaa2&quot;\n\n</code></pre>\n<ul>\n<li><strong>Map 转换</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -&gt; b.compareTo(a))\n    .forEach(System.out::println);\n\n// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;\n\n</code></pre>\n<ul>\n<li><strong>Match 匹配</strong></li>\n</ul>\n<pre><code>// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -&gt; s.startsWith(&quot;z&quot;));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n</code></pre>\n<ul>\n<li><strong>Count 计数</strong></li>\n</ul>\n<p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p>\n<pre><code>// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -&gt; s.startsWith(&quot;b&quot;))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n</code></pre>\n<ul>\n<li><strong>Reduce</strong></li>\n</ul>\n<p><code>Reduce</code> 中文翻译为：_减少、缩小_。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p>\n<pre><code>Optional&lt;String&gt; reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -&gt; s1 + &quot;#&quot; + s2);\n\nreduced.ifPresent(System.out::println);\n// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;\n\n</code></pre>\n<p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png\">Java Stream 流</p>\n<blockquote>\n<p>简单事情重复做，重复事情认真做，认真事情有创造性地做。</p>\n<p>我是<strong>三分恶</strong>，一个能文能武的程序员，<strong>点赞</strong>、<strong>关注</strong>不迷路，咱们下期见！</p>\n</blockquote>\n<p><strong>参考：</strong></p>\n<ul>\n<li>[1]. Java 基础高频面试题（2021 年最新版）：<a href=\"https://blog.csdn.net/v123411739/article/details/115364158\">https://blog.csdn.net/v123411739/article/details/115364158</a></li>\n<li>[2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：<a href=\"https://segmentfault.com/a/1190000039897611\">https://segmentfault.com/a/1190000039897611</a></li>\n<li>[3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：<a href=\"https://blog.csdn.net/wo541075754/article/details/108604389\">https://blog.csdn.net/wo541075754/article/details/108604389</a></li>\n<li>[4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：<a href=\"https://cloud.tencent.com/developer/article/1686226\">https://cloud.tencent.com/developer/article/1686226</a></li>\n<li>[5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：<a href=\"https://hello.blog.csdn.net/article/details/108374856\">https://hello.blog.csdn.net/article/details/108374856</a></li>\n<li>[6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：<a href=\"https://juejin.cn/post/6938224339347046408#heading-12\">https://juejin.cn/post/6938224339347046408#heading-12</a></li>\n<li>[7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：<a href=\"https://juejin.cn/post/6844904125700784136\">https://juejin.cn/post/6844904125700784136</a></li>\n<li>[8]. Java 基础知识面试题（2020 最新版）：<a href=\"https://thinkwon.blog.csdn.net/article/details/104390612\">https://thinkwon.blog.csdn.net/article/details/104390612</a></li>\n<li>[9].Java 基础面试题（2021 最新版）：<a href=\"https://www.jianshu.com/p/7687559d29a3\">https://www.jianshu.com/p/7687559d29a3</a></li>\n<li>[10]. 干货 | Java8 新特性教程 ：<a href=\"https://juejin.cn/post/6844903761547100168#heading-5\">https://juejin.cn/post/6844903761547100168#heading-5</a></li>\n<li>[11]. 面向对象和面向过程分别是什么？：<a href=\"https://www.zhihu.com/question/28790424\">https://www.zhihu.com/question/28790424</a>)</li>\n<li>[12]. 《疯狂 Java 讲义》</li>\n<li>[13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：<a href=\"https://segmentfault.com/a/1190000021047883\">https://segmentfault.com/a/1190000021047883</a></li>\n<li>[14]. 什么是泛型擦除？：<a href=\"https://www.zhihu.com/question/452958728/answer/1817841881\">https://www.zhihu.com/question/452958728/answer/1817841881</a></li>\n<li>[15]. 学会反射后，我被录取了（干货）：<a href=\"https://www.cnblogs.com/cxuanBlog/p/13551797.html\">https://www.cnblogs.com/cxuanBlog/p/13551797.html</a></li>\n</ul>\n<p>··········  END  ··············</p>\n<p>公众号</p>\n<p>专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球</strong></a>。这是星球的详细介绍以及加入方法：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球详细介绍</strong></a> （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</p>\n<p>如果本文对你有帮助的话，欢迎<strong>点赞</strong> &amp; <strong>在看</strong> &amp; <strong>分享</strong>，这对我继续分享 &amp; 创作优质文章非常重要。感谢🙏🏻</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png\"></a></p>\n"},{"title":"Hexo x GitPage 部署","summary":"Hexo x GitPage 联名","abbrlink":29807,"date":"2022-06-22T02:15:39.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![animal-7027635_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021718325.jpg)\n\n<!-- more -->\n\n## 前言\n\n> 本文转载：[使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464)  \n> 本文只介绍如何部署到GitPage，默认Hexo已搭建\n\n## 简介\n\n\n### **# GitHub Pages 是什么？**\n\n*   [What is GitHub Pages? - GitHub Help](https://help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### **# Hexo 是什么？**\n\n*   官网：[hexo.io](https://hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### **# Hexo + GitHub 文章发布原理**\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![](https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg)\n\n## 部署\n\n### 连接Github\n\n设置`Github` 信息  \n设置 git 配置的用户名邮箱 (将`lingzhexi` / `lingzhexi@gmail.com` 分别替换成自己的用户名和邮箱)\n\n```\ngit config --global user.name \"lingzhexi\"\ngit config --global user.email \"lingzhexi@gmail.com\"\n```\n\n#### 创建 SSH 密匙\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n![img.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047531.png)\n\n![image-20210922104651057](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047883.png) \n\n#### 添加密匙\n\n进入 [C:\\Users \\ 用户名 \\.ssh] 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n![img_2.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221107309.png)\n\n#### 验证连接\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![image-20210922104829350](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221048625.png)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n### 创建 Github Pages 仓库\n\n---------------------\n\nGitHub 主页右上角加号 -> New repository：\n\n*   Repository name 中输入 `用户名.github.io`\n*   勾选 “Initialize this repository with a README”\n*   Description 选填\n\n填好后点击 Create repository 创建。\n\n![](https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n### 部署 Hexo 到 GitHub Pages\n\n-------------------------\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:lingzhexi/lingzhexi.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://lingzhexi.github.io` 就可以看到 Hexo 网站了。\n\n## 问题汇总\n\n### 1. git提示：warning: LF will be replaced by CRLF\n\n在部署的提交静态文件到Github上时：\n\n> hexo d \n\n![image-20210922105234518](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221052526.png)\n\n#### **分析问题**\n\n​\t格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。\n 其实，这是因为在文本处理中，[CR](https://link.jianshu.com?t=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCarriage_return)（**C**arriage**R**eturn），[LF](https://link.jianshu.com?t=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLine_feed)（**L**ine**F**eed），CR/LF是不同操作系统上使用的换行符，具体如下：\n\n#### 换行符‘\\n’和回车符‘\\r’\n\n- 回车符就是回到一行的开头，用符号r表示，十进制ASCII代码是13，十六进制代码为0x0D，回车（return）；\n- 换行符就是另起一行，用n符号表示，ASCII代码是10，十六制为0x0A， 换行（newline）。\n\n所以我们平时编写文件的回车符应该确切来说叫做回车换行符。\n\n#### 影响\n\n- 一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；\n- 而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。\n- Linux保存的文件在windows上用记事本看的话会出现黑点。\n\n这些问题都可以通过一定方式进行转换统一，例如，在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式，命令dos2unix 是把windows格式转换成linux文件格式。\n\n#### 解决问题\n\n    Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。 你可以用`git config --global core.autocrlf true` 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：\n\n\n\n```shell\n#提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true\n```\n\n问题解决\n\n![image-20210922105645713](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221056943.png)\n\n## 参考：\n- [Hexo/GitPage 部署](https://hexo.bootcss.com/docs/github-pages.html)\n- [使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464)\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n- [解决git LF/CRLF](https://www.jianshu.com/p/450cd21b36a4)\n","source":"_posts/2021-09-22-Hexo-GitPage-部署.md","raw":"---\ntitle: Hexo x GitPage 部署\ntags:\n  - GitPage\n  - Hexo\ncategories: Hexo\nsummary: Hexo x GitPage 联名\nabbrlink: 29807\ndate: 2022-06-22 10:15:39\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![animal-7027635_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021718325.jpg)\n\n<!-- more -->\n\n## 前言\n\n> 本文转载：[使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464)  \n> 本文只介绍如何部署到GitPage，默认Hexo已搭建\n\n## 简介\n\n\n### **# GitHub Pages 是什么？**\n\n*   [What is GitHub Pages? - GitHub Help](https://help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### **# Hexo 是什么？**\n\n*   官网：[hexo.io](https://hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### **# Hexo + GitHub 文章发布原理**\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![](https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg)\n\n## 部署\n\n### 连接Github\n\n设置`Github` 信息  \n设置 git 配置的用户名邮箱 (将`lingzhexi` / `lingzhexi@gmail.com` 分别替换成自己的用户名和邮箱)\n\n```\ngit config --global user.name \"lingzhexi\"\ngit config --global user.email \"lingzhexi@gmail.com\"\n```\n\n#### 创建 SSH 密匙\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n![img.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047531.png)\n\n![image-20210922104651057](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047883.png) \n\n#### 添加密匙\n\n进入 [C:\\Users \\ 用户名 \\.ssh] 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n![img_2.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221107309.png)\n\n#### 验证连接\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![image-20210922104829350](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221048625.png)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n### 创建 Github Pages 仓库\n\n---------------------\n\nGitHub 主页右上角加号 -> New repository：\n\n*   Repository name 中输入 `用户名.github.io`\n*   勾选 “Initialize this repository with a README”\n*   Description 选填\n\n填好后点击 Create repository 创建。\n\n![](https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n### 部署 Hexo 到 GitHub Pages\n\n-------------------------\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:lingzhexi/lingzhexi.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://lingzhexi.github.io` 就可以看到 Hexo 网站了。\n\n## 问题汇总\n\n### 1. git提示：warning: LF will be replaced by CRLF\n\n在部署的提交静态文件到Github上时：\n\n> hexo d \n\n![image-20210922105234518](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221052526.png)\n\n#### **分析问题**\n\n​\t格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。\n 其实，这是因为在文本处理中，[CR](https://link.jianshu.com?t=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCarriage_return)（**C**arriage**R**eturn），[LF](https://link.jianshu.com?t=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLine_feed)（**L**ine**F**eed），CR/LF是不同操作系统上使用的换行符，具体如下：\n\n#### 换行符‘\\n’和回车符‘\\r’\n\n- 回车符就是回到一行的开头，用符号r表示，十进制ASCII代码是13，十六进制代码为0x0D，回车（return）；\n- 换行符就是另起一行，用n符号表示，ASCII代码是10，十六制为0x0A， 换行（newline）。\n\n所以我们平时编写文件的回车符应该确切来说叫做回车换行符。\n\n#### 影响\n\n- 一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；\n- 而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。\n- Linux保存的文件在windows上用记事本看的话会出现黑点。\n\n这些问题都可以通过一定方式进行转换统一，例如，在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式，命令dos2unix 是把windows格式转换成linux文件格式。\n\n#### 解决问题\n\n    Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。 你可以用`git config --global core.autocrlf true` 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：\n\n\n\n```shell\n#提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true\n```\n\n问题解决\n\n![image-20210922105645713](https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221056943.png)\n\n## 参考：\n- [Hexo/GitPage 部署](https://hexo.bootcss.com/docs/github-pages.html)\n- [使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464)\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n- [解决git LF/CRLF](https://www.jianshu.com/p/450cd21b36a4)\n","slug":"Hexo-GitPage-部署","published":1,"updated":"2024-12-16T12:11:11.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyni0007j0krh6ipgkh7","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021718325.jpg\" alt=\"animal-7027635_1920\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本文转载：<a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a><br>本文只介绍如何部署到GitPage，默认Hexo已搭建</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GitHub-Pages-是什么？\"><a href=\"#GitHub-Pages-是什么？\" class=\"headerlink\" title=\"# GitHub Pages 是什么？\"></a><strong># GitHub Pages 是什么？</strong></h3><ul>\n<li>  <a href=\"https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3 id=\"Hexo-是什么？\"><a href=\"#Hexo-是什么？\" class=\"headerlink\" title=\"# Hexo 是什么？\"></a><strong># Hexo 是什么？</strong></h3><ul>\n<li>  官网：<a href=\"https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo-GitHub-文章发布原理\"><a href=\"#Hexo-GitHub-文章发布原理\" class=\"headerlink\" title=\"# Hexo + GitHub 文章发布原理\"></a><strong># Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg\"></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"连接Github\"><a href=\"#连接Github\" class=\"headerlink\" title=\"连接Github\"></a>连接Github</h3><p>设置<code>Github</code> 信息<br>设置 git 配置的用户名邮箱 (将<code>lingzhexi</code> / <code>lingzhexi@gmail.com</code> 分别替换成自己的用户名和邮箱)</p>\n<pre><code>git config --global user.name &quot;lingzhexi&quot;\ngit config --global user.email &quot;lingzhexi@gmail.com&quot;\n</code></pre>\n<h4 id=\"创建-SSH-密匙\"><a href=\"#创建-SSH-密匙\" class=\"headerlink\" title=\"创建 SSH 密匙\"></a>创建 SSH 密匙</h4><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。<br><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047531.png\" alt=\"img.png\"></p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047883.png\" alt=\"image-20210922104651057\"> </p>\n<h4 id=\"添加密匙\"><a href=\"#添加密匙\" class=\"headerlink\" title=\"添加密匙\"></a>添加密匙</h4><p>进入 [C:\\Users \\ 用户名 .ssh] 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。<br><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221107309.png\" alt=\"img_2.png\"></p>\n<h4 id=\"验证连接\"><a href=\"#验证连接\" class=\"headerlink\" title=\"验证连接\"></a>验证连接</h4><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221048625.png\" alt=\"image-20210922104829350\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h3 id=\"创建-Github-Pages-仓库\"><a href=\"#创建-Github-Pages-仓库\" class=\"headerlink\" title=\"创建 Github Pages 仓库\"></a>创建 Github Pages 仓库</h3><hr>\n<p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>  Repository name 中输入 <code>用户名.github.io</code></li>\n<li>  勾选 “Initialize this repository with a README”</li>\n<li>  Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h3 id=\"部署-Hexo-到-GitHub-Pages\"><a href=\"#部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"部署 Hexo 到 GitHub Pages\"></a>部署 Hexo 到 GitHub Pages</h3><hr>\n<p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repository: git@github.com:lingzhexi/lingzhexi.github.io.git\n  branch: master\n</code></pre>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://lingzhexi.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h3 id=\"1-git提示：warning-LF-will-be-replaced-by-CRLF\"><a href=\"#1-git提示：warning-LF-will-be-replaced-by-CRLF\" class=\"headerlink\" title=\"1. git提示：warning: LF will be replaced by CRLF\"></a>1. git提示：warning: LF will be replaced by CRLF</h3><p>在部署的提交静态文件到Github上时：</p>\n<blockquote>\n<p>hexo d </p>\n</blockquote>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221052526.png\" alt=\"image-20210922105234518\"></p>\n<h4 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a><strong>分析问题</strong></h4><p>​    格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。<br> 其实，这是因为在文本处理中，<a href=\"https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Carriage_return\">CR</a>（<strong>C</strong>arriage<strong>R</strong>eturn），<a href=\"https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Line_feed\">LF</a>（<strong>L</strong>ine<strong>F</strong>eed），CR/LF是不同操作系统上使用的换行符，具体如下：</p>\n<h4 id=\"换行符‘-n’和回车符‘-r’\"><a href=\"#换行符‘-n’和回车符‘-r’\" class=\"headerlink\" title=\"换行符‘\\n’和回车符‘\\r’\"></a>换行符‘\\n’和回车符‘\\r’</h4><ul>\n<li>回车符就是回到一行的开头，用符号r表示，十进制ASCII代码是13，十六进制代码为0x0D，回车（return）；</li>\n<li>换行符就是另起一行，用n符号表示，ASCII代码是10，十六制为0x0A， 换行（newline）。</li>\n</ul>\n<p>所以我们平时编写文件的回车符应该确切来说叫做回车换行符。</p>\n<h4 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h4><ul>\n<li>一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；</li>\n<li>而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</li>\n<li>Linux保存的文件在windows上用记事本看的话会出现黑点。</li>\n</ul>\n<p>这些问题都可以通过一定方式进行转换统一，例如，在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式，命令dos2unix 是把windows格式转换成linux文件格式。</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><pre><code>Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。 你可以用`git config --global core.autocrlf true` 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：\n</code></pre>\n<pre class=\" language-shell\"><code class=\"language-shell\">#提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true\n</code></pre>\n<p>问题解决</p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221056943.png\" alt=\"image-20210922105645713\"></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://hexo.bootcss.com/docs/github-pages.html\">Hexo/GitPage 部署</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/450cd21b36a4\">解决git LF/CRLF</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021718325.jpg\" alt=\"animal-7027635_1920\"></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本文转载：<a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a><br>本文只介绍如何部署到GitPage，默认Hexo已搭建</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GitHub-Pages-是什么？\"><a href=\"#GitHub-Pages-是什么？\" class=\"headerlink\" title=\"# GitHub Pages 是什么？\"></a><strong># GitHub Pages 是什么？</strong></h3><ul>\n<li>  <a href=\"https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3 id=\"Hexo-是什么？\"><a href=\"#Hexo-是什么？\" class=\"headerlink\" title=\"# Hexo 是什么？\"></a><strong># Hexo 是什么？</strong></h3><ul>\n<li>  官网：<a href=\"https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo-GitHub-文章发布原理\"><a href=\"#Hexo-GitHub-文章发布原理\" class=\"headerlink\" title=\"# Hexo + GitHub 文章发布原理\"></a><strong># Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg\"></p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"连接Github\"><a href=\"#连接Github\" class=\"headerlink\" title=\"连接Github\"></a>连接Github</h3><p>设置<code>Github</code> 信息<br>设置 git 配置的用户名邮箱 (将<code>lingzhexi</code> / <code>lingzhexi@gmail.com</code> 分别替换成自己的用户名和邮箱)</p>\n<pre><code>git config --global user.name &quot;lingzhexi&quot;\ngit config --global user.email &quot;lingzhexi@gmail.com&quot;\n</code></pre>\n<h4 id=\"创建-SSH-密匙\"><a href=\"#创建-SSH-密匙\" class=\"headerlink\" title=\"创建 SSH 密匙\"></a>创建 SSH 密匙</h4><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。<br><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047531.png\" alt=\"img.png\"></p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221047883.png\" alt=\"image-20210922104651057\"> </p>\n<h4 id=\"添加密匙\"><a href=\"#添加密匙\" class=\"headerlink\" title=\"添加密匙\"></a>添加密匙</h4><p>进入 [C:\\Users \\ 用户名 .ssh] 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。<br><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221107309.png\" alt=\"img_2.png\"></p>\n<h4 id=\"验证连接\"><a href=\"#验证连接\" class=\"headerlink\" title=\"验证连接\"></a>验证连接</h4><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221048625.png\" alt=\"image-20210922104829350\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h3 id=\"创建-Github-Pages-仓库\"><a href=\"#创建-Github-Pages-仓库\" class=\"headerlink\" title=\"创建 Github Pages 仓库\"></a>创建 Github Pages 仓库</h3><hr>\n<p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>  Repository name 中输入 <code>用户名.github.io</code></li>\n<li>  勾选 “Initialize this repository with a README”</li>\n<li>  Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h3 id=\"部署-Hexo-到-GitHub-Pages\"><a href=\"#部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"部署 Hexo 到 GitHub Pages\"></a>部署 Hexo 到 GitHub Pages</h3><hr>\n<p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<pre><code class=\"yml\">deploy:\n  type: git\n  repository: git@github.com:lingzhexi/lingzhexi.github.io.git\n  branch: master\n</code></pre>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://lingzhexi.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"问题汇总\"><a href=\"#问题汇总\" class=\"headerlink\" title=\"问题汇总\"></a>问题汇总</h2><h3 id=\"1-git提示：warning-LF-will-be-replaced-by-CRLF\"><a href=\"#1-git提示：warning-LF-will-be-replaced-by-CRLF\" class=\"headerlink\" title=\"1. git提示：warning: LF will be replaced by CRLF\"></a>1. git提示：warning: LF will be replaced by CRLF</h3><p>在部署的提交静态文件到Github上时：</p>\n<blockquote>\n<p>hexo d </p>\n</blockquote>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221052526.png\" alt=\"image-20210922105234518\"></p>\n<h4 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a><strong>分析问题</strong></h4><p>​    格式化与多余的空白字符，特别是在跨平台情况下，有时候是一个令人发指的问题。由于编辑器的不同或者文件行尾的换行符在 Windows 下被替换了，一些细微的空格变化会不经意地混入提交，造成麻烦。虽然这是小问题，但它会极大地扰乱跨平台协作。<br> 其实，这是因为在文本处理中，<a href=\"https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Carriage_return\">CR</a>（<strong>C</strong>arriage<strong>R</strong>eturn），<a href=\"https://link.jianshu.com/?t=http://en.wikipedia.org/wiki/Line_feed\">LF</a>（<strong>L</strong>ine<strong>F</strong>eed），CR/LF是不同操作系统上使用的换行符，具体如下：</p>\n<h4 id=\"换行符‘-n’和回车符‘-r’\"><a href=\"#换行符‘-n’和回车符‘-r’\" class=\"headerlink\" title=\"换行符‘\\n’和回车符‘\\r’\"></a>换行符‘\\n’和回车符‘\\r’</h4><ul>\n<li>回车符就是回到一行的开头，用符号r表示，十进制ASCII代码是13，十六进制代码为0x0D，回车（return）；</li>\n<li>换行符就是另起一行，用n符号表示，ASCII代码是10，十六制为0x0A， 换行（newline）。</li>\n</ul>\n<p>所以我们平时编写文件的回车符应该确切来说叫做回车换行符。</p>\n<h4 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h4><ul>\n<li>一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；</li>\n<li>而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</li>\n<li>Linux保存的文件在windows上用记事本看的话会出现黑点。</li>\n</ul>\n<p>这些问题都可以通过一定方式进行转换统一，例如，在linux下，命令unix2dos 是把linux文件格式转换成windows文件格式，命令dos2unix 是把windows格式转换成linux文件格式。</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><pre><code>Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。 你可以用`git config --global core.autocrlf true` 来打开此项功能。 如果是在 Windows 系统上，把它设置成 true，这样在检出代码时，换行会被转换成回车和换行：\n</code></pre>\n<pre><code class=\"shell\">#提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true\n</code></pre>\n<p>问题解决</p>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/22/202109221056943.png\" alt=\"image-20210922105645713\"></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://hexo.bootcss.com/docs/github-pages.html\">Hexo/GitPage 部署</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n<li><a href=\"https://www.jianshu.com/p/450cd21b36a4\">解决git LF/CRLF</a></li>\n</ul>"},{"title":"Hexo 文章置顶","summary":"hexo 配置","abbrlink":52636,"date":"2021-09-24T02:11:20.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713341.jpg)\n\n<!-- more -->\n\n## 效果\n\n![置顶示例](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241339525.png)\n\n## 卸载默认的置顶方式\n\n    $ npm uninstall hexo-generator-index --save\n    \n    $ npm install hexo-generator-index-pin-top --save\n\n\n在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如：\n\n```markdown\n---\ntitle: Java 基础\ndate: 2021-09-18 10:29:39\ntags: \n    - JAVA系列\n    - JAVA基础\n    - JVM \ncategories: JAVA\ntop: true\ndescription: Java 概念讲解,从三大特性讲解，认识JDK/JRE/JVM的区别，从数据类型引出二进制与java的内存空间关系\n---\n```\n## 设置置顶图标\n我使用主题是Next,其中Next的各版本之间略有差异，我的版本是8.7.1  \n打开/themes/next/layout/_macro/ 目录下的post.njk文件    \n在`<div class=\"post-meta-container\">` 内找到 post-meta.njk 文件路径：\n```html\n <div class=\"post-meta-container\">\n  {{ partial('_partials/post/post-meta.njk') }} # 实际在 post-meta.njk 这个文件里面去修改\n\n  {%- if post.description and (not theme.excerpt_description or not is_index) %}\n    <div class=\"post-description\">{{ post.description }}</div>\n  {%- endif %}\n</div>\n```\n\n打开/themes/hexo-theme-next/layout/_partials/post/post-meta.njk，在 `<div class=\"post-meta\">` 插入：\n\n```html\n{% if post.top %}\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n{% endif %}\n```\n添加位置\n```html\n<div class=\"post-meta\">\n  {%- set date_diff = date(post.date) != date(post.updated) %}\n  {%- set time_diff = time(post.date) != time(post.updated) %}\n  # 插入下面的内容\n  {% if post.top %}\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n  {% endif %} \n  \n```\n其中置顶前的标签可以在 [Fontawesome](https://fontawesome.com/v5.15/icons?d=gallery&p=1) 替换你喜欢的\n\n## 参考\n- [Hexo nexT主题之文章置顶](https://www.jianshu.com/p/a9922c3ebb61)\n- [Hexo Next主题设置文章置顶](https://juejin.cn/post/6844904037465194503)\n- [Hexo博客彻底解决置顶问题](http://wangwlj.com/2018/01/09/blog_pin_post/)\n- [FontAwesome 标签库](https://fontawesome.com/v5.15/icons?d=gallery&p=1)\n","source":"_posts/2021-09-24-Hexo-文章置顶.md","raw":"---\ntitle: Hexo 文章置顶\ntags: Hexo\ncategories: Hexo\nsummary: hexo 配置\nabbrlink: 52636\ndate: 2021-09-24 10:11:20\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713341.jpg)\n\n<!-- more -->\n\n## 效果\n\n![置顶示例](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241339525.png)\n\n## 卸载默认的置顶方式\n\n    $ npm uninstall hexo-generator-index --save\n    \n    $ npm install hexo-generator-index-pin-top --save\n\n\n在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如：\n\n```markdown\n---\ntitle: Java 基础\ndate: 2021-09-18 10:29:39\ntags: \n    - JAVA系列\n    - JAVA基础\n    - JVM \ncategories: JAVA\ntop: true\ndescription: Java 概念讲解,从三大特性讲解，认识JDK/JRE/JVM的区别，从数据类型引出二进制与java的内存空间关系\n---\n```\n## 设置置顶图标\n我使用主题是Next,其中Next的各版本之间略有差异，我的版本是8.7.1  \n打开/themes/next/layout/_macro/ 目录下的post.njk文件    \n在`<div class=\"post-meta-container\">` 内找到 post-meta.njk 文件路径：\n```html\n <div class=\"post-meta-container\">\n  {{ partial('_partials/post/post-meta.njk') }} # 实际在 post-meta.njk 这个文件里面去修改\n\n  {%- if post.description and (not theme.excerpt_description or not is_index) %}\n    <div class=\"post-description\">{{ post.description }}</div>\n  {%- endif %}\n</div>\n```\n\n打开/themes/hexo-theme-next/layout/_partials/post/post-meta.njk，在 `<div class=\"post-meta\">` 插入：\n\n```html\n{% if post.top %}\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n{% endif %}\n```\n添加位置\n```html\n<div class=\"post-meta\">\n  {%- set date_diff = date(post.date) != date(post.updated) %}\n  {%- set time_diff = time(post.date) != time(post.updated) %}\n  # 插入下面的内容\n  {% if post.top %}\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n  {% endif %} \n  \n```\n其中置顶前的标签可以在 [Fontawesome](https://fontawesome.com/v5.15/icons?d=gallery&p=1) 替换你喜欢的\n\n## 参考\n- [Hexo nexT主题之文章置顶](https://www.jianshu.com/p/a9922c3ebb61)\n- [Hexo Next主题设置文章置顶](https://juejin.cn/post/6844904037465194503)\n- [Hexo博客彻底解决置顶问题](http://wangwlj.com/2018/01/09/blog_pin_post/)\n- [FontAwesome 标签库](https://fontawesome.com/v5.15/icons?d=gallery&p=1)\n","slug":"Hexo-文章置顶","published":1,"updated":"2024-12-16T12:11:11.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllynm0009j0krc5codcfk","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713341.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241339525.png\" alt=\"置顶示例\"></p>\n<h2 id=\"卸载默认的置顶方式\"><a href=\"#卸载默认的置顶方式\" class=\"headerlink\" title=\"卸载默认的置顶方式\"></a>卸载默认的置顶方式</h2><pre><code>$ npm uninstall hexo-generator-index --save\n\n$ npm install hexo-generator-index-pin-top --save\n</code></pre>\n<p>在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如：</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: Java 基础\ndate: 2021-09-18 10:29:39\ntags: \n<span class=\"token code keyword\">    - JAVA系列</span>\n<span class=\"token code keyword\">    - JAVA基础</span>\n<span class=\"token code keyword\">    - JVM </span>\ncategories: JAVA\ntop: true\n<span class=\"token title important\">description: Java 概念讲解,从三大特性讲解，认识JDK/JRE/JVM的区别，从数据类型引出二进制与java的内存空间关系\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<h2 id=\"设置置顶图标\"><a href=\"#设置置顶图标\" class=\"headerlink\" title=\"设置置顶图标\"></a>设置置顶图标</h2><p>我使用主题是Next,其中Next的各版本之间略有差异，我的版本是8.7.1<br>打开/themes/next/layout/_macro/ 目录下的post.njk文件<br>在<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code> 内找到 post-meta.njk 文件路径：</p>\n<pre class=\" language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span> partial('_partials/post/post-meta.njk') <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span> # 实际在 post-meta.njk 这个文件里面去修改\n\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>%- if post.description and (not theme.excerpt_description or not is_index) %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span> post.description <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>%- endif %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>打开/themes/hexo-theme-next/layout/_partials/post/post-meta.njk，在 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 插入：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>% if post.top %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fas fa-thumbtack<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>RED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>置顶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>% endif %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n</code></pre>\n<p>添加位置</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>%- set date_diff = date(post.date) != date(post.updated) %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>%- set time_diff = time(post.date) != time(post.updated) %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n  # 插入下面的内容\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>% if post.top %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fas fa-thumbtack<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>RED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>置顶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>% endif %<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span> \n  \n</code></pre>\n<p>其中置顶前的标签可以在 <a href=\"https://fontawesome.com/v5.15/icons?d=gallery&p=1\">Fontawesome</a> 替换你喜欢的</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/a9922c3ebb61\">Hexo nexT主题之文章置顶</a></li>\n<li><a href=\"https://juejin.cn/post/6844904037465194503\">Hexo Next主题设置文章置顶</a></li>\n<li><a href=\"http://wangwlj.com/2018/01/09/blog_pin_post/\">Hexo博客彻底解决置顶问题</a></li>\n<li><a href=\"https://fontawesome.com/v5.15/icons?d=gallery&p=1\">FontAwesome 标签库</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713341.jpg\"></p>","more":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241339525.png\" alt=\"置顶示例\"></p>\n<h2 id=\"卸载默认的置顶方式\"><a href=\"#卸载默认的置顶方式\" class=\"headerlink\" title=\"卸载默认的置顶方式\"></a>卸载默认的置顶方式</h2><pre><code>$ npm uninstall hexo-generator-index --save\n\n$ npm install hexo-generator-index-pin-top --save\n</code></pre>\n<p>在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如：</p>\n<pre><code class=\"markdown\">---\ntitle: Java 基础\ndate: 2021-09-18 10:29:39\ntags: \n    - JAVA系列\n    - JAVA基础\n    - JVM \ncategories: JAVA\ntop: true\ndescription: Java 概念讲解,从三大特性讲解，认识JDK/JRE/JVM的区别，从数据类型引出二进制与java的内存空间关系\n---\n</code></pre>\n<h2 id=\"设置置顶图标\"><a href=\"#设置置顶图标\" class=\"headerlink\" title=\"设置置顶图标\"></a>设置置顶图标</h2><p>我使用主题是Next,其中Next的各版本之间略有差异，我的版本是8.7.1<br>打开/themes/next/layout/_macro/ 目录下的post.njk文件<br>在<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code> 内找到 post-meta.njk 文件路径：</p>\n<pre><code class=\"html\"> &lt;div class=&quot;post-meta-container&quot;&gt;\n  &#123;&#123; partial('_partials/post/post-meta.njk') &#125;&#125; # 实际在 post-meta.njk 这个文件里面去修改\n\n  &#123;%- if post.description and (not theme.excerpt_description or not is_index) %&#125;\n    &lt;div class=&quot;post-description&quot;&gt;&#123;&#123; post.description &#125;&#125;&lt;/div&gt;\n  &#123;%- endif %&#125;\n&lt;/div&gt;\n</code></pre>\n<p>打开/themes/hexo-theme-next/layout/_partials/post/post-meta.njk，在 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 插入：</p>\n<pre><code class=\"html\">&#123;% if post.top %&#125;\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n&#123;% endif %&#125;\n</code></pre>\n<p>添加位置</p>\n<pre><code class=\"html\">&lt;div class=&quot;post-meta&quot;&gt;\n  &#123;%- set date_diff = date(post.date) != date(post.updated) %&#125;\n  &#123;%- set time_diff = time(post.date) != time(post.updated) %&#125;\n  # 插入下面的内容\n  &#123;% if post.top %&#125;\n    <span class=\"post-meta-item\">\n      <i class=\"fas fa-thumbtack\"></i>\n      <font color=\"RED\">置顶</font>\n    </span>\n  &#123;% endif %&#125; \n  \n</code></pre>\n<p>其中置顶前的标签可以在 <a href=\"https://fontawesome.com/v5.15/icons?d=gallery&p=1\">Fontawesome</a> 替换你喜欢的</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/a9922c3ebb61\">Hexo nexT主题之文章置顶</a></li>\n<li><a href=\"https://juejin.cn/post/6844904037465194503\">Hexo Next主题设置文章置顶</a></li>\n<li><a href=\"http://wangwlj.com/2018/01/09/blog_pin_post/\">Hexo博客彻底解决置顶问题</a></li>\n<li><a href=\"https://fontawesome.com/v5.15/icons?d=gallery&p=1\">FontAwesome 标签库</a></li>\n</ul>"},{"title":"Typora emoji 表情包","summary":"markdown 格式的表情包","abbrlink":2876,"date":"2022-06-07T02:22:27.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![ball-1845546_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021709642.jpg)\n\n<!-- more -->\n\n# Typora Emoji\n\n## People 人物\n| 😄 `:smile:`                        | 😆 `:laughing:`                     |                          |\n| :-------------------------    -------- | :--------------------------------- | :----------------------- |\n| 😊 `:blush:`                        | 😃 `:smiley:`                       | ☺️ `:relaxed:`            |\n| 😏 `:smirk:`                        | 😍 `:heart_eyes:`                   | 😘 `:kissing_heart:`      |\n| 😚 `:kissing_closed_eyes:`          | 😳 `:flushed:`                      | 😌 `:relieved:`           |\n| 😆 `:satisfied:`                    | 😁 `:grin:`                         | 😉 `:wink:`               |\n| 😜 `:stuck_out_tongue_winking_eye:` | 😝 `:stuck_out_tongue_closed_eyes:` | 😀 `:grinning:`           |\n| 😗 `:kissing:`                      | 😙 `:kissing_smiling_eyes:`         | 😛 `:stuck_out_tongue:`   |\n| 😴 `:sleeping:`                     | 😟 `:worried:`                      | 😦 `:frowning:`           |\n| 😧 `:anguished:`                    | 😮 `:open_mouth:`                   | 😬 `:grimacing:`          |\n| 😕 `:confused:`                     | 😯 `:hushed:`                       | 😑 `:expressionless:`     |\n| 😒 `:unamused:`                     | 😅 `:sweat_smile:`                  | 😓 `:sweat:`              |\n| 😥 `:disappointed_relieved:`        | 😩 `:weary:`                        | 😔 `:pensive:`            |\n| 😞 `:disappointed:`                 | 😖 `:confounded:`                   | 😨 `:fearful:`            |\n| 😰 `:cold_sweat:`                   | 😣 `:persevere:`                    | 😢 `:cry:`                |\n| 😭 `:sob:`                          | 😂 `:joy:`                          | 😲 `:astonished:`         |\n| 😱 `:scream:`                       |                                    | 😫 `:tired_face:`         |\n| 😠 `:angry:`                        | 😡 `:rage:`                         | 😤 `:triumph:`            |\n| 😪 `:sleepy:`                       | 😋 `:yum:`                          | 😷 `:mask:`               |\n| 😎 `:sunglasses:`                   | 😵 `:dizzy_face:`                   | 👿 `:imp:`                |\n| 😈 `:smiling_imp:`                  | 😐 `:neutral_face:`                 | 😶 `:no_mouth:`           |\n| 😇 `:innocent:`                     | 👽 `:alien:`                        | 💛 `:yellow_heart:`       |\n| 💙 `:blue_heart:`                   | 💜 `:purple_heart:`                 | ❤️ `:heart:`              |\n| 💚 `:green_heart:`                  | 💔 `:broken_heart:`                 | 💓 `:heartbeat:`          |\n| 💗 `:heartpulse:`                   | 💕 `:two_hearts:`                   | 💞 `:revolving_hearts:`   |\n| 💘 `:cupid:`                        | 💖 `:sparkling_heart:`              | ✨ `:sparkles:`           |\n| ⭐️ `:star:`                         | 🌟 `:star2:`                        | 💫 `:dizzy:`              |\n| 💥 `:boom:`                         | 💥 `:collision:`                    | 💢 `:anger:`              |\n| ❗️ `:exclamation:`                  | ❓ `:question:`                     | ❕ `:grey_exclamation:`   |\n| ❔ `:grey_question:`                | 💤 `:zzz:`                          | 💨 `:dash:`               |\n| 💦 `:sweat_drops:`                  | 🎶 `:notes:`                        | 🎵 `:musical_note:`       |\n| 🔥 `:fire:`                         | 💩 `:hankey:`                       | 💩 `:poop:`               |\n| 💩 `:shit:`                         | 👍 `:+1:`                           | 👍 `:thumbsup:`           |\n| 👎 `:-1:`                           | 👎 `:thumbsdown:`                   | 👌 `:ok_hand:`            |\n| 👊 `:punch:`                        | 👊 `:facepunch:`                    | ✊ `:fist:`               |\n| ✌️ `:v:`                            | 👋 `:wave:`                         | ✋ `:hand:`               |\n| ✋ `:raised_hand:`                  | 👐 `:open_hands:`                   | ☝️ `:point_up:`           |\n| 👇 `:point_down:`                   | 👈 `:point_left:`                   | 👉 `:point_right:`        |\n| 🙌 `:raised_hands:`                 | 🙏 `:pray:`                         | 👆 `:point_up_2:`         |\n| 👏 `:clap:`                         | 💪 `:muscle:`                       | 🤘 `:metal:`              |\n| 🖕 `:fu:`                           | 🚶 `:walking:`                      | 🏃 `:runner:`             |\n| 🏃 `:running:`                      | 👫 `:couple:`                       | 👪 `:family:`             |\n| 👬 `:two_men_holding_hands:`        | 👭 `:two_women_holding_hands:`      | 💃 `:dancer:`             |\n| 👯 `:dancers:`                      | 🙆 `:ok_woman:`                     | 🙅 `:no_good:`            |\n| 💁 `:information_desk_person:`      | 🙋 `:raising_hand:`                 | 👰 `:bride_with_veil:`    |\n| 🙎 `:person_with_pouting_face:`     | 🙍 `:person_frowning:`              | 🙇 `:bow:`                |\n| :couplekiss: `:couplekiss:`        | 💑 `:couple_with_heart:`            | 💆 `:massage:`            |\n| 💇 `:haircut:`                      | 💅 `:nail_care:`                    | 👦 `:boy:`                |\n| 👧 `:girl:`                         | 👩 `:woman:`                        | 👨 `:man:`                |\n| 👶 `:baby:`                         | 👵 `:older_woman:`                  | 👴 `:older_man:`          |\n| 👱 `:person_with_blond_hair:`       | 👲 `:man_with_gua_pi_mao:`          | 👳 `:man_with_turban:`    |\n| 👷 `:construction_worker:`          | 👮 `:cop:`                          | 👼 `:angel:`              |\n| 👸 `:princess:`                     | 😺 `:smiley_cat:`                   | 😸 `:smile_cat:`          |\n| 😻 `:heart_eyes_cat:`               | 😽 `:kissing_cat:`                  | 😼 `:smirk_cat:`          |\n| 🙀 `:scream_cat:`                   | 😿 `:crying_cat_face:`              | 😹 `:joy_cat:`            |\n| 😾 `:pouting_cat:`                  | 👹 `:japanese_ogre:`                | 👺 `:japanese_goblin:`    |\n| 🙈 `:see_no_evil:`                  | 🙉 `:hear_no_evil:`                 | 🙊 `:speak_no_evil:`      |\n| 💂 `:guardsman:`                    | 💀 `:skull:`                        | 🐾 `:feet:`               |\n| 👄 `:lips:`                         | 💋 `:kiss:`                         | 💧 `:droplet:`            |\n| 👂 `:ear:`                          | 👀 `:eyes:`                         | 👃 `:nose:`               |\n| 👅 `:tongue:`                       | 💌 `:love_letter:`                  | 👤 `:bust_in_silhouette:` |\n| 👥 `:busts_in_silhouette:`          | 💬 `:speech_balloon:`               | 💭 `:thought_balloon:`    |\n\n## Nature 自然\n\n| ☀️ `:sunny:`                        | ☔️ `:umbrella:`             | ☁️ `:cloud:`                       |\n| :--------------------------------- | :------------------------- | :-------------------------------- |\n| ❄️ `:snowflake:`                    | ⛄️ `:snowman:`              | ⚡️ `:zap:`                         |\n| 🌀 `:cyclone:`                      | 🌁 `:foggy:`                | 🌊 `:ocean:`                       |\n| 🐱 `:cat:`                          | 🐶 `:dog:`                  | 🐭 `:mouse:`                       |\n| 🐹 `:hamster:`                      | 🐰 `:rabbit:`               | 🐺 `:wolf:`                        |\n| 🐸 `:frog:`                         | 🐯 `:tiger:`                | 🐨 `:koala:`                       |\n| 🐻 `:bear:`                         | 🐷 `:pig:`                  | 🐽 `:pig_nose:`                    |\n| 🐮 `:cow:`                          | 🐗 `:boar:`                 | 🐵 `:monkey_face:`                 |\n| 🐒 `:monkey:`                       | 🐴 `:horse:`                | 🐎 `:racehorse:`                   |\n| 🐫 `:camel:`                        | 🐑 `:sheep:`                | 🐘 `:elephant:`                    |\n| 🐼 `:panda_face:`                   | 🐍 `:snake:`                | 🐦 `:bird:`                        |\n| 🐤 `:baby_chick:`                   | 🐥 `:hatched_chick:`        | 🐣 `:hatching_chick:`              |\n| 🐔 `:chicken:`                      | 🐧 `:penguin:`              | 🐢 `:turtle:`                      |\n| 🐛 `:bug:`                          | 🐝 `:honeybee:`             | 🐜 `:ant:`                         |\n| 🐞 `:beetle:`                       | 🐌 `:snail:`                | 🐙 `:octopus:`                     |\n| 🐠 `:tropical_fish:`                | 🐟 `:fish:`                 | 🐳 `:whale:`                       |\n| 🐋 `:whale2:`                       | 🐬 `:dolphin:`              | 🐄 `:cow2:`                        |\n| 🐏 `:ram:`                          | 🐀 `:rat:`                  | 🐃 `:water_buffalo:`               |\n| 🐅 `:tiger2:`                       | 🐇 `:rabbit2:`              | 🐉 `:dragon:`                      |\n| 🐐 `:goat:`                         | 🐓 `:rooster:`              | 🐕 `:dog2:`                        |\n| 🐖 `:pig2:`                         | 🐁 `:mouse2:`               | 🐂 `:ox:`                          |\n| 🐲 `:dragon_face:`                  | 🐡 `:blowfish:`             | 🐊 `:crocodile:`                   |\n| 🐪 `:dromedary_camel:`              | 🐆 `:leopard:`              | 🐈 `:cat2:`                        |\n| 🐩 `:poodle:`                       | 🐾 `:paw_prints:`           | 💐 `:bouquet:`                     |\n| 🌸 `:cherry_blossom:`               | 🌷 `:tulip:`                | 🍀 `:four_leaf_clover:`            |\n| 🌹 `:rose:`                         | 🌻 `:sunflower:`            | 🌺 `:hibiscus:`                    |\n| 🍁 `:maple_leaf:`                   | 🍃 `:leaves:`               | 🍂 `:fallen_leaf:`                 |\n| 🌿 `:herb:`                         | 🍄 `:mushroom:`             | 🌵 `:cactus:`                      |\n| 🌴 `:palm_tree:`                    | 🌲 `:evergreen_tree:`       | 🌳 `:deciduous_tree:`              |\n| 🌰 `:chestnut:`                     | 🌱 `:seedling:`             | 🌼 `:blossom:`                     |\n| 🌾 `:ear_of_rice:`                  | 🐚 `:shell:`                | 🌐 `:globe_with_meridians:`        |\n| 🌞 `:sun_with_face:`                | 🌝 `:full_moon_with_face:`  | 🌚 `:new_moon_with_face:`          |\n| 🌑 `:new_moon:`                     | 🌒 `:waxing_crescent_moon:` | 🌓 `:first_quarter_moon:`          |\n| 🌔 `:waxing_gibbous_moon:`          | 🌕 `:full_moon:`            | 🌖 `:waning_gibbous_moon:`         |\n| 🌗 `:last_quarter_moon:`            | 🌘 `:waning_crescent_moon:` | 🌜 `:last_quarter_moon_with_face:` |\n| 🌛 `:first_quarter_moon_with_face:` | 🌔 `:moon:`                 | 🌍 `:earth_africa:`                |\n| 🌎 `:earth_americas:`               | 🌏 `:earth_asia:`           | 🌋 `:volcano:`                     |\n| 🌌 `:milky_way:`                    | ⛅️ `:partly_sunny:`         |                                   |\n\n## Object 物体\n\n| 🎍 `:bamboo:`                         | 💝 `:gift_heart:`                 | 🎎 `:dolls:`                  |\n| :----------------------------------- | :------------------------------- | :--------------------------- |\n| 🎒 `:school_satchel:`                 | 🎓 `:mortar_board:`               | 🎏 `:flags:`                  |\n| 🎆 `:fireworks:`                      | 🎇 `:sparkler:`                   | 🎐 `:wind_chime:`             |\n| 🎑 `:rice_scene:`                     | 🎃 `:jack_o_lantern:`             | 👻 `:ghost:`                  |\n| 🎅 `:santa:`                          | 🎄 `:christmas_tree:`             | 🎁 `:gift:`                   |\n| 🔔 `:bell:`                           | 🔕 `:no_bell:`                    | 🎋 `:tanabata_tree:`          |\n| 🎉 `:tada:`                           | 🎊 `:confetti_ball:`              | 🎈 `:balloon:`                |\n| 🔮 `:crystal_ball:`                   | 💿 `:cd:`                         | 📀 `:dvd:`                    |\n| 💾 `:floppy_disk:`                    | 📷 `:camera:`                     | 📹 `:video_camera:`           |\n| 🎥 `:movie_camera:`                   | 💻 `:computer:`                   | 📺 `:tv:`                     |\n| 📱 `:iphone:`                         | ☎️ `:phone:`                      | ☎️ `:telephone:`              |\n| 📞 `:telephone_receiver:`             | 📟 `:pager:`                      | 📠 `:fax:`                    |\n| 💽 `:minidisc:`                       | 📼 `:vhs:`                        | 🔉 `:sound:`                  |\n| 🔈 `:speaker:`                        | 🔇 `:mute:`                       | 📢 `:loudspeaker:`            |\n| 📣 `:mega:`                           | ⌛️ `:hourglass:`                  | ⏳ `:hourglass_flowing_sand:` |\n| ⏰ `:alarm_clock:`                    | ⌚️ `:watch:`                      | 📻 `:radio:`                  |\n| 📡 `:satellite:`                      | ➿ `:loop:`                       | 🔍 `:mag:`                    |\n| 🔎 `:mag_right:`                      | 🔓 `:unlock:`                     | 🔒 `:lock:`                   |\n| 🔏 `:lock_with_ink_pen:`              | 🔐 `:closed_lock_with_key:`       | 🔑 `:key:`                    |\n| 💡 `:bulb:`                           | 🔦 `:flashlight:`                 | 🔆 `:high_brightness:`        |\n| 🔅 `:low_brightness:`                 | 🔌 `:electric_plug:`              | 🔋 `:battery:`                |\n| 📲 `:calling:`                        | ✉️ `:email:`                      | 📫 `:mailbox:`                |\n| 📮 `:postbox:`                        | 🛀 `:bath:`                       | 🛁 `:bathtub:`                |\n| 🚿 `:shower:`                         | 🚽 `:toilet:`                     | 🔧 `:wrench:`                 |\n| 🔩 `:nut_and_bolt:`                   | 🔨 `:hammer:`                     | 💺 `:seat:`                   |\n| 💰 `:moneybag:`                       | 💴 `:yen:`                        | 💵 `:dollar:`                 |\n| 💷 `:pound:`                          | 💶 `:euro:`                       | 💳 `:credit_card:`            |\n| 💸 `:money_with_wings:`               | 📧 `:e-mail:`                     | 📥 `:inbox_tray:`             |\n| 📤 `:outbox_tray:`                    | ✉️ `:envelope:`                   | 📨 `:incoming_envelope:`      |\n| 📯 `:postal_horn:`                    | 📪 `:mailbox_closed:`             | 📬 `:mailbox_with_mail:`      |\n| 📭 `:mailbox_with_no_mail:`           | 🚪 `:door:`                       | 🚬 `:smoking:`                |\n| 💣 `:bomb:`                           | 🔫 `:gun:`                        | 🔪 `:hocho:`                  |\n| 💊 `:pill:`                           | 💉 `:syringe:`                    | 📄 `:page_facing_up:`         |\n| 📃 `:page_with_curl:`                 | 📑 `:bookmark_tabs:`              | 📊 `:bar_chart:`              |\n| 📈 `:chart_with_upwards_trend:`       | 📉 `:chart_with_downwards_trend:` | 📜 `:scroll:`                 |\n| 📋 `:clipboard:`                      | 📆 `:calendar:`                   | 📅 `:date:`                   |\n| 📇 `:card_index:`                     | 📁 `:file_folder:`                | 📂 `:open_file_folder:`       |\n| ✂️ `:scissors:`                       | 📌 `:pushpin:`                    | 📎 `:paperclip:`              |\n| ✒️ `:black_nib:`                      | ✏️ `:pencil2:`                    | 📏 `:straight_ruler:`         |\n| 📐 `:triangular_ruler:`               | 📕 `:closed_book:`                | 📗 `:green_book:`             |\n| 📘 `:blue_book:`                      | 📙 `:orange_book:`                | 📓 `:notebook:`               |\n| 📔 `:notebook_with_decorative_cover:` | 📒 `:ledger:`                     | 📚 `:books:`                  |\n| 🔖 `:bookmark:`                       | 📛 `:name_badge:`                 | 🔬 `:microscope:`             |\n| 🔭 `:telescope:`                      | 📰 `:newspaper:`                  | 🏈 `:football:`               |\n| 🏀 `:basketball:`                     | ⚽️ `:soccer:`                     | ⚾️ `:baseball:`               |\n| 🎾 `:tennis:`                         | 🎱 `:8ball:`                      | 🏉 `:rugby_football:`         |\n| 🎳 `:bowling:`                        | ⛳️ `:golf:`                       | 🚵 `:mountain_bicyclist:`     |\n| 🚴 `:bicyclist:`                      | 🏇 `:horse_racing:`               | 🏂 `:snowboarder:`            |\n| 🏊 `:swimmer:`                        | 🏄 `:surfer:`                     | 🎿 `:ski:`                    |\n| ♠️ `:spades:`                         | ♥️ `:hearts:`                     | ♣️ `:clubs:`                  |\n| ♦️ `:diamonds:`                       | 💎 `:gem:`                        | 💍 `:ring:`                   |\n| 🏆 `:trophy:`                         | 🎼 `:musical_score:`              | 🎹 `:musical_keyboard:`       |\n| 🎻 `:violin:`                         | 👾 `:space_invader:`              | 🎮 `:video_game:`             |\n| 🃏 `:black_joker:`                    | 🎴 `:flower_playing_cards:`       | 🎲 `:game_die:`               |\n| 🎯 `:dart:`                           | 🀄️ `:mahjong:`                    | 🎬 `:clapper:`                |\n| 📝 `:memo:`                           | 📝 `:pencil:`                     | 📖 `:book:`                   |\n| 🎨 `:art:`                            | 🎤 `:microphone:`                 | 🎧 `:headphones:`             |\n| 🎺 `:trumpet:`                        | 🎷 `:saxophone:`                  | 🎸 `:guitar:`                 |\n| 👞 `:shoe:`                           | 👡 `:sandal:`                     | 👠 `:high_heel:`              |\n| 💄 `:lipstick:`                       | 👢 `:boot:`                       | 👕 `:shirt:`                  |\n| 👕 `:tshirt:`                         | 👔 `:necktie:`                    | 👚 `:womans_clothes:`         |\n| 👗 `:dress:`                          | 🎽 `:running_shirt_with_sash:`    | 👖 `:jeans:`                  |\n| 👘 `:kimono:`                         | 👙 `:bikini:`                     | 🎀 `:ribbon:`                 |\n| 🎩 `:tophat:`                         | 👑 `:crown:`                      | 👒 `:womans_hat:`             |\n| 👞 `:mans_shoe:`                      | 🌂 `:closed_umbrella:`            | 💼 `:briefcase:`              |\n| 👜 `:handbag:`                        | 👝 `:pouch:`                      | 👛 `:purse:`                  |\n| 👓 `:eyeglasses:`                     | 🎣 `:fishing_pole_and_fish:`      | ☕️ `:coffee:`                 |\n| 🍵 `:tea:`                            | 🍶 `:sake:`                       | 🍼 `:baby_bottle:`            |\n| 🍺 `:beer:`                           | 🍻 `:beers:`                      | 🍸 `:cocktail:`               |\n| 🍹 `:tropical_drink:`                 | 🍷 `:wine_glass:`                 | 🍴 `:fork_and_knife:`         |\n| 🍕 `:pizza:`                          | 🍔 `:hamburger:`                  | 🍟 `:fries:`                  |\n| 🍗 `:poultry_leg:`                    | 🍖 `:meat_on_bone:`               | 🍝 `:spaghetti:`              |\n| 🍛 `:curry:`                          | 🍤 `:fried_shrimp:`               | 🍱 `:bento:`                  |\n| 🍣 `:sushi:`                          | 🍥 `:fish_cake:`                  | 🍙 `:rice_ball:`              |\n| 🍘 `:rice_cracker:`                   | 🍚 `:rice:`                       | 🍜 `:ramen:`                  |\n| 🍲 `:stew:`                           | 🍢 `:oden:`                       | 🍡 `:dango:`                  |\n| 🥚 `:egg:`                            | 🍞 `:bread:`                      | 🍩 `:doughnut:`               |\n| 🍮 `:custard:`                        | 🍦 `:icecream:`                   | 🍨 `:ice_cream:`              |\n| 🍧 `:shaved_ice:`                     | 🎂 `:birthday:`                   | 🍰 `:cake:`                   |\n| 🍪 `:cookie:`                         | 🍫 `:chocolate_bar:`              | 🍬 `:candy:`                  |\n| 🍭 `:lollipop:`                       | 🍯 `:honey_pot:`                  | 🍎 `:apple:`                  |\n| 🍏 `:green_apple:`                    | 🍊 `:tangerine:`                  | 🍋 `:lemon:`                  |\n| 🍒 `:cherries:`                       | 🍇 `:grapes:`                     | 🍉 `:watermelon:`             |\n| 🍓 `:strawberry:`                     | 🍑 `:peach:`                      | 🍈 `:melon:`                  |\n| 🍌 `:banana:`                         | 🍐 `:pear:`                       | 🍍 `:pineapple:`              |\n| 🍠 `:sweet_potato:`                   | 🍆 `:eggplant:`                   | 🍅 `:tomato:`                 |\n| 🌽 `:corn:`                           |                                  |                              |\n\n## Places 地点\n\n| 🏠 `:house:`               | 🏡 `:house_with_garden:`       | 🏫 `:school:`                 |\n| :------------------------ | :---------------------------- | :--------------------------- |\n| 🏢 `:office:`              | 🏣 `:post_office:`             | 🏥 `:hospital:`               |\n| 🏦 `:bank:`                | 🏪 `:convenience_store:`       | 🏩 `:love_hotel:`             |\n| 🏨 `:hotel:`               | 💒 `:wedding:`                 | ⛪️ `:church:`                 |\n| 🏬 `:department_store:`    | 🏤 `:european_post_office:`    | 🌇 `:city_sunrise:`           |\n| 🌆 `:city_sunset:`         | 🏯 `:japanese_castle:`         | 🏰 `:european_castle:`        |\n| ⛺️ `:tent:`                | 🏭 `:factory:`                 | 🗼 `:tokyo_tower:`            |\n| 🗾 `:japan:`               | 🗻 `:mount_fuji:`              | 🌄 `:sunrise_over_mountains:` |\n| 🌅 `:sunrise:`             | 🌠 `:stars:`                   | 🗽 `:statue_of_liberty:`      |\n| 🌉 `:bridge_at_night:`     | 🎠 `:carousel_horse:`          | 🌈 `:rainbow:`                |\n| 🎡 `:ferris_wheel:`        | ⛲️ `:fountain:`                | 🎢 `:roller_coaster:`         |\n| 🚢 `:ship:`                | 🚤 `:speedboat:`               | ⛵️ `:boat:`                   |\n| ⛵️ `:sailboat:`            | 🚣 `:rowboat:`                 | ⚓️ `:anchor:`                 |\n| 🚀 `:rocket:`              | ✈️ `:airplane:`                | 🚁 `:helicopter:`             |\n| 🚂 `:steam_locomotive:`    | 🚊 `:tram:`                    | 🚞 `:mountain_railway:`       |\n| 🚲 `:bike:`                | 🚡 `:aerial_tramway:`          | 🚟 `:suspension_railway:`     |\n| 🚠 `:mountain_cableway:`   | 🚜 `:tractor:`                 | 🚙 `:blue_car:`               |\n| 🚘 `:oncoming_automobile:` | 🚗 `:car:`                     | 🚗 `:red_car:`                |\n| 🚕 `:taxi:`                | 🚖 `:oncoming_taxi:`           | 🚛 `:articulated_lorry:`      |\n| 🚌 `:bus:`                 | 🚍 `:oncoming_bus:`            | 🚨 `:rotating_light:`         |\n| 🚓 `:police_car:`          | 🚔 `:oncoming_police_car:`     | 🚒 `:fire_engine:`            |\n| 🚑 `:ambulance:`           | 🚐 `:minibus:`                 | 🚚 `:truck:`                  |\n| 🚋 `:train:`               | 🚉 `:station:`                 | 🚆 `:train2:`                 |\n| 🚅 `:bullettrain_front:`   | 🚄 `:bullettrain_side:`        | 🚈 `:light_rail:`             |\n| 🚝 `:monorail:`            | 🚃 `:railway_car:`             | 🚎 `:trolleybus:`             |\n| 🎫 `:ticket:`              | ⛽️ `:fuelpump:`                | 🚦 `:vertical_traffic_light:` |\n| 🚥 `:traffic_light:`       | ⚠️ `:warning:`                 | 🚧 `:construction:`           |\n| 🔰 `:beginner:`            | 🏧 `:atm:`                     | 🎰 `:slot_machine:`           |\n| 🚏 `:busstop:`             | 💈 `:barber:`                  | ♨️ `:hotsprings:`             |\n| 🏁 `:checkered_flag:`      | 🎌 `:crossed_flags:`           | 🏮 `:izakaya_lantern:`        |\n| 🗿 `:moyai:`               | 🎪 `:circus_tent:`             | 🎭 `:performing_arts:`        |\n| 📍 `:round_pushpin:`       | 🚩 `:triangular_flag_on_post:` | 🇯🇵 `:jp:`                    |\n| 🇰🇷 `:kr:`                 | 🇨🇳 `:cn:`                     | 🇺🇸 `:us:`                    |\n| 🇫🇷 `:fr:`                 | 🇪🇸 `:es:`                     | 🇮🇹 `:it:`                    |\n| 🇷🇺 `:ru:`                 | 🇬🇧 `:gb:`                     | 🇬🇧 `:uk:`                    |\n| 🇩🇪 `:de:`                 |                               |                              |\n\n## Symbols 符号\n\n| 1️⃣ `:one:`                            | 2️⃣ `:two:`                        | 3️⃣ `:three:`                     |\n| :----------------------------------- | :------------------------------- | :------------------------------ |\n| 4️⃣ `:four:`                           | 5️⃣ `:five:`                       | 6️⃣ `:six:`                       |\n| 7️⃣ `:seven:`                          | 8️⃣ `:eight:`                      | 9️⃣ `:nine:`                      |\n| 🔟 `:keycap_ten:`                     | 🔢 `:1234:`                       | 0️⃣ `:zero:`                      |\n| #️⃣ `:hash:`                           | 🔣 `:symbols:`                    | ◀️ `:arrow_backward:`            |\n| ⬇️ `:arrow_down:`                     | ▶️ `:arrow_forward:`              | ⬅️ `:arrow_left:`                |\n| 🔠 `:capital_abcd:`                   | 🔡 `:abcd:`                       | 🔤 `:abc:`                       |\n| ↙️ `:arrow_lower_left:`               | ↘️ `:arrow_lower_right:`          | ➡️ `:arrow_right:`               |\n| ⬆️ `:arrow_up:`                       | ↖️ `:arrow_upper_left:`           | ↗️ `:arrow_upper_right:`         |\n| ⏬ `:arrow_double_down:`              | ⏫ `:arrow_double_up:`            | 🔽 `:arrow_down_small:`          |\n| ⤵️ `:arrow_heading_down:`             | ⤴️ `:arrow_heading_up:`           | ↩️`:leftwards_arrow_with_hook:`  |\n| ↪️ `:arrow_right_hook:`               | ↔️ `:left_right_arrow:`           | ↕️ `:arrow_up_down:`             |\n| 🔼 `:arrow_up_small:`                 | 🔃 `:arrows_clockwise:`           | 🔄 `:arrows_counterclockwise:`   |\n| ⏪ `:rewind:`                         | ⏩ `:fast_forward:`               | ℹ️ `:information_source:`        |\n| 🆗 `:ok:`                             | 🔀 `:twisted_rightwards_arrows:`  | 🔁 `:repeat:`                    |\n| 🔂 `:repeat_one:`                     | 🆕 `:new:`                        | 🔝 `:top:`                       |\n| 🆙 `:up:`                             | 🆒 `:cool:`                       | 🆓 `:free:`                      |\n| 🆖 `:ng:`                             | 🎦 `:cinema:`                     | 🈁 `:koko:`                      |\n| 📶 `:signal_strength:`                | 🈹 `:u5272:`                      | 🈴 `:u5408:`                     |\n| 🈺 `:u55b6:`                          | 🈯️ `:u6307:`                      | 🈷️ `:u6708:`                     |\n| 🈶 `:u6709:`                          | 🈵 `:u6e80:`                      | 🈚️ `:u7121:`                     |\n| 🈸 `:u7533:`                          | 🈳 `:u7a7a:`                      | 🈲 `:u7981:`                     |\n| 🈂️ `:sa:`                             | 🚻 `:restroom:`                   | 🚹 `:mens:`                      |\n| 🚺 `:womens:`                         | 🚼 `:baby_symbol:`                | 🚭 `:no_smoking:`                |\n| 🅿️ `:parking:`                        | ♿️ `:wheelchair:`                 | 🚇 `:metro:`                     |\n| 🛄 `:baggage_claim:`                  | 🉑 `:accept:`                     | 🚾 `:wc:`                        |\n| 🚰 `:potable_water:`                  | 🚮 `:put_litter_in_its_place:`    | ㊙️ `:secret:`                   |\n| ㊗️ `:congratulations:`               | Ⓜ️ `:m:`                          | 🛂 `:passport_control:`          |\n| 🛅 `:left_luggage:`                   | 🛃 `:customs:`                    | 🉐 `:ideograph_advantage:`       |\n| 🆑 `:cl:`                             | 🆘 `:sos:`                        | 🆔 `:id:`                        |\n| 🚫 `:no_entry_sign:`                  | 🔞 `:underage:`                   | 📵 `:no_mobile_phones:`          |\n| 🚯 `:do_not_litter:`                  | 🚱 `:non-potable_water:`          | 🚳 `:no_bicycles:`               |\n| 🚷 `:no_pedestrians:`                 | 🚸 `:children_crossing:`          | ⛔️ `:no_entry:`                  |\n| ✳️ `:eight_spoked_asterisk:`          | ✴️ `:eight_pointed_black_star:`   | 💟 `:heart_decoration:`          |\n| 🆚 `:vs:`                             | 📳 `:vibration_mode:`             | 📴 `:mobile_phone_off:`          |\n| 💹 `:chart:`                          | 💱 `:currency_exchange:`          | ♈️ `:aries:`                     |\n| ♉️ `:taurus:`                         | ♊️ `:gemini:`                     | ♋️ `:cancer:`                    |\n| ♌️ `:leo:`                            | ♍️ `:virgo:`                      | ♎️ `:libra:`                     |\n| ♏️ `:scorpius:`                       | ♐️ `:sagittarius:`                | ♑️ `:capricorn:`                 |\n| ♒️ `:aquarius:`                       | ♓️ `:pisces:`                     | ⛎ `:ophiuchus:`                 |\n| 🔯 `:six_pointed_star:`               | ❎`:negative_squared_cross_mark:` | 🅰️ `:a:`                         |\n| 🅱️ `:b:`                              | 🆎 `:ab:`                         | 🅾️ `:o2:`                        |\n| 💠`:diamond_shape_with_a_dot_inside:` | ♻️ `:recycle:`                    | 🔚 `:end:`                       |\n| 🔛 `:on:`                             | 🔜 `:soon:`                       | 🕐 `:clock1:`                    |\n| 🕜 `:clock130:`                       | 🕙 `:clock10:`                    | 🕥 `:clock1030:`                 |\n| 🕚 `:clock11:`                        | 🕦 `:clock1130:`                  | 🕛 `:clock12:`                   |\n| 🕧 `:clock1230:`                      | 🕑 `:clock2:`                     | 🕝 `:clock230:`                  |\n| 🕒 `:clock3:`                         | 🕞 `:clock330:`                   | 🕓 `:clock4:`                    |\n| 🕟 `:clock430:`                       | 🕔 `:clock5:`                     | 🕠 `:clock530:`                  |\n| 🕕 `:clock6:`                         | 🕡 `:clock630:`                   | 🕖 `:clock7:`                    |\n| 🕢 `:clock730:`                       | 🕗 `:clock8:`                     | 🕣 `:clock830:`                  |\n| 🕘 `:clock9:`                         | 🕤 `:clock930:`                   | 💲 `:heavy_dollar_sign:`         |\n| ©️ `:copyright:`                      | ®️ `:registered:`                 | ™️ `:tm:`                        |\n| ❌ `:x:`                              | ❗️ `:heavy_exclamation_mark:`     | ‼️ `:bangbang:`                  |\n| ⁉️ `:interrobang:`                    | ⭕️ `:o:`                          | ✖️ `:heavy_multiplication_x:`    |\n| ➕ `:heavy_plus_sign:`                | ➖ `:heavy_minus_sign:`           | ➗ `:heavy_division_sign:`       |\n| 💮 `:white_flower:`                   | 💯 `:100:`                        | ✔️ `:heavy_check_mark:`          |\n| ☑️ `:ballot_box_with_check:`          | 🔘 `:radio_button:`               | 🔗 `:link:`                      |\n| ➰ `:curly_loop:`                     | 〰️ `:wavy_dash:`                 | 〽️ `:part_alternation_mark:`    |\n| 🔱 `:trident:`                        | :black_square: `:black_square:`  | :white_square: `:white_square:` |\n| ✅ `:white_check_mark:`               | 🔲 `:black_square_button:`        | 🔳 `:white_square_button:`       |\n| ⚫️ `:black_circle:`                   | ⚪️ `:white_circle:`               | 🔴 `:red_circle:`                |\n| 🔵 `:large_blue_circle:`              | 🔷 `:large_blue_diamond:`         | 🔶 `:large_orange_diamond:`      |\n| 🔹 `:small_blue_diamond:`             | 🔸 `:small_orange_diamond:`       | 🔺 `:small_red_triangle:`        |\n| 🔻 `:small_red_triangle_down:`        |                                  |                                 |","source":"_posts/2021-09-23-Typora-emoji-表情包.md","raw":"---\ntitle: Typora emoji 表情包\ntags:\n  - Typora\n  - Markdown\ncategories: Markdown\nsummary: markdown 格式的表情包\nabbrlink: 2876\ndate: 2022-06-07 10:22:27\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![ball-1845546_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021709642.jpg)\n\n<!-- more -->\n\n# Typora Emoji\n\n## People 人物\n| 😄 `:smile:`                        | 😆 `:laughing:`                     |                          |\n| :-------------------------    -------- | :--------------------------------- | :----------------------- |\n| 😊 `:blush:`                        | 😃 `:smiley:`                       | ☺️ `:relaxed:`            |\n| 😏 `:smirk:`                        | 😍 `:heart_eyes:`                   | 😘 `:kissing_heart:`      |\n| 😚 `:kissing_closed_eyes:`          | 😳 `:flushed:`                      | 😌 `:relieved:`           |\n| 😆 `:satisfied:`                    | 😁 `:grin:`                         | 😉 `:wink:`               |\n| 😜 `:stuck_out_tongue_winking_eye:` | 😝 `:stuck_out_tongue_closed_eyes:` | 😀 `:grinning:`           |\n| 😗 `:kissing:`                      | 😙 `:kissing_smiling_eyes:`         | 😛 `:stuck_out_tongue:`   |\n| 😴 `:sleeping:`                     | 😟 `:worried:`                      | 😦 `:frowning:`           |\n| 😧 `:anguished:`                    | 😮 `:open_mouth:`                   | 😬 `:grimacing:`          |\n| 😕 `:confused:`                     | 😯 `:hushed:`                       | 😑 `:expressionless:`     |\n| 😒 `:unamused:`                     | 😅 `:sweat_smile:`                  | 😓 `:sweat:`              |\n| 😥 `:disappointed_relieved:`        | 😩 `:weary:`                        | 😔 `:pensive:`            |\n| 😞 `:disappointed:`                 | 😖 `:confounded:`                   | 😨 `:fearful:`            |\n| 😰 `:cold_sweat:`                   | 😣 `:persevere:`                    | 😢 `:cry:`                |\n| 😭 `:sob:`                          | 😂 `:joy:`                          | 😲 `:astonished:`         |\n| 😱 `:scream:`                       |                                    | 😫 `:tired_face:`         |\n| 😠 `:angry:`                        | 😡 `:rage:`                         | 😤 `:triumph:`            |\n| 😪 `:sleepy:`                       | 😋 `:yum:`                          | 😷 `:mask:`               |\n| 😎 `:sunglasses:`                   | 😵 `:dizzy_face:`                   | 👿 `:imp:`                |\n| 😈 `:smiling_imp:`                  | 😐 `:neutral_face:`                 | 😶 `:no_mouth:`           |\n| 😇 `:innocent:`                     | 👽 `:alien:`                        | 💛 `:yellow_heart:`       |\n| 💙 `:blue_heart:`                   | 💜 `:purple_heart:`                 | ❤️ `:heart:`              |\n| 💚 `:green_heart:`                  | 💔 `:broken_heart:`                 | 💓 `:heartbeat:`          |\n| 💗 `:heartpulse:`                   | 💕 `:two_hearts:`                   | 💞 `:revolving_hearts:`   |\n| 💘 `:cupid:`                        | 💖 `:sparkling_heart:`              | ✨ `:sparkles:`           |\n| ⭐️ `:star:`                         | 🌟 `:star2:`                        | 💫 `:dizzy:`              |\n| 💥 `:boom:`                         | 💥 `:collision:`                    | 💢 `:anger:`              |\n| ❗️ `:exclamation:`                  | ❓ `:question:`                     | ❕ `:grey_exclamation:`   |\n| ❔ `:grey_question:`                | 💤 `:zzz:`                          | 💨 `:dash:`               |\n| 💦 `:sweat_drops:`                  | 🎶 `:notes:`                        | 🎵 `:musical_note:`       |\n| 🔥 `:fire:`                         | 💩 `:hankey:`                       | 💩 `:poop:`               |\n| 💩 `:shit:`                         | 👍 `:+1:`                           | 👍 `:thumbsup:`           |\n| 👎 `:-1:`                           | 👎 `:thumbsdown:`                   | 👌 `:ok_hand:`            |\n| 👊 `:punch:`                        | 👊 `:facepunch:`                    | ✊ `:fist:`               |\n| ✌️ `:v:`                            | 👋 `:wave:`                         | ✋ `:hand:`               |\n| ✋ `:raised_hand:`                  | 👐 `:open_hands:`                   | ☝️ `:point_up:`           |\n| 👇 `:point_down:`                   | 👈 `:point_left:`                   | 👉 `:point_right:`        |\n| 🙌 `:raised_hands:`                 | 🙏 `:pray:`                         | 👆 `:point_up_2:`         |\n| 👏 `:clap:`                         | 💪 `:muscle:`                       | 🤘 `:metal:`              |\n| 🖕 `:fu:`                           | 🚶 `:walking:`                      | 🏃 `:runner:`             |\n| 🏃 `:running:`                      | 👫 `:couple:`                       | 👪 `:family:`             |\n| 👬 `:two_men_holding_hands:`        | 👭 `:two_women_holding_hands:`      | 💃 `:dancer:`             |\n| 👯 `:dancers:`                      | 🙆 `:ok_woman:`                     | 🙅 `:no_good:`            |\n| 💁 `:information_desk_person:`      | 🙋 `:raising_hand:`                 | 👰 `:bride_with_veil:`    |\n| 🙎 `:person_with_pouting_face:`     | 🙍 `:person_frowning:`              | 🙇 `:bow:`                |\n| :couplekiss: `:couplekiss:`        | 💑 `:couple_with_heart:`            | 💆 `:massage:`            |\n| 💇 `:haircut:`                      | 💅 `:nail_care:`                    | 👦 `:boy:`                |\n| 👧 `:girl:`                         | 👩 `:woman:`                        | 👨 `:man:`                |\n| 👶 `:baby:`                         | 👵 `:older_woman:`                  | 👴 `:older_man:`          |\n| 👱 `:person_with_blond_hair:`       | 👲 `:man_with_gua_pi_mao:`          | 👳 `:man_with_turban:`    |\n| 👷 `:construction_worker:`          | 👮 `:cop:`                          | 👼 `:angel:`              |\n| 👸 `:princess:`                     | 😺 `:smiley_cat:`                   | 😸 `:smile_cat:`          |\n| 😻 `:heart_eyes_cat:`               | 😽 `:kissing_cat:`                  | 😼 `:smirk_cat:`          |\n| 🙀 `:scream_cat:`                   | 😿 `:crying_cat_face:`              | 😹 `:joy_cat:`            |\n| 😾 `:pouting_cat:`                  | 👹 `:japanese_ogre:`                | 👺 `:japanese_goblin:`    |\n| 🙈 `:see_no_evil:`                  | 🙉 `:hear_no_evil:`                 | 🙊 `:speak_no_evil:`      |\n| 💂 `:guardsman:`                    | 💀 `:skull:`                        | 🐾 `:feet:`               |\n| 👄 `:lips:`                         | 💋 `:kiss:`                         | 💧 `:droplet:`            |\n| 👂 `:ear:`                          | 👀 `:eyes:`                         | 👃 `:nose:`               |\n| 👅 `:tongue:`                       | 💌 `:love_letter:`                  | 👤 `:bust_in_silhouette:` |\n| 👥 `:busts_in_silhouette:`          | 💬 `:speech_balloon:`               | 💭 `:thought_balloon:`    |\n\n## Nature 自然\n\n| ☀️ `:sunny:`                        | ☔️ `:umbrella:`             | ☁️ `:cloud:`                       |\n| :--------------------------------- | :------------------------- | :-------------------------------- |\n| ❄️ `:snowflake:`                    | ⛄️ `:snowman:`              | ⚡️ `:zap:`                         |\n| 🌀 `:cyclone:`                      | 🌁 `:foggy:`                | 🌊 `:ocean:`                       |\n| 🐱 `:cat:`                          | 🐶 `:dog:`                  | 🐭 `:mouse:`                       |\n| 🐹 `:hamster:`                      | 🐰 `:rabbit:`               | 🐺 `:wolf:`                        |\n| 🐸 `:frog:`                         | 🐯 `:tiger:`                | 🐨 `:koala:`                       |\n| 🐻 `:bear:`                         | 🐷 `:pig:`                  | 🐽 `:pig_nose:`                    |\n| 🐮 `:cow:`                          | 🐗 `:boar:`                 | 🐵 `:monkey_face:`                 |\n| 🐒 `:monkey:`                       | 🐴 `:horse:`                | 🐎 `:racehorse:`                   |\n| 🐫 `:camel:`                        | 🐑 `:sheep:`                | 🐘 `:elephant:`                    |\n| 🐼 `:panda_face:`                   | 🐍 `:snake:`                | 🐦 `:bird:`                        |\n| 🐤 `:baby_chick:`                   | 🐥 `:hatched_chick:`        | 🐣 `:hatching_chick:`              |\n| 🐔 `:chicken:`                      | 🐧 `:penguin:`              | 🐢 `:turtle:`                      |\n| 🐛 `:bug:`                          | 🐝 `:honeybee:`             | 🐜 `:ant:`                         |\n| 🐞 `:beetle:`                       | 🐌 `:snail:`                | 🐙 `:octopus:`                     |\n| 🐠 `:tropical_fish:`                | 🐟 `:fish:`                 | 🐳 `:whale:`                       |\n| 🐋 `:whale2:`                       | 🐬 `:dolphin:`              | 🐄 `:cow2:`                        |\n| 🐏 `:ram:`                          | 🐀 `:rat:`                  | 🐃 `:water_buffalo:`               |\n| 🐅 `:tiger2:`                       | 🐇 `:rabbit2:`              | 🐉 `:dragon:`                      |\n| 🐐 `:goat:`                         | 🐓 `:rooster:`              | 🐕 `:dog2:`                        |\n| 🐖 `:pig2:`                         | 🐁 `:mouse2:`               | 🐂 `:ox:`                          |\n| 🐲 `:dragon_face:`                  | 🐡 `:blowfish:`             | 🐊 `:crocodile:`                   |\n| 🐪 `:dromedary_camel:`              | 🐆 `:leopard:`              | 🐈 `:cat2:`                        |\n| 🐩 `:poodle:`                       | 🐾 `:paw_prints:`           | 💐 `:bouquet:`                     |\n| 🌸 `:cherry_blossom:`               | 🌷 `:tulip:`                | 🍀 `:four_leaf_clover:`            |\n| 🌹 `:rose:`                         | 🌻 `:sunflower:`            | 🌺 `:hibiscus:`                    |\n| 🍁 `:maple_leaf:`                   | 🍃 `:leaves:`               | 🍂 `:fallen_leaf:`                 |\n| 🌿 `:herb:`                         | 🍄 `:mushroom:`             | 🌵 `:cactus:`                      |\n| 🌴 `:palm_tree:`                    | 🌲 `:evergreen_tree:`       | 🌳 `:deciduous_tree:`              |\n| 🌰 `:chestnut:`                     | 🌱 `:seedling:`             | 🌼 `:blossom:`                     |\n| 🌾 `:ear_of_rice:`                  | 🐚 `:shell:`                | 🌐 `:globe_with_meridians:`        |\n| 🌞 `:sun_with_face:`                | 🌝 `:full_moon_with_face:`  | 🌚 `:new_moon_with_face:`          |\n| 🌑 `:new_moon:`                     | 🌒 `:waxing_crescent_moon:` | 🌓 `:first_quarter_moon:`          |\n| 🌔 `:waxing_gibbous_moon:`          | 🌕 `:full_moon:`            | 🌖 `:waning_gibbous_moon:`         |\n| 🌗 `:last_quarter_moon:`            | 🌘 `:waning_crescent_moon:` | 🌜 `:last_quarter_moon_with_face:` |\n| 🌛 `:first_quarter_moon_with_face:` | 🌔 `:moon:`                 | 🌍 `:earth_africa:`                |\n| 🌎 `:earth_americas:`               | 🌏 `:earth_asia:`           | 🌋 `:volcano:`                     |\n| 🌌 `:milky_way:`                    | ⛅️ `:partly_sunny:`         |                                   |\n\n## Object 物体\n\n| 🎍 `:bamboo:`                         | 💝 `:gift_heart:`                 | 🎎 `:dolls:`                  |\n| :----------------------------------- | :------------------------------- | :--------------------------- |\n| 🎒 `:school_satchel:`                 | 🎓 `:mortar_board:`               | 🎏 `:flags:`                  |\n| 🎆 `:fireworks:`                      | 🎇 `:sparkler:`                   | 🎐 `:wind_chime:`             |\n| 🎑 `:rice_scene:`                     | 🎃 `:jack_o_lantern:`             | 👻 `:ghost:`                  |\n| 🎅 `:santa:`                          | 🎄 `:christmas_tree:`             | 🎁 `:gift:`                   |\n| 🔔 `:bell:`                           | 🔕 `:no_bell:`                    | 🎋 `:tanabata_tree:`          |\n| 🎉 `:tada:`                           | 🎊 `:confetti_ball:`              | 🎈 `:balloon:`                |\n| 🔮 `:crystal_ball:`                   | 💿 `:cd:`                         | 📀 `:dvd:`                    |\n| 💾 `:floppy_disk:`                    | 📷 `:camera:`                     | 📹 `:video_camera:`           |\n| 🎥 `:movie_camera:`                   | 💻 `:computer:`                   | 📺 `:tv:`                     |\n| 📱 `:iphone:`                         | ☎️ `:phone:`                      | ☎️ `:telephone:`              |\n| 📞 `:telephone_receiver:`             | 📟 `:pager:`                      | 📠 `:fax:`                    |\n| 💽 `:minidisc:`                       | 📼 `:vhs:`                        | 🔉 `:sound:`                  |\n| 🔈 `:speaker:`                        | 🔇 `:mute:`                       | 📢 `:loudspeaker:`            |\n| 📣 `:mega:`                           | ⌛️ `:hourglass:`                  | ⏳ `:hourglass_flowing_sand:` |\n| ⏰ `:alarm_clock:`                    | ⌚️ `:watch:`                      | 📻 `:radio:`                  |\n| 📡 `:satellite:`                      | ➿ `:loop:`                       | 🔍 `:mag:`                    |\n| 🔎 `:mag_right:`                      | 🔓 `:unlock:`                     | 🔒 `:lock:`                   |\n| 🔏 `:lock_with_ink_pen:`              | 🔐 `:closed_lock_with_key:`       | 🔑 `:key:`                    |\n| 💡 `:bulb:`                           | 🔦 `:flashlight:`                 | 🔆 `:high_brightness:`        |\n| 🔅 `:low_brightness:`                 | 🔌 `:electric_plug:`              | 🔋 `:battery:`                |\n| 📲 `:calling:`                        | ✉️ `:email:`                      | 📫 `:mailbox:`                |\n| 📮 `:postbox:`                        | 🛀 `:bath:`                       | 🛁 `:bathtub:`                |\n| 🚿 `:shower:`                         | 🚽 `:toilet:`                     | 🔧 `:wrench:`                 |\n| 🔩 `:nut_and_bolt:`                   | 🔨 `:hammer:`                     | 💺 `:seat:`                   |\n| 💰 `:moneybag:`                       | 💴 `:yen:`                        | 💵 `:dollar:`                 |\n| 💷 `:pound:`                          | 💶 `:euro:`                       | 💳 `:credit_card:`            |\n| 💸 `:money_with_wings:`               | 📧 `:e-mail:`                     | 📥 `:inbox_tray:`             |\n| 📤 `:outbox_tray:`                    | ✉️ `:envelope:`                   | 📨 `:incoming_envelope:`      |\n| 📯 `:postal_horn:`                    | 📪 `:mailbox_closed:`             | 📬 `:mailbox_with_mail:`      |\n| 📭 `:mailbox_with_no_mail:`           | 🚪 `:door:`                       | 🚬 `:smoking:`                |\n| 💣 `:bomb:`                           | 🔫 `:gun:`                        | 🔪 `:hocho:`                  |\n| 💊 `:pill:`                           | 💉 `:syringe:`                    | 📄 `:page_facing_up:`         |\n| 📃 `:page_with_curl:`                 | 📑 `:bookmark_tabs:`              | 📊 `:bar_chart:`              |\n| 📈 `:chart_with_upwards_trend:`       | 📉 `:chart_with_downwards_trend:` | 📜 `:scroll:`                 |\n| 📋 `:clipboard:`                      | 📆 `:calendar:`                   | 📅 `:date:`                   |\n| 📇 `:card_index:`                     | 📁 `:file_folder:`                | 📂 `:open_file_folder:`       |\n| ✂️ `:scissors:`                       | 📌 `:pushpin:`                    | 📎 `:paperclip:`              |\n| ✒️ `:black_nib:`                      | ✏️ `:pencil2:`                    | 📏 `:straight_ruler:`         |\n| 📐 `:triangular_ruler:`               | 📕 `:closed_book:`                | 📗 `:green_book:`             |\n| 📘 `:blue_book:`                      | 📙 `:orange_book:`                | 📓 `:notebook:`               |\n| 📔 `:notebook_with_decorative_cover:` | 📒 `:ledger:`                     | 📚 `:books:`                  |\n| 🔖 `:bookmark:`                       | 📛 `:name_badge:`                 | 🔬 `:microscope:`             |\n| 🔭 `:telescope:`                      | 📰 `:newspaper:`                  | 🏈 `:football:`               |\n| 🏀 `:basketball:`                     | ⚽️ `:soccer:`                     | ⚾️ `:baseball:`               |\n| 🎾 `:tennis:`                         | 🎱 `:8ball:`                      | 🏉 `:rugby_football:`         |\n| 🎳 `:bowling:`                        | ⛳️ `:golf:`                       | 🚵 `:mountain_bicyclist:`     |\n| 🚴 `:bicyclist:`                      | 🏇 `:horse_racing:`               | 🏂 `:snowboarder:`            |\n| 🏊 `:swimmer:`                        | 🏄 `:surfer:`                     | 🎿 `:ski:`                    |\n| ♠️ `:spades:`                         | ♥️ `:hearts:`                     | ♣️ `:clubs:`                  |\n| ♦️ `:diamonds:`                       | 💎 `:gem:`                        | 💍 `:ring:`                   |\n| 🏆 `:trophy:`                         | 🎼 `:musical_score:`              | 🎹 `:musical_keyboard:`       |\n| 🎻 `:violin:`                         | 👾 `:space_invader:`              | 🎮 `:video_game:`             |\n| 🃏 `:black_joker:`                    | 🎴 `:flower_playing_cards:`       | 🎲 `:game_die:`               |\n| 🎯 `:dart:`                           | 🀄️ `:mahjong:`                    | 🎬 `:clapper:`                |\n| 📝 `:memo:`                           | 📝 `:pencil:`                     | 📖 `:book:`                   |\n| 🎨 `:art:`                            | 🎤 `:microphone:`                 | 🎧 `:headphones:`             |\n| 🎺 `:trumpet:`                        | 🎷 `:saxophone:`                  | 🎸 `:guitar:`                 |\n| 👞 `:shoe:`                           | 👡 `:sandal:`                     | 👠 `:high_heel:`              |\n| 💄 `:lipstick:`                       | 👢 `:boot:`                       | 👕 `:shirt:`                  |\n| 👕 `:tshirt:`                         | 👔 `:necktie:`                    | 👚 `:womans_clothes:`         |\n| 👗 `:dress:`                          | 🎽 `:running_shirt_with_sash:`    | 👖 `:jeans:`                  |\n| 👘 `:kimono:`                         | 👙 `:bikini:`                     | 🎀 `:ribbon:`                 |\n| 🎩 `:tophat:`                         | 👑 `:crown:`                      | 👒 `:womans_hat:`             |\n| 👞 `:mans_shoe:`                      | 🌂 `:closed_umbrella:`            | 💼 `:briefcase:`              |\n| 👜 `:handbag:`                        | 👝 `:pouch:`                      | 👛 `:purse:`                  |\n| 👓 `:eyeglasses:`                     | 🎣 `:fishing_pole_and_fish:`      | ☕️ `:coffee:`                 |\n| 🍵 `:tea:`                            | 🍶 `:sake:`                       | 🍼 `:baby_bottle:`            |\n| 🍺 `:beer:`                           | 🍻 `:beers:`                      | 🍸 `:cocktail:`               |\n| 🍹 `:tropical_drink:`                 | 🍷 `:wine_glass:`                 | 🍴 `:fork_and_knife:`         |\n| 🍕 `:pizza:`                          | 🍔 `:hamburger:`                  | 🍟 `:fries:`                  |\n| 🍗 `:poultry_leg:`                    | 🍖 `:meat_on_bone:`               | 🍝 `:spaghetti:`              |\n| 🍛 `:curry:`                          | 🍤 `:fried_shrimp:`               | 🍱 `:bento:`                  |\n| 🍣 `:sushi:`                          | 🍥 `:fish_cake:`                  | 🍙 `:rice_ball:`              |\n| 🍘 `:rice_cracker:`                   | 🍚 `:rice:`                       | 🍜 `:ramen:`                  |\n| 🍲 `:stew:`                           | 🍢 `:oden:`                       | 🍡 `:dango:`                  |\n| 🥚 `:egg:`                            | 🍞 `:bread:`                      | 🍩 `:doughnut:`               |\n| 🍮 `:custard:`                        | 🍦 `:icecream:`                   | 🍨 `:ice_cream:`              |\n| 🍧 `:shaved_ice:`                     | 🎂 `:birthday:`                   | 🍰 `:cake:`                   |\n| 🍪 `:cookie:`                         | 🍫 `:chocolate_bar:`              | 🍬 `:candy:`                  |\n| 🍭 `:lollipop:`                       | 🍯 `:honey_pot:`                  | 🍎 `:apple:`                  |\n| 🍏 `:green_apple:`                    | 🍊 `:tangerine:`                  | 🍋 `:lemon:`                  |\n| 🍒 `:cherries:`                       | 🍇 `:grapes:`                     | 🍉 `:watermelon:`             |\n| 🍓 `:strawberry:`                     | 🍑 `:peach:`                      | 🍈 `:melon:`                  |\n| 🍌 `:banana:`                         | 🍐 `:pear:`                       | 🍍 `:pineapple:`              |\n| 🍠 `:sweet_potato:`                   | 🍆 `:eggplant:`                   | 🍅 `:tomato:`                 |\n| 🌽 `:corn:`                           |                                  |                              |\n\n## Places 地点\n\n| 🏠 `:house:`               | 🏡 `:house_with_garden:`       | 🏫 `:school:`                 |\n| :------------------------ | :---------------------------- | :--------------------------- |\n| 🏢 `:office:`              | 🏣 `:post_office:`             | 🏥 `:hospital:`               |\n| 🏦 `:bank:`                | 🏪 `:convenience_store:`       | 🏩 `:love_hotel:`             |\n| 🏨 `:hotel:`               | 💒 `:wedding:`                 | ⛪️ `:church:`                 |\n| 🏬 `:department_store:`    | 🏤 `:european_post_office:`    | 🌇 `:city_sunrise:`           |\n| 🌆 `:city_sunset:`         | 🏯 `:japanese_castle:`         | 🏰 `:european_castle:`        |\n| ⛺️ `:tent:`                | 🏭 `:factory:`                 | 🗼 `:tokyo_tower:`            |\n| 🗾 `:japan:`               | 🗻 `:mount_fuji:`              | 🌄 `:sunrise_over_mountains:` |\n| 🌅 `:sunrise:`             | 🌠 `:stars:`                   | 🗽 `:statue_of_liberty:`      |\n| 🌉 `:bridge_at_night:`     | 🎠 `:carousel_horse:`          | 🌈 `:rainbow:`                |\n| 🎡 `:ferris_wheel:`        | ⛲️ `:fountain:`                | 🎢 `:roller_coaster:`         |\n| 🚢 `:ship:`                | 🚤 `:speedboat:`               | ⛵️ `:boat:`                   |\n| ⛵️ `:sailboat:`            | 🚣 `:rowboat:`                 | ⚓️ `:anchor:`                 |\n| 🚀 `:rocket:`              | ✈️ `:airplane:`                | 🚁 `:helicopter:`             |\n| 🚂 `:steam_locomotive:`    | 🚊 `:tram:`                    | 🚞 `:mountain_railway:`       |\n| 🚲 `:bike:`                | 🚡 `:aerial_tramway:`          | 🚟 `:suspension_railway:`     |\n| 🚠 `:mountain_cableway:`   | 🚜 `:tractor:`                 | 🚙 `:blue_car:`               |\n| 🚘 `:oncoming_automobile:` | 🚗 `:car:`                     | 🚗 `:red_car:`                |\n| 🚕 `:taxi:`                | 🚖 `:oncoming_taxi:`           | 🚛 `:articulated_lorry:`      |\n| 🚌 `:bus:`                 | 🚍 `:oncoming_bus:`            | 🚨 `:rotating_light:`         |\n| 🚓 `:police_car:`          | 🚔 `:oncoming_police_car:`     | 🚒 `:fire_engine:`            |\n| 🚑 `:ambulance:`           | 🚐 `:minibus:`                 | 🚚 `:truck:`                  |\n| 🚋 `:train:`               | 🚉 `:station:`                 | 🚆 `:train2:`                 |\n| 🚅 `:bullettrain_front:`   | 🚄 `:bullettrain_side:`        | 🚈 `:light_rail:`             |\n| 🚝 `:monorail:`            | 🚃 `:railway_car:`             | 🚎 `:trolleybus:`             |\n| 🎫 `:ticket:`              | ⛽️ `:fuelpump:`                | 🚦 `:vertical_traffic_light:` |\n| 🚥 `:traffic_light:`       | ⚠️ `:warning:`                 | 🚧 `:construction:`           |\n| 🔰 `:beginner:`            | 🏧 `:atm:`                     | 🎰 `:slot_machine:`           |\n| 🚏 `:busstop:`             | 💈 `:barber:`                  | ♨️ `:hotsprings:`             |\n| 🏁 `:checkered_flag:`      | 🎌 `:crossed_flags:`           | 🏮 `:izakaya_lantern:`        |\n| 🗿 `:moyai:`               | 🎪 `:circus_tent:`             | 🎭 `:performing_arts:`        |\n| 📍 `:round_pushpin:`       | 🚩 `:triangular_flag_on_post:` | 🇯🇵 `:jp:`                    |\n| 🇰🇷 `:kr:`                 | 🇨🇳 `:cn:`                     | 🇺🇸 `:us:`                    |\n| 🇫🇷 `:fr:`                 | 🇪🇸 `:es:`                     | 🇮🇹 `:it:`                    |\n| 🇷🇺 `:ru:`                 | 🇬🇧 `:gb:`                     | 🇬🇧 `:uk:`                    |\n| 🇩🇪 `:de:`                 |                               |                              |\n\n## Symbols 符号\n\n| 1️⃣ `:one:`                            | 2️⃣ `:two:`                        | 3️⃣ `:three:`                     |\n| :----------------------------------- | :------------------------------- | :------------------------------ |\n| 4️⃣ `:four:`                           | 5️⃣ `:five:`                       | 6️⃣ `:six:`                       |\n| 7️⃣ `:seven:`                          | 8️⃣ `:eight:`                      | 9️⃣ `:nine:`                      |\n| 🔟 `:keycap_ten:`                     | 🔢 `:1234:`                       | 0️⃣ `:zero:`                      |\n| #️⃣ `:hash:`                           | 🔣 `:symbols:`                    | ◀️ `:arrow_backward:`            |\n| ⬇️ `:arrow_down:`                     | ▶️ `:arrow_forward:`              | ⬅️ `:arrow_left:`                |\n| 🔠 `:capital_abcd:`                   | 🔡 `:abcd:`                       | 🔤 `:abc:`                       |\n| ↙️ `:arrow_lower_left:`               | ↘️ `:arrow_lower_right:`          | ➡️ `:arrow_right:`               |\n| ⬆️ `:arrow_up:`                       | ↖️ `:arrow_upper_left:`           | ↗️ `:arrow_upper_right:`         |\n| ⏬ `:arrow_double_down:`              | ⏫ `:arrow_double_up:`            | 🔽 `:arrow_down_small:`          |\n| ⤵️ `:arrow_heading_down:`             | ⤴️ `:arrow_heading_up:`           | ↩️`:leftwards_arrow_with_hook:`  |\n| ↪️ `:arrow_right_hook:`               | ↔️ `:left_right_arrow:`           | ↕️ `:arrow_up_down:`             |\n| 🔼 `:arrow_up_small:`                 | 🔃 `:arrows_clockwise:`           | 🔄 `:arrows_counterclockwise:`   |\n| ⏪ `:rewind:`                         | ⏩ `:fast_forward:`               | ℹ️ `:information_source:`        |\n| 🆗 `:ok:`                             | 🔀 `:twisted_rightwards_arrows:`  | 🔁 `:repeat:`                    |\n| 🔂 `:repeat_one:`                     | 🆕 `:new:`                        | 🔝 `:top:`                       |\n| 🆙 `:up:`                             | 🆒 `:cool:`                       | 🆓 `:free:`                      |\n| 🆖 `:ng:`                             | 🎦 `:cinema:`                     | 🈁 `:koko:`                      |\n| 📶 `:signal_strength:`                | 🈹 `:u5272:`                      | 🈴 `:u5408:`                     |\n| 🈺 `:u55b6:`                          | 🈯️ `:u6307:`                      | 🈷️ `:u6708:`                     |\n| 🈶 `:u6709:`                          | 🈵 `:u6e80:`                      | 🈚️ `:u7121:`                     |\n| 🈸 `:u7533:`                          | 🈳 `:u7a7a:`                      | 🈲 `:u7981:`                     |\n| 🈂️ `:sa:`                             | 🚻 `:restroom:`                   | 🚹 `:mens:`                      |\n| 🚺 `:womens:`                         | 🚼 `:baby_symbol:`                | 🚭 `:no_smoking:`                |\n| 🅿️ `:parking:`                        | ♿️ `:wheelchair:`                 | 🚇 `:metro:`                     |\n| 🛄 `:baggage_claim:`                  | 🉑 `:accept:`                     | 🚾 `:wc:`                        |\n| 🚰 `:potable_water:`                  | 🚮 `:put_litter_in_its_place:`    | ㊙️ `:secret:`                   |\n| ㊗️ `:congratulations:`               | Ⓜ️ `:m:`                          | 🛂 `:passport_control:`          |\n| 🛅 `:left_luggage:`                   | 🛃 `:customs:`                    | 🉐 `:ideograph_advantage:`       |\n| 🆑 `:cl:`                             | 🆘 `:sos:`                        | 🆔 `:id:`                        |\n| 🚫 `:no_entry_sign:`                  | 🔞 `:underage:`                   | 📵 `:no_mobile_phones:`          |\n| 🚯 `:do_not_litter:`                  | 🚱 `:non-potable_water:`          | 🚳 `:no_bicycles:`               |\n| 🚷 `:no_pedestrians:`                 | 🚸 `:children_crossing:`          | ⛔️ `:no_entry:`                  |\n| ✳️ `:eight_spoked_asterisk:`          | ✴️ `:eight_pointed_black_star:`   | 💟 `:heart_decoration:`          |\n| 🆚 `:vs:`                             | 📳 `:vibration_mode:`             | 📴 `:mobile_phone_off:`          |\n| 💹 `:chart:`                          | 💱 `:currency_exchange:`          | ♈️ `:aries:`                     |\n| ♉️ `:taurus:`                         | ♊️ `:gemini:`                     | ♋️ `:cancer:`                    |\n| ♌️ `:leo:`                            | ♍️ `:virgo:`                      | ♎️ `:libra:`                     |\n| ♏️ `:scorpius:`                       | ♐️ `:sagittarius:`                | ♑️ `:capricorn:`                 |\n| ♒️ `:aquarius:`                       | ♓️ `:pisces:`                     | ⛎ `:ophiuchus:`                 |\n| 🔯 `:six_pointed_star:`               | ❎`:negative_squared_cross_mark:` | 🅰️ `:a:`                         |\n| 🅱️ `:b:`                              | 🆎 `:ab:`                         | 🅾️ `:o2:`                        |\n| 💠`:diamond_shape_with_a_dot_inside:` | ♻️ `:recycle:`                    | 🔚 `:end:`                       |\n| 🔛 `:on:`                             | 🔜 `:soon:`                       | 🕐 `:clock1:`                    |\n| 🕜 `:clock130:`                       | 🕙 `:clock10:`                    | 🕥 `:clock1030:`                 |\n| 🕚 `:clock11:`                        | 🕦 `:clock1130:`                  | 🕛 `:clock12:`                   |\n| 🕧 `:clock1230:`                      | 🕑 `:clock2:`                     | 🕝 `:clock230:`                  |\n| 🕒 `:clock3:`                         | 🕞 `:clock330:`                   | 🕓 `:clock4:`                    |\n| 🕟 `:clock430:`                       | 🕔 `:clock5:`                     | 🕠 `:clock530:`                  |\n| 🕕 `:clock6:`                         | 🕡 `:clock630:`                   | 🕖 `:clock7:`                    |\n| 🕢 `:clock730:`                       | 🕗 `:clock8:`                     | 🕣 `:clock830:`                  |\n| 🕘 `:clock9:`                         | 🕤 `:clock930:`                   | 💲 `:heavy_dollar_sign:`         |\n| ©️ `:copyright:`                      | ®️ `:registered:`                 | ™️ `:tm:`                        |\n| ❌ `:x:`                              | ❗️ `:heavy_exclamation_mark:`     | ‼️ `:bangbang:`                  |\n| ⁉️ `:interrobang:`                    | ⭕️ `:o:`                          | ✖️ `:heavy_multiplication_x:`    |\n| ➕ `:heavy_plus_sign:`                | ➖ `:heavy_minus_sign:`           | ➗ `:heavy_division_sign:`       |\n| 💮 `:white_flower:`                   | 💯 `:100:`                        | ✔️ `:heavy_check_mark:`          |\n| ☑️ `:ballot_box_with_check:`          | 🔘 `:radio_button:`               | 🔗 `:link:`                      |\n| ➰ `:curly_loop:`                     | 〰️ `:wavy_dash:`                 | 〽️ `:part_alternation_mark:`    |\n| 🔱 `:trident:`                        | :black_square: `:black_square:`  | :white_square: `:white_square:` |\n| ✅ `:white_check_mark:`               | 🔲 `:black_square_button:`        | 🔳 `:white_square_button:`       |\n| ⚫️ `:black_circle:`                   | ⚪️ `:white_circle:`               | 🔴 `:red_circle:`                |\n| 🔵 `:large_blue_circle:`              | 🔷 `:large_blue_diamond:`         | 🔶 `:large_orange_diamond:`      |\n| 🔹 `:small_blue_diamond:`             | 🔸 `:small_orange_diamond:`       | 🔺 `:small_red_triangle:`        |\n| 🔻 `:small_red_triangle_down:`        |                                  |                                 |","slug":"Typora-emoji-表情包","published":1,"updated":"2024-12-16T12:11:11.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllynq000bj0kr7hsmd7r8","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021709642.jpg\" alt=\"ball-1845546_1920\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Typora-Emoji\"><a href=\"#Typora-Emoji\" class=\"headerlink\" title=\"Typora Emoji\"></a>Typora Emoji</h1><h2 id=\"People-人物\"><a href=\"#People-人物\" class=\"headerlink\" title=\"People 人物\"></a>People 人物</h2><table>\n<thead>\n<tr>\n<th>😄 <code>:smile:</code></th>\n<th align=\"left\">😆 <code>:laughing:</code></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>😊 <code>:blush:</code></td>\n<td align=\"left\">😃 <code>:smiley:</code></td>\n<td align=\"left\">☺️ <code>:relaxed:</code></td>\n</tr>\n<tr>\n<td>😏 <code>:smirk:</code></td>\n<td align=\"left\">😍 <code>:heart_eyes:</code></td>\n<td align=\"left\">😘 <code>:kissing_heart:</code></td>\n</tr>\n<tr>\n<td>😚 <code>:kissing_closed_eyes:</code></td>\n<td align=\"left\">😳 <code>:flushed:</code></td>\n<td align=\"left\">😌 <code>:relieved:</code></td>\n</tr>\n<tr>\n<td>😆 <code>:satisfied:</code></td>\n<td align=\"left\">😁 <code>:grin:</code></td>\n<td align=\"left\">😉 <code>:wink:</code></td>\n</tr>\n<tr>\n<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>\n<td align=\"left\">😝 <code>:stuck_out_tongue_closed_eyes:</code></td>\n<td align=\"left\">😀 <code>:grinning:</code></td>\n</tr>\n<tr>\n<td>😗 <code>:kissing:</code></td>\n<td align=\"left\">😙 <code>:kissing_smiling_eyes:</code></td>\n<td align=\"left\">😛 <code>:stuck_out_tongue:</code></td>\n</tr>\n<tr>\n<td>😴 <code>:sleeping:</code></td>\n<td align=\"left\">😟 <code>:worried:</code></td>\n<td align=\"left\">😦 <code>:frowning:</code></td>\n</tr>\n<tr>\n<td>😧 <code>:anguished:</code></td>\n<td align=\"left\">😮 <code>:open_mouth:</code></td>\n<td align=\"left\">😬 <code>:grimacing:</code></td>\n</tr>\n<tr>\n<td>😕 <code>:confused:</code></td>\n<td align=\"left\">😯 <code>:hushed:</code></td>\n<td align=\"left\">😑 <code>:expressionless:</code></td>\n</tr>\n<tr>\n<td>😒 <code>:unamused:</code></td>\n<td align=\"left\">😅 <code>:sweat_smile:</code></td>\n<td align=\"left\">😓 <code>:sweat:</code></td>\n</tr>\n<tr>\n<td>😥 <code>:disappointed_relieved:</code></td>\n<td align=\"left\">😩 <code>:weary:</code></td>\n<td align=\"left\">😔 <code>:pensive:</code></td>\n</tr>\n<tr>\n<td>😞 <code>:disappointed:</code></td>\n<td align=\"left\">😖 <code>:confounded:</code></td>\n<td align=\"left\">😨 <code>:fearful:</code></td>\n</tr>\n<tr>\n<td>😰 <code>:cold_sweat:</code></td>\n<td align=\"left\">😣 <code>:persevere:</code></td>\n<td align=\"left\">😢 <code>:cry:</code></td>\n</tr>\n<tr>\n<td>😭 <code>:sob:</code></td>\n<td align=\"left\">😂 <code>:joy:</code></td>\n<td align=\"left\">😲 <code>:astonished:</code></td>\n</tr>\n<tr>\n<td>😱 <code>:scream:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\">😫 <code>:tired_face:</code></td>\n</tr>\n<tr>\n<td>😠 <code>:angry:</code></td>\n<td align=\"left\">😡 <code>:rage:</code></td>\n<td align=\"left\">😤 <code>:triumph:</code></td>\n</tr>\n<tr>\n<td>😪 <code>:sleepy:</code></td>\n<td align=\"left\">😋 <code>:yum:</code></td>\n<td align=\"left\">😷 <code>:mask:</code></td>\n</tr>\n<tr>\n<td>😎 <code>:sunglasses:</code></td>\n<td align=\"left\">😵 <code>:dizzy_face:</code></td>\n<td align=\"left\">👿 <code>:imp:</code></td>\n</tr>\n<tr>\n<td>😈 <code>:smiling_imp:</code></td>\n<td align=\"left\">😐 <code>:neutral_face:</code></td>\n<td align=\"left\">😶 <code>:no_mouth:</code></td>\n</tr>\n<tr>\n<td>😇 <code>:innocent:</code></td>\n<td align=\"left\">👽 <code>:alien:</code></td>\n<td align=\"left\">💛 <code>:yellow_heart:</code></td>\n</tr>\n<tr>\n<td>💙 <code>:blue_heart:</code></td>\n<td align=\"left\">💜 <code>:purple_heart:</code></td>\n<td align=\"left\">❤️ <code>:heart:</code></td>\n</tr>\n<tr>\n<td>💚 <code>:green_heart:</code></td>\n<td align=\"left\">💔 <code>:broken_heart:</code></td>\n<td align=\"left\">💓 <code>:heartbeat:</code></td>\n</tr>\n<tr>\n<td>💗 <code>:heartpulse:</code></td>\n<td align=\"left\">💕 <code>:two_hearts:</code></td>\n<td align=\"left\">💞 <code>:revolving_hearts:</code></td>\n</tr>\n<tr>\n<td>💘 <code>:cupid:</code></td>\n<td align=\"left\">💖 <code>:sparkling_heart:</code></td>\n<td align=\"left\">✨ <code>:sparkles:</code></td>\n</tr>\n<tr>\n<td>⭐️ <code>:star:</code></td>\n<td align=\"left\">🌟 <code>:star2:</code></td>\n<td align=\"left\">💫 <code>:dizzy:</code></td>\n</tr>\n<tr>\n<td>💥 <code>:boom:</code></td>\n<td align=\"left\">💥 <code>:collision:</code></td>\n<td align=\"left\">💢 <code>:anger:</code></td>\n</tr>\n<tr>\n<td>❗️ <code>:exclamation:</code></td>\n<td align=\"left\">❓ <code>:question:</code></td>\n<td align=\"left\">❕ <code>:grey_exclamation:</code></td>\n</tr>\n<tr>\n<td>❔ <code>:grey_question:</code></td>\n<td align=\"left\">💤 <code>:zzz:</code></td>\n<td align=\"left\">💨 <code>:dash:</code></td>\n</tr>\n<tr>\n<td>💦 <code>:sweat_drops:</code></td>\n<td align=\"left\">🎶 <code>:notes:</code></td>\n<td align=\"left\">🎵 <code>:musical_note:</code></td>\n</tr>\n<tr>\n<td>🔥 <code>:fire:</code></td>\n<td align=\"left\">💩 <code>:hankey:</code></td>\n<td align=\"left\">💩 <code>:poop:</code></td>\n</tr>\n<tr>\n<td>💩 <code>:shit:</code></td>\n<td align=\"left\">👍 <code>:+1:</code></td>\n<td align=\"left\">👍 <code>:thumbsup:</code></td>\n</tr>\n<tr>\n<td>👎 <code>:-1:</code></td>\n<td align=\"left\">👎 <code>:thumbsdown:</code></td>\n<td align=\"left\">👌 <code>:ok_hand:</code></td>\n</tr>\n<tr>\n<td>👊 <code>:punch:</code></td>\n<td align=\"left\">👊 <code>:facepunch:</code></td>\n<td align=\"left\">✊ <code>:fist:</code></td>\n</tr>\n<tr>\n<td>✌️ <code>:v:</code></td>\n<td align=\"left\">👋 <code>:wave:</code></td>\n<td align=\"left\">✋ <code>:hand:</code></td>\n</tr>\n<tr>\n<td>✋ <code>:raised_hand:</code></td>\n<td align=\"left\">👐 <code>:open_hands:</code></td>\n<td align=\"left\">☝️ <code>:point_up:</code></td>\n</tr>\n<tr>\n<td>👇 <code>:point_down:</code></td>\n<td align=\"left\">👈 <code>:point_left:</code></td>\n<td align=\"left\">👉 <code>:point_right:</code></td>\n</tr>\n<tr>\n<td>🙌 <code>:raised_hands:</code></td>\n<td align=\"left\">🙏 <code>:pray:</code></td>\n<td align=\"left\">👆 <code>:point_up_2:</code></td>\n</tr>\n<tr>\n<td>👏 <code>:clap:</code></td>\n<td align=\"left\">💪 <code>:muscle:</code></td>\n<td align=\"left\">🤘 <code>:metal:</code></td>\n</tr>\n<tr>\n<td>🖕 <code>:fu:</code></td>\n<td align=\"left\">🚶 <code>:walking:</code></td>\n<td align=\"left\">🏃 <code>:runner:</code></td>\n</tr>\n<tr>\n<td>🏃 <code>:running:</code></td>\n<td align=\"left\">👫 <code>:couple:</code></td>\n<td align=\"left\">👪 <code>:family:</code></td>\n</tr>\n<tr>\n<td>👬 <code>:two_men_holding_hands:</code></td>\n<td align=\"left\">👭 <code>:two_women_holding_hands:</code></td>\n<td align=\"left\">💃 <code>:dancer:</code></td>\n</tr>\n<tr>\n<td>👯 <code>:dancers:</code></td>\n<td align=\"left\">🙆 <code>:ok_woman:</code></td>\n<td align=\"left\">🙅 <code>:no_good:</code></td>\n</tr>\n<tr>\n<td>💁 <code>:information_desk_person:</code></td>\n<td align=\"left\">🙋 <code>:raising_hand:</code></td>\n<td align=\"left\">👰 <code>:bride_with_veil:</code></td>\n</tr>\n<tr>\n<td>🙎 <code>:person_with_pouting_face:</code></td>\n<td align=\"left\">🙍 <code>:person_frowning:</code></td>\n<td align=\"left\">🙇 <code>:bow:</code></td>\n</tr>\n<tr>\n<td>:couplekiss: <code>:couplekiss:</code></td>\n<td align=\"left\">💑 <code>:couple_with_heart:</code></td>\n<td align=\"left\">💆 <code>:massage:</code></td>\n</tr>\n<tr>\n<td>💇 <code>:haircut:</code></td>\n<td align=\"left\">💅 <code>:nail_care:</code></td>\n<td align=\"left\">👦 <code>:boy:</code></td>\n</tr>\n<tr>\n<td>👧 <code>:girl:</code></td>\n<td align=\"left\">👩 <code>:woman:</code></td>\n<td align=\"left\">👨 <code>:man:</code></td>\n</tr>\n<tr>\n<td>👶 <code>:baby:</code></td>\n<td align=\"left\">👵 <code>:older_woman:</code></td>\n<td align=\"left\">👴 <code>:older_man:</code></td>\n</tr>\n<tr>\n<td>👱 <code>:person_with_blond_hair:</code></td>\n<td align=\"left\">👲 <code>:man_with_gua_pi_mao:</code></td>\n<td align=\"left\">👳 <code>:man_with_turban:</code></td>\n</tr>\n<tr>\n<td>👷 <code>:construction_worker:</code></td>\n<td align=\"left\">👮 <code>:cop:</code></td>\n<td align=\"left\">👼 <code>:angel:</code></td>\n</tr>\n<tr>\n<td>👸 <code>:princess:</code></td>\n<td align=\"left\">😺 <code>:smiley_cat:</code></td>\n<td align=\"left\">😸 <code>:smile_cat:</code></td>\n</tr>\n<tr>\n<td>😻 <code>:heart_eyes_cat:</code></td>\n<td align=\"left\">😽 <code>:kissing_cat:</code></td>\n<td align=\"left\">😼 <code>:smirk_cat:</code></td>\n</tr>\n<tr>\n<td>🙀 <code>:scream_cat:</code></td>\n<td align=\"left\">😿 <code>:crying_cat_face:</code></td>\n<td align=\"left\">😹 <code>:joy_cat:</code></td>\n</tr>\n<tr>\n<td>😾 <code>:pouting_cat:</code></td>\n<td align=\"left\">👹 <code>:japanese_ogre:</code></td>\n<td align=\"left\">👺 <code>:japanese_goblin:</code></td>\n</tr>\n<tr>\n<td>🙈 <code>:see_no_evil:</code></td>\n<td align=\"left\">🙉 <code>:hear_no_evil:</code></td>\n<td align=\"left\">🙊 <code>:speak_no_evil:</code></td>\n</tr>\n<tr>\n<td>💂 <code>:guardsman:</code></td>\n<td align=\"left\">💀 <code>:skull:</code></td>\n<td align=\"left\">🐾 <code>:feet:</code></td>\n</tr>\n<tr>\n<td>👄 <code>:lips:</code></td>\n<td align=\"left\">💋 <code>:kiss:</code></td>\n<td align=\"left\">💧 <code>:droplet:</code></td>\n</tr>\n<tr>\n<td>👂 <code>:ear:</code></td>\n<td align=\"left\">👀 <code>:eyes:</code></td>\n<td align=\"left\">👃 <code>:nose:</code></td>\n</tr>\n<tr>\n<td>👅 <code>:tongue:</code></td>\n<td align=\"left\">💌 <code>:love_letter:</code></td>\n<td align=\"left\">👤 <code>:bust_in_silhouette:</code></td>\n</tr>\n<tr>\n<td>👥 <code>:busts_in_silhouette:</code></td>\n<td align=\"left\">💬 <code>:speech_balloon:</code></td>\n<td align=\"left\">💭 <code>:thought_balloon:</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"Nature-自然\"><a href=\"#Nature-自然\" class=\"headerlink\" title=\"Nature 自然\"></a>Nature 自然</h2><table>\n<thead>\n<tr>\n<th align=\"left\">☀️ <code>:sunny:</code></th>\n<th align=\"left\">☔️ <code>:umbrella:</code></th>\n<th align=\"left\">☁️ <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">❄️ <code>:snowflake:</code></td>\n<td align=\"left\">⛄️ <code>:snowman:</code></td>\n<td align=\"left\">⚡️ <code>:zap:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌀 <code>:cyclone:</code></td>\n<td align=\"left\">🌁 <code>:foggy:</code></td>\n<td align=\"left\">🌊 <code>:ocean:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐱 <code>:cat:</code></td>\n<td align=\"left\">🐶 <code>:dog:</code></td>\n<td align=\"left\">🐭 <code>:mouse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐹 <code>:hamster:</code></td>\n<td align=\"left\">🐰 <code>:rabbit:</code></td>\n<td align=\"left\">🐺 <code>:wolf:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐸 <code>:frog:</code></td>\n<td align=\"left\">🐯 <code>:tiger:</code></td>\n<td align=\"left\">🐨 <code>:koala:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐻 <code>:bear:</code></td>\n<td align=\"left\">🐷 <code>:pig:</code></td>\n<td align=\"left\">🐽 <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐮 <code>:cow:</code></td>\n<td align=\"left\">🐗 <code>:boar:</code></td>\n<td align=\"left\">🐵 <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐒 <code>:monkey:</code></td>\n<td align=\"left\">🐴 <code>:horse:</code></td>\n<td align=\"left\">🐎 <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐫 <code>:camel:</code></td>\n<td align=\"left\">🐑 <code>:sheep:</code></td>\n<td align=\"left\">🐘 <code>:elephant:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐼 <code>:panda_face:</code></td>\n<td align=\"left\">🐍 <code>:snake:</code></td>\n<td align=\"left\">🐦 <code>:bird:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐤 <code>:baby_chick:</code></td>\n<td align=\"left\">🐥 <code>:hatched_chick:</code></td>\n<td align=\"left\">🐣 <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐔 <code>:chicken:</code></td>\n<td align=\"left\">🐧 <code>:penguin:</code></td>\n<td align=\"left\">🐢 <code>:turtle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐛 <code>:bug:</code></td>\n<td align=\"left\">🐝 <code>:honeybee:</code></td>\n<td align=\"left\">🐜 <code>:ant:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐞 <code>:beetle:</code></td>\n<td align=\"left\">🐌 <code>:snail:</code></td>\n<td align=\"left\">🐙 <code>:octopus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐠 <code>:tropical_fish:</code></td>\n<td align=\"left\">🐟 <code>:fish:</code></td>\n<td align=\"left\">🐳 <code>:whale:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐋 <code>:whale2:</code></td>\n<td align=\"left\">🐬 <code>:dolphin:</code></td>\n<td align=\"left\">🐄 <code>:cow2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐏 <code>:ram:</code></td>\n<td align=\"left\">🐀 <code>:rat:</code></td>\n<td align=\"left\">🐃 <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐅 <code>:tiger2:</code></td>\n<td align=\"left\">🐇 <code>:rabbit2:</code></td>\n<td align=\"left\">🐉 <code>:dragon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐐 <code>:goat:</code></td>\n<td align=\"left\">🐓 <code>:rooster:</code></td>\n<td align=\"left\">🐕 <code>:dog2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐖 <code>:pig2:</code></td>\n<td align=\"left\">🐁 <code>:mouse2:</code></td>\n<td align=\"left\">🐂 <code>:ox:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐲 <code>:dragon_face:</code></td>\n<td align=\"left\">🐡 <code>:blowfish:</code></td>\n<td align=\"left\">🐊 <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐪 <code>:dromedary_camel:</code></td>\n<td align=\"left\">🐆 <code>:leopard:</code></td>\n<td align=\"left\">🐈 <code>:cat2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐩 <code>:poodle:</code></td>\n<td align=\"left\">🐾 <code>:paw_prints:</code></td>\n<td align=\"left\">💐 <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌸 <code>:cherry_blossom:</code></td>\n<td align=\"left\">🌷 <code>:tulip:</code></td>\n<td align=\"left\">🍀 <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌹 <code>:rose:</code></td>\n<td align=\"left\">🌻 <code>:sunflower:</code></td>\n<td align=\"left\">🌺 <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍁 <code>:maple_leaf:</code></td>\n<td align=\"left\">🍃 <code>:leaves:</code></td>\n<td align=\"left\">🍂 <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌿 <code>:herb:</code></td>\n<td align=\"left\">🍄 <code>:mushroom:</code></td>\n<td align=\"left\">🌵 <code>:cactus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌴 <code>:palm_tree:</code></td>\n<td align=\"left\">🌲 <code>:evergreen_tree:</code></td>\n<td align=\"left\">🌳 <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌰 <code>:chestnut:</code></td>\n<td align=\"left\">🌱 <code>:seedling:</code></td>\n<td align=\"left\">🌼 <code>:blossom:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌾 <code>:ear_of_rice:</code></td>\n<td align=\"left\">🐚 <code>:shell:</code></td>\n<td align=\"left\">🌐 <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌞 <code>:sun_with_face:</code></td>\n<td align=\"left\">🌝 <code>:full_moon_with_face:</code></td>\n<td align=\"left\">🌚 <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌑 <code>:new_moon:</code></td>\n<td align=\"left\">🌒 <code>:waxing_crescent_moon:</code></td>\n<td align=\"left\">🌓 <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌔 <code>:waxing_gibbous_moon:</code></td>\n<td align=\"left\">🌕 <code>:full_moon:</code></td>\n<td align=\"left\">🌖 <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌗 <code>:last_quarter_moon:</code></td>\n<td align=\"left\">🌘 <code>:waning_crescent_moon:</code></td>\n<td align=\"left\">🌜 <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌛 <code>:first_quarter_moon_with_face:</code></td>\n<td align=\"left\">🌔 <code>:moon:</code></td>\n<td align=\"left\">🌍 <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌎 <code>:earth_americas:</code></td>\n<td align=\"left\">🌏 <code>:earth_asia:</code></td>\n<td align=\"left\">🌋 <code>:volcano:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌌 <code>:milky_way:</code></td>\n<td align=\"left\">⛅️ <code>:partly_sunny:</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Object-物体\"><a href=\"#Object-物体\" class=\"headerlink\" title=\"Object 物体\"></a>Object 物体</h2><table>\n<thead>\n<tr>\n<th align=\"left\">🎍 <code>:bamboo:</code></th>\n<th align=\"left\">💝 <code>:gift_heart:</code></th>\n<th align=\"left\">🎎 <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🎒 <code>:school_satchel:</code></td>\n<td align=\"left\">🎓 <code>:mortar_board:</code></td>\n<td align=\"left\">🎏 <code>:flags:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎆 <code>:fireworks:</code></td>\n<td align=\"left\">🎇 <code>:sparkler:</code></td>\n<td align=\"left\">🎐 <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎑 <code>:rice_scene:</code></td>\n<td align=\"left\">🎃 <code>:jack_o_lantern:</code></td>\n<td align=\"left\">👻 <code>:ghost:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎅 <code>:santa:</code></td>\n<td align=\"left\">🎄 <code>:christmas_tree:</code></td>\n<td align=\"left\">🎁 <code>:gift:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔔 <code>:bell:</code></td>\n<td align=\"left\">🔕 <code>:no_bell:</code></td>\n<td align=\"left\">🎋 <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎉 <code>:tada:</code></td>\n<td align=\"left\">🎊 <code>:confetti_ball:</code></td>\n<td align=\"left\">🎈 <code>:balloon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔮 <code>:crystal_ball:</code></td>\n<td align=\"left\">💿 <code>:cd:</code></td>\n<td align=\"left\">📀 <code>:dvd:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💾 <code>:floppy_disk:</code></td>\n<td align=\"left\">📷 <code>:camera:</code></td>\n<td align=\"left\">📹 <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎥 <code>:movie_camera:</code></td>\n<td align=\"left\">💻 <code>:computer:</code></td>\n<td align=\"left\">📺 <code>:tv:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📱 <code>:iphone:</code></td>\n<td align=\"left\">☎️ <code>:phone:</code></td>\n<td align=\"left\">☎️ <code>:telephone:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📞 <code>:telephone_receiver:</code></td>\n<td align=\"left\">📟 <code>:pager:</code></td>\n<td align=\"left\">📠 <code>:fax:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💽 <code>:minidisc:</code></td>\n<td align=\"left\">📼 <code>:vhs:</code></td>\n<td align=\"left\">🔉 <code>:sound:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔈 <code>:speaker:</code></td>\n<td align=\"left\">🔇 <code>:mute:</code></td>\n<td align=\"left\">📢 <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📣 <code>:mega:</code></td>\n<td align=\"left\">⌛️ <code>:hourglass:</code></td>\n<td align=\"left\">⏳ <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏰ <code>:alarm_clock:</code></td>\n<td align=\"left\">⌚️ <code>:watch:</code></td>\n<td align=\"left\">📻 <code>:radio:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📡 <code>:satellite:</code></td>\n<td align=\"left\">➿ <code>:loop:</code></td>\n<td align=\"left\">🔍 <code>:mag:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔎 <code>:mag_right:</code></td>\n<td align=\"left\">🔓 <code>:unlock:</code></td>\n<td align=\"left\">🔒 <code>:lock:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔏 <code>:lock_with_ink_pen:</code></td>\n<td align=\"left\">🔐 <code>:closed_lock_with_key:</code></td>\n<td align=\"left\">🔑 <code>:key:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💡 <code>:bulb:</code></td>\n<td align=\"left\">🔦 <code>:flashlight:</code></td>\n<td align=\"left\">🔆 <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔅 <code>:low_brightness:</code></td>\n<td align=\"left\">🔌 <code>:electric_plug:</code></td>\n<td align=\"left\">🔋 <code>:battery:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📲 <code>:calling:</code></td>\n<td align=\"left\">✉️ <code>:email:</code></td>\n<td align=\"left\">📫 <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📮 <code>:postbox:</code></td>\n<td align=\"left\">🛀 <code>:bath:</code></td>\n<td align=\"left\">🛁 <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚿 <code>:shower:</code></td>\n<td align=\"left\">🚽 <code>:toilet:</code></td>\n<td align=\"left\">🔧 <code>:wrench:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔩 <code>:nut_and_bolt:</code></td>\n<td align=\"left\">🔨 <code>:hammer:</code></td>\n<td align=\"left\">💺 <code>:seat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💰 <code>:moneybag:</code></td>\n<td align=\"left\">💴 <code>:yen:</code></td>\n<td align=\"left\">💵 <code>:dollar:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💷 <code>:pound:</code></td>\n<td align=\"left\">💶 <code>:euro:</code></td>\n<td align=\"left\">💳 <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💸 <code>:money_with_wings:</code></td>\n<td align=\"left\">📧 <code>:e-mail:</code></td>\n<td align=\"left\">📥 <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📤 <code>:outbox_tray:</code></td>\n<td align=\"left\">✉️ <code>:envelope:</code></td>\n<td align=\"left\">📨 <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📯 <code>:postal_horn:</code></td>\n<td align=\"left\">📪 <code>:mailbox_closed:</code></td>\n<td align=\"left\">📬 <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📭 <code>:mailbox_with_no_mail:</code></td>\n<td align=\"left\">🚪 <code>:door:</code></td>\n<td align=\"left\">🚬 <code>:smoking:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💣 <code>:bomb:</code></td>\n<td align=\"left\">🔫 <code>:gun:</code></td>\n<td align=\"left\">🔪 <code>:hocho:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💊 <code>:pill:</code></td>\n<td align=\"left\">💉 <code>:syringe:</code></td>\n<td align=\"left\">📄 <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📃 <code>:page_with_curl:</code></td>\n<td align=\"left\">📑 <code>:bookmark_tabs:</code></td>\n<td align=\"left\">📊 <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📈 <code>:chart_with_upwards_trend:</code></td>\n<td align=\"left\">📉 <code>:chart_with_downwards_trend:</code></td>\n<td align=\"left\">📜 <code>:scroll:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📋 <code>:clipboard:</code></td>\n<td align=\"left\">📆 <code>:calendar:</code></td>\n<td align=\"left\">📅 <code>:date:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📇 <code>:card_index:</code></td>\n<td align=\"left\">📁 <code>:file_folder:</code></td>\n<td align=\"left\">📂 <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✂️ <code>:scissors:</code></td>\n<td align=\"left\">📌 <code>:pushpin:</code></td>\n<td align=\"left\">📎 <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✒️ <code>:black_nib:</code></td>\n<td align=\"left\">✏️ <code>:pencil2:</code></td>\n<td align=\"left\">📏 <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📐 <code>:triangular_ruler:</code></td>\n<td align=\"left\">📕 <code>:closed_book:</code></td>\n<td align=\"left\">📗 <code>:green_book:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📘 <code>:blue_book:</code></td>\n<td align=\"left\">📙 <code>:orange_book:</code></td>\n<td align=\"left\">📓 <code>:notebook:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📔 <code>:notebook_with_decorative_cover:</code></td>\n<td align=\"left\">📒 <code>:ledger:</code></td>\n<td align=\"left\">📚 <code>:books:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔖 <code>:bookmark:</code></td>\n<td align=\"left\">📛 <code>:name_badge:</code></td>\n<td align=\"left\">🔬 <code>:microscope:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔭 <code>:telescope:</code></td>\n<td align=\"left\">📰 <code>:newspaper:</code></td>\n<td align=\"left\">🏈 <code>:football:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏀 <code>:basketball:</code></td>\n<td align=\"left\">⚽️ <code>:soccer:</code></td>\n<td align=\"left\">⚾️ <code>:baseball:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎾 <code>:tennis:</code></td>\n<td align=\"left\">🎱 <code>:8ball:</code></td>\n<td align=\"left\">🏉 <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎳 <code>:bowling:</code></td>\n<td align=\"left\">⛳️ <code>:golf:</code></td>\n<td align=\"left\">🚵 <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚴 <code>:bicyclist:</code></td>\n<td align=\"left\">🏇 <code>:horse_racing:</code></td>\n<td align=\"left\">🏂 <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏊 <code>:swimmer:</code></td>\n<td align=\"left\">🏄 <code>:surfer:</code></td>\n<td align=\"left\">🎿 <code>:ski:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♠️ <code>:spades:</code></td>\n<td align=\"left\">♥️ <code>:hearts:</code></td>\n<td align=\"left\">♣️ <code>:clubs:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♦️ <code>:diamonds:</code></td>\n<td align=\"left\">💎 <code>:gem:</code></td>\n<td align=\"left\">💍 <code>:ring:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏆 <code>:trophy:</code></td>\n<td align=\"left\">🎼 <code>:musical_score:</code></td>\n<td align=\"left\">🎹 <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎻 <code>:violin:</code></td>\n<td align=\"left\">👾 <code>:space_invader:</code></td>\n<td align=\"left\">🎮 <code>:video_game:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🃏 <code>:black_joker:</code></td>\n<td align=\"left\">🎴 <code>:flower_playing_cards:</code></td>\n<td align=\"left\">🎲 <code>:game_die:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎯 <code>:dart:</code></td>\n<td align=\"left\">🀄️ <code>:mahjong:</code></td>\n<td align=\"left\">🎬 <code>:clapper:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📝 <code>:memo:</code></td>\n<td align=\"left\">📝 <code>:pencil:</code></td>\n<td align=\"left\">📖 <code>:book:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎨 <code>:art:</code></td>\n<td align=\"left\">🎤 <code>:microphone:</code></td>\n<td align=\"left\">🎧 <code>:headphones:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎺 <code>:trumpet:</code></td>\n<td align=\"left\">🎷 <code>:saxophone:</code></td>\n<td align=\"left\">🎸 <code>:guitar:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👞 <code>:shoe:</code></td>\n<td align=\"left\">👡 <code>:sandal:</code></td>\n<td align=\"left\">👠 <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💄 <code>:lipstick:</code></td>\n<td align=\"left\">👢 <code>:boot:</code></td>\n<td align=\"left\">👕 <code>:shirt:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👕 <code>:tshirt:</code></td>\n<td align=\"left\">👔 <code>:necktie:</code></td>\n<td align=\"left\">👚 <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👗 <code>:dress:</code></td>\n<td align=\"left\">🎽 <code>:running_shirt_with_sash:</code></td>\n<td align=\"left\">👖 <code>:jeans:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👘 <code>:kimono:</code></td>\n<td align=\"left\">👙 <code>:bikini:</code></td>\n<td align=\"left\">🎀 <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎩 <code>:tophat:</code></td>\n<td align=\"left\">👑 <code>:crown:</code></td>\n<td align=\"left\">👒 <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👞 <code>:mans_shoe:</code></td>\n<td align=\"left\">🌂 <code>:closed_umbrella:</code></td>\n<td align=\"left\">💼 <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👜 <code>:handbag:</code></td>\n<td align=\"left\">👝 <code>:pouch:</code></td>\n<td align=\"left\">👛 <code>:purse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👓 <code>:eyeglasses:</code></td>\n<td align=\"left\">🎣 <code>:fishing_pole_and_fish:</code></td>\n<td align=\"left\">☕️ <code>:coffee:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍵 <code>:tea:</code></td>\n<td align=\"left\">🍶 <code>:sake:</code></td>\n<td align=\"left\">🍼 <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍺 <code>:beer:</code></td>\n<td align=\"left\">🍻 <code>:beers:</code></td>\n<td align=\"left\">🍸 <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍹 <code>:tropical_drink:</code></td>\n<td align=\"left\">🍷 <code>:wine_glass:</code></td>\n<td align=\"left\">🍴 <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍕 <code>:pizza:</code></td>\n<td align=\"left\">🍔 <code>:hamburger:</code></td>\n<td align=\"left\">🍟 <code>:fries:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍗 <code>:poultry_leg:</code></td>\n<td align=\"left\">🍖 <code>:meat_on_bone:</code></td>\n<td align=\"left\">🍝 <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍛 <code>:curry:</code></td>\n<td align=\"left\">🍤 <code>:fried_shrimp:</code></td>\n<td align=\"left\">🍱 <code>:bento:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍣 <code>:sushi:</code></td>\n<td align=\"left\">🍥 <code>:fish_cake:</code></td>\n<td align=\"left\">🍙 <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍘 <code>:rice_cracker:</code></td>\n<td align=\"left\">🍚 <code>:rice:</code></td>\n<td align=\"left\">🍜 <code>:ramen:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍲 <code>:stew:</code></td>\n<td align=\"left\">🍢 <code>:oden:</code></td>\n<td align=\"left\">🍡 <code>:dango:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🥚 <code>:egg:</code></td>\n<td align=\"left\">🍞 <code>:bread:</code></td>\n<td align=\"left\">🍩 <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍮 <code>:custard:</code></td>\n<td align=\"left\">🍦 <code>:icecream:</code></td>\n<td align=\"left\">🍨 <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍧 <code>:shaved_ice:</code></td>\n<td align=\"left\">🎂 <code>:birthday:</code></td>\n<td align=\"left\">🍰 <code>:cake:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍪 <code>:cookie:</code></td>\n<td align=\"left\">🍫 <code>:chocolate_bar:</code></td>\n<td align=\"left\">🍬 <code>:candy:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍭 <code>:lollipop:</code></td>\n<td align=\"left\">🍯 <code>:honey_pot:</code></td>\n<td align=\"left\">🍎 <code>:apple:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍏 <code>:green_apple:</code></td>\n<td align=\"left\">🍊 <code>:tangerine:</code></td>\n<td align=\"left\">🍋 <code>:lemon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍒 <code>:cherries:</code></td>\n<td align=\"left\">🍇 <code>:grapes:</code></td>\n<td align=\"left\">🍉 <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍓 <code>:strawberry:</code></td>\n<td align=\"left\">🍑 <code>:peach:</code></td>\n<td align=\"left\">🍈 <code>:melon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍌 <code>:banana:</code></td>\n<td align=\"left\">🍐 <code>:pear:</code></td>\n<td align=\"left\">🍍 <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍠 <code>:sweet_potato:</code></td>\n<td align=\"left\">🍆 <code>:eggplant:</code></td>\n<td align=\"left\">🍅 <code>:tomato:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌽 <code>:corn:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Places-地点\"><a href=\"#Places-地点\" class=\"headerlink\" title=\"Places 地点\"></a>Places 地点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">🏠 <code>:house:</code></th>\n<th align=\"left\">🏡 <code>:house_with_garden:</code></th>\n<th align=\"left\">🏫 <code>:school:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🏢 <code>:office:</code></td>\n<td align=\"left\">🏣 <code>:post_office:</code></td>\n<td align=\"left\">🏥 <code>:hospital:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏦 <code>:bank:</code></td>\n<td align=\"left\">🏪 <code>:convenience_store:</code></td>\n<td align=\"left\">🏩 <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏨 <code>:hotel:</code></td>\n<td align=\"left\">💒 <code>:wedding:</code></td>\n<td align=\"left\">⛪️ <code>:church:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏬 <code>:department_store:</code></td>\n<td align=\"left\">🏤 <code>:european_post_office:</code></td>\n<td align=\"left\">🌇 <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌆 <code>:city_sunset:</code></td>\n<td align=\"left\">🏯 <code>:japanese_castle:</code></td>\n<td align=\"left\">🏰 <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⛺️ <code>:tent:</code></td>\n<td align=\"left\">🏭 <code>:factory:</code></td>\n<td align=\"left\">🗼 <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🗾 <code>:japan:</code></td>\n<td align=\"left\">🗻 <code>:mount_fuji:</code></td>\n<td align=\"left\">🌄 <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌅 <code>:sunrise:</code></td>\n<td align=\"left\">🌠 <code>:stars:</code></td>\n<td align=\"left\">🗽 <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌉 <code>:bridge_at_night:</code></td>\n<td align=\"left\">🎠 <code>:carousel_horse:</code></td>\n<td align=\"left\">🌈 <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎡 <code>:ferris_wheel:</code></td>\n<td align=\"left\">⛲️ <code>:fountain:</code></td>\n<td align=\"left\">🎢 <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚢 <code>:ship:</code></td>\n<td align=\"left\">🚤 <code>:speedboat:</code></td>\n<td align=\"left\">⛵️ <code>:boat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⛵️ <code>:sailboat:</code></td>\n<td align=\"left\">🚣 <code>:rowboat:</code></td>\n<td align=\"left\">⚓️ <code>:anchor:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚀 <code>:rocket:</code></td>\n<td align=\"left\">✈️ <code>:airplane:</code></td>\n<td align=\"left\">🚁 <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚂 <code>:steam_locomotive:</code></td>\n<td align=\"left\">🚊 <code>:tram:</code></td>\n<td align=\"left\">🚞 <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚲 <code>:bike:</code></td>\n<td align=\"left\">🚡 <code>:aerial_tramway:</code></td>\n<td align=\"left\">🚟 <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚠 <code>:mountain_cableway:</code></td>\n<td align=\"left\">🚜 <code>:tractor:</code></td>\n<td align=\"left\">🚙 <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚘 <code>:oncoming_automobile:</code></td>\n<td align=\"left\">🚗 <code>:car:</code></td>\n<td align=\"left\">🚗 <code>:red_car:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚕 <code>:taxi:</code></td>\n<td align=\"left\">🚖 <code>:oncoming_taxi:</code></td>\n<td align=\"left\">🚛 <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚌 <code>:bus:</code></td>\n<td align=\"left\">🚍 <code>:oncoming_bus:</code></td>\n<td align=\"left\">🚨 <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚓 <code>:police_car:</code></td>\n<td align=\"left\">🚔 <code>:oncoming_police_car:</code></td>\n<td align=\"left\">🚒 <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚑 <code>:ambulance:</code></td>\n<td align=\"left\">🚐 <code>:minibus:</code></td>\n<td align=\"left\">🚚 <code>:truck:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚋 <code>:train:</code></td>\n<td align=\"left\">🚉 <code>:station:</code></td>\n<td align=\"left\">🚆 <code>:train2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚅 <code>:bullettrain_front:</code></td>\n<td align=\"left\">🚄 <code>:bullettrain_side:</code></td>\n<td align=\"left\">🚈 <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚝 <code>:monorail:</code></td>\n<td align=\"left\">🚃 <code>:railway_car:</code></td>\n<td align=\"left\">🚎 <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎫 <code>:ticket:</code></td>\n<td align=\"left\">⛽️ <code>:fuelpump:</code></td>\n<td align=\"left\">🚦 <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚥 <code>:traffic_light:</code></td>\n<td align=\"left\">⚠️ <code>:warning:</code></td>\n<td align=\"left\">🚧 <code>:construction:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔰 <code>:beginner:</code></td>\n<td align=\"left\">🏧 <code>:atm:</code></td>\n<td align=\"left\">🎰 <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚏 <code>:busstop:</code></td>\n<td align=\"left\">💈 <code>:barber:</code></td>\n<td align=\"left\">♨️ <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏁 <code>:checkered_flag:</code></td>\n<td align=\"left\">🎌 <code>:crossed_flags:</code></td>\n<td align=\"left\">🏮 <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🗿 <code>:moyai:</code></td>\n<td align=\"left\">🎪 <code>:circus_tent:</code></td>\n<td align=\"left\">🎭 <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📍 <code>:round_pushpin:</code></td>\n<td align=\"left\">🚩 <code>:triangular_flag_on_post:</code></td>\n<td align=\"left\">🇯🇵 <code>:jp:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇰🇷 <code>:kr:</code></td>\n<td align=\"left\">🇨🇳 <code>:cn:</code></td>\n<td align=\"left\">🇺🇸 <code>:us:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇫🇷 <code>:fr:</code></td>\n<td align=\"left\">🇪🇸 <code>:es:</code></td>\n<td align=\"left\">🇮🇹 <code>:it:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇷🇺 <code>:ru:</code></td>\n<td align=\"left\">🇬🇧 <code>:gb:</code></td>\n<td align=\"left\">🇬🇧 <code>:uk:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇩🇪 <code>:de:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Symbols-符号\"><a href=\"#Symbols-符号\" class=\"headerlink\" title=\"Symbols 符号\"></a>Symbols 符号</h2><table>\n<thead>\n<tr>\n<th align=\"left\">1️⃣ <code>:one:</code></th>\n<th align=\"left\">2️⃣ <code>:two:</code></th>\n<th align=\"left\">3️⃣ <code>:three:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">4️⃣ <code>:four:</code></td>\n<td align=\"left\">5️⃣ <code>:five:</code></td>\n<td align=\"left\">6️⃣ <code>:six:</code></td>\n</tr>\n<tr>\n<td align=\"left\">7️⃣ <code>:seven:</code></td>\n<td align=\"left\">8️⃣ <code>:eight:</code></td>\n<td align=\"left\">9️⃣ <code>:nine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔟 <code>:keycap_ten:</code></td>\n<td align=\"left\">🔢 <code>:1234:</code></td>\n<td align=\"left\">0️⃣ <code>:zero:</code></td>\n</tr>\n<tr>\n<td align=\"left\">#️⃣ <code>:hash:</code></td>\n<td align=\"left\">🔣 <code>:symbols:</code></td>\n<td align=\"left\">◀️ <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⬇️ <code>:arrow_down:</code></td>\n<td align=\"left\">▶️ <code>:arrow_forward:</code></td>\n<td align=\"left\">⬅️ <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔠 <code>:capital_abcd:</code></td>\n<td align=\"left\">🔡 <code>:abcd:</code></td>\n<td align=\"left\">🔤 <code>:abc:</code></td>\n</tr>\n<tr>\n<td align=\"left\">↙️ <code>:arrow_lower_left:</code></td>\n<td align=\"left\">↘️ <code>:arrow_lower_right:</code></td>\n<td align=\"left\">➡️ <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⬆️ <code>:arrow_up:</code></td>\n<td align=\"left\">↖️ <code>:arrow_upper_left:</code></td>\n<td align=\"left\">↗️ <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏬ <code>:arrow_double_down:</code></td>\n<td align=\"left\">⏫ <code>:arrow_double_up:</code></td>\n<td align=\"left\">🔽 <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⤵️ <code>:arrow_heading_down:</code></td>\n<td align=\"left\">⤴️ <code>:arrow_heading_up:</code></td>\n<td align=\"left\">↩️<code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td align=\"left\">↪️ <code>:arrow_right_hook:</code></td>\n<td align=\"left\">↔️ <code>:left_right_arrow:</code></td>\n<td align=\"left\">↕️ <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔼 <code>:arrow_up_small:</code></td>\n<td align=\"left\">🔃 <code>:arrows_clockwise:</code></td>\n<td align=\"left\">🔄 <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏪ <code>:rewind:</code></td>\n<td align=\"left\">⏩ <code>:fast_forward:</code></td>\n<td align=\"left\">ℹ️ <code>:information_source:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆗 <code>:ok:</code></td>\n<td align=\"left\">🔀 <code>:twisted_rightwards_arrows:</code></td>\n<td align=\"left\">🔁 <code>:repeat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔂 <code>:repeat_one:</code></td>\n<td align=\"left\">🆕 <code>:new:</code></td>\n<td align=\"left\">🔝 <code>:top:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆙 <code>:up:</code></td>\n<td align=\"left\">🆒 <code>:cool:</code></td>\n<td align=\"left\">🆓 <code>:free:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆖 <code>:ng:</code></td>\n<td align=\"left\">🎦 <code>:cinema:</code></td>\n<td align=\"left\">🈁 <code>:koko:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📶 <code>:signal_strength:</code></td>\n<td align=\"left\">🈹 <code>:u5272:</code></td>\n<td align=\"left\">🈴 <code>:u5408:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈺 <code>:u55b6:</code></td>\n<td align=\"left\">🈯️ <code>:u6307:</code></td>\n<td align=\"left\">🈷️ <code>:u6708:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈶 <code>:u6709:</code></td>\n<td align=\"left\">🈵 <code>:u6e80:</code></td>\n<td align=\"left\">🈚️ <code>:u7121:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈸 <code>:u7533:</code></td>\n<td align=\"left\">🈳 <code>:u7a7a:</code></td>\n<td align=\"left\">🈲 <code>:u7981:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈂️ <code>:sa:</code></td>\n<td align=\"left\">🚻 <code>:restroom:</code></td>\n<td align=\"left\">🚹 <code>:mens:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚺 <code>:womens:</code></td>\n<td align=\"left\">🚼 <code>:baby_symbol:</code></td>\n<td align=\"left\">🚭 <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🅿️ <code>:parking:</code></td>\n<td align=\"left\">♿️ <code>:wheelchair:</code></td>\n<td align=\"left\">🚇 <code>:metro:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🛄 <code>:baggage_claim:</code></td>\n<td align=\"left\">🉑 <code>:accept:</code></td>\n<td align=\"left\">🚾 <code>:wc:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚰 <code>:potable_water:</code></td>\n<td align=\"left\">🚮 <code>:put_litter_in_its_place:</code></td>\n<td align=\"left\">㊙️ <code>:secret:</code></td>\n</tr>\n<tr>\n<td align=\"left\">㊗️ <code>:congratulations:</code></td>\n<td align=\"left\">Ⓜ️ <code>:m:</code></td>\n<td align=\"left\">🛂 <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🛅 <code>:left_luggage:</code></td>\n<td align=\"left\">🛃 <code>:customs:</code></td>\n<td align=\"left\">🉐 <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆑 <code>:cl:</code></td>\n<td align=\"left\">🆘 <code>:sos:</code></td>\n<td align=\"left\">🆔 <code>:id:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚫 <code>:no_entry_sign:</code></td>\n<td align=\"left\">🔞 <code>:underage:</code></td>\n<td align=\"left\">📵 <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚯 <code>:do_not_litter:</code></td>\n<td align=\"left\">🚱 <code>:non-potable_water:</code></td>\n<td align=\"left\">🚳 <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚷 <code>:no_pedestrians:</code></td>\n<td align=\"left\">🚸 <code>:children_crossing:</code></td>\n<td align=\"left\">⛔️ <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✳️ <code>:eight_spoked_asterisk:</code></td>\n<td align=\"left\">✴️ <code>:eight_pointed_black_star:</code></td>\n<td align=\"left\">💟 <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆚 <code>:vs:</code></td>\n<td align=\"left\">📳 <code>:vibration_mode:</code></td>\n<td align=\"left\">📴 <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💹 <code>:chart:</code></td>\n<td align=\"left\">💱 <code>:currency_exchange:</code></td>\n<td align=\"left\">♈️ <code>:aries:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♉️ <code>:taurus:</code></td>\n<td align=\"left\">♊️ <code>:gemini:</code></td>\n<td align=\"left\">♋️ <code>:cancer:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♌️ <code>:leo:</code></td>\n<td align=\"left\">♍️ <code>:virgo:</code></td>\n<td align=\"left\">♎️ <code>:libra:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♏️ <code>:scorpius:</code></td>\n<td align=\"left\">♐️ <code>:sagittarius:</code></td>\n<td align=\"left\">♑️ <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♒️ <code>:aquarius:</code></td>\n<td align=\"left\">♓️ <code>:pisces:</code></td>\n<td align=\"left\">⛎ <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔯 <code>:six_pointed_star:</code></td>\n<td align=\"left\">❎<code>:negative_squared_cross_mark:</code></td>\n<td align=\"left\">🅰️ <code>:a:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🅱️ <code>:b:</code></td>\n<td align=\"left\">🆎 <code>:ab:</code></td>\n<td align=\"left\">🅾️ <code>:o2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💠<code>:diamond_shape_with_a_dot_inside:</code></td>\n<td align=\"left\">♻️ <code>:recycle:</code></td>\n<td align=\"left\">🔚 <code>:end:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔛 <code>:on:</code></td>\n<td align=\"left\">🔜 <code>:soon:</code></td>\n<td align=\"left\">🕐 <code>:clock1:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕜 <code>:clock130:</code></td>\n<td align=\"left\">🕙 <code>:clock10:</code></td>\n<td align=\"left\">🕥 <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕚 <code>:clock11:</code></td>\n<td align=\"left\">🕦 <code>:clock1130:</code></td>\n<td align=\"left\">🕛 <code>:clock12:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕧 <code>:clock1230:</code></td>\n<td align=\"left\">🕑 <code>:clock2:</code></td>\n<td align=\"left\">🕝 <code>:clock230:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕒 <code>:clock3:</code></td>\n<td align=\"left\">🕞 <code>:clock330:</code></td>\n<td align=\"left\">🕓 <code>:clock4:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕟 <code>:clock430:</code></td>\n<td align=\"left\">🕔 <code>:clock5:</code></td>\n<td align=\"left\">🕠 <code>:clock530:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕕 <code>:clock6:</code></td>\n<td align=\"left\">🕡 <code>:clock630:</code></td>\n<td align=\"left\">🕖 <code>:clock7:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕢 <code>:clock730:</code></td>\n<td align=\"left\">🕗 <code>:clock8:</code></td>\n<td align=\"left\">🕣 <code>:clock830:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕘 <code>:clock9:</code></td>\n<td align=\"left\">🕤 <code>:clock930:</code></td>\n<td align=\"left\">💲 <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td align=\"left\">©️ <code>:copyright:</code></td>\n<td align=\"left\">®️ <code>:registered:</code></td>\n<td align=\"left\">™️ <code>:tm:</code></td>\n</tr>\n<tr>\n<td align=\"left\">❌ <code>:x:</code></td>\n<td align=\"left\">❗️ <code>:heavy_exclamation_mark:</code></td>\n<td align=\"left\">‼️ <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⁉️ <code>:interrobang:</code></td>\n<td align=\"left\">⭕️ <code>:o:</code></td>\n<td align=\"left\">✖️ <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td align=\"left\">➕ <code>:heavy_plus_sign:</code></td>\n<td align=\"left\">➖ <code>:heavy_minus_sign:</code></td>\n<td align=\"left\">➗ <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💮 <code>:white_flower:</code></td>\n<td align=\"left\">💯 <code>:100:</code></td>\n<td align=\"left\">✔️ <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td align=\"left\">☑️ <code>:ballot_box_with_check:</code></td>\n<td align=\"left\">🔘 <code>:radio_button:</code></td>\n<td align=\"left\">🔗 <code>:link:</code></td>\n</tr>\n<tr>\n<td align=\"left\">➰ <code>:curly_loop:</code></td>\n<td align=\"left\">〰️ <code>:wavy_dash:</code></td>\n<td align=\"left\">〽️ <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔱 <code>:trident:</code></td>\n<td align=\"left\">:black_square: <code>:black_square:</code></td>\n<td align=\"left\">:white_square: <code>:white_square:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✅ <code>:white_check_mark:</code></td>\n<td align=\"left\">🔲 <code>:black_square_button:</code></td>\n<td align=\"left\">🔳 <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⚫️ <code>:black_circle:</code></td>\n<td align=\"left\">⚪️ <code>:white_circle:</code></td>\n<td align=\"left\">🔴 <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔵 <code>:large_blue_circle:</code></td>\n<td align=\"left\">🔷 <code>:large_blue_diamond:</code></td>\n<td align=\"left\">🔶 <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔹 <code>:small_blue_diamond:</code></td>\n<td align=\"left\">🔸 <code>:small_orange_diamond:</code></td>\n<td align=\"left\">🔺 <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔻 <code>:small_red_triangle_down:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021709642.jpg\" alt=\"ball-1845546_1920\"></p>","more":"<h1 id=\"Typora-Emoji\"><a href=\"#Typora-Emoji\" class=\"headerlink\" title=\"Typora Emoji\"></a>Typora Emoji</h1><h2 id=\"People-人物\"><a href=\"#People-人物\" class=\"headerlink\" title=\"People 人物\"></a>People 人物</h2><table>\n<thead>\n<tr>\n<th>😄 <code>:smile:</code></th>\n<th align=\"left\">😆 <code>:laughing:</code></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>😊 <code>:blush:</code></td>\n<td align=\"left\">😃 <code>:smiley:</code></td>\n<td align=\"left\">☺️ <code>:relaxed:</code></td>\n</tr>\n<tr>\n<td>😏 <code>:smirk:</code></td>\n<td align=\"left\">😍 <code>:heart_eyes:</code></td>\n<td align=\"left\">😘 <code>:kissing_heart:</code></td>\n</tr>\n<tr>\n<td>😚 <code>:kissing_closed_eyes:</code></td>\n<td align=\"left\">😳 <code>:flushed:</code></td>\n<td align=\"left\">😌 <code>:relieved:</code></td>\n</tr>\n<tr>\n<td>😆 <code>:satisfied:</code></td>\n<td align=\"left\">😁 <code>:grin:</code></td>\n<td align=\"left\">😉 <code>:wink:</code></td>\n</tr>\n<tr>\n<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>\n<td align=\"left\">😝 <code>:stuck_out_tongue_closed_eyes:</code></td>\n<td align=\"left\">😀 <code>:grinning:</code></td>\n</tr>\n<tr>\n<td>😗 <code>:kissing:</code></td>\n<td align=\"left\">😙 <code>:kissing_smiling_eyes:</code></td>\n<td align=\"left\">😛 <code>:stuck_out_tongue:</code></td>\n</tr>\n<tr>\n<td>😴 <code>:sleeping:</code></td>\n<td align=\"left\">😟 <code>:worried:</code></td>\n<td align=\"left\">😦 <code>:frowning:</code></td>\n</tr>\n<tr>\n<td>😧 <code>:anguished:</code></td>\n<td align=\"left\">😮 <code>:open_mouth:</code></td>\n<td align=\"left\">😬 <code>:grimacing:</code></td>\n</tr>\n<tr>\n<td>😕 <code>:confused:</code></td>\n<td align=\"left\">😯 <code>:hushed:</code></td>\n<td align=\"left\">😑 <code>:expressionless:</code></td>\n</tr>\n<tr>\n<td>😒 <code>:unamused:</code></td>\n<td align=\"left\">😅 <code>:sweat_smile:</code></td>\n<td align=\"left\">😓 <code>:sweat:</code></td>\n</tr>\n<tr>\n<td>😥 <code>:disappointed_relieved:</code></td>\n<td align=\"left\">😩 <code>:weary:</code></td>\n<td align=\"left\">😔 <code>:pensive:</code></td>\n</tr>\n<tr>\n<td>😞 <code>:disappointed:</code></td>\n<td align=\"left\">😖 <code>:confounded:</code></td>\n<td align=\"left\">😨 <code>:fearful:</code></td>\n</tr>\n<tr>\n<td>😰 <code>:cold_sweat:</code></td>\n<td align=\"left\">😣 <code>:persevere:</code></td>\n<td align=\"left\">😢 <code>:cry:</code></td>\n</tr>\n<tr>\n<td>😭 <code>:sob:</code></td>\n<td align=\"left\">😂 <code>:joy:</code></td>\n<td align=\"left\">😲 <code>:astonished:</code></td>\n</tr>\n<tr>\n<td>😱 <code>:scream:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\">😫 <code>:tired_face:</code></td>\n</tr>\n<tr>\n<td>😠 <code>:angry:</code></td>\n<td align=\"left\">😡 <code>:rage:</code></td>\n<td align=\"left\">😤 <code>:triumph:</code></td>\n</tr>\n<tr>\n<td>😪 <code>:sleepy:</code></td>\n<td align=\"left\">😋 <code>:yum:</code></td>\n<td align=\"left\">😷 <code>:mask:</code></td>\n</tr>\n<tr>\n<td>😎 <code>:sunglasses:</code></td>\n<td align=\"left\">😵 <code>:dizzy_face:</code></td>\n<td align=\"left\">👿 <code>:imp:</code></td>\n</tr>\n<tr>\n<td>😈 <code>:smiling_imp:</code></td>\n<td align=\"left\">😐 <code>:neutral_face:</code></td>\n<td align=\"left\">😶 <code>:no_mouth:</code></td>\n</tr>\n<tr>\n<td>😇 <code>:innocent:</code></td>\n<td align=\"left\">👽 <code>:alien:</code></td>\n<td align=\"left\">💛 <code>:yellow_heart:</code></td>\n</tr>\n<tr>\n<td>💙 <code>:blue_heart:</code></td>\n<td align=\"left\">💜 <code>:purple_heart:</code></td>\n<td align=\"left\">❤️ <code>:heart:</code></td>\n</tr>\n<tr>\n<td>💚 <code>:green_heart:</code></td>\n<td align=\"left\">💔 <code>:broken_heart:</code></td>\n<td align=\"left\">💓 <code>:heartbeat:</code></td>\n</tr>\n<tr>\n<td>💗 <code>:heartpulse:</code></td>\n<td align=\"left\">💕 <code>:two_hearts:</code></td>\n<td align=\"left\">💞 <code>:revolving_hearts:</code></td>\n</tr>\n<tr>\n<td>💘 <code>:cupid:</code></td>\n<td align=\"left\">💖 <code>:sparkling_heart:</code></td>\n<td align=\"left\">✨ <code>:sparkles:</code></td>\n</tr>\n<tr>\n<td>⭐️ <code>:star:</code></td>\n<td align=\"left\">🌟 <code>:star2:</code></td>\n<td align=\"left\">💫 <code>:dizzy:</code></td>\n</tr>\n<tr>\n<td>💥 <code>:boom:</code></td>\n<td align=\"left\">💥 <code>:collision:</code></td>\n<td align=\"left\">💢 <code>:anger:</code></td>\n</tr>\n<tr>\n<td>❗️ <code>:exclamation:</code></td>\n<td align=\"left\">❓ <code>:question:</code></td>\n<td align=\"left\">❕ <code>:grey_exclamation:</code></td>\n</tr>\n<tr>\n<td>❔ <code>:grey_question:</code></td>\n<td align=\"left\">💤 <code>:zzz:</code></td>\n<td align=\"left\">💨 <code>:dash:</code></td>\n</tr>\n<tr>\n<td>💦 <code>:sweat_drops:</code></td>\n<td align=\"left\">🎶 <code>:notes:</code></td>\n<td align=\"left\">🎵 <code>:musical_note:</code></td>\n</tr>\n<tr>\n<td>🔥 <code>:fire:</code></td>\n<td align=\"left\">💩 <code>:hankey:</code></td>\n<td align=\"left\">💩 <code>:poop:</code></td>\n</tr>\n<tr>\n<td>💩 <code>:shit:</code></td>\n<td align=\"left\">👍 <code>:+1:</code></td>\n<td align=\"left\">👍 <code>:thumbsup:</code></td>\n</tr>\n<tr>\n<td>👎 <code>:-1:</code></td>\n<td align=\"left\">👎 <code>:thumbsdown:</code></td>\n<td align=\"left\">👌 <code>:ok_hand:</code></td>\n</tr>\n<tr>\n<td>👊 <code>:punch:</code></td>\n<td align=\"left\">👊 <code>:facepunch:</code></td>\n<td align=\"left\">✊ <code>:fist:</code></td>\n</tr>\n<tr>\n<td>✌️ <code>:v:</code></td>\n<td align=\"left\">👋 <code>:wave:</code></td>\n<td align=\"left\">✋ <code>:hand:</code></td>\n</tr>\n<tr>\n<td>✋ <code>:raised_hand:</code></td>\n<td align=\"left\">👐 <code>:open_hands:</code></td>\n<td align=\"left\">☝️ <code>:point_up:</code></td>\n</tr>\n<tr>\n<td>👇 <code>:point_down:</code></td>\n<td align=\"left\">👈 <code>:point_left:</code></td>\n<td align=\"left\">👉 <code>:point_right:</code></td>\n</tr>\n<tr>\n<td>🙌 <code>:raised_hands:</code></td>\n<td align=\"left\">🙏 <code>:pray:</code></td>\n<td align=\"left\">👆 <code>:point_up_2:</code></td>\n</tr>\n<tr>\n<td>👏 <code>:clap:</code></td>\n<td align=\"left\">💪 <code>:muscle:</code></td>\n<td align=\"left\">🤘 <code>:metal:</code></td>\n</tr>\n<tr>\n<td>🖕 <code>:fu:</code></td>\n<td align=\"left\">🚶 <code>:walking:</code></td>\n<td align=\"left\">🏃 <code>:runner:</code></td>\n</tr>\n<tr>\n<td>🏃 <code>:running:</code></td>\n<td align=\"left\">👫 <code>:couple:</code></td>\n<td align=\"left\">👪 <code>:family:</code></td>\n</tr>\n<tr>\n<td>👬 <code>:two_men_holding_hands:</code></td>\n<td align=\"left\">👭 <code>:two_women_holding_hands:</code></td>\n<td align=\"left\">💃 <code>:dancer:</code></td>\n</tr>\n<tr>\n<td>👯 <code>:dancers:</code></td>\n<td align=\"left\">🙆 <code>:ok_woman:</code></td>\n<td align=\"left\">🙅 <code>:no_good:</code></td>\n</tr>\n<tr>\n<td>💁 <code>:information_desk_person:</code></td>\n<td align=\"left\">🙋 <code>:raising_hand:</code></td>\n<td align=\"left\">👰 <code>:bride_with_veil:</code></td>\n</tr>\n<tr>\n<td>🙎 <code>:person_with_pouting_face:</code></td>\n<td align=\"left\">🙍 <code>:person_frowning:</code></td>\n<td align=\"left\">🙇 <code>:bow:</code></td>\n</tr>\n<tr>\n<td>:couplekiss: <code>:couplekiss:</code></td>\n<td align=\"left\">💑 <code>:couple_with_heart:</code></td>\n<td align=\"left\">💆 <code>:massage:</code></td>\n</tr>\n<tr>\n<td>💇 <code>:haircut:</code></td>\n<td align=\"left\">💅 <code>:nail_care:</code></td>\n<td align=\"left\">👦 <code>:boy:</code></td>\n</tr>\n<tr>\n<td>👧 <code>:girl:</code></td>\n<td align=\"left\">👩 <code>:woman:</code></td>\n<td align=\"left\">👨 <code>:man:</code></td>\n</tr>\n<tr>\n<td>👶 <code>:baby:</code></td>\n<td align=\"left\">👵 <code>:older_woman:</code></td>\n<td align=\"left\">👴 <code>:older_man:</code></td>\n</tr>\n<tr>\n<td>👱 <code>:person_with_blond_hair:</code></td>\n<td align=\"left\">👲 <code>:man_with_gua_pi_mao:</code></td>\n<td align=\"left\">👳 <code>:man_with_turban:</code></td>\n</tr>\n<tr>\n<td>👷 <code>:construction_worker:</code></td>\n<td align=\"left\">👮 <code>:cop:</code></td>\n<td align=\"left\">👼 <code>:angel:</code></td>\n</tr>\n<tr>\n<td>👸 <code>:princess:</code></td>\n<td align=\"left\">😺 <code>:smiley_cat:</code></td>\n<td align=\"left\">😸 <code>:smile_cat:</code></td>\n</tr>\n<tr>\n<td>😻 <code>:heart_eyes_cat:</code></td>\n<td align=\"left\">😽 <code>:kissing_cat:</code></td>\n<td align=\"left\">😼 <code>:smirk_cat:</code></td>\n</tr>\n<tr>\n<td>🙀 <code>:scream_cat:</code></td>\n<td align=\"left\">😿 <code>:crying_cat_face:</code></td>\n<td align=\"left\">😹 <code>:joy_cat:</code></td>\n</tr>\n<tr>\n<td>😾 <code>:pouting_cat:</code></td>\n<td align=\"left\">👹 <code>:japanese_ogre:</code></td>\n<td align=\"left\">👺 <code>:japanese_goblin:</code></td>\n</tr>\n<tr>\n<td>🙈 <code>:see_no_evil:</code></td>\n<td align=\"left\">🙉 <code>:hear_no_evil:</code></td>\n<td align=\"left\">🙊 <code>:speak_no_evil:</code></td>\n</tr>\n<tr>\n<td>💂 <code>:guardsman:</code></td>\n<td align=\"left\">💀 <code>:skull:</code></td>\n<td align=\"left\">🐾 <code>:feet:</code></td>\n</tr>\n<tr>\n<td>👄 <code>:lips:</code></td>\n<td align=\"left\">💋 <code>:kiss:</code></td>\n<td align=\"left\">💧 <code>:droplet:</code></td>\n</tr>\n<tr>\n<td>👂 <code>:ear:</code></td>\n<td align=\"left\">👀 <code>:eyes:</code></td>\n<td align=\"left\">👃 <code>:nose:</code></td>\n</tr>\n<tr>\n<td>👅 <code>:tongue:</code></td>\n<td align=\"left\">💌 <code>:love_letter:</code></td>\n<td align=\"left\">👤 <code>:bust_in_silhouette:</code></td>\n</tr>\n<tr>\n<td>👥 <code>:busts_in_silhouette:</code></td>\n<td align=\"left\">💬 <code>:speech_balloon:</code></td>\n<td align=\"left\">💭 <code>:thought_balloon:</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"Nature-自然\"><a href=\"#Nature-自然\" class=\"headerlink\" title=\"Nature 自然\"></a>Nature 自然</h2><table>\n<thead>\n<tr>\n<th align=\"left\">☀️ <code>:sunny:</code></th>\n<th align=\"left\">☔️ <code>:umbrella:</code></th>\n<th align=\"left\">☁️ <code>:cloud:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">❄️ <code>:snowflake:</code></td>\n<td align=\"left\">⛄️ <code>:snowman:</code></td>\n<td align=\"left\">⚡️ <code>:zap:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌀 <code>:cyclone:</code></td>\n<td align=\"left\">🌁 <code>:foggy:</code></td>\n<td align=\"left\">🌊 <code>:ocean:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐱 <code>:cat:</code></td>\n<td align=\"left\">🐶 <code>:dog:</code></td>\n<td align=\"left\">🐭 <code>:mouse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐹 <code>:hamster:</code></td>\n<td align=\"left\">🐰 <code>:rabbit:</code></td>\n<td align=\"left\">🐺 <code>:wolf:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐸 <code>:frog:</code></td>\n<td align=\"left\">🐯 <code>:tiger:</code></td>\n<td align=\"left\">🐨 <code>:koala:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐻 <code>:bear:</code></td>\n<td align=\"left\">🐷 <code>:pig:</code></td>\n<td align=\"left\">🐽 <code>:pig_nose:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐮 <code>:cow:</code></td>\n<td align=\"left\">🐗 <code>:boar:</code></td>\n<td align=\"left\">🐵 <code>:monkey_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐒 <code>:monkey:</code></td>\n<td align=\"left\">🐴 <code>:horse:</code></td>\n<td align=\"left\">🐎 <code>:racehorse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐫 <code>:camel:</code></td>\n<td align=\"left\">🐑 <code>:sheep:</code></td>\n<td align=\"left\">🐘 <code>:elephant:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐼 <code>:panda_face:</code></td>\n<td align=\"left\">🐍 <code>:snake:</code></td>\n<td align=\"left\">🐦 <code>:bird:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐤 <code>:baby_chick:</code></td>\n<td align=\"left\">🐥 <code>:hatched_chick:</code></td>\n<td align=\"left\">🐣 <code>:hatching_chick:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐔 <code>:chicken:</code></td>\n<td align=\"left\">🐧 <code>:penguin:</code></td>\n<td align=\"left\">🐢 <code>:turtle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐛 <code>:bug:</code></td>\n<td align=\"left\">🐝 <code>:honeybee:</code></td>\n<td align=\"left\">🐜 <code>:ant:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐞 <code>:beetle:</code></td>\n<td align=\"left\">🐌 <code>:snail:</code></td>\n<td align=\"left\">🐙 <code>:octopus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐠 <code>:tropical_fish:</code></td>\n<td align=\"left\">🐟 <code>:fish:</code></td>\n<td align=\"left\">🐳 <code>:whale:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐋 <code>:whale2:</code></td>\n<td align=\"left\">🐬 <code>:dolphin:</code></td>\n<td align=\"left\">🐄 <code>:cow2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐏 <code>:ram:</code></td>\n<td align=\"left\">🐀 <code>:rat:</code></td>\n<td align=\"left\">🐃 <code>:water_buffalo:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐅 <code>:tiger2:</code></td>\n<td align=\"left\">🐇 <code>:rabbit2:</code></td>\n<td align=\"left\">🐉 <code>:dragon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐐 <code>:goat:</code></td>\n<td align=\"left\">🐓 <code>:rooster:</code></td>\n<td align=\"left\">🐕 <code>:dog2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐖 <code>:pig2:</code></td>\n<td align=\"left\">🐁 <code>:mouse2:</code></td>\n<td align=\"left\">🐂 <code>:ox:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐲 <code>:dragon_face:</code></td>\n<td align=\"left\">🐡 <code>:blowfish:</code></td>\n<td align=\"left\">🐊 <code>:crocodile:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐪 <code>:dromedary_camel:</code></td>\n<td align=\"left\">🐆 <code>:leopard:</code></td>\n<td align=\"left\">🐈 <code>:cat2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🐩 <code>:poodle:</code></td>\n<td align=\"left\">🐾 <code>:paw_prints:</code></td>\n<td align=\"left\">💐 <code>:bouquet:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌸 <code>:cherry_blossom:</code></td>\n<td align=\"left\">🌷 <code>:tulip:</code></td>\n<td align=\"left\">🍀 <code>:four_leaf_clover:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌹 <code>:rose:</code></td>\n<td align=\"left\">🌻 <code>:sunflower:</code></td>\n<td align=\"left\">🌺 <code>:hibiscus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍁 <code>:maple_leaf:</code></td>\n<td align=\"left\">🍃 <code>:leaves:</code></td>\n<td align=\"left\">🍂 <code>:fallen_leaf:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌿 <code>:herb:</code></td>\n<td align=\"left\">🍄 <code>:mushroom:</code></td>\n<td align=\"left\">🌵 <code>:cactus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌴 <code>:palm_tree:</code></td>\n<td align=\"left\">🌲 <code>:evergreen_tree:</code></td>\n<td align=\"left\">🌳 <code>:deciduous_tree:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌰 <code>:chestnut:</code></td>\n<td align=\"left\">🌱 <code>:seedling:</code></td>\n<td align=\"left\">🌼 <code>:blossom:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌾 <code>:ear_of_rice:</code></td>\n<td align=\"left\">🐚 <code>:shell:</code></td>\n<td align=\"left\">🌐 <code>:globe_with_meridians:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌞 <code>:sun_with_face:</code></td>\n<td align=\"left\">🌝 <code>:full_moon_with_face:</code></td>\n<td align=\"left\">🌚 <code>:new_moon_with_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌑 <code>:new_moon:</code></td>\n<td align=\"left\">🌒 <code>:waxing_crescent_moon:</code></td>\n<td align=\"left\">🌓 <code>:first_quarter_moon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌔 <code>:waxing_gibbous_moon:</code></td>\n<td align=\"left\">🌕 <code>:full_moon:</code></td>\n<td align=\"left\">🌖 <code>:waning_gibbous_moon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌗 <code>:last_quarter_moon:</code></td>\n<td align=\"left\">🌘 <code>:waning_crescent_moon:</code></td>\n<td align=\"left\">🌜 <code>:last_quarter_moon_with_face:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌛 <code>:first_quarter_moon_with_face:</code></td>\n<td align=\"left\">🌔 <code>:moon:</code></td>\n<td align=\"left\">🌍 <code>:earth_africa:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌎 <code>:earth_americas:</code></td>\n<td align=\"left\">🌏 <code>:earth_asia:</code></td>\n<td align=\"left\">🌋 <code>:volcano:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌌 <code>:milky_way:</code></td>\n<td align=\"left\">⛅️ <code>:partly_sunny:</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Object-物体\"><a href=\"#Object-物体\" class=\"headerlink\" title=\"Object 物体\"></a>Object 物体</h2><table>\n<thead>\n<tr>\n<th align=\"left\">🎍 <code>:bamboo:</code></th>\n<th align=\"left\">💝 <code>:gift_heart:</code></th>\n<th align=\"left\">🎎 <code>:dolls:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🎒 <code>:school_satchel:</code></td>\n<td align=\"left\">🎓 <code>:mortar_board:</code></td>\n<td align=\"left\">🎏 <code>:flags:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎆 <code>:fireworks:</code></td>\n<td align=\"left\">🎇 <code>:sparkler:</code></td>\n<td align=\"left\">🎐 <code>:wind_chime:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎑 <code>:rice_scene:</code></td>\n<td align=\"left\">🎃 <code>:jack_o_lantern:</code></td>\n<td align=\"left\">👻 <code>:ghost:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎅 <code>:santa:</code></td>\n<td align=\"left\">🎄 <code>:christmas_tree:</code></td>\n<td align=\"left\">🎁 <code>:gift:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔔 <code>:bell:</code></td>\n<td align=\"left\">🔕 <code>:no_bell:</code></td>\n<td align=\"left\">🎋 <code>:tanabata_tree:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎉 <code>:tada:</code></td>\n<td align=\"left\">🎊 <code>:confetti_ball:</code></td>\n<td align=\"left\">🎈 <code>:balloon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔮 <code>:crystal_ball:</code></td>\n<td align=\"left\">💿 <code>:cd:</code></td>\n<td align=\"left\">📀 <code>:dvd:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💾 <code>:floppy_disk:</code></td>\n<td align=\"left\">📷 <code>:camera:</code></td>\n<td align=\"left\">📹 <code>:video_camera:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎥 <code>:movie_camera:</code></td>\n<td align=\"left\">💻 <code>:computer:</code></td>\n<td align=\"left\">📺 <code>:tv:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📱 <code>:iphone:</code></td>\n<td align=\"left\">☎️ <code>:phone:</code></td>\n<td align=\"left\">☎️ <code>:telephone:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📞 <code>:telephone_receiver:</code></td>\n<td align=\"left\">📟 <code>:pager:</code></td>\n<td align=\"left\">📠 <code>:fax:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💽 <code>:minidisc:</code></td>\n<td align=\"left\">📼 <code>:vhs:</code></td>\n<td align=\"left\">🔉 <code>:sound:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔈 <code>:speaker:</code></td>\n<td align=\"left\">🔇 <code>:mute:</code></td>\n<td align=\"left\">📢 <code>:loudspeaker:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📣 <code>:mega:</code></td>\n<td align=\"left\">⌛️ <code>:hourglass:</code></td>\n<td align=\"left\">⏳ <code>:hourglass_flowing_sand:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏰ <code>:alarm_clock:</code></td>\n<td align=\"left\">⌚️ <code>:watch:</code></td>\n<td align=\"left\">📻 <code>:radio:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📡 <code>:satellite:</code></td>\n<td align=\"left\">➿ <code>:loop:</code></td>\n<td align=\"left\">🔍 <code>:mag:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔎 <code>:mag_right:</code></td>\n<td align=\"left\">🔓 <code>:unlock:</code></td>\n<td align=\"left\">🔒 <code>:lock:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔏 <code>:lock_with_ink_pen:</code></td>\n<td align=\"left\">🔐 <code>:closed_lock_with_key:</code></td>\n<td align=\"left\">🔑 <code>:key:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💡 <code>:bulb:</code></td>\n<td align=\"left\">🔦 <code>:flashlight:</code></td>\n<td align=\"left\">🔆 <code>:high_brightness:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔅 <code>:low_brightness:</code></td>\n<td align=\"left\">🔌 <code>:electric_plug:</code></td>\n<td align=\"left\">🔋 <code>:battery:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📲 <code>:calling:</code></td>\n<td align=\"left\">✉️ <code>:email:</code></td>\n<td align=\"left\">📫 <code>:mailbox:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📮 <code>:postbox:</code></td>\n<td align=\"left\">🛀 <code>:bath:</code></td>\n<td align=\"left\">🛁 <code>:bathtub:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚿 <code>:shower:</code></td>\n<td align=\"left\">🚽 <code>:toilet:</code></td>\n<td align=\"left\">🔧 <code>:wrench:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔩 <code>:nut_and_bolt:</code></td>\n<td align=\"left\">🔨 <code>:hammer:</code></td>\n<td align=\"left\">💺 <code>:seat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💰 <code>:moneybag:</code></td>\n<td align=\"left\">💴 <code>:yen:</code></td>\n<td align=\"left\">💵 <code>:dollar:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💷 <code>:pound:</code></td>\n<td align=\"left\">💶 <code>:euro:</code></td>\n<td align=\"left\">💳 <code>:credit_card:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💸 <code>:money_with_wings:</code></td>\n<td align=\"left\">📧 <code>:e-mail:</code></td>\n<td align=\"left\">📥 <code>:inbox_tray:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📤 <code>:outbox_tray:</code></td>\n<td align=\"left\">✉️ <code>:envelope:</code></td>\n<td align=\"left\">📨 <code>:incoming_envelope:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📯 <code>:postal_horn:</code></td>\n<td align=\"left\">📪 <code>:mailbox_closed:</code></td>\n<td align=\"left\">📬 <code>:mailbox_with_mail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📭 <code>:mailbox_with_no_mail:</code></td>\n<td align=\"left\">🚪 <code>:door:</code></td>\n<td align=\"left\">🚬 <code>:smoking:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💣 <code>:bomb:</code></td>\n<td align=\"left\">🔫 <code>:gun:</code></td>\n<td align=\"left\">🔪 <code>:hocho:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💊 <code>:pill:</code></td>\n<td align=\"left\">💉 <code>:syringe:</code></td>\n<td align=\"left\">📄 <code>:page_facing_up:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📃 <code>:page_with_curl:</code></td>\n<td align=\"left\">📑 <code>:bookmark_tabs:</code></td>\n<td align=\"left\">📊 <code>:bar_chart:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📈 <code>:chart_with_upwards_trend:</code></td>\n<td align=\"left\">📉 <code>:chart_with_downwards_trend:</code></td>\n<td align=\"left\">📜 <code>:scroll:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📋 <code>:clipboard:</code></td>\n<td align=\"left\">📆 <code>:calendar:</code></td>\n<td align=\"left\">📅 <code>:date:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📇 <code>:card_index:</code></td>\n<td align=\"left\">📁 <code>:file_folder:</code></td>\n<td align=\"left\">📂 <code>:open_file_folder:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✂️ <code>:scissors:</code></td>\n<td align=\"left\">📌 <code>:pushpin:</code></td>\n<td align=\"left\">📎 <code>:paperclip:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✒️ <code>:black_nib:</code></td>\n<td align=\"left\">✏️ <code>:pencil2:</code></td>\n<td align=\"left\">📏 <code>:straight_ruler:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📐 <code>:triangular_ruler:</code></td>\n<td align=\"left\">📕 <code>:closed_book:</code></td>\n<td align=\"left\">📗 <code>:green_book:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📘 <code>:blue_book:</code></td>\n<td align=\"left\">📙 <code>:orange_book:</code></td>\n<td align=\"left\">📓 <code>:notebook:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📔 <code>:notebook_with_decorative_cover:</code></td>\n<td align=\"left\">📒 <code>:ledger:</code></td>\n<td align=\"left\">📚 <code>:books:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔖 <code>:bookmark:</code></td>\n<td align=\"left\">📛 <code>:name_badge:</code></td>\n<td align=\"left\">🔬 <code>:microscope:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔭 <code>:telescope:</code></td>\n<td align=\"left\">📰 <code>:newspaper:</code></td>\n<td align=\"left\">🏈 <code>:football:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏀 <code>:basketball:</code></td>\n<td align=\"left\">⚽️ <code>:soccer:</code></td>\n<td align=\"left\">⚾️ <code>:baseball:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎾 <code>:tennis:</code></td>\n<td align=\"left\">🎱 <code>:8ball:</code></td>\n<td align=\"left\">🏉 <code>:rugby_football:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎳 <code>:bowling:</code></td>\n<td align=\"left\">⛳️ <code>:golf:</code></td>\n<td align=\"left\">🚵 <code>:mountain_bicyclist:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚴 <code>:bicyclist:</code></td>\n<td align=\"left\">🏇 <code>:horse_racing:</code></td>\n<td align=\"left\">🏂 <code>:snowboarder:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏊 <code>:swimmer:</code></td>\n<td align=\"left\">🏄 <code>:surfer:</code></td>\n<td align=\"left\">🎿 <code>:ski:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♠️ <code>:spades:</code></td>\n<td align=\"left\">♥️ <code>:hearts:</code></td>\n<td align=\"left\">♣️ <code>:clubs:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♦️ <code>:diamonds:</code></td>\n<td align=\"left\">💎 <code>:gem:</code></td>\n<td align=\"left\">💍 <code>:ring:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏆 <code>:trophy:</code></td>\n<td align=\"left\">🎼 <code>:musical_score:</code></td>\n<td align=\"left\">🎹 <code>:musical_keyboard:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎻 <code>:violin:</code></td>\n<td align=\"left\">👾 <code>:space_invader:</code></td>\n<td align=\"left\">🎮 <code>:video_game:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🃏 <code>:black_joker:</code></td>\n<td align=\"left\">🎴 <code>:flower_playing_cards:</code></td>\n<td align=\"left\">🎲 <code>:game_die:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎯 <code>:dart:</code></td>\n<td align=\"left\">🀄️ <code>:mahjong:</code></td>\n<td align=\"left\">🎬 <code>:clapper:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📝 <code>:memo:</code></td>\n<td align=\"left\">📝 <code>:pencil:</code></td>\n<td align=\"left\">📖 <code>:book:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎨 <code>:art:</code></td>\n<td align=\"left\">🎤 <code>:microphone:</code></td>\n<td align=\"left\">🎧 <code>:headphones:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎺 <code>:trumpet:</code></td>\n<td align=\"left\">🎷 <code>:saxophone:</code></td>\n<td align=\"left\">🎸 <code>:guitar:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👞 <code>:shoe:</code></td>\n<td align=\"left\">👡 <code>:sandal:</code></td>\n<td align=\"left\">👠 <code>:high_heel:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💄 <code>:lipstick:</code></td>\n<td align=\"left\">👢 <code>:boot:</code></td>\n<td align=\"left\">👕 <code>:shirt:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👕 <code>:tshirt:</code></td>\n<td align=\"left\">👔 <code>:necktie:</code></td>\n<td align=\"left\">👚 <code>:womans_clothes:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👗 <code>:dress:</code></td>\n<td align=\"left\">🎽 <code>:running_shirt_with_sash:</code></td>\n<td align=\"left\">👖 <code>:jeans:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👘 <code>:kimono:</code></td>\n<td align=\"left\">👙 <code>:bikini:</code></td>\n<td align=\"left\">🎀 <code>:ribbon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎩 <code>:tophat:</code></td>\n<td align=\"left\">👑 <code>:crown:</code></td>\n<td align=\"left\">👒 <code>:womans_hat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👞 <code>:mans_shoe:</code></td>\n<td align=\"left\">🌂 <code>:closed_umbrella:</code></td>\n<td align=\"left\">💼 <code>:briefcase:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👜 <code>:handbag:</code></td>\n<td align=\"left\">👝 <code>:pouch:</code></td>\n<td align=\"left\">👛 <code>:purse:</code></td>\n</tr>\n<tr>\n<td align=\"left\">👓 <code>:eyeglasses:</code></td>\n<td align=\"left\">🎣 <code>:fishing_pole_and_fish:</code></td>\n<td align=\"left\">☕️ <code>:coffee:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍵 <code>:tea:</code></td>\n<td align=\"left\">🍶 <code>:sake:</code></td>\n<td align=\"left\">🍼 <code>:baby_bottle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍺 <code>:beer:</code></td>\n<td align=\"left\">🍻 <code>:beers:</code></td>\n<td align=\"left\">🍸 <code>:cocktail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍹 <code>:tropical_drink:</code></td>\n<td align=\"left\">🍷 <code>:wine_glass:</code></td>\n<td align=\"left\">🍴 <code>:fork_and_knife:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍕 <code>:pizza:</code></td>\n<td align=\"left\">🍔 <code>:hamburger:</code></td>\n<td align=\"left\">🍟 <code>:fries:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍗 <code>:poultry_leg:</code></td>\n<td align=\"left\">🍖 <code>:meat_on_bone:</code></td>\n<td align=\"left\">🍝 <code>:spaghetti:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍛 <code>:curry:</code></td>\n<td align=\"left\">🍤 <code>:fried_shrimp:</code></td>\n<td align=\"left\">🍱 <code>:bento:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍣 <code>:sushi:</code></td>\n<td align=\"left\">🍥 <code>:fish_cake:</code></td>\n<td align=\"left\">🍙 <code>:rice_ball:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍘 <code>:rice_cracker:</code></td>\n<td align=\"left\">🍚 <code>:rice:</code></td>\n<td align=\"left\">🍜 <code>:ramen:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍲 <code>:stew:</code></td>\n<td align=\"left\">🍢 <code>:oden:</code></td>\n<td align=\"left\">🍡 <code>:dango:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🥚 <code>:egg:</code></td>\n<td align=\"left\">🍞 <code>:bread:</code></td>\n<td align=\"left\">🍩 <code>:doughnut:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍮 <code>:custard:</code></td>\n<td align=\"left\">🍦 <code>:icecream:</code></td>\n<td align=\"left\">🍨 <code>:ice_cream:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍧 <code>:shaved_ice:</code></td>\n<td align=\"left\">🎂 <code>:birthday:</code></td>\n<td align=\"left\">🍰 <code>:cake:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍪 <code>:cookie:</code></td>\n<td align=\"left\">🍫 <code>:chocolate_bar:</code></td>\n<td align=\"left\">🍬 <code>:candy:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍭 <code>:lollipop:</code></td>\n<td align=\"left\">🍯 <code>:honey_pot:</code></td>\n<td align=\"left\">🍎 <code>:apple:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍏 <code>:green_apple:</code></td>\n<td align=\"left\">🍊 <code>:tangerine:</code></td>\n<td align=\"left\">🍋 <code>:lemon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍒 <code>:cherries:</code></td>\n<td align=\"left\">🍇 <code>:grapes:</code></td>\n<td align=\"left\">🍉 <code>:watermelon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍓 <code>:strawberry:</code></td>\n<td align=\"left\">🍑 <code>:peach:</code></td>\n<td align=\"left\">🍈 <code>:melon:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍌 <code>:banana:</code></td>\n<td align=\"left\">🍐 <code>:pear:</code></td>\n<td align=\"left\">🍍 <code>:pineapple:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🍠 <code>:sweet_potato:</code></td>\n<td align=\"left\">🍆 <code>:eggplant:</code></td>\n<td align=\"left\">🍅 <code>:tomato:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌽 <code>:corn:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Places-地点\"><a href=\"#Places-地点\" class=\"headerlink\" title=\"Places 地点\"></a>Places 地点</h2><table>\n<thead>\n<tr>\n<th align=\"left\">🏠 <code>:house:</code></th>\n<th align=\"left\">🏡 <code>:house_with_garden:</code></th>\n<th align=\"left\">🏫 <code>:school:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">🏢 <code>:office:</code></td>\n<td align=\"left\">🏣 <code>:post_office:</code></td>\n<td align=\"left\">🏥 <code>:hospital:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏦 <code>:bank:</code></td>\n<td align=\"left\">🏪 <code>:convenience_store:</code></td>\n<td align=\"left\">🏩 <code>:love_hotel:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏨 <code>:hotel:</code></td>\n<td align=\"left\">💒 <code>:wedding:</code></td>\n<td align=\"left\">⛪️ <code>:church:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏬 <code>:department_store:</code></td>\n<td align=\"left\">🏤 <code>:european_post_office:</code></td>\n<td align=\"left\">🌇 <code>:city_sunrise:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌆 <code>:city_sunset:</code></td>\n<td align=\"left\">🏯 <code>:japanese_castle:</code></td>\n<td align=\"left\">🏰 <code>:european_castle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⛺️ <code>:tent:</code></td>\n<td align=\"left\">🏭 <code>:factory:</code></td>\n<td align=\"left\">🗼 <code>:tokyo_tower:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🗾 <code>:japan:</code></td>\n<td align=\"left\">🗻 <code>:mount_fuji:</code></td>\n<td align=\"left\">🌄 <code>:sunrise_over_mountains:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌅 <code>:sunrise:</code></td>\n<td align=\"left\">🌠 <code>:stars:</code></td>\n<td align=\"left\">🗽 <code>:statue_of_liberty:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🌉 <code>:bridge_at_night:</code></td>\n<td align=\"left\">🎠 <code>:carousel_horse:</code></td>\n<td align=\"left\">🌈 <code>:rainbow:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎡 <code>:ferris_wheel:</code></td>\n<td align=\"left\">⛲️ <code>:fountain:</code></td>\n<td align=\"left\">🎢 <code>:roller_coaster:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚢 <code>:ship:</code></td>\n<td align=\"left\">🚤 <code>:speedboat:</code></td>\n<td align=\"left\">⛵️ <code>:boat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⛵️ <code>:sailboat:</code></td>\n<td align=\"left\">🚣 <code>:rowboat:</code></td>\n<td align=\"left\">⚓️ <code>:anchor:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚀 <code>:rocket:</code></td>\n<td align=\"left\">✈️ <code>:airplane:</code></td>\n<td align=\"left\">🚁 <code>:helicopter:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚂 <code>:steam_locomotive:</code></td>\n<td align=\"left\">🚊 <code>:tram:</code></td>\n<td align=\"left\">🚞 <code>:mountain_railway:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚲 <code>:bike:</code></td>\n<td align=\"left\">🚡 <code>:aerial_tramway:</code></td>\n<td align=\"left\">🚟 <code>:suspension_railway:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚠 <code>:mountain_cableway:</code></td>\n<td align=\"left\">🚜 <code>:tractor:</code></td>\n<td align=\"left\">🚙 <code>:blue_car:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚘 <code>:oncoming_automobile:</code></td>\n<td align=\"left\">🚗 <code>:car:</code></td>\n<td align=\"left\">🚗 <code>:red_car:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚕 <code>:taxi:</code></td>\n<td align=\"left\">🚖 <code>:oncoming_taxi:</code></td>\n<td align=\"left\">🚛 <code>:articulated_lorry:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚌 <code>:bus:</code></td>\n<td align=\"left\">🚍 <code>:oncoming_bus:</code></td>\n<td align=\"left\">🚨 <code>:rotating_light:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚓 <code>:police_car:</code></td>\n<td align=\"left\">🚔 <code>:oncoming_police_car:</code></td>\n<td align=\"left\">🚒 <code>:fire_engine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚑 <code>:ambulance:</code></td>\n<td align=\"left\">🚐 <code>:minibus:</code></td>\n<td align=\"left\">🚚 <code>:truck:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚋 <code>:train:</code></td>\n<td align=\"left\">🚉 <code>:station:</code></td>\n<td align=\"left\">🚆 <code>:train2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚅 <code>:bullettrain_front:</code></td>\n<td align=\"left\">🚄 <code>:bullettrain_side:</code></td>\n<td align=\"left\">🚈 <code>:light_rail:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚝 <code>:monorail:</code></td>\n<td align=\"left\">🚃 <code>:railway_car:</code></td>\n<td align=\"left\">🚎 <code>:trolleybus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🎫 <code>:ticket:</code></td>\n<td align=\"left\">⛽️ <code>:fuelpump:</code></td>\n<td align=\"left\">🚦 <code>:vertical_traffic_light:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚥 <code>:traffic_light:</code></td>\n<td align=\"left\">⚠️ <code>:warning:</code></td>\n<td align=\"left\">🚧 <code>:construction:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔰 <code>:beginner:</code></td>\n<td align=\"left\">🏧 <code>:atm:</code></td>\n<td align=\"left\">🎰 <code>:slot_machine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚏 <code>:busstop:</code></td>\n<td align=\"left\">💈 <code>:barber:</code></td>\n<td align=\"left\">♨️ <code>:hotsprings:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🏁 <code>:checkered_flag:</code></td>\n<td align=\"left\">🎌 <code>:crossed_flags:</code></td>\n<td align=\"left\">🏮 <code>:izakaya_lantern:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🗿 <code>:moyai:</code></td>\n<td align=\"left\">🎪 <code>:circus_tent:</code></td>\n<td align=\"left\">🎭 <code>:performing_arts:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📍 <code>:round_pushpin:</code></td>\n<td align=\"left\">🚩 <code>:triangular_flag_on_post:</code></td>\n<td align=\"left\">🇯🇵 <code>:jp:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇰🇷 <code>:kr:</code></td>\n<td align=\"left\">🇨🇳 <code>:cn:</code></td>\n<td align=\"left\">🇺🇸 <code>:us:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇫🇷 <code>:fr:</code></td>\n<td align=\"left\">🇪🇸 <code>:es:</code></td>\n<td align=\"left\">🇮🇹 <code>:it:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇷🇺 <code>:ru:</code></td>\n<td align=\"left\">🇬🇧 <code>:gb:</code></td>\n<td align=\"left\">🇬🇧 <code>:uk:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🇩🇪 <code>:de:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"Symbols-符号\"><a href=\"#Symbols-符号\" class=\"headerlink\" title=\"Symbols 符号\"></a>Symbols 符号</h2><table>\n<thead>\n<tr>\n<th align=\"left\">1️⃣ <code>:one:</code></th>\n<th align=\"left\">2️⃣ <code>:two:</code></th>\n<th align=\"left\">3️⃣ <code>:three:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">4️⃣ <code>:four:</code></td>\n<td align=\"left\">5️⃣ <code>:five:</code></td>\n<td align=\"left\">6️⃣ <code>:six:</code></td>\n</tr>\n<tr>\n<td align=\"left\">7️⃣ <code>:seven:</code></td>\n<td align=\"left\">8️⃣ <code>:eight:</code></td>\n<td align=\"left\">9️⃣ <code>:nine:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔟 <code>:keycap_ten:</code></td>\n<td align=\"left\">🔢 <code>:1234:</code></td>\n<td align=\"left\">0️⃣ <code>:zero:</code></td>\n</tr>\n<tr>\n<td align=\"left\">#️⃣ <code>:hash:</code></td>\n<td align=\"left\">🔣 <code>:symbols:</code></td>\n<td align=\"left\">◀️ <code>:arrow_backward:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⬇️ <code>:arrow_down:</code></td>\n<td align=\"left\">▶️ <code>:arrow_forward:</code></td>\n<td align=\"left\">⬅️ <code>:arrow_left:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔠 <code>:capital_abcd:</code></td>\n<td align=\"left\">🔡 <code>:abcd:</code></td>\n<td align=\"left\">🔤 <code>:abc:</code></td>\n</tr>\n<tr>\n<td align=\"left\">↙️ <code>:arrow_lower_left:</code></td>\n<td align=\"left\">↘️ <code>:arrow_lower_right:</code></td>\n<td align=\"left\">➡️ <code>:arrow_right:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⬆️ <code>:arrow_up:</code></td>\n<td align=\"left\">↖️ <code>:arrow_upper_left:</code></td>\n<td align=\"left\">↗️ <code>:arrow_upper_right:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏬ <code>:arrow_double_down:</code></td>\n<td align=\"left\">⏫ <code>:arrow_double_up:</code></td>\n<td align=\"left\">🔽 <code>:arrow_down_small:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⤵️ <code>:arrow_heading_down:</code></td>\n<td align=\"left\">⤴️ <code>:arrow_heading_up:</code></td>\n<td align=\"left\">↩️<code>:leftwards_arrow_with_hook:</code></td>\n</tr>\n<tr>\n<td align=\"left\">↪️ <code>:arrow_right_hook:</code></td>\n<td align=\"left\">↔️ <code>:left_right_arrow:</code></td>\n<td align=\"left\">↕️ <code>:arrow_up_down:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔼 <code>:arrow_up_small:</code></td>\n<td align=\"left\">🔃 <code>:arrows_clockwise:</code></td>\n<td align=\"left\">🔄 <code>:arrows_counterclockwise:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⏪ <code>:rewind:</code></td>\n<td align=\"left\">⏩ <code>:fast_forward:</code></td>\n<td align=\"left\">ℹ️ <code>:information_source:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆗 <code>:ok:</code></td>\n<td align=\"left\">🔀 <code>:twisted_rightwards_arrows:</code></td>\n<td align=\"left\">🔁 <code>:repeat:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔂 <code>:repeat_one:</code></td>\n<td align=\"left\">🆕 <code>:new:</code></td>\n<td align=\"left\">🔝 <code>:top:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆙 <code>:up:</code></td>\n<td align=\"left\">🆒 <code>:cool:</code></td>\n<td align=\"left\">🆓 <code>:free:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆖 <code>:ng:</code></td>\n<td align=\"left\">🎦 <code>:cinema:</code></td>\n<td align=\"left\">🈁 <code>:koko:</code></td>\n</tr>\n<tr>\n<td align=\"left\">📶 <code>:signal_strength:</code></td>\n<td align=\"left\">🈹 <code>:u5272:</code></td>\n<td align=\"left\">🈴 <code>:u5408:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈺 <code>:u55b6:</code></td>\n<td align=\"left\">🈯️ <code>:u6307:</code></td>\n<td align=\"left\">🈷️ <code>:u6708:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈶 <code>:u6709:</code></td>\n<td align=\"left\">🈵 <code>:u6e80:</code></td>\n<td align=\"left\">🈚️ <code>:u7121:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈸 <code>:u7533:</code></td>\n<td align=\"left\">🈳 <code>:u7a7a:</code></td>\n<td align=\"left\">🈲 <code>:u7981:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🈂️ <code>:sa:</code></td>\n<td align=\"left\">🚻 <code>:restroom:</code></td>\n<td align=\"left\">🚹 <code>:mens:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚺 <code>:womens:</code></td>\n<td align=\"left\">🚼 <code>:baby_symbol:</code></td>\n<td align=\"left\">🚭 <code>:no_smoking:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🅿️ <code>:parking:</code></td>\n<td align=\"left\">♿️ <code>:wheelchair:</code></td>\n<td align=\"left\">🚇 <code>:metro:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🛄 <code>:baggage_claim:</code></td>\n<td align=\"left\">🉑 <code>:accept:</code></td>\n<td align=\"left\">🚾 <code>:wc:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚰 <code>:potable_water:</code></td>\n<td align=\"left\">🚮 <code>:put_litter_in_its_place:</code></td>\n<td align=\"left\">㊙️ <code>:secret:</code></td>\n</tr>\n<tr>\n<td align=\"left\">㊗️ <code>:congratulations:</code></td>\n<td align=\"left\">Ⓜ️ <code>:m:</code></td>\n<td align=\"left\">🛂 <code>:passport_control:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🛅 <code>:left_luggage:</code></td>\n<td align=\"left\">🛃 <code>:customs:</code></td>\n<td align=\"left\">🉐 <code>:ideograph_advantage:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆑 <code>:cl:</code></td>\n<td align=\"left\">🆘 <code>:sos:</code></td>\n<td align=\"left\">🆔 <code>:id:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚫 <code>:no_entry_sign:</code></td>\n<td align=\"left\">🔞 <code>:underage:</code></td>\n<td align=\"left\">📵 <code>:no_mobile_phones:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚯 <code>:do_not_litter:</code></td>\n<td align=\"left\">🚱 <code>:non-potable_water:</code></td>\n<td align=\"left\">🚳 <code>:no_bicycles:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🚷 <code>:no_pedestrians:</code></td>\n<td align=\"left\">🚸 <code>:children_crossing:</code></td>\n<td align=\"left\">⛔️ <code>:no_entry:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✳️ <code>:eight_spoked_asterisk:</code></td>\n<td align=\"left\">✴️ <code>:eight_pointed_black_star:</code></td>\n<td align=\"left\">💟 <code>:heart_decoration:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🆚 <code>:vs:</code></td>\n<td align=\"left\">📳 <code>:vibration_mode:</code></td>\n<td align=\"left\">📴 <code>:mobile_phone_off:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💹 <code>:chart:</code></td>\n<td align=\"left\">💱 <code>:currency_exchange:</code></td>\n<td align=\"left\">♈️ <code>:aries:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♉️ <code>:taurus:</code></td>\n<td align=\"left\">♊️ <code>:gemini:</code></td>\n<td align=\"left\">♋️ <code>:cancer:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♌️ <code>:leo:</code></td>\n<td align=\"left\">♍️ <code>:virgo:</code></td>\n<td align=\"left\">♎️ <code>:libra:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♏️ <code>:scorpius:</code></td>\n<td align=\"left\">♐️ <code>:sagittarius:</code></td>\n<td align=\"left\">♑️ <code>:capricorn:</code></td>\n</tr>\n<tr>\n<td align=\"left\">♒️ <code>:aquarius:</code></td>\n<td align=\"left\">♓️ <code>:pisces:</code></td>\n<td align=\"left\">⛎ <code>:ophiuchus:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔯 <code>:six_pointed_star:</code></td>\n<td align=\"left\">❎<code>:negative_squared_cross_mark:</code></td>\n<td align=\"left\">🅰️ <code>:a:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🅱️ <code>:b:</code></td>\n<td align=\"left\">🆎 <code>:ab:</code></td>\n<td align=\"left\">🅾️ <code>:o2:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💠<code>:diamond_shape_with_a_dot_inside:</code></td>\n<td align=\"left\">♻️ <code>:recycle:</code></td>\n<td align=\"left\">🔚 <code>:end:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔛 <code>:on:</code></td>\n<td align=\"left\">🔜 <code>:soon:</code></td>\n<td align=\"left\">🕐 <code>:clock1:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕜 <code>:clock130:</code></td>\n<td align=\"left\">🕙 <code>:clock10:</code></td>\n<td align=\"left\">🕥 <code>:clock1030:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕚 <code>:clock11:</code></td>\n<td align=\"left\">🕦 <code>:clock1130:</code></td>\n<td align=\"left\">🕛 <code>:clock12:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕧 <code>:clock1230:</code></td>\n<td align=\"left\">🕑 <code>:clock2:</code></td>\n<td align=\"left\">🕝 <code>:clock230:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕒 <code>:clock3:</code></td>\n<td align=\"left\">🕞 <code>:clock330:</code></td>\n<td align=\"left\">🕓 <code>:clock4:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕟 <code>:clock430:</code></td>\n<td align=\"left\">🕔 <code>:clock5:</code></td>\n<td align=\"left\">🕠 <code>:clock530:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕕 <code>:clock6:</code></td>\n<td align=\"left\">🕡 <code>:clock630:</code></td>\n<td align=\"left\">🕖 <code>:clock7:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕢 <code>:clock730:</code></td>\n<td align=\"left\">🕗 <code>:clock8:</code></td>\n<td align=\"left\">🕣 <code>:clock830:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🕘 <code>:clock9:</code></td>\n<td align=\"left\">🕤 <code>:clock930:</code></td>\n<td align=\"left\">💲 <code>:heavy_dollar_sign:</code></td>\n</tr>\n<tr>\n<td align=\"left\">©️ <code>:copyright:</code></td>\n<td align=\"left\">®️ <code>:registered:</code></td>\n<td align=\"left\">™️ <code>:tm:</code></td>\n</tr>\n<tr>\n<td align=\"left\">❌ <code>:x:</code></td>\n<td align=\"left\">❗️ <code>:heavy_exclamation_mark:</code></td>\n<td align=\"left\">‼️ <code>:bangbang:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⁉️ <code>:interrobang:</code></td>\n<td align=\"left\">⭕️ <code>:o:</code></td>\n<td align=\"left\">✖️ <code>:heavy_multiplication_x:</code></td>\n</tr>\n<tr>\n<td align=\"left\">➕ <code>:heavy_plus_sign:</code></td>\n<td align=\"left\">➖ <code>:heavy_minus_sign:</code></td>\n<td align=\"left\">➗ <code>:heavy_division_sign:</code></td>\n</tr>\n<tr>\n<td align=\"left\">💮 <code>:white_flower:</code></td>\n<td align=\"left\">💯 <code>:100:</code></td>\n<td align=\"left\">✔️ <code>:heavy_check_mark:</code></td>\n</tr>\n<tr>\n<td align=\"left\">☑️ <code>:ballot_box_with_check:</code></td>\n<td align=\"left\">🔘 <code>:radio_button:</code></td>\n<td align=\"left\">🔗 <code>:link:</code></td>\n</tr>\n<tr>\n<td align=\"left\">➰ <code>:curly_loop:</code></td>\n<td align=\"left\">〰️ <code>:wavy_dash:</code></td>\n<td align=\"left\">〽️ <code>:part_alternation_mark:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔱 <code>:trident:</code></td>\n<td align=\"left\">:black_square: <code>:black_square:</code></td>\n<td align=\"left\">:white_square: <code>:white_square:</code></td>\n</tr>\n<tr>\n<td align=\"left\">✅ <code>:white_check_mark:</code></td>\n<td align=\"left\">🔲 <code>:black_square_button:</code></td>\n<td align=\"left\">🔳 <code>:white_square_button:</code></td>\n</tr>\n<tr>\n<td align=\"left\">⚫️ <code>:black_circle:</code></td>\n<td align=\"left\">⚪️ <code>:white_circle:</code></td>\n<td align=\"left\">🔴 <code>:red_circle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔵 <code>:large_blue_circle:</code></td>\n<td align=\"left\">🔷 <code>:large_blue_diamond:</code></td>\n<td align=\"left\">🔶 <code>:large_orange_diamond:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔹 <code>:small_blue_diamond:</code></td>\n<td align=\"left\">🔸 <code>:small_orange_diamond:</code></td>\n<td align=\"left\">🔺 <code>:small_red_triangle:</code></td>\n</tr>\n<tr>\n<td align=\"left\">🔻 <code>:small_red_triangle_down:</code></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>"},{"title":"Vue 入门教程","summary":"Vue 基础和使用","abbrlink":4425,"date":"2021-10-12T05:50:21.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![toast-7009956_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713430.jpg)\n\n<!--more-->\n\n# 前言\n\n > 此教程是针对有后端开发经验的同学，配合前端vue开发项目\n# Vue后端开发教程\n\n## 1.Vue 入门\n\n### 1.1 下载 Vuejs\n\n```html\n//开发版本\n<!-- 开发环境版本，包含了有帮助的命令行警告 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n\n//生产版本\n<!-- 生产环境版本，优化了尺寸和速度 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n```\n\n###  1.2 Vue第一个应用\n\n```vue\n<div id=\"app\">\n    {{msg}}  {{username}} {{pwd}}\n</div>\n\n<!--建议放到临近的js位置-->\n<!--1.引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<!--2.创建vue实例-->\n<script>\n    const app = new Vue({\n        el: '#app',         //用来给vue实例定义一个作用范围\n        data: {         //用来给vue实例定义一些相关数据\n            msg:\"你好，欢迎这个世界！\",\n            username:\"hello vue\",\n            pwd: \"1234\"\n        },\n    });\n</script>\n```\n\n\n\n```markdown\n 总结：\n\t1.vue实例（对象）中el属性：代表Vue的作用范围    日后在Vue的作用范围内都可以使用Vue语法\n\t2.vue实例（对象）中的data：绑定一些相关的数据变量，绑定的数据通过{{变量名}}在Vue的作用范围内取出\n\t3.在使用{{}}进行获取data中数据时，可在{{}}写表达式，运算符，调用相关方法，以及逻辑运算等\n\t4.el属性中可以书写任意css选择器（jq选择器），但是使用Vue开发是推荐使用，id选择器\n```\n\n----\n\n## 2.vue-text和v-html\n\n### 2.1 v-text\n\n> v-text : 用来获取data中数据将数据以文本的形式渲染到指定的标签内部 类似 js中的 innerText\n\n```html\n<div id=\"app\" class = \"aa\">\n    <!--差值表达器-->\n    <span>{{msg}}</span><br>\n    <span v-text=\"msg\"></span>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '.aa',\n        data: {\n            msg: \"hello world\"\n\n        }\n    });\n```\n\n```markdown\n  总结\n\t\t1.{{}}（插值表达）和v-text获取数据的区别  \n\t\t\ta.使用v-text取值会将标签中原有的数据覆盖  插值表达其不会\n\t\t\tb.使用v-text可以避免在网络环境较差的情况出现插值闪烁\n```\n\n### 2.2 v-html\n\n> 　　　　v-html: 用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似 js 中 innerHTML\n\n```html\n<div id=\"app\" class=\"aa\">\n\n    <span>{{msg}}</span><br>\n    <span v-text=\"msg\"></span>\n    <br>\n    <span v-html=\"msg\"></span>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            msg: \"<a href=''> 欢迎你!</a>\"\n\n        }\n    });\n```\n\n----\n\n## 3.vue中时间绑定（v-on）\n\n### 3.1 绑定事件语法\n\n```html\n<div id=\"app\" class = \"aa\">\n    <h2>{{msg}}</h2>\n    <h2 v-text=\"msg\"></h2>\n    <span>年龄：{{age}}</span>\n    <br>\n    <input type=\"button\" value=\"点击改变年龄\" v-on:click=\"changeAge\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            msg: \"hello world\",\n            age: \"23\"\n        },\n        methods:{ //定义vue事件\n            changeAge:function (){\n                alert(\"出发\")\n            }\n        }\n    });\n</script>\n```\n\n```markdown\n# 总结：\n\t事件   事件源:发送事件demo元素   事件：发生特定的动作 click...   监听器  发生特定动作之后的事件处理程序通常时js中的函数\n\t1.在vue中绑定事件时通过v-on指令完成的  v-on:事件名  如 v-on:click\n\t2.在v-on:事件名的赋值语句中的当前事件触发的函数名\n\t3.在vue中事件的函数统一定义在Vue实例的methods属性中\n\t4.在vue定义事件中this值的就是当前Vue实例，日后可以在事件中通过使用this获取Vue中相关数据\n```\n\n### 3.2 Vue事件简化写法\n\n```html\n<div id=\"app\" class=\"aa\">\n\t<h2>\n\t\t{{age}}\n\t</h2>\n\t<input type=\"button\" value=\"通过v-on事件修改年龄 +1\" v-on:click=\"changeage\">\n\t<input type=\"button\" value=\"通过@事件修改年龄 -1\" @click=\"editage\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n\tconst app = new Vue({\n\t\tel: '#app',\n\t\tdata: {\n\t\t\tage: 20\n\t\t},\n\t\tmethods: {\n\t\t\tchangeage: function() {\n\t\t\t\tthis.age++;\n\t\t\t},\n\t\t\teditage: function() {\n\t\t\t\tthis.age--;\n\t\t\t}\n\t\t}\n\t});\n</script>\n```\n\n```markdown\n# 总结 \t1. vue事件简化通过 @符号 简化 v-on\n```\n\n### 3.3 Vue优化写法\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2>{{age}}</h2>\n    <input type=\"button\" value=\"通过@事件修改年龄 -1\" @click=\"editage\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data:{\n            age:20\n        },\n        methods: {\n            // changeage: function () {\n            //     this.age++;\n            // },\n            editage() {\n                this.age--;\n            }\n        }\n\n    });\n</script>\n```\n\n```markdown\n# 总结\n \t1.事件定义存在两种写法 1.函数名:function(){} 2.函数名(){}推荐\n```\n\n### 3.4 Vue事件传递\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2>{{age}}</h2>\n    <input type=\"button\" value=\"事件传值\" @click=\"changeage(23,'xiaochen')\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data:{\n            age:20\n        },\n        methods: {\n            changeage(age) {\n                this.age = age;\n            },\n        }\n\n    });\n</script>\n```\n\n```markdown\n# 总结\t1.使用事件时，通常调用参数，通过函数接收参数\n```\n\n----\n\n## 4.v-show v-if v-bind\n\n### 4.1 v-show\n\n> v-show 用来控制页面中某个元素是否展示  底层控制是标签 display 属性\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2 v-show=\"false\">\n        v-show\n    </h2>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    new Vue({\n        el: '#app',\n        data: {},\n        methods: {}\n    });\n</script>\n```\n\n### 4.2.V-if\n\n>  控制页面中的标签元素是否展示底层通过对dom树节点进行添加和删除来控制展示和隐藏用\n\n### 4.3.v-bind\n\n>  用来给页面中标签元素绑定相应的属性简化写法v-bin:属性名 ==》:属性名\n\n```html\n<div id=\"app\">\n    <h2 v-show=\"false\">\n        v-show\n    </h2>\n    <h2 v-show=\"isShow\">\n        v-show hello\n    </h2>\n    <h1 v-if=\"false\">\n        袁老一路走好\n    </h1>\n    <h1 v-if=\"false\">\n        吴老一路走好\n    </h1>\n    <h1 v-if=\"false\">\n        浪费粮食\n    </h1>\n    <img v-if=\"isShow\" :src=\"src\" v-bind:title=\"title\" />\n    <input type=\"button\" value=\"点击我改变title\" @click=\"changeTitle('这是修改后的title')\">\n    <input type=\"button\" value=\"点击我改变src\" @click=\"changeSrc('https://gitee.com/lingzhexi/blogImage/raw/img2021/05/shiro/20210523165516.png')\">\n    <br>\n    <input type=\"button\" value=\"点我显示隐藏\" @click=\"showHide\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    new Vue({\n        el: '#app',\n        data: {\n            isShow: true,\n            title: '陈小佳',\n            src: 'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png'\n        },\n        methods: {\n            showHide() {\n                this.isShow = !this.isShow;\n            },\n            changeTitle(title) {\n                this.title = title;\n            },\n            changeSrc(src) {\n                this.src = src;\n            }\n        }\n    });\n</script>\n```\n\n----\n\n## 5.v-for使用\n\n> 对象遍历\n\n创建vue模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>\n        ${NAME}\n    </title>\n</head>\n<body>\n<div id=\"app\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {},\n        methods: {},\n        components: {}\n    });\n</script>\n</body>\n\n</html>\n```\n\n\n\n```html\n<div id=\"app\">\n    {{user.name}}{{user.age}}\n    <br>\n    <span v-for=\"u in user\">\n\t\t{{u}}\n\t</span>\n    <br>\n    <span v-for=\"(value,key,index) in user\">\n\t\t{{key}}:{{value}}\n\t</span>\n    <br>\n    <ul>\n        <li v-for=\"a,index in arr\">\n            {{index}}:{{a}}\n        </li>\n    </ul>\n    <ul>\n        <li v-for=\"u in users\" :key=\"u.id\">\n            {{u.id}}={{u.name}}==={{u.age}}=={{u.state}}\n        </li>\n    </ul>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            user: {\n                name: \"小岑\",\n                age: 24\n            },\n            arr: [\"土豆\", \"玉米\", \"小麦\"],\n            users: [{\n                id: 1,\n                name: \"zhangs\",\n                age: 25,\n                state: \"good\"\n            },\n                {\n                    id: 2,\n                    name: \"lis\",\n                    age: 25,\n                    state: \"bad\"\n                }]\n        },\n        methods: {},\n        components: {}\n    });\n</script>\n```\n\n```markdown\n# 总结在使用-for的时候一定要注意加入:key用来给vue内部提供重用和排序的唯—key\n```\n\n----\n\n## 6.v-model 双向绑定\n\n> `v-model`:作用用来绑定标签元素的值与wue实例对象中data数据保持一致,从而实现双向的数据绑定机制\n\n```HTML\n <div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <div>\n        {{message}}\n    </div>\n    <input type=\"button\" value=\"改变输入框的值\" @click=\"changeMsg('凌哲熙')\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            message: \"\"\n        },\n        methods: {\n            changeMsg(msg) {\n                this.message = msg;\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n```markdown\n# 总结\n\t1.使用v- model指令可以实现数据的双向绑定\n\t2.所谓双向绑定表单中数据变化导致vue实例data数据变化vue实例中data数据的变化导致表单中数据变化称之为双向绑定\n# MVWM架构  双向绑定机制\n\tModel:数据vue   实例中绑定数据\n\tVM: ViewMode1   监听器\n\tView:页面\t\t  页面展示的数据\n```\n\n### 练习：记事本案例\n\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"msg\"> <input type=\"button\" value=\"添加到记事本\" @click=\"save()\">\n    <br>\n    <ul>\n        <li v-for=\"item,index in lists\">\n            {{index+1}}: {{item}} <a href=\"javascript:\" @click=\"delItem(index)\">删除</a>\n        </li>\n    </ul>\n    <span>总数量：{{lists.length}} 条</span> <input type=\"button\" v-show=\"lists.length!=0\" value=\"删除所有\" @click=\"delAll()\">\n</div>\n\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            lists:['今天下了一场暴雨','晚上回家吃小龙虾'],\n            msg:\"\"\n        },\n        methods: {\n            save() {\n                if (''!=this.msg) {\n                    this.lists.push(this.msg);\n                    this.msg = '';\n                }\n            },\n            delItem(index) {\n                this.lists.splice(index, 1);\n            },\n            delAll() {\n                this.lists = [];\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n----\n\n## 7.事件修饰符\n\n> `修饰符`: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制\n\n```markdown\n# 1.常用的事件修饰符    \n    .stop\n    .prevent\n    .capture\n    .self\n    .once\n    .passive\n```\n\n### 7.1 stop事件修饰符\n\n> 用来阻止事件冒泡\n\n```html\n<div id=\"app\">\n    <div class=\"aa\" @click=\"divClick\">\n        <!--阻止事件冒泡-->\n        <input type=\"button\" value=\"按钮\" @click.stop=\"btnClick\">\n    </div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {},\n        methods: {\n            divClick() {\n                alert(\"div is clicked\");\n            },\n            btnClick() {\n                alert('button is clicked');\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n### 7.2 prevent事件修饰符\n\n> 用来阻止标签的默认行为\n\n```html\n  <a href=\"https://www.bilibili.com\" @click=\"aClick\">b站</a>\n```\n\n### 7.3 self事件修饰符\n\n>  用来针对于当前标签的事件触发=>只触发自己标签的上特定动作的事件\n\n```html\n\t<!--只触发标签自身的事件-->\n<div class=\"aa\" @click.self=\"divClick\">\n    <!--阻止事件冒泡-->\n    <input type=\"button\" value=\"按钮\" @click.stop=\"btnClick\">\n    <input type=\"button\" value=\"按钮1\" @click=\"btnClick1\">\n</div>\n```\n\n### 7.4 once 事件修饰符\n\n> once 一次 作用：就是让指定事件只触发一次\n\n```html\n<!--.prevent ：用来阻止事件默认的行为.once ：用来只执行一次特定的事件-->\n<a href=\"https://www.baidu.com\" @click.prevent.once=\"aClick\">\n    百度\n</a>\n```\n\n----\n\n## 8.按键修饰符\n\n>  作用:用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符\n\n```markdown\n# 按键修饰符\t\n    .enter\t\n    .tab\n    .delete (捕获“删除”和“退格”键)\n    .esc\n    .space\n    .up\n    .down\n    .left\n    .right\n```\n\n### 8.1 enter 回车键\n\n> 用来在触发回车按键之后触发的事件\n\n```html\n  <input type=\"text\" v-model=\"msg\" @keyup.enter=\"keyups\">\n```\n\n### 8.2 tab\n\n> 用来捕获到tab键执行到当前标签是才会触发\n\n```html\n<!--其他光标tab到该文本框的时候触发-->\n<input type=\"text\" v-model=\"msg\" @keyup.tab=\"tabkey\">\n```\n\n### 8.3 其他\n\n```html\n    <input type=\"text\" v-model=\"msg\" @keyup.delete=\"deleteKey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.esc=\"esckey\">\n    <!--空格-->\n    <input type=\"text\" v-model=\"msg\" @keyup.space=\"spacekey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.left=\"leftkey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.right=\"rigthkey\">\n```\n\n## 9.Axios基本使用\n\n### 9.1引言\n\n>  `Axios` 是一个异步请求技术核心作用就是用来在页面中发送异步请求并获取对应数据在页面中渲染页面局部更新技术Aax\n\n### 9.2 Axios第一个程序\n\t中文网站：https://www.kancloud.cn/yunye/axios/234845\n\t安装：https://unpkg.com/axios/dist/axios.min.js\n\n#### 9.2.1 GET请求\n\n```js\n//发送Get请求\naxios.get(\"http://localhost:8080/findAll?name=xiaochen\").then(function(response) {\n    console.log(response.data);\n}).\ncatch(function(error) {\n    console.log(error);\n});\n```\n\n#### 9.2.2 POST请求方式\n\n```js\n//POST请求\naxios.post('http://localhost:8080/save', {\n    username: 'xiaochen',\n    age: 23,\n    email: '5234@qq.com',\n    phone: '15352252514'\n}).then(function(response) {\n    console.log(response.data)\n}).\ncatch(function(error) {\n    console.log(error);\n});\n```\n\n#### 9.2.3 axios并发请求\n\n> `并发请求`：将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果\n\n```js\n //1.创建查询所有请求    \nfunction findAll() {\n    return axios.get('http://localhost:8080/findAll?name=xiaochen');\n}\n//2.创建保存请求    \nfunction save() {\n    return axios.post('http://localhost:8080/save', {\n        username: 'xiaochen',\n        email: '5234@qq.com',\n        age: 23,\n        phone: '15352252514'\n    });\n}\n//并发操作    \naxios.all([findAll(), save()]).then(axios.spread(function(res1, res2) {\n    console.log(res1.data);\n    console.log(res2.data);\n}));\n//用来发送一组并发请求\n\n```\n\n### 9.2  vue 结合 axios 查询天气\n\n```vue\n< div id=\"app\">\n<div>\n    <input type=\"text\" v - model=\"name\" @keyup.delete=\"show\" @keyup.enter=\"searchCity\">\n    <input type=\"button\" value=\"搜索\" @click=\"searchCity\">\n</div>\n<span v-for=\"city in citys\">\n\t\t<a href=\"\" @click.prevent=\"searchCitys(city)\">\n\t\t\t{{city}} &nbsp\n\t\t</a>\n\t</span>\n<hr>\n<span v-show=\"isShow\">\n\t\t{{name}}：今天天气是 {{weather}}\n\t</span>\n</div>\n<script src=\"https:/ / cdn.jsdelivr.net / npm / vue / dist / vue.js \">\n</script>\n<!--引入axios-->\n<script src=\"https: //unpkg.com/axios/dist/axios.min.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            name: '',\n            citys: ['北京', '上海', '天津', '深圳'],\n            weather: '',\n            isShow: false\n        },\n        methods: {\n            searchCity() {\n                let _this = this axios.get(\"http://localhost:8080/city/find?name=\" + this.name).then(function(response) {\n                    console.log(response.data);\n                    _this.weather = response.data.message;\n                    _this.isShow = true;\n                }).\n                catch(function(error) {\n                    console.log(error);\n                });\n            },\n            show() {\n                this.isShow = false;\n            },\n            searchCitys(name) {\n                this.name = name;\n                this.searchCity();\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n\n\n------\n\n## 10. Vue生命周期\n\n> `生命周期钩子`   ===》 `生命周期函数`\n\n![Vue 实例生命周期](https://cn.vuejs.org/images/lifecycle.png)\n\n Vue生命周期总结\n\n```js\n    // 1.初始化阶段\t\t  \n    beforeCreate() {//1.生命周期中第一个函数,该函数在执行时vue实例仅仅完成了自身事件的绑定和生命周期函的初始化工作,Vue实例中还没有 Data el methods相关属性            \n    \tconsole.log(\"beforeCreate:\" + this.msg);\n    },\n    created() { //2.生命周期中第二个函数,该函数在执行时vue实例已经初始化了data属性和 methods中相关方法     \n    \tconsole.log(\"created:\" + this.msg);\n    },\n    beforeMount() {//3.生命周期中第三个函数,该函数在执行时vue将E1中指定作用范围作为模板编译            \n    \tconsole.log(\" beforeMount:\" + document.getElementById(\"sp\").innerText);\n    },\n    mounted() {//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面           \n  \t \tconsole.log(\"Mounted: \" + document.getElementById(\"sp\").innerText);\n    //2.运行阶段\n    beforeUpdate() {//5.生命周期中第五个函数,该函数是data中数据发生变化时执行这个事件执行时仅仅是vue实例中data数据变化页面显示的依然是原始数据           \n        console.log(\"beforeUpdate: \" + this.msg);\n        console.log(\"beforeUpdate: \" + document.getElementById(\"sp\").innerText);\n    },\n    updated() {//6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化页面中数据已经和data中数据一致            \n        console.log(\"updated: \" + this.msg);\n        console.log(\"updated: \" + document.getElementById(\"sp\").innerText);\n    },\n    //3.销毁阶段\n    beforeDestory() {//7.生命周期第七个函数,该函数执行时,vue中所有数据 methods componet都没销到       \n    },\n    destoryed() { //8.生命周期的第八个函数,该函数执行时,Wue实例彻底销毁        \n    }\n```\n\n## 11.Vue中的组件( Component)\n\n### 11.1组件作用\n\n​\t组件作用:用来减少wue实例对象中代码量,日后在使用wue开发过程中,可以根据不能业务功能将页面中划分不同的多个组件然后由多个组件去完成整个页面的布局便于日后使用\nVue进行开发时页面管理,方便开发人员维护\n\n### 11.2 组件使用\n\n#### 11.2.1 全局组件注册\n\n说明:全局组件注册给vue实例,日后可以在任意ue实例的范围内使用该组件\n\n```js\n//1.开发全局组件    \nVue.component('login',(template:'<div><h1>用户登录</h1></div>'    });\n//2.使用全局组件在Vue实例范围内    \n<login></login>\n```\n\n```markdown\n# 注意\t\n\t1.Vue.component用来开发全局组件  \n\t\t参数1:组件的名称  \n\t\t参数2: 组件配置{} template:'' 用来书写组件的htm1代码 template中必须有且只有一个root元素    \n\t2.使用时需要在vue的作用范围内根据组件名使用全局组件    \n\t3.如果在注册组件过程中使用驼峰命名组件的方式在使用组件时必须将驼峰的所有单词小写加入-线进行使用\n```\n\n\n\n#### 11.2.2 局部组件注册\n\n​\t`说明:通过将组件注册给对应vue实例中一个 components属性来完成组件注册,这种方式不会对vue实例造成累加`\n\n- 第一种开发\n\n```js\n//局部组件登录模板\nlet login = {    template:'<div><h1>用户管理</h1></div>'}\nconst app = new Vue({    \n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n        login: login\n    }});\n//使用局部组件\n<login></login>\n```\n\n- 第二种开发\n\n```js\n//1.声明局部组件模板 template 标签 注意：在Vue实例作用范围外声明\t\n<template id=\"loginTemplate\">        \n    <h1>用户管理</h1>    \n</template>\n//2.定义变量用来保存模板配置对象    \nlet login = { \n    //具体组件模板        \n    template: '#loginTemplate' \n    //使用自定义template 标签选择器即可    \n};\n//3.注册组件    \nconst app = new Vue({\n    el: '#app',\n    data: {},        \n    methods: {},        \n    components: {\n        //用来注册局部组件            \n        login: login \n        //注册局部组件\n    }    \n});\n//4使用局部组件\t\n<login></login>\n```\n\n### 11.3 Prop的使用\n\n`作用: props用来给组件传递相应静态数据或者是动态数据的`\n\n#### 11.3.1 通过在组件上声明静态数据传递给组件内部\n\n```js\n//1.声明组件模板配置对象    \nlet login= {        \n    template:'<div><h1>欢迎：{{username}}年龄：{{age}}<h1></div>',        \n    props:['userName','age'] // props作用用来接收使用组件时通过组件标签传递的数    \n}\n//2.注册组件\t\nconst app new Vue({        \n    el: '#app',        \n    data: {}        \n    methods: {},        \n    components:{       \t\t\n       login   \n       //组件注册\n\t}\t\n});\n//3.通过组件完成数据传递\n<login user-name=\"小陈\" age=\"23\"></1ogin>\n```\n\n\n\n```markdown\n# 总结    \n\t1.使用组件时可以在组件上定义多个属性以及对应数据    \n\t2.在组件内部可以使用 props数组生命多个定义在组件上的属性名日后可以在组件中通过{属性名}}方式获取组件中属性值\n```\n\n#### 11.3.2 通过在组件上声明动态数据传递给组件内部\n\n```js\n//1.声明组件模板对象 \n\tconst logins = {        \n        template: \"<div><h1>welcome {{userName}} ,age {{age}}, email: {{email}},salary {{salary}} !</h1></div>\",        \n        props:[\"userName\",\"age\",\"email\",\"salary\"]    \n    } \n//2.注册局部组件 \n    const app = new Vue({\n        el:'#app',\n        data:{\n            email:'333@qq.com',\n            salary:'200'\n        },\n        methods:{},\n        components:{\n            login  \n            //注册组件\n        }    \n    });\n//3.使用组件 \n<login :email=\"email\" :salary=\"salary\" user-name=\"小陈\" age=\"24\"></login>\n```\n\n#### 11.3.2 prop的单项数据流\n\n`单向数据流:所有的 prop 都使得其父子prop之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行`\n\n> 所有的prop都使得其父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外改变父级组件的状\n> 态,从而导致你的应用的数据流向难以理解\n> 额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Wue会在浏览器的控\n> 制台中发出警告。一摘自官网\n\n### 11.4 组件中定义数据和事件使用\n\n1.组件中定义属于组件的数据\n\n```js\n//组件声明的配置对象 \nconst login = {\n    template: \"<div><h1>{{name}} Vue<ul><li v-for='item,index in lists'>{{index+1}}=={{item}}</li></ul></h1></div>\",\n    data() {\n        return {\n            name: 'learning',\n            lists: ['java', 'js', 'python']\n        }\n    }\n}\n```\n\n2.组件定义事件\n\n```js\nconst login ={    \n    template: \"<div><h1>{{name}}</h1><input type='button' value='点击我修改名称' @click='change'></div>\",    \n    data() {\n        return {\n            name: \"john\"\n        };    \n    },    \n    methods:{\n        change() {\n            this.name = \"micheal\";\n        }    \n    }\n}\n```\n\n```markdown\n# 总结\t\n\t1.组件中定义事件和直接在vue中定义事件基本一致直接在组件内部对应的htm1代码上加入@事件名=函数名方式即可\t\t2.在组件内部使用 methods属性用来定义对应的事件函数即可,事件函数中this指向的是当前组件的实例\n```\n\n### 11.5 向子组件中传递事件并在子组件中调用改事件\n\n`在子组件中调用传递过来的相关事件必须使用this.$emit(函数名)方式调用`\n\n```js\n//1.声明组件\n\t<template id=\"login\">\n        <div>\n        \t<h1>Vue {{uname}}</h1>\n\t\t\t<input type='button' value='点我' @click='change'>\n        </div>\n\t</template>\n\tconst login = {\n        template: \"#login\",\n        data() {\n            return {\n                uname: this.name\n            };\n        },\n        methods: {\n            change() {\n                this.uname = '点击后触发Vue事件'\n                //调用Vue中实例的事件\n                this.$emit('fun')//调用组件传递过来的其他函数时需要使用this.$emit('函数名调用)\n            },\n        },\n        props: ['name']}\n    //2.注册组件\n    const app = new Vue({\n        el: '#app',\n        data: {\n            username: 'xiaochen'    },\n        methods: {\n            fun(){ //一个事件函数  将这个事件函数传递给子组件           \n                alert('Vue实例的事件')\n            }\n        },\n        components: {\n            login,  //组件的注册    \n        }});\n//3.使用组件\n<login :name=\"username\" @fun=fun></login>   // ===>在组件内部使用this.$emit(\"fun\")\n```\n\n![image-20210602011155939](https://gitee.com/lingzhexi/blogImage/raw/img2021/05/jasper/20210602011206.png)\n\n## 12.Vue路由\n\n`注意事项`\n\n![image-20210602014845994](D:\\桌面\\学习\\文章\\docs\\1.Vue 入门.assets\\image-20210602014845994.png)\n\n### 12.1 路由\n\n`路由：根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一的请求管理`\n\n### 12.2 作用\n\n​\t`用来在vue中实现组件间的动态切换`\n\n### 12.3 使用\n\n1.引入路由\n\n```js\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script><script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script> //Vue 路由js\n```\n\n2.创建组件对象\n\n```js\n/* 创建模板 */    \n<template id=\"login\">\n    <h1>登录页面</h1>    \n</template>    \n<template id=\"reg\">\n    <h1>注册页面</h1>\n</template>    \nconst login = {        \n    template: '#login'    \n}    \nconst register = {\n    template: '#reg'\n}\n```\n\n3.定义路由对象的规则\n\n```js\n/* 定义路由 */    \nconst router = new VueRouter({\n    routes:[\n        {path:\"/login\",component:login},\n        //path:路由的路径  component：路由的相应组件\n        {path:\"/reg\",component:register}\n    ]\n})\n```\n\n4.将路由对象注册到vue实例\n\n```js\n//路由注册到Vue实例\nconst app = new Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    router:router  //设置路由对象\n});\n```\n\n5.在页面中显示路由的组件\n\n```vue\n<!-- 显示路由组件 -->\n    <router-view></router-view>\n```\n\n6.根据链接切换路由\n\n```html\n<a href=\"#/login\">登录</a>\n<a href=\"#/reg\">注册</a>\n```\n\n###   12.4  router-link使用\n\n​\t`作用：用来替换我们在切换路由时使用a标签切换路由`\n\n​\t`好处：就是可以自动给路由路径加入#不需要手动加入`\n\n```vue\n<router-link to=\"/login\" tag=\"button\">登录</router-link>\n<router-link to=\"/reg\" tag=\"span\">注册</router-link>\n```\n\n\n\n```markdown\n# 总结\t\n\t1. router-link用来替换使用a标签实现路由切换\t好处是不需要书写#号直接书写路由路径\t\n\t2. router-1 ink to属性用来书写路由路径\ttag属性:用来将 router-1ink渲染成指定的标签\n```\n\n### 12.5 默认路由\n\n​\t`作用:用来在第一次进入界面是显示一个默认的组件`\n\n```js\n/* 定义路由 */    \nconst router = new VueRouter({        \n    routes:[\n        {path:\"/\",redirect:'/login'}, // redirect:用来当访问的是默认路由\"/\"时\t跳转到指定的路由展示\t推荐使用            \n        {path:\"/login\",component:login},\n        {path:\"/reg\",component:register}\n    ] \n})\n```\n\n### 12.6 路由中参数传递\n\n- 第一种方式传递参数 传统方式\n\n1. 通过?号形式拼接参数\n\n   ```vue\n   <router-link to=\"/login?id=1&name=张三\" tag=\"button\">i need login</router-link>\n   ```\n\n2. 组件中获取参数\n\n   ```js\n   const login = {        \n       template: '#login',\n       created() {\n           console.log(\"id: \" + this.$route.query.id + \"  ==> name:\" + this.$route.query.name);        \n       }    \n   }\n   ```\n\n- 第二种方式传递参数 restful\n\n1. 通过使用路径方式传递\n\n   ```js\n   <router-link to=\"/reg/2/李四\" tag=\"button\">i need register</router-link>\n   const router = new VueRouter({\n       routes: [\n           {path: '/reg/:id/:name', component: reg}\n       ]\n   })\n   ```\n\n2. 组件中获取参数\n\n   ```js\n   const reg = {    \n       template: '#reg',\n       created() {\n           console.log('id: ' + this.$route.params.id + '  ===>name:' + this.$route.params.name);    \n       }\n   }\n   ```\n   \n   \n\n","source":"_posts/2021-10-12-Vue-从入门到入土.md","raw":"---\ntitle: Vue 入门教程\ntags: Vue系列\ncategories: Vue系列\nsummary: Vue 基础和使用\nabbrlink: 4425\ndate: 2021-10-12 13:50:21\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![toast-7009956_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713430.jpg)\n\n<!--more-->\n\n# 前言\n\n > 此教程是针对有后端开发经验的同学，配合前端vue开发项目\n# Vue后端开发教程\n\n## 1.Vue 入门\n\n### 1.1 下载 Vuejs\n\n```html\n//开发版本\n<!-- 开发环境版本，包含了有帮助的命令行警告 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n\n//生产版本\n<!-- 生产环境版本，优化了尺寸和速度 -->\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n```\n\n###  1.2 Vue第一个应用\n\n```vue\n<div id=\"app\">\n    {{msg}}  {{username}} {{pwd}}\n</div>\n\n<!--建议放到临近的js位置-->\n<!--1.引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<!--2.创建vue实例-->\n<script>\n    const app = new Vue({\n        el: '#app',         //用来给vue实例定义一个作用范围\n        data: {         //用来给vue实例定义一些相关数据\n            msg:\"你好，欢迎这个世界！\",\n            username:\"hello vue\",\n            pwd: \"1234\"\n        },\n    });\n</script>\n```\n\n\n\n```markdown\n 总结：\n\t1.vue实例（对象）中el属性：代表Vue的作用范围    日后在Vue的作用范围内都可以使用Vue语法\n\t2.vue实例（对象）中的data：绑定一些相关的数据变量，绑定的数据通过{{变量名}}在Vue的作用范围内取出\n\t3.在使用{{}}进行获取data中数据时，可在{{}}写表达式，运算符，调用相关方法，以及逻辑运算等\n\t4.el属性中可以书写任意css选择器（jq选择器），但是使用Vue开发是推荐使用，id选择器\n```\n\n----\n\n## 2.vue-text和v-html\n\n### 2.1 v-text\n\n> v-text : 用来获取data中数据将数据以文本的形式渲染到指定的标签内部 类似 js中的 innerText\n\n```html\n<div id=\"app\" class = \"aa\">\n    <!--差值表达器-->\n    <span>{{msg}}</span><br>\n    <span v-text=\"msg\"></span>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '.aa',\n        data: {\n            msg: \"hello world\"\n\n        }\n    });\n```\n\n```markdown\n  总结\n\t\t1.{{}}（插值表达）和v-text获取数据的区别  \n\t\t\ta.使用v-text取值会将标签中原有的数据覆盖  插值表达其不会\n\t\t\tb.使用v-text可以避免在网络环境较差的情况出现插值闪烁\n```\n\n### 2.2 v-html\n\n> 　　　　v-html: 用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似 js 中 innerHTML\n\n```html\n<div id=\"app\" class=\"aa\">\n\n    <span>{{msg}}</span><br>\n    <span v-text=\"msg\"></span>\n    <br>\n    <span v-html=\"msg\"></span>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            msg: \"<a href=''> 欢迎你!</a>\"\n\n        }\n    });\n```\n\n----\n\n## 3.vue中时间绑定（v-on）\n\n### 3.1 绑定事件语法\n\n```html\n<div id=\"app\" class = \"aa\">\n    <h2>{{msg}}</h2>\n    <h2 v-text=\"msg\"></h2>\n    <span>年龄：{{age}}</span>\n    <br>\n    <input type=\"button\" value=\"点击改变年龄\" v-on:click=\"changeAge\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            msg: \"hello world\",\n            age: \"23\"\n        },\n        methods:{ //定义vue事件\n            changeAge:function (){\n                alert(\"出发\")\n            }\n        }\n    });\n</script>\n```\n\n```markdown\n# 总结：\n\t事件   事件源:发送事件demo元素   事件：发生特定的动作 click...   监听器  发生特定动作之后的事件处理程序通常时js中的函数\n\t1.在vue中绑定事件时通过v-on指令完成的  v-on:事件名  如 v-on:click\n\t2.在v-on:事件名的赋值语句中的当前事件触发的函数名\n\t3.在vue中事件的函数统一定义在Vue实例的methods属性中\n\t4.在vue定义事件中this值的就是当前Vue实例，日后可以在事件中通过使用this获取Vue中相关数据\n```\n\n### 3.2 Vue事件简化写法\n\n```html\n<div id=\"app\" class=\"aa\">\n\t<h2>\n\t\t{{age}}\n\t</h2>\n\t<input type=\"button\" value=\"通过v-on事件修改年龄 +1\" v-on:click=\"changeage\">\n\t<input type=\"button\" value=\"通过@事件修改年龄 -1\" @click=\"editage\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n\tconst app = new Vue({\n\t\tel: '#app',\n\t\tdata: {\n\t\t\tage: 20\n\t\t},\n\t\tmethods: {\n\t\t\tchangeage: function() {\n\t\t\t\tthis.age++;\n\t\t\t},\n\t\t\teditage: function() {\n\t\t\t\tthis.age--;\n\t\t\t}\n\t\t}\n\t});\n</script>\n```\n\n```markdown\n# 总结 \t1. vue事件简化通过 @符号 简化 v-on\n```\n\n### 3.3 Vue优化写法\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2>{{age}}</h2>\n    <input type=\"button\" value=\"通过@事件修改年龄 -1\" @click=\"editage\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data:{\n            age:20\n        },\n        methods: {\n            // changeage: function () {\n            //     this.age++;\n            // },\n            editage() {\n                this.age--;\n            }\n        }\n\n    });\n</script>\n```\n\n```markdown\n# 总结\n \t1.事件定义存在两种写法 1.函数名:function(){} 2.函数名(){}推荐\n```\n\n### 3.4 Vue事件传递\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2>{{age}}</h2>\n    <input type=\"button\" value=\"事件传值\" @click=\"changeage(23,'xiaochen')\">\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data:{\n            age:20\n        },\n        methods: {\n            changeage(age) {\n                this.age = age;\n            },\n        }\n\n    });\n</script>\n```\n\n```markdown\n# 总结\t1.使用事件时，通常调用参数，通过函数接收参数\n```\n\n----\n\n## 4.v-show v-if v-bind\n\n### 4.1 v-show\n\n> v-show 用来控制页面中某个元素是否展示  底层控制是标签 display 属性\n\n```html\n<div id=\"app\" class=\"aa\">\n    <h2 v-show=\"false\">\n        v-show\n    </h2>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    new Vue({\n        el: '#app',\n        data: {},\n        methods: {}\n    });\n</script>\n```\n\n### 4.2.V-if\n\n>  控制页面中的标签元素是否展示底层通过对dom树节点进行添加和删除来控制展示和隐藏用\n\n### 4.3.v-bind\n\n>  用来给页面中标签元素绑定相应的属性简化写法v-bin:属性名 ==》:属性名\n\n```html\n<div id=\"app\">\n    <h2 v-show=\"false\">\n        v-show\n    </h2>\n    <h2 v-show=\"isShow\">\n        v-show hello\n    </h2>\n    <h1 v-if=\"false\">\n        袁老一路走好\n    </h1>\n    <h1 v-if=\"false\">\n        吴老一路走好\n    </h1>\n    <h1 v-if=\"false\">\n        浪费粮食\n    </h1>\n    <img v-if=\"isShow\" :src=\"src\" v-bind:title=\"title\" />\n    <input type=\"button\" value=\"点击我改变title\" @click=\"changeTitle('这是修改后的title')\">\n    <input type=\"button\" value=\"点击我改变src\" @click=\"changeSrc('https://gitee.com/lingzhexi/blogImage/raw/img2021/05/shiro/20210523165516.png')\">\n    <br>\n    <input type=\"button\" value=\"点我显示隐藏\" @click=\"showHide\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    new Vue({\n        el: '#app',\n        data: {\n            isShow: true,\n            title: '陈小佳',\n            src: 'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png'\n        },\n        methods: {\n            showHide() {\n                this.isShow = !this.isShow;\n            },\n            changeTitle(title) {\n                this.title = title;\n            },\n            changeSrc(src) {\n                this.src = src;\n            }\n        }\n    });\n</script>\n```\n\n----\n\n## 5.v-for使用\n\n> 对象遍历\n\n创建vue模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>\n        ${NAME}\n    </title>\n</head>\n<body>\n<div id=\"app\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {},\n        methods: {},\n        components: {}\n    });\n</script>\n</body>\n\n</html>\n```\n\n\n\n```html\n<div id=\"app\">\n    {{user.name}}{{user.age}}\n    <br>\n    <span v-for=\"u in user\">\n\t\t{{u}}\n\t</span>\n    <br>\n    <span v-for=\"(value,key,index) in user\">\n\t\t{{key}}:{{value}}\n\t</span>\n    <br>\n    <ul>\n        <li v-for=\"a,index in arr\">\n            {{index}}:{{a}}\n        </li>\n    </ul>\n    <ul>\n        <li v-for=\"u in users\" :key=\"u.id\">\n            {{u.id}}={{u.name}}==={{u.age}}=={{u.state}}\n        </li>\n    </ul>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            user: {\n                name: \"小岑\",\n                age: 24\n            },\n            arr: [\"土豆\", \"玉米\", \"小麦\"],\n            users: [{\n                id: 1,\n                name: \"zhangs\",\n                age: 25,\n                state: \"good\"\n            },\n                {\n                    id: 2,\n                    name: \"lis\",\n                    age: 25,\n                    state: \"bad\"\n                }]\n        },\n        methods: {},\n        components: {}\n    });\n</script>\n```\n\n```markdown\n# 总结在使用-for的时候一定要注意加入:key用来给vue内部提供重用和排序的唯—key\n```\n\n----\n\n## 6.v-model 双向绑定\n\n> `v-model`:作用用来绑定标签元素的值与wue实例对象中data数据保持一致,从而实现双向的数据绑定机制\n\n```HTML\n <div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <div>\n        {{message}}\n    </div>\n    <input type=\"button\" value=\"改变输入框的值\" @click=\"changeMsg('凌哲熙')\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            message: \"\"\n        },\n        methods: {\n            changeMsg(msg) {\n                this.message = msg;\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n```markdown\n# 总结\n\t1.使用v- model指令可以实现数据的双向绑定\n\t2.所谓双向绑定表单中数据变化导致vue实例data数据变化vue实例中data数据的变化导致表单中数据变化称之为双向绑定\n# MVWM架构  双向绑定机制\n\tModel:数据vue   实例中绑定数据\n\tVM: ViewMode1   监听器\n\tView:页面\t\t  页面展示的数据\n```\n\n### 练习：记事本案例\n\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"msg\"> <input type=\"button\" value=\"添加到记事本\" @click=\"save()\">\n    <br>\n    <ul>\n        <li v-for=\"item,index in lists\">\n            {{index+1}}: {{item}} <a href=\"javascript:\" @click=\"delItem(index)\">删除</a>\n        </li>\n    </ul>\n    <span>总数量：{{lists.length}} 条</span> <input type=\"button\" v-show=\"lists.length!=0\" value=\"删除所有\" @click=\"delAll()\">\n</div>\n\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            lists:['今天下了一场暴雨','晚上回家吃小龙虾'],\n            msg:\"\"\n        },\n        methods: {\n            save() {\n                if (''!=this.msg) {\n                    this.lists.push(this.msg);\n                    this.msg = '';\n                }\n            },\n            delItem(index) {\n                this.lists.splice(index, 1);\n            },\n            delAll() {\n                this.lists = [];\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n----\n\n## 7.事件修饰符\n\n> `修饰符`: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制\n\n```markdown\n# 1.常用的事件修饰符    \n    .stop\n    .prevent\n    .capture\n    .self\n    .once\n    .passive\n```\n\n### 7.1 stop事件修饰符\n\n> 用来阻止事件冒泡\n\n```html\n<div id=\"app\">\n    <div class=\"aa\" @click=\"divClick\">\n        <!--阻止事件冒泡-->\n        <input type=\"button\" value=\"按钮\" @click.stop=\"btnClick\">\n    </div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {},\n        methods: {\n            divClick() {\n                alert(\"div is clicked\");\n            },\n            btnClick() {\n                alert('button is clicked');\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n### 7.2 prevent事件修饰符\n\n> 用来阻止标签的默认行为\n\n```html\n  <a href=\"https://www.bilibili.com\" @click=\"aClick\">b站</a>\n```\n\n### 7.3 self事件修饰符\n\n>  用来针对于当前标签的事件触发=>只触发自己标签的上特定动作的事件\n\n```html\n\t<!--只触发标签自身的事件-->\n<div class=\"aa\" @click.self=\"divClick\">\n    <!--阻止事件冒泡-->\n    <input type=\"button\" value=\"按钮\" @click.stop=\"btnClick\">\n    <input type=\"button\" value=\"按钮1\" @click=\"btnClick1\">\n</div>\n```\n\n### 7.4 once 事件修饰符\n\n> once 一次 作用：就是让指定事件只触发一次\n\n```html\n<!--.prevent ：用来阻止事件默认的行为.once ：用来只执行一次特定的事件-->\n<a href=\"https://www.baidu.com\" @click.prevent.once=\"aClick\">\n    百度\n</a>\n```\n\n----\n\n## 8.按键修饰符\n\n>  作用:用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符\n\n```markdown\n# 按键修饰符\t\n    .enter\t\n    .tab\n    .delete (捕获“删除”和“退格”键)\n    .esc\n    .space\n    .up\n    .down\n    .left\n    .right\n```\n\n### 8.1 enter 回车键\n\n> 用来在触发回车按键之后触发的事件\n\n```html\n  <input type=\"text\" v-model=\"msg\" @keyup.enter=\"keyups\">\n```\n\n### 8.2 tab\n\n> 用来捕获到tab键执行到当前标签是才会触发\n\n```html\n<!--其他光标tab到该文本框的时候触发-->\n<input type=\"text\" v-model=\"msg\" @keyup.tab=\"tabkey\">\n```\n\n### 8.3 其他\n\n```html\n    <input type=\"text\" v-model=\"msg\" @keyup.delete=\"deleteKey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.esc=\"esckey\">\n    <!--空格-->\n    <input type=\"text\" v-model=\"msg\" @keyup.space=\"spacekey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.left=\"leftkey\">\n    <input type=\"text\" v-model=\"msg\" @keyup.right=\"rigthkey\">\n```\n\n## 9.Axios基本使用\n\n### 9.1引言\n\n>  `Axios` 是一个异步请求技术核心作用就是用来在页面中发送异步请求并获取对应数据在页面中渲染页面局部更新技术Aax\n\n### 9.2 Axios第一个程序\n\t中文网站：https://www.kancloud.cn/yunye/axios/234845\n\t安装：https://unpkg.com/axios/dist/axios.min.js\n\n#### 9.2.1 GET请求\n\n```js\n//发送Get请求\naxios.get(\"http://localhost:8080/findAll?name=xiaochen\").then(function(response) {\n    console.log(response.data);\n}).\ncatch(function(error) {\n    console.log(error);\n});\n```\n\n#### 9.2.2 POST请求方式\n\n```js\n//POST请求\naxios.post('http://localhost:8080/save', {\n    username: 'xiaochen',\n    age: 23,\n    email: '5234@qq.com',\n    phone: '15352252514'\n}).then(function(response) {\n    console.log(response.data)\n}).\ncatch(function(error) {\n    console.log(error);\n});\n```\n\n#### 9.2.3 axios并发请求\n\n> `并发请求`：将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果\n\n```js\n //1.创建查询所有请求    \nfunction findAll() {\n    return axios.get('http://localhost:8080/findAll?name=xiaochen');\n}\n//2.创建保存请求    \nfunction save() {\n    return axios.post('http://localhost:8080/save', {\n        username: 'xiaochen',\n        email: '5234@qq.com',\n        age: 23,\n        phone: '15352252514'\n    });\n}\n//并发操作    \naxios.all([findAll(), save()]).then(axios.spread(function(res1, res2) {\n    console.log(res1.data);\n    console.log(res2.data);\n}));\n//用来发送一组并发请求\n\n```\n\n### 9.2  vue 结合 axios 查询天气\n\n```vue\n< div id=\"app\">\n<div>\n    <input type=\"text\" v - model=\"name\" @keyup.delete=\"show\" @keyup.enter=\"searchCity\">\n    <input type=\"button\" value=\"搜索\" @click=\"searchCity\">\n</div>\n<span v-for=\"city in citys\">\n\t\t<a href=\"\" @click.prevent=\"searchCitys(city)\">\n\t\t\t{{city}} &nbsp\n\t\t</a>\n\t</span>\n<hr>\n<span v-show=\"isShow\">\n\t\t{{name}}：今天天气是 {{weather}}\n\t</span>\n</div>\n<script src=\"https:/ / cdn.jsdelivr.net / npm / vue / dist / vue.js \">\n</script>\n<!--引入axios-->\n<script src=\"https: //unpkg.com/axios/dist/axios.min.js\">\n</script>\n<script>\n    const app = new Vue({\n        el: '#app',\n        data: {\n            name: '',\n            citys: ['北京', '上海', '天津', '深圳'],\n            weather: '',\n            isShow: false\n        },\n        methods: {\n            searchCity() {\n                let _this = this axios.get(\"http://localhost:8080/city/find?name=\" + this.name).then(function(response) {\n                    console.log(response.data);\n                    _this.weather = response.data.message;\n                    _this.isShow = true;\n                }).\n                catch(function(error) {\n                    console.log(error);\n                });\n            },\n            show() {\n                this.isShow = false;\n            },\n            searchCitys(name) {\n                this.name = name;\n                this.searchCity();\n            }\n        },\n        components: {}\n    });\n</script>\n```\n\n\n\n------\n\n## 10. Vue生命周期\n\n> `生命周期钩子`   ===》 `生命周期函数`\n\n![Vue 实例生命周期](https://cn.vuejs.org/images/lifecycle.png)\n\n Vue生命周期总结\n\n```js\n    // 1.初始化阶段\t\t  \n    beforeCreate() {//1.生命周期中第一个函数,该函数在执行时vue实例仅仅完成了自身事件的绑定和生命周期函的初始化工作,Vue实例中还没有 Data el methods相关属性            \n    \tconsole.log(\"beforeCreate:\" + this.msg);\n    },\n    created() { //2.生命周期中第二个函数,该函数在执行时vue实例已经初始化了data属性和 methods中相关方法     \n    \tconsole.log(\"created:\" + this.msg);\n    },\n    beforeMount() {//3.生命周期中第三个函数,该函数在执行时vue将E1中指定作用范围作为模板编译            \n    \tconsole.log(\" beforeMount:\" + document.getElementById(\"sp\").innerText);\n    },\n    mounted() {//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面           \n  \t \tconsole.log(\"Mounted: \" + document.getElementById(\"sp\").innerText);\n    //2.运行阶段\n    beforeUpdate() {//5.生命周期中第五个函数,该函数是data中数据发生变化时执行这个事件执行时仅仅是vue实例中data数据变化页面显示的依然是原始数据           \n        console.log(\"beforeUpdate: \" + this.msg);\n        console.log(\"beforeUpdate: \" + document.getElementById(\"sp\").innerText);\n    },\n    updated() {//6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化页面中数据已经和data中数据一致            \n        console.log(\"updated: \" + this.msg);\n        console.log(\"updated: \" + document.getElementById(\"sp\").innerText);\n    },\n    //3.销毁阶段\n    beforeDestory() {//7.生命周期第七个函数,该函数执行时,vue中所有数据 methods componet都没销到       \n    },\n    destoryed() { //8.生命周期的第八个函数,该函数执行时,Wue实例彻底销毁        \n    }\n```\n\n## 11.Vue中的组件( Component)\n\n### 11.1组件作用\n\n​\t组件作用:用来减少wue实例对象中代码量,日后在使用wue开发过程中,可以根据不能业务功能将页面中划分不同的多个组件然后由多个组件去完成整个页面的布局便于日后使用\nVue进行开发时页面管理,方便开发人员维护\n\n### 11.2 组件使用\n\n#### 11.2.1 全局组件注册\n\n说明:全局组件注册给vue实例,日后可以在任意ue实例的范围内使用该组件\n\n```js\n//1.开发全局组件    \nVue.component('login',(template:'<div><h1>用户登录</h1></div>'    });\n//2.使用全局组件在Vue实例范围内    \n<login></login>\n```\n\n```markdown\n# 注意\t\n\t1.Vue.component用来开发全局组件  \n\t\t参数1:组件的名称  \n\t\t参数2: 组件配置{} template:'' 用来书写组件的htm1代码 template中必须有且只有一个root元素    \n\t2.使用时需要在vue的作用范围内根据组件名使用全局组件    \n\t3.如果在注册组件过程中使用驼峰命名组件的方式在使用组件时必须将驼峰的所有单词小写加入-线进行使用\n```\n\n\n\n#### 11.2.2 局部组件注册\n\n​\t`说明:通过将组件注册给对应vue实例中一个 components属性来完成组件注册,这种方式不会对vue实例造成累加`\n\n- 第一种开发\n\n```js\n//局部组件登录模板\nlet login = {    template:'<div><h1>用户管理</h1></div>'}\nconst app = new Vue({    \n    el: '#app',\n    data: {},\n    methods: {},\n    components: {\n        login: login\n    }});\n//使用局部组件\n<login></login>\n```\n\n- 第二种开发\n\n```js\n//1.声明局部组件模板 template 标签 注意：在Vue实例作用范围外声明\t\n<template id=\"loginTemplate\">        \n    <h1>用户管理</h1>    \n</template>\n//2.定义变量用来保存模板配置对象    \nlet login = { \n    //具体组件模板        \n    template: '#loginTemplate' \n    //使用自定义template 标签选择器即可    \n};\n//3.注册组件    \nconst app = new Vue({\n    el: '#app',\n    data: {},        \n    methods: {},        \n    components: {\n        //用来注册局部组件            \n        login: login \n        //注册局部组件\n    }    \n});\n//4使用局部组件\t\n<login></login>\n```\n\n### 11.3 Prop的使用\n\n`作用: props用来给组件传递相应静态数据或者是动态数据的`\n\n#### 11.3.1 通过在组件上声明静态数据传递给组件内部\n\n```js\n//1.声明组件模板配置对象    \nlet login= {        \n    template:'<div><h1>欢迎：{{username}}年龄：{{age}}<h1></div>',        \n    props:['userName','age'] // props作用用来接收使用组件时通过组件标签传递的数    \n}\n//2.注册组件\t\nconst app new Vue({        \n    el: '#app',        \n    data: {}        \n    methods: {},        \n    components:{       \t\t\n       login   \n       //组件注册\n\t}\t\n});\n//3.通过组件完成数据传递\n<login user-name=\"小陈\" age=\"23\"></1ogin>\n```\n\n\n\n```markdown\n# 总结    \n\t1.使用组件时可以在组件上定义多个属性以及对应数据    \n\t2.在组件内部可以使用 props数组生命多个定义在组件上的属性名日后可以在组件中通过{属性名}}方式获取组件中属性值\n```\n\n#### 11.3.2 通过在组件上声明动态数据传递给组件内部\n\n```js\n//1.声明组件模板对象 \n\tconst logins = {        \n        template: \"<div><h1>welcome {{userName}} ,age {{age}}, email: {{email}},salary {{salary}} !</h1></div>\",        \n        props:[\"userName\",\"age\",\"email\",\"salary\"]    \n    } \n//2.注册局部组件 \n    const app = new Vue({\n        el:'#app',\n        data:{\n            email:'333@qq.com',\n            salary:'200'\n        },\n        methods:{},\n        components:{\n            login  \n            //注册组件\n        }    \n    });\n//3.使用组件 \n<login :email=\"email\" :salary=\"salary\" user-name=\"小陈\" age=\"24\"></login>\n```\n\n#### 11.3.2 prop的单项数据流\n\n`单向数据流:所有的 prop 都使得其父子prop之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行`\n\n> 所有的prop都使得其父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外改变父级组件的状\n> 态,从而导致你的应用的数据流向难以理解\n> 额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Wue会在浏览器的控\n> 制台中发出警告。一摘自官网\n\n### 11.4 组件中定义数据和事件使用\n\n1.组件中定义属于组件的数据\n\n```js\n//组件声明的配置对象 \nconst login = {\n    template: \"<div><h1>{{name}} Vue<ul><li v-for='item,index in lists'>{{index+1}}=={{item}}</li></ul></h1></div>\",\n    data() {\n        return {\n            name: 'learning',\n            lists: ['java', 'js', 'python']\n        }\n    }\n}\n```\n\n2.组件定义事件\n\n```js\nconst login ={    \n    template: \"<div><h1>{{name}}</h1><input type='button' value='点击我修改名称' @click='change'></div>\",    \n    data() {\n        return {\n            name: \"john\"\n        };    \n    },    \n    methods:{\n        change() {\n            this.name = \"micheal\";\n        }    \n    }\n}\n```\n\n```markdown\n# 总结\t\n\t1.组件中定义事件和直接在vue中定义事件基本一致直接在组件内部对应的htm1代码上加入@事件名=函数名方式即可\t\t2.在组件内部使用 methods属性用来定义对应的事件函数即可,事件函数中this指向的是当前组件的实例\n```\n\n### 11.5 向子组件中传递事件并在子组件中调用改事件\n\n`在子组件中调用传递过来的相关事件必须使用this.$emit(函数名)方式调用`\n\n```js\n//1.声明组件\n\t<template id=\"login\">\n        <div>\n        \t<h1>Vue {{uname}}</h1>\n\t\t\t<input type='button' value='点我' @click='change'>\n        </div>\n\t</template>\n\tconst login = {\n        template: \"#login\",\n        data() {\n            return {\n                uname: this.name\n            };\n        },\n        methods: {\n            change() {\n                this.uname = '点击后触发Vue事件'\n                //调用Vue中实例的事件\n                this.$emit('fun')//调用组件传递过来的其他函数时需要使用this.$emit('函数名调用)\n            },\n        },\n        props: ['name']}\n    //2.注册组件\n    const app = new Vue({\n        el: '#app',\n        data: {\n            username: 'xiaochen'    },\n        methods: {\n            fun(){ //一个事件函数  将这个事件函数传递给子组件           \n                alert('Vue实例的事件')\n            }\n        },\n        components: {\n            login,  //组件的注册    \n        }});\n//3.使用组件\n<login :name=\"username\" @fun=fun></login>   // ===>在组件内部使用this.$emit(\"fun\")\n```\n\n![image-20210602011155939](https://gitee.com/lingzhexi/blogImage/raw/img2021/05/jasper/20210602011206.png)\n\n## 12.Vue路由\n\n`注意事项`\n\n![image-20210602014845994](D:\\桌面\\学习\\文章\\docs\\1.Vue 入门.assets\\image-20210602014845994.png)\n\n### 12.1 路由\n\n`路由：根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一的请求管理`\n\n### 12.2 作用\n\n​\t`用来在vue中实现组件间的动态切换`\n\n### 12.3 使用\n\n1.引入路由\n\n```js\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script><script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script> //Vue 路由js\n```\n\n2.创建组件对象\n\n```js\n/* 创建模板 */    \n<template id=\"login\">\n    <h1>登录页面</h1>    \n</template>    \n<template id=\"reg\">\n    <h1>注册页面</h1>\n</template>    \nconst login = {        \n    template: '#login'    \n}    \nconst register = {\n    template: '#reg'\n}\n```\n\n3.定义路由对象的规则\n\n```js\n/* 定义路由 */    \nconst router = new VueRouter({\n    routes:[\n        {path:\"/login\",component:login},\n        //path:路由的路径  component：路由的相应组件\n        {path:\"/reg\",component:register}\n    ]\n})\n```\n\n4.将路由对象注册到vue实例\n\n```js\n//路由注册到Vue实例\nconst app = new Vue({\n    el: '#app',\n    data: {},\n    methods: {},\n    router:router  //设置路由对象\n});\n```\n\n5.在页面中显示路由的组件\n\n```vue\n<!-- 显示路由组件 -->\n    <router-view></router-view>\n```\n\n6.根据链接切换路由\n\n```html\n<a href=\"#/login\">登录</a>\n<a href=\"#/reg\">注册</a>\n```\n\n###   12.4  router-link使用\n\n​\t`作用：用来替换我们在切换路由时使用a标签切换路由`\n\n​\t`好处：就是可以自动给路由路径加入#不需要手动加入`\n\n```vue\n<router-link to=\"/login\" tag=\"button\">登录</router-link>\n<router-link to=\"/reg\" tag=\"span\">注册</router-link>\n```\n\n\n\n```markdown\n# 总结\t\n\t1. router-link用来替换使用a标签实现路由切换\t好处是不需要书写#号直接书写路由路径\t\n\t2. router-1 ink to属性用来书写路由路径\ttag属性:用来将 router-1ink渲染成指定的标签\n```\n\n### 12.5 默认路由\n\n​\t`作用:用来在第一次进入界面是显示一个默认的组件`\n\n```js\n/* 定义路由 */    \nconst router = new VueRouter({        \n    routes:[\n        {path:\"/\",redirect:'/login'}, // redirect:用来当访问的是默认路由\"/\"时\t跳转到指定的路由展示\t推荐使用            \n        {path:\"/login\",component:login},\n        {path:\"/reg\",component:register}\n    ] \n})\n```\n\n### 12.6 路由中参数传递\n\n- 第一种方式传递参数 传统方式\n\n1. 通过?号形式拼接参数\n\n   ```vue\n   <router-link to=\"/login?id=1&name=张三\" tag=\"button\">i need login</router-link>\n   ```\n\n2. 组件中获取参数\n\n   ```js\n   const login = {        \n       template: '#login',\n       created() {\n           console.log(\"id: \" + this.$route.query.id + \"  ==> name:\" + this.$route.query.name);        \n       }    \n   }\n   ```\n\n- 第二种方式传递参数 restful\n\n1. 通过使用路径方式传递\n\n   ```js\n   <router-link to=\"/reg/2/李四\" tag=\"button\">i need register</router-link>\n   const router = new VueRouter({\n       routes: [\n           {path: '/reg/:id/:name', component: reg}\n       ]\n   })\n   ```\n\n2. 组件中获取参数\n\n   ```js\n   const reg = {    \n       template: '#reg',\n       created() {\n           console.log('id: ' + this.$route.params.id + '  ===>name:' + this.$route.params.name);    \n       }\n   }\n   ```\n   \n   \n\n","slug":"Vue-从入门到入土","published":1,"updated":"2024-12-16T12:11:11.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllynv000fj0kr2mg1ep8w","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713430.jpg\" alt=\"toast-7009956_1920\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>此教程是针对有后端开发经验的同学，配合前端vue开发项目</p>\n</blockquote>\n<h1 id=\"Vue后端开发教程\"><a href=\"#Vue后端开发教程\" class=\"headerlink\" title=\"Vue后端开发教程\"></a>Vue后端开发教程</h1><h2 id=\"1-Vue-入门\"><a href=\"#1-Vue-入门\" class=\"headerlink\" title=\"1.Vue 入门\"></a>1.Vue 入门</h2><h3 id=\"1-1-下载-Vuejs\"><a href=\"#1-1-下载-Vuejs\" class=\"headerlink\" title=\"1.1 下载 Vuejs\"></a>1.1 下载 Vuejs</h3><pre class=\" language-html\"><code class=\"language-html\">//开发版本\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n//生产版本\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"1-2-Vue第一个应用\"><a href=\"#1-2-Vue第一个应用\" class=\"headerlink\" title=\"1.2 Vue第一个应用\"></a>1.2 Vue第一个应用</h3><pre class=\" language-vue\"><code class=\"language-vue\"><div id=\"app\">\n    &#123;&#123;msg&#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;\n</div>\n\n<!--建议放到临近的js位置-->\n<!--1.引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<!--2.创建vue实例-->\n<script>\n    const app = new Vue(&#123;\n        el: '#app',         //用来给vue实例定义一个作用范围\n        data: &#123;         //用来给vue实例定义一些相关数据\n            msg:\"你好，欢迎这个世界！\",\n            username:\"hello vue\",\n            pwd: \"1234\"\n        &#125;,\n    &#125;);\n</script>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"> 总结：\n<span class=\"token code keyword\">    1.vue实例（对象）中el属性：代表Vue的作用范围    日后在Vue的作用范围内都可以使用Vue语法</span>\n<span class=\"token code keyword\">    2.vue实例（对象）中的data：绑定一些相关的数据变量，绑定的数据通过&amp;#123;&amp;#123;变量名&amp;#125;&amp;#125;在Vue的作用范围内取出</span>\n<span class=\"token code keyword\">    3.在使用&amp;#123;&amp;#123;&amp;#125;&amp;#125;进行获取data中数据时，可在&amp;#123;&amp;#123;&amp;#125;&amp;#125;写表达式，运算符，调用相关方法，以及逻辑运算等</span>\n<span class=\"token code keyword\">    4.el属性中可以书写任意css选择器（jq选择器），但是使用Vue开发是推荐使用，id选择器</span>\n</code></pre>\n<hr>\n<h2 id=\"2-vue-text和v-html\"><a href=\"#2-vue-text和v-html\" class=\"headerlink\" title=\"2.vue-text和v-html\"></a>2.vue-text和v-html</h2><h3 id=\"2-1-v-text\"><a href=\"#2-1-v-text\" class=\"headerlink\" title=\"2.1 v-text\"></a>2.1 v-text</h3><blockquote>\n<p>v-text : 用来获取data中数据将数据以文本的形式渲染到指定的标签内部 类似 js中的 innerText</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\">&lt;div id=\"app\" class = \"aa\">\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--差值表达器--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>msg<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n    const app = new Vue(<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>\n        el: '.aa',\n        data: <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>\n            msg: \"hello world\"\n\n        <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>);\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\">  总结\n<span class=\"token code keyword\">        1.&amp;#123;&amp;#123;&amp;#125;&amp;#125;（插值表达）和v-text获取数据的区别  </span>\n<span class=\"token code keyword\">\t\t\ta.使用v-text取值会将标签中原有的数据覆盖  插值表达其不会</span>\n<span class=\"token code keyword\">\t\t\tb.使用v-text可以避免在网络环境较差的情况出现插值闪烁</span>\n```\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 2.2 v-html</span>\n\n<span class=\"token blockquote punctuation\">></span> 　　　　v-html: 用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似 js 中 innerHTML\n\n```html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token code keyword\">    &lt;span>&amp;#123;&amp;#123;msg&amp;#125;&amp;#125;&lt;/span>&lt;br></span>\n<span class=\"token code keyword\">    &lt;span v-text=\"msg\">&lt;/span></span>\n<span class=\"token code keyword\">    &lt;br></span>\n<span class=\"token code keyword\">    &lt;span v-html=\"msg\">&lt;/span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token code keyword\">    const app = new Vue(&amp;#123;</span>\n<span class=\"token code keyword\">        el: '#app',</span>\n<span class=\"token code keyword\">        data: &amp;#123;</span>\n<span class=\"token code keyword\">            msg: \"&lt;a href=''> 欢迎你!&lt;/a>\"</span>\n\n<span class=\"token code keyword\">        &amp;#125;</span>\n<span class=\"token code keyword\">    &amp;#125;);</span>\n</code></pre>\n<hr>\n<h2 id=\"3-vue中时间绑定（v-on）\"><a href=\"#3-vue中时间绑定（v-on）\" class=\"headerlink\" title=\"3.vue中时间绑定（v-on）\"></a>3.vue中时间绑定（v-on）</h2><h3 id=\"3-1-绑定事件语法\"><a href=\"#3-1-绑定事件语法\" class=\"headerlink\" title=\"3.1 绑定事件语法\"></a>3.1 绑定事件语法</h3><pre class=\" language-html\"><code class=\"language-html\">&lt;div id=\"app\" class = \"aa\">\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>msg<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>年龄：<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>点击改变年龄<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeAge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            msg<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token string\">\"23\"</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//定义vue事件</span>\n            changeAge<span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出发\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结：</span>\n<span class=\"token code keyword\">    事件   事件源:发送事件demo元素   事件：发生特定的动作 click...   监听器  发生特定动作之后的事件处理程序通常时js中的函数</span>\n<span class=\"token code keyword\">    1.在vue中绑定事件时通过v-on指令完成的  v-on:事件名  如 v-on:click</span>\n<span class=\"token code keyword\">    2.在v-on:事件名的赋值语句中的当前事件触发的函数名</span>\n<span class=\"token code keyword\">    3.在vue中事件的函数统一定义在Vue实例的methods属性中</span>\n<span class=\"token code keyword\">    4.在vue定义事件中this值的就是当前Vue实例，日后可以在事件中通过使用this获取Vue中相关数据</span>\n</code></pre>\n<h3 id=\"3-2-Vue事件简化写法\"><a href=\"#3-2-Vue事件简化写法\" class=\"headerlink\" title=\"3.2 Vue事件简化写法\"></a>3.2 Vue事件简化写法</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>通过v-on事件修改年龄 +1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>通过@事件修改年龄 -1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>editage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            changeage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            editage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结     1. vue事件简化通过 @符号 简化 v-on</span>\n</code></pre>\n<h3 id=\"3-3-Vue优化写法\"><a href=\"#3-3-Vue优化写法\" class=\"headerlink\" title=\"3.3 Vue优化写法\"></a>3.3 Vue优化写法</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>通过@事件修改年龄 -1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>editage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            age<span class=\"token punctuation\">:</span><span class=\"token number\">20</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// changeage: function () &amp;#123;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//     this.age++;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;,</span>\n            <span class=\"token function\">editage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结</span>\n<span class=\"token code keyword\">     1.事件定义存在两种写法 1.函数名:function()&amp;#123;&amp;#125; 2.函数名()&amp;#123;&amp;#125;推荐</span>\n</code></pre>\n<h3 id=\"3-4-Vue事件传递\"><a href=\"#3-4-Vue事件传递\" class=\"headerlink\" title=\"3.4 Vue事件传递\"></a>3.4 Vue事件传递</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>事件传值<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeage(23,<span class=\"token punctuation\">'</span>xiaochen<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            age<span class=\"token punctuation\">:</span><span class=\"token number\">20</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">changeage</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结    1.使用事件时，通常调用参数，通过函数接收参数</span>\n</code></pre>\n<hr>\n<h2 id=\"4-v-show-v-if-v-bind\"><a href=\"#4-v-show-v-if-v-bind\" class=\"headerlink\" title=\"4.v-show v-if v-bind\"></a>4.v-show v-if v-bind</h2><h3 id=\"4-1-v-show\"><a href=\"#4-1-v-show\" class=\"headerlink\" title=\"4.1 v-show\"></a>4.1 v-show</h3><blockquote>\n<p>v-show 用来控制页面中某个元素是否展示  底层控制是标签 display 属性</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        v-show\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"4-2-V-if\"><a href=\"#4-2-V-if\" class=\"headerlink\" title=\"4.2.V-if\"></a>4.2.V-if</h3><blockquote>\n<p> 控制页面中的标签元素是否展示底层通过对dom树节点进行添加和删除来控制展示和隐藏用</p>\n</blockquote>\n<h3 id=\"4-3-v-bind\"><a href=\"#4-3-v-bind\" class=\"headerlink\" title=\"4.3.v-bind\"></a>4.3.v-bind</h3><blockquote>\n<p> 用来给页面中标签元素绑定相应的属性简化写法v-bin:属性名 ==》:属性名</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        v-show\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        v-show hello\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        袁老一路走好\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        吴老一路走好\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        浪费粮食\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>isShow<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>点击我改变title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeTitle(<span class=\"token punctuation\">'</span>这是修改后的title<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>点击我改变src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>changeSrc(<span class=\"token punctuation\">'</span>https://gitee.com/lingzhexi/blogImage/raw/img2021/05/shiro/20210523165516.png<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>点我显示隐藏<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>showHide<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            isShow<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'陈小佳'</span><span class=\"token punctuation\">,</span>\n            src<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png'</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">showHide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">changeTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">changeSrc</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<h2 id=\"5-v-for使用\"><a href=\"#5-v-for使用\" class=\"headerlink\" title=\"5.v-for使用\"></a>5.v-for使用</h2><blockquote>\n<p>对象遍历</p>\n</blockquote>\n<p>创建vue模板</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>\n        $<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>NAME<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>user.name<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>user.age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u in user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>u<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(value,key,index) in user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>key<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>:<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>value<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a,index in arr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>index<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>:<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>a<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u in users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>u.id<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>=<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>u.name<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>===<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>u.age<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>==<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>u.state<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            user<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"小岑\"</span><span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            arr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"土豆\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"玉米\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"小麦\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            users<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"zhangs\"</span><span class=\"token punctuation\">,</span>\n                age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n                state<span class=\"token punctuation\">:</span> <span class=\"token string\">\"good\"</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lis\"</span><span class=\"token punctuation\">,</span>\n                    age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n                    state<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bad\"</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结在使用-for的时候一定要注意加入:key用来给vue内部提供重用和排序的唯—key</span>\n</code></pre>\n<hr>\n<h2 id=\"6-v-model-双向绑定\"><a href=\"#6-v-model-双向绑定\" class=\"headerlink\" title=\"6.v-model 双向绑定\"></a>6.v-model 双向绑定</h2><blockquote>\n<p><code>v-model</code>:作用用来绑定标签元素的值与wue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p>\n</blockquote>\n<pre class=\" language-HTML\"><code class=\"language-HTML\"> <div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <div>\n        &#123;&#123;message&#125;&#125;\n    </div>\n    <input type=\"button\" value=\"改变输入框的值\" @click=\"changeMsg('凌哲熙')\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">\n</script>\n<script>\n    const app = new Vue(&#123;\n        el: '#app',\n        data: &#123;\n            message: \"\"\n        &#125;,\n        methods: &#123;\n            changeMsg(msg) &#123;\n                this.message = msg;\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n</script>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结</span>\n<span class=\"token code keyword\">    1.使用v- model指令可以实现数据的双向绑定</span>\n<span class=\"token code keyword\">    2.所谓双向绑定表单中数据变化导致vue实例data数据变化vue实例中data数据的变化导致表单中数据变化称之为双向绑定</span>\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> MVWM架构  双向绑定机制</span>\n<span class=\"token code keyword\">    Model:数据vue   实例中绑定数据</span>\n<span class=\"token code keyword\">    VM: ViewMode1   监听器</span>\n<span class=\"token code keyword\">    View:页面          页面展示的数据</span>\n</code></pre>\n<h3 id=\"练习：记事本案例\"><a href=\"#练习：记事本案例\" class=\"headerlink\" title=\"练习：记事本案例\"></a>练习：记事本案例</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>添加到记事本<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>save()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item,index in lists<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>index+1<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>: <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>item<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>javascript:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>delItem(index)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>总数量：<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>lists.length<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span> 条<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lists.length!<span class=\"token punctuation\">=</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>删除所有<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>delAll()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            lists<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'今天下了一场暴雨'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'晚上回家吃小龙虾'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            msg<span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token operator\">!=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">delItem</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">delAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<h2 id=\"7-事件修饰符\"><a href=\"#7-事件修饰符\" class=\"headerlink\" title=\"7.事件修饰符\"></a>7.事件修饰符</h2><blockquote>\n<p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p>\n</blockquote>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 1.常用的事件修饰符    </span>\n<span class=\"token code keyword\">    .stop</span>\n<span class=\"token code keyword\">    .prevent</span>\n<span class=\"token code keyword\">    .capture</span>\n<span class=\"token code keyword\">    .self</span>\n<span class=\"token code keyword\">    .once</span>\n<span class=\"token code keyword\">    .passive</span>\n</code></pre>\n<h3 id=\"7-1-stop事件修饰符\"><a href=\"#7-1-stop事件修饰符\" class=\"headerlink\" title=\"7.1 stop事件修饰符\"></a>7.1 stop事件修饰符</h3><blockquote>\n<p>用来阻止事件冒泡</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>divClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--阻止事件冒泡--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>按钮<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click.stop</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btnClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">divClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div is clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">btnClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button is clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"7-2-prevent事件修饰符\"><a href=\"#7-2-prevent事件修饰符\" class=\"headerlink\" title=\"7.2 prevent事件修饰符\"></a>7.2 prevent事件修饰符</h3><blockquote>\n<p>用来阻止标签的默认行为</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.bilibili.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>b站<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"7-3-self事件修饰符\"><a href=\"#7-3-self事件修饰符\" class=\"headerlink\" title=\"7.3 self事件修饰符\"></a>7.3 self事件修饰符</h3><blockquote>\n<p> 用来针对于当前标签的事件触发=&gt;只触发自己标签的上特定动作的事件</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\">    <span class=\"token comment\" spellcheck=\"true\">&lt;!--只触发标签自身的事件--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aa<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click.self</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>divClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--阻止事件冒泡--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>按钮<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click.stop</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btnClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>按钮1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btnClick1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"7-4-once-事件修饰符\"><a href=\"#7-4-once-事件修饰符\" class=\"headerlink\" title=\"7.4 once 事件修饰符\"></a>7.4 once 事件修饰符</h3><blockquote>\n<p>once 一次 作用：就是让指定事件只触发一次</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--.prevent ：用来阻止事件默认的行为.once ：用来只执行一次特定的事件--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click.prevent.once</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>aClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    百度\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<h2 id=\"8-按键修饰符\"><a href=\"#8-按键修饰符\" class=\"headerlink\" title=\"8.按键修饰符\"></a>8.按键修饰符</h2><blockquote>\n<p> 作用:用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p>\n</blockquote>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 按键修饰符    </span>\n<span class=\"token code keyword\">    .enter    </span>\n<span class=\"token code keyword\">    .tab</span>\n<span class=\"token code keyword\">    .delete (捕获“删除”和“退格”键)</span>\n<span class=\"token code keyword\">    .esc</span>\n<span class=\"token code keyword\">    .space</span>\n<span class=\"token code keyword\">    .up</span>\n<span class=\"token code keyword\">    .down</span>\n<span class=\"token code keyword\">    .left</span>\n<span class=\"token code keyword\">    .right</span>\n</code></pre>\n<h3 id=\"8-1-enter-回车键\"><a href=\"#8-1-enter-回车键\" class=\"headerlink\" title=\"8.1 enter 回车键\"></a>8.1 enter 回车键</h3><blockquote>\n<p>用来在触发回车按键之后触发的事件</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.enter</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>keyups<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"8-2-tab\"><a href=\"#8-2-tab\" class=\"headerlink\" title=\"8.2 tab\"></a>8.2 tab</h3><blockquote>\n<p>用来捕获到tab键执行到当前标签是才会触发</p>\n</blockquote>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--其他光标tab到该文本框的时候触发--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.tab</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tabkey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"8-3-其他\"><a href=\"#8-3-其他\" class=\"headerlink\" title=\"8.3 其他\"></a>8.3 其他</h3><pre class=\" language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.delete</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>deleteKey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.esc</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>esckey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--空格--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.space</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>spacekey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.left</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>leftkey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@keyup.right</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>rigthkey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"9-Axios基本使用\"><a href=\"#9-Axios基本使用\" class=\"headerlink\" title=\"9.Axios基本使用\"></a>9.Axios基本使用</h2><h3 id=\"9-1引言\"><a href=\"#9-1引言\" class=\"headerlink\" title=\"9.1引言\"></a>9.1引言</h3><blockquote>\n<p> <code>Axios</code> 是一个异步请求技术核心作用就是用来在页面中发送异步请求并获取对应数据在页面中渲染页面局部更新技术Aax</p>\n</blockquote>\n<h3 id=\"9-2-Axios第一个程序\"><a href=\"#9-2-Axios第一个程序\" class=\"headerlink\" title=\"9.2 Axios第一个程序\"></a>9.2 Axios第一个程序</h3><pre><code>中文网站：https://www.kancloud.cn/yunye/axios/234845\n安装：https://unpkg.com/axios/dist/axios.min.js\n</code></pre>\n<h4 id=\"9-2-1-GET请求\"><a href=\"#9-2-1-GET请求\" class=\"headerlink\" title=\"9.2.1 GET请求\"></a>9.2.1 GET请求</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//发送Get请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/findAll?name=xiaochen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"9-2-2-POST请求方式\"><a href=\"#9-2-2-POST请求方式\" class=\"headerlink\" title=\"9.2.2 POST请求方式\"></a>9.2.2 POST请求方式</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//POST请求</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/save'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'xiaochen'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> <span class=\"token string\">'5234@qq.com'</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'15352252514'</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"9-2-3-axios并发请求\"><a href=\"#9-2-3-axios并发请求\" class=\"headerlink\" title=\"9.2.3 axios并发请求\"></a>9.2.3 axios并发请求</h4><blockquote>\n<p><code>并发请求</code>：将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p>\n</blockquote>\n<pre class=\" language-js\"><code class=\"language-js\"> <span class=\"token comment\" spellcheck=\"true\">//1.创建查询所有请求    </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/findAll?name=xiaochen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//2.创建保存请求    </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/save'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token string\">'xiaochen'</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token punctuation\">:</span> <span class=\"token string\">'5234@qq.com'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n        phone<span class=\"token punctuation\">:</span> <span class=\"token string\">'15352252514'</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//并发操作    </span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//用来发送一组并发请求</span>\n</code></pre>\n<h3 id=\"9-2-vue-结合-axios-查询天气\"><a href=\"#9-2-vue-结合-axios-查询天气\" class=\"headerlink\" title=\"9.2  vue 结合 axios 查询天气\"></a>9.2  vue 结合 axios 查询天气</h3><pre class=\" language-vue\"><code class=\"language-vue\">< div id=\"app\">\n<div>\n    <input type=\"text\" v - model=\"name\" @keyup.delete=\"show\" @keyup.enter=\"searchCity\">\n    <input type=\"button\" value=\"搜索\" @click=\"searchCity\">\n</div>\n<span v-for=\"city in citys\">\n        <a href=\"\" @click.prevent=\"searchCitys(city)\">\n            &#123;&#123;city&#125;&#125; &nbsp\n        </a>\n    </span>\n<hr>\n<span v-show=\"isShow\">\n        &#123;&#123;name&#125;&#125;：今天天气是 &#123;&#123;weather&#125;&#125;\n    </span>\n</div>\n<script src=\"https:/ / cdn.jsdelivr.net / npm / vue / dist / vue.js \">\n</script>\n<!--引入axios-->\n<script src=\"https: //unpkg.com/axios/dist/axios.min.js\">\n</script>\n<script>\n    const app = new Vue(&#123;\n        el: '#app',\n        data: &#123;\n            name: '',\n            citys: ['北京', '上海', '天津', '深圳'],\n            weather: '',\n            isShow: false\n        &#125;,\n        methods: &#123;\n            searchCity() &#123;\n                let _this = this axios.get(\"http://localhost:8080/city/find?name=\" + this.name).then(function(response) &#123;\n                    console.log(response.data);\n                    _this.weather = response.data.message;\n                    _this.isShow = true;\n                &#125;).\n                catch(function(error) &#123;\n                    console.log(error);\n                &#125;);\n            &#125;,\n            show() &#123;\n                this.isShow = false;\n            &#125;,\n            searchCitys(name) &#123;\n                this.name = name;\n                this.searchCity();\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n</script>\n</code></pre>\n<hr>\n<h2 id=\"10-Vue生命周期\"><a href=\"#10-Vue生命周期\" class=\"headerlink\" title=\"10. Vue生命周期\"></a>10. Vue生命周期</h2><blockquote>\n<p><code>生命周期钩子</code>   ===》 <code>生命周期函数</code></p>\n</blockquote>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"Vue 实例生命周期\"></p>\n<p> Vue生命周期总结</p>\n<pre class=\" language-js\"><code class=\"language-js\">    <span class=\"token comment\" spellcheck=\"true\">// 1.初始化阶段          </span>\n    <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//1.生命周期中第一个函数,该函数在执行时vue实例仅仅完成了自身事件的绑定和生命周期函的初始化工作,Vue实例中还没有 Data el methods相关属性            </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeCreate:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//2.生命周期中第二个函数,该函数在执行时vue实例已经初始化了data属性和 methods中相关方法     </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"created:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">beforeMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//3.生命周期中第三个函数,该函数在执行时vue将E1中指定作用范围作为模板编译            </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" beforeMount:\"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面           </span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mounted: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//2.运行阶段</span>\n    <span class=\"token function\">beforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//5.生命周期中第五个函数,该函数是data中数据发生变化时执行这个事件执行时仅仅是vue实例中data数据变化页面显示的依然是原始数据           </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeUpdate: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeUpdate: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">updated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化页面中数据已经和data中数据一致            </span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updated: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updated: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\" spellcheck=\"true\">//3.销毁阶段</span>\n    <span class=\"token function\">beforeDestory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//7.生命周期第七个函数,该函数执行时,vue中所有数据 methods componet都没销到       </span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">destoryed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//8.生命周期的第八个函数,该函数执行时,Wue实例彻底销毁        </span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"11-Vue中的组件-Component\"><a href=\"#11-Vue中的组件-Component\" class=\"headerlink\" title=\"11.Vue中的组件( Component)\"></a>11.Vue中的组件( Component)</h2><h3 id=\"11-1组件作用\"><a href=\"#11-1组件作用\" class=\"headerlink\" title=\"11.1组件作用\"></a>11.1组件作用</h3><p>​    组件作用:用来减少wue实例对象中代码量,日后在使用wue开发过程中,可以根据不能业务功能将页面中划分不同的多个组件然后由多个组件去完成整个页面的布局便于日后使用<br>Vue进行开发时页面管理,方便开发人员维护</p>\n<h3 id=\"11-2-组件使用\"><a href=\"#11-2-组件使用\" class=\"headerlink\" title=\"11.2 组件使用\"></a>11.2 组件使用</h3><h4 id=\"11-2-1-全局组件注册\"><a href=\"#11-2-1-全局组件注册\" class=\"headerlink\" title=\"11.2.1 全局组件注册\"></a>11.2.1 全局组件注册</h4><p>说明:全局组件注册给vue实例,日后可以在任意ue实例的范围内使用该组件</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1.开发全局组件    </span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">:</span><span class=\"token string\">'&lt;div>&lt;h1>用户登录&lt;/h1>&lt;/div>'</span>    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//2.使用全局组件在Vue实例范围内    </span>\n<span class=\"token operator\">&lt;</span>login<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>login<span class=\"token operator\">></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 注意    </span>\n<span class=\"token code keyword\">    1.Vue.component用来开发全局组件  </span>\n<span class=\"token code keyword\">        参数1:组件的名称  </span>\n<span class=\"token code keyword\">        参数2: 组件配置&amp;#123;&amp;#125; template:'' 用来书写组件的htm1代码 template中必须有且只有一个root元素    </span>\n<span class=\"token code keyword\">    2.使用时需要在vue的作用范围内根据组件名使用全局组件    </span>\n<span class=\"token code keyword\">    3.如果在注册组件过程中使用驼峰命名组件的方式在使用组件时必须将驼峰的所有单词小写加入-线进行使用</span>\n</code></pre>\n<h4 id=\"11-2-2-局部组件注册\"><a href=\"#11-2-2-局部组件注册\" class=\"headerlink\" title=\"11.2.2 局部组件注册\"></a>11.2.2 局部组件注册</h4><p>​    <code>说明:通过将组件注册给对应vue实例中一个 components属性来完成组件注册,这种方式不会对vue实例造成累加</code></p>\n<ul>\n<li>第一种开发</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//局部组件登录模板</span>\n<span class=\"token keyword\">let</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    template<span class=\"token punctuation\">:</span><span class=\"token string\">'&lt;div>&lt;h1>用户管理&lt;/h1>&lt;/div>'</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    \n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        login<span class=\"token punctuation\">:</span> login\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//使用局部组件</span>\n<span class=\"token operator\">&lt;</span>login<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>login<span class=\"token operator\">></span>\n</code></pre>\n<ul>\n<li>第二种开发</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1.声明局部组件模板 template 标签 注意：在Vue实例作用范围外声明    </span>\n<span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"loginTemplate\"</span><span class=\"token operator\">></span>        \n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>用户管理<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//2.定义变量用来保存模板配置对象    </span>\n<span class=\"token keyword\">let</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\" spellcheck=\"true\">//具体组件模板        </span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#loginTemplate'</span> \n    <span class=\"token comment\" spellcheck=\"true\">//使用自定义template 标签选择器即可    </span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//3.注册组件    </span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>        \n    methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>        \n    components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//用来注册局部组件            </span>\n        login<span class=\"token punctuation\">:</span> login \n        <span class=\"token comment\" spellcheck=\"true\">//注册局部组件</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//4使用局部组件    </span>\n<span class=\"token operator\">&lt;</span>login<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>login<span class=\"token operator\">></span>\n</code></pre>\n<h3 id=\"11-3-Prop的使用\"><a href=\"#11-3-Prop的使用\" class=\"headerlink\" title=\"11.3 Prop的使用\"></a>11.3 Prop的使用</h3><p><code>作用: props用来给组件传递相应静态数据或者是动态数据的</code></p>\n<h4 id=\"11-3-1-通过在组件上声明静态数据传递给组件内部\"><a href=\"#11-3-1-通过在组件上声明静态数据传递给组件内部\" class=\"headerlink\" title=\"11.3.1 通过在组件上声明静态数据传递给组件内部\"></a>11.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1.声明组件模板配置对象    </span>\n<span class=\"token keyword\">let</span> login<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n    template<span class=\"token punctuation\">:</span><span class=\"token string\">'&lt;div>&lt;h1>欢迎：&amp;#123;&amp;#123;username&amp;#125;&amp;#125;年龄：&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&lt;h1>&lt;/div>'</span><span class=\"token punctuation\">,</span>        \n    props<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">// props作用用来接收使用组件时通过组件标签传递的数    </span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//2.注册组件    </span>\n<span class=\"token keyword\">const</span> app <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>        \n    data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>        \n    methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>        \n    components<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>               \n       login   \n       <span class=\"token comment\" spellcheck=\"true\">//组件注册</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//3.通过组件完成数据传递</span>\n<span class=\"token operator\">&lt;</span>login user<span class=\"token operator\">-</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"小陈\"</span> age<span class=\"token operator\">=</span><span class=\"token string\">\"23\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>1ogin<span class=\"token operator\">></span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结    </span>\n<span class=\"token code keyword\">    1.使用组件时可以在组件上定义多个属性以及对应数据    </span>\n<span class=\"token code keyword\">    2.在组件内部可以使用 props数组生命多个定义在组件上的属性名日后可以在组件中通过&amp;#123;属性名&amp;#125;&amp;#125;方式获取组件中属性值</span>\n</code></pre>\n<h4 id=\"11-3-2-通过在组件上声明动态数据传递给组件内部\"><a href=\"#11-3-2-通过在组件上声明动态数据传递给组件内部\" class=\"headerlink\" title=\"11.3.2 通过在组件上声明动态数据传递给组件内部\"></a>11.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1.声明组件模板对象 </span>\n    <span class=\"token keyword\">const</span> logins <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;div>&lt;h1>welcome &amp;#123;&amp;#123;userName&amp;#125;&amp;#125; ,age &amp;#123;&amp;#123;age&amp;#125;&amp;#125;, email: &amp;#123;&amp;#123;email&amp;#125;&amp;#125;,salary &amp;#123;&amp;#123;salary&amp;#125;&amp;#125; !&lt;/h1>&lt;/div>\"</span><span class=\"token punctuation\">,</span>        \n        props<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"salary\"</span><span class=\"token punctuation\">]</span>    \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">//2.注册局部组件 </span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            email<span class=\"token punctuation\">:</span><span class=\"token string\">'333@qq.com'</span><span class=\"token punctuation\">,</span>\n            salary<span class=\"token punctuation\">:</span><span class=\"token string\">'200'</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            login  \n            <span class=\"token comment\" spellcheck=\"true\">//注册组件</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//3.使用组件 </span>\n<span class=\"token operator\">&lt;</span>login <span class=\"token punctuation\">:</span>email<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> <span class=\"token punctuation\">:</span>salary<span class=\"token operator\">=</span><span class=\"token string\">\"salary\"</span> user<span class=\"token operator\">-</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"小陈\"</span> age<span class=\"token operator\">=</span><span class=\"token string\">\"24\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>login<span class=\"token operator\">></span>\n</code></pre>\n<h4 id=\"11-3-2-prop的单项数据流\"><a href=\"#11-3-2-prop的单项数据流\" class=\"headerlink\" title=\"11.3.2 prop的单项数据流\"></a>11.3.2 prop的单项数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子prop之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行</code></p>\n<blockquote>\n<p>所有的prop都使得其父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外改变父级组件的状<br>态,从而导致你的应用的数据流向难以理解<br>额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Wue会在浏览器的控<br>制台中发出警告。一摘自官网</p>\n</blockquote>\n<h3 id=\"11-4-组件中定义数据和事件使用\"><a href=\"#11-4-组件中定义数据和事件使用\" class=\"headerlink\" title=\"11.4 组件中定义数据和事件使用\"></a>11.4 组件中定义数据和事件使用</h3><p>1.组件中定义属于组件的数据</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//组件声明的配置对象 </span>\n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;div>&lt;h1>&amp;#123;&amp;#123;name&amp;#125;&amp;#125; Vue&lt;ul>&lt;li v-for='item,index in lists'>&amp;#123;&amp;#123;index+1&amp;#125;&amp;#125;==&amp;#123;&amp;#123;item&amp;#125;&amp;#125;&lt;/li>&lt;/ul>&lt;/h1>&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'learning'</span><span class=\"token punctuation\">,</span>\n            lists<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2.组件定义事件</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    \n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;div>&lt;h1>&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&lt;/h1>&lt;input type='button' value='点击我修改名称' @click='change'>&lt;/div>\"</span><span class=\"token punctuation\">,</span>    \n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"john\"</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>    \n    methods<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"micheal\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结    </span>\n<span class=\"token code keyword\">    1.组件中定义事件和直接在vue中定义事件基本一致直接在组件内部对应的htm1代码上加入@事件名=函数名方式即可        2.在组件内部使用 methods属性用来定义对应的事件函数即可,事件函数中this指向的是当前组件的实例</span>\n</code></pre>\n<h3 id=\"11-5-向子组件中传递事件并在子组件中调用改事件\"><a href=\"#11-5-向子组件中传递事件并在子组件中调用改事件\" class=\"headerlink\" title=\"11.5 向子组件中传递事件并在子组件中调用改事件\"></a>11.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用this.$emit(函数名)方式调用</code></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//1.声明组件</span>\n    <span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"login\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Vue <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>uname<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'button'</span> value<span class=\"token operator\">=</span><span class=\"token string\">'点我'</span> @click<span class=\"token operator\">=</span><span class=\"token string\">'change'</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#login\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                uname<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> <span class=\"token string\">'点击后触发Vue事件'</span>\n                <span class=\"token comment\" spellcheck=\"true\">//调用Vue中实例的事件</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//调用组件传递过来的其他函数时需要使用this.$emit('函数名调用)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//2.注册组件</span>\n    <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            username<span class=\"token punctuation\">:</span> <span class=\"token string\">'xiaochen'</span>    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//一个事件函数  将这个事件函数传递给子组件           </span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vue实例的事件'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            login<span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">//组件的注册    </span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//3.使用组件</span>\n<span class=\"token operator\">&lt;</span>login <span class=\"token punctuation\">:</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> @fun<span class=\"token operator\">=</span>fun<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>login<span class=\"token operator\">></span>   <span class=\"token comment\" spellcheck=\"true\">// ===>在组件内部使用this.$emit(\"fun\")</span>\n</code></pre>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/img2021/05/jasper/20210602011206.png\" alt=\"image-20210602011155939\"></p>\n<h2 id=\"12-Vue路由\"><a href=\"#12-Vue路由\" class=\"headerlink\" title=\"12.Vue路由\"></a>12.Vue路由</h2><p><code>注意事项</code></p>\n<p>![image-20210602014845994](D:\\桌面\\学习\\文章\\docs\\1.Vue 入门.assets\\image-20210602014845994.png)</p>\n<h3 id=\"12-1-路由\"><a href=\"#12-1-路由\" class=\"headerlink\" title=\"12.1 路由\"></a>12.1 路由</h3><p><code>路由：根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一的请求管理</code></p>\n<h3 id=\"12-2-作用\"><a href=\"#12-2-作用\" class=\"headerlink\" title=\"12.2 作用\"></a>12.2 作用</h3><p>​    <code>用来在vue中实现组件间的动态切换</code></p>\n<h3 id=\"12-3-使用\"><a href=\"#12-3-使用\" class=\"headerlink\" title=\"12.3 使用\"></a>12.3 使用</h3><p>1.引入路由</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/vue-router/dist/vue-router.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">//Vue 路由js</span>\n</code></pre>\n<p>2.创建组件对象</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/* 创建模板 */</span>    \n<span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"login\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>登录页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>    \n<span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"reg\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>注册页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>    \n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#login'</span>    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n<span class=\"token keyword\">const</span> register <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#reg'</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3.定义路由对象的规则</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/* 定义路由 */</span>    \n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    routes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span>login<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//path:路由的路径  component：路由的相应组件</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\"/reg\"</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span>register<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>4.将路由对象注册到vue实例</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//路由注册到Vue实例</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    router<span class=\"token punctuation\">:</span>router  <span class=\"token comment\" spellcheck=\"true\">//设置路由对象</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>5.在页面中显示路由的组件</p>\n<pre class=\" language-vue\"><code class=\"language-vue\"><!-- 显示路由组件 -->\n    <router-view></router-view>\n</code></pre>\n<p>6.根据链接切换路由</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#/reg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注册<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"12-4-router-link使用\"><a href=\"#12-4-router-link使用\" class=\"headerlink\" title=\"12.4  router-link使用\"></a>12.4  router-link使用</h3><p>​    <code>作用：用来替换我们在切换路由时使用a标签切换路由</code></p>\n<p>​    <code>好处：就是可以自动给路由路径加入#不需要手动加入</code></p>\n<pre class=\" language-vue\"><code class=\"language-vue\"><router-link to=\"/login\" tag=\"button\">登录</router-link>\n<router-link to=\"/reg\" tag=\"span\">注册</router-link>\n</code></pre>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> 总结    </span>\n<span class=\"token code keyword\">    1. router-link用来替换使用a标签实现路由切换    好处是不需要书写#号直接书写路由路径    </span>\n<span class=\"token code keyword\">    2. router-1 ink to属性用来书写路由路径    tag属性:用来将 router-1ink渲染成指定的标签</span>\n</code></pre>\n<h3 id=\"12-5-默认路由\"><a href=\"#12-5-默认路由\" class=\"headerlink\" title=\"12.5 默认路由\"></a>12.5 默认路由</h3><p>​    <code>作用:用来在第一次进入界面是显示一个默认的组件</code></p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">/* 定义路由 */</span>    \n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n    routes<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>redirect<span class=\"token punctuation\">:</span><span class=\"token string\">'/login'</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// redirect:用来当访问的是默认路由\"/\"时    跳转到指定的路由展示    推荐使用            </span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span>login<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span><span class=\"token string\">\"/reg\"</span><span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">:</span>register<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">]</span> \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"12-6-路由中参数传递\"><a href=\"#12-6-路由中参数传递\" class=\"headerlink\" title=\"12.6 路由中参数传递\"></a>12.6 路由中参数传递</h3><ul>\n<li>第一种方式传递参数 传统方式</li>\n</ul>\n<ol>\n<li><p>通过?号形式拼接参数</p>\n<pre class=\" language-vue\"><code class=\"language-vue\"><router-link to=\"/login?id=1&name=张三\" tag=\"button\">i need login</router-link>\n</code></pre>\n</li>\n<li><p>组件中获取参数</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        \n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#login'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\"  ==> name:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>第二种方式传递参数 restful</li>\n</ul>\n<ol>\n<li><p>通过使用路径方式传递</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>link to<span class=\"token operator\">=</span><span class=\"token string\">\"/reg/2/李四\"</span> tag<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span><span class=\"token operator\">></span>i need register<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>link<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    routes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/reg/:id/:name'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> reg<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n<li><p>组件中获取参数</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>    \n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'#reg'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'  ===>name:'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021713430.jpg\" alt=\"toast-7009956_1920\"></p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>此教程是针对有后端开发经验的同学，配合前端vue开发项目</p>\n</blockquote>\n<h1 id=\"Vue后端开发教程\"><a href=\"#Vue后端开发教程\" class=\"headerlink\" title=\"Vue后端开发教程\"></a>Vue后端开发教程</h1><h2 id=\"1-Vue-入门\"><a href=\"#1-Vue-入门\" class=\"headerlink\" title=\"1.Vue 入门\"></a>1.Vue 入门</h2><h3 id=\"1-1-下载-Vuejs\"><a href=\"#1-1-下载-Vuejs\" class=\"headerlink\" title=\"1.1 下载 Vuejs\"></a>1.1 下载 Vuejs</h3><pre><code class=\"html\">//开发版本\n&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n\n//生产版本\n&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"1-2-Vue第一个应用\"><a href=\"#1-2-Vue第一个应用\" class=\"headerlink\" title=\"1.2 Vue第一个应用\"></a>1.2 Vue第一个应用</h3><pre><code class=\"vue\">&lt;div id=&quot;app&quot;&gt;\n    &#123;&#123;msg&#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;\n&lt;/div&gt;\n\n&lt;!--建议放到临近的js位置--&gt;\n&lt;!--1.引入vue.js--&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;!--2.创建vue实例--&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,         //用来给vue实例定义一个作用范围\n        data: &#123;         //用来给vue实例定义一些相关数据\n            msg:&quot;你好，欢迎这个世界！&quot;,\n            username:&quot;hello vue&quot;,\n            pwd: &quot;1234&quot;\n        &#125;,\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"> 总结：\n    1.vue实例（对象）中el属性：代表Vue的作用范围    日后在Vue的作用范围内都可以使用Vue语法\n    2.vue实例（对象）中的data：绑定一些相关的数据变量，绑定的数据通过&#123;&#123;变量名&#125;&#125;在Vue的作用范围内取出\n    3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时，可在&#123;&#123;&#125;&#125;写表达式，运算符，调用相关方法，以及逻辑运算等\n    4.el属性中可以书写任意css选择器（jq选择器），但是使用Vue开发是推荐使用，id选择器\n</code></pre>\n<hr>\n<h2 id=\"2-vue-text和v-html\"><a href=\"#2-vue-text和v-html\" class=\"headerlink\" title=\"2.vue-text和v-html\"></a>2.vue-text和v-html</h2><h3 id=\"2-1-v-text\"><a href=\"#2-1-v-text\" class=\"headerlink\" title=\"2.1 v-text\"></a>2.1 v-text</h3><blockquote>\n<p>v-text : 用来获取data中数据将数据以文本的形式渲染到指定的标签内部 类似 js中的 innerText</p>\n</blockquote>\n<pre><code class=\"html\">&lt;div id=&quot;app&quot; class = &quot;aa&quot;&gt;\n    &lt;!--差值表达器--&gt;\n    &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;&lt;br&gt;\n    &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;.aa&#39;,\n        data: &#123;\n            msg: &quot;hello world&quot;\n\n        &#125;\n    &#125;);\n</code></pre>\n<pre><code class=\"markdown\">  总结\n        1.&#123;&#123;&#125;&#125;（插值表达）和v-text获取数据的区别  \n\t\t\ta.使用v-text取值会将标签中原有的数据覆盖  插值表达其不会\n\t\t\tb.使用v-text可以避免在网络环境较差的情况出现插值闪烁\n```\n\n### 2.2 v-html\n\n> 　　　　v-html: 用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似 js 中 innerHTML\n\n```html\n<div id=\"app\" class=\"aa\">\n\n    <span>&#123;&#123;msg&#125;&#125;&lt;/span&gt;&lt;br&gt;\n    &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span v-html=&quot;msg&quot;&gt;&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            msg: &quot;&lt;a href=&#39;&#39;&gt; 欢迎你!&lt;/a&gt;&quot;\n\n        &#125;\n    &#125;);\n</code></pre>\n<hr>\n<h2 id=\"3-vue中时间绑定（v-on）\"><a href=\"#3-vue中时间绑定（v-on）\" class=\"headerlink\" title=\"3.vue中时间绑定（v-on）\"></a>3.vue中时间绑定（v-on）</h2><h3 id=\"3-1-绑定事件语法\"><a href=\"#3-1-绑定事件语法\" class=\"headerlink\" title=\"3.1 绑定事件语法\"></a>3.1 绑定事件语法</h3><pre><code class=\"html\">&lt;div id=&quot;app&quot; class = &quot;aa&quot;&gt;\n    &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;\n    &lt;h2 v-text=&quot;msg&quot;&gt;&lt;/h2&gt;\n    &lt;span&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/span&gt;\n    &lt;br&gt;\n    &lt;input type=&quot;button&quot; value=&quot;点击改变年龄&quot; v-on:click=&quot;changeAge&quot;&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            msg: &quot;hello world&quot;,\n            age: &quot;23&quot;\n        &#125;,\n        methods:&#123; //定义vue事件\n            changeAge:function ()&#123;\n                alert(&quot;出发&quot;)\n            &#125;\n        &#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结：\n    事件   事件源:发送事件demo元素   事件：发生特定的动作 click...   监听器  发生特定动作之后的事件处理程序通常时js中的函数\n    1.在vue中绑定事件时通过v-on指令完成的  v-on:事件名  如 v-on:click\n    2.在v-on:事件名的赋值语句中的当前事件触发的函数名\n    3.在vue中事件的函数统一定义在Vue实例的methods属性中\n    4.在vue定义事件中this值的就是当前Vue实例，日后可以在事件中通过使用this获取Vue中相关数据\n</code></pre>\n<h3 id=\"3-2-Vue事件简化写法\"><a href=\"#3-2-Vue事件简化写法\" class=\"headerlink\" title=\"3.2 Vue事件简化写法\"></a>3.2 Vue事件简化写法</h3><pre><code class=\"html\">&lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt;\n    &lt;h2&gt;\n        &#123;&#123;age&#125;&#125;\n    &lt;/h2&gt;\n    &lt;input type=&quot;button&quot; value=&quot;通过v-on事件修改年龄 +1&quot; v-on:click=&quot;changeage&quot;&gt;\n    &lt;input type=&quot;button&quot; value=&quot;通过@事件修改年龄 -1&quot; @click=&quot;editage&quot;&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            age: 20\n        &#125;,\n        methods: &#123;\n            changeage: function() &#123;\n                this.age++;\n            &#125;,\n            editage: function() &#123;\n                this.age--;\n            &#125;\n        &#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结     1. vue事件简化通过 @符号 简化 v-on\n</code></pre>\n<h3 id=\"3-3-Vue优化写法\"><a href=\"#3-3-Vue优化写法\" class=\"headerlink\" title=\"3.3 Vue优化写法\"></a>3.3 Vue优化写法</h3><pre><code class=\"html\">&lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt;\n    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;\n    &lt;input type=&quot;button&quot; value=&quot;通过@事件修改年龄 -1&quot; @click=&quot;editage&quot;&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data:&#123;\n            age:20\n        &#125;,\n        methods: &#123;\n            // changeage: function () &#123;\n            //     this.age++;\n            // &#125;,\n            editage() &#123;\n                this.age--;\n            &#125;\n        &#125;\n\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结\n     1.事件定义存在两种写法 1.函数名:function()&#123;&#125; 2.函数名()&#123;&#125;推荐\n</code></pre>\n<h3 id=\"3-4-Vue事件传递\"><a href=\"#3-4-Vue事件传递\" class=\"headerlink\" title=\"3.4 Vue事件传递\"></a>3.4 Vue事件传递</h3><pre><code class=\"html\">&lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt;\n    &lt;h2&gt;&#123;&#123;age&#125;&#125;&lt;/h2&gt;\n    &lt;input type=&quot;button&quot; value=&quot;事件传值&quot; @click=&quot;changeage(23,&#39;xiaochen&#39;)&quot;&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data:&#123;\n            age:20\n        &#125;,\n        methods: &#123;\n            changeage(age) &#123;\n                this.age = age;\n            &#125;,\n        &#125;\n\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结    1.使用事件时，通常调用参数，通过函数接收参数\n</code></pre>\n<hr>\n<h2 id=\"4-v-show-v-if-v-bind\"><a href=\"#4-v-show-v-if-v-bind\" class=\"headerlink\" title=\"4.v-show v-if v-bind\"></a>4.v-show v-if v-bind</h2><h3 id=\"4-1-v-show\"><a href=\"#4-1-v-show\" class=\"headerlink\" title=\"4.1 v-show\"></a>4.1 v-show</h3><blockquote>\n<p>v-show 用来控制页面中某个元素是否展示  底层控制是标签 display 属性</p>\n</blockquote>\n<pre><code class=\"html\">&lt;div id=&quot;app&quot; class=&quot;aa&quot;&gt;\n    &lt;h2 v-show=&quot;false&quot;&gt;\n        v-show\n    &lt;/h2&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n        methods: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"4-2-V-if\"><a href=\"#4-2-V-if\" class=\"headerlink\" title=\"4.2.V-if\"></a>4.2.V-if</h3><blockquote>\n<p> 控制页面中的标签元素是否展示底层通过对dom树节点进行添加和删除来控制展示和隐藏用</p>\n</blockquote>\n<h3 id=\"4-3-v-bind\"><a href=\"#4-3-v-bind\" class=\"headerlink\" title=\"4.3.v-bind\"></a>4.3.v-bind</h3><blockquote>\n<p> 用来给页面中标签元素绑定相应的属性简化写法v-bin:属性名 ==》:属性名</p>\n</blockquote>\n<pre><code class=\"html\">&lt;div id=&quot;app&quot;&gt;\n    &lt;h2 v-show=&quot;false&quot;&gt;\n        v-show\n    &lt;/h2&gt;\n    &lt;h2 v-show=&quot;isShow&quot;&gt;\n        v-show hello\n    &lt;/h2&gt;\n    &lt;h1 v-if=&quot;false&quot;&gt;\n        袁老一路走好\n    &lt;/h1&gt;\n    &lt;h1 v-if=&quot;false&quot;&gt;\n        吴老一路走好\n    &lt;/h1&gt;\n    &lt;h1 v-if=&quot;false&quot;&gt;\n        浪费粮食\n    &lt;/h1&gt;\n    &lt;img v-if=&quot;isShow&quot; :src=&quot;src&quot; v-bind:title=&quot;title&quot; /&gt;\n    &lt;input type=&quot;button&quot; value=&quot;点击我改变title&quot; @click=&quot;changeTitle(&#39;这是修改后的title&#39;)&quot;&gt;\n    &lt;input type=&quot;button&quot; value=&quot;点击我改变src&quot; @click=&quot;changeSrc(&#39;https://gitee.com/lingzhexi/blogImage/raw/img2021/05/shiro/20210523165516.png&#39;)&quot;&gt;\n    &lt;br&gt;\n    &lt;input type=&quot;button&quot; value=&quot;点我显示隐藏&quot; @click=&quot;showHide&quot;&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            isShow: true,\n            title: &#39;陈小佳&#39;,\n            src: &#39;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#39;\n        &#125;,\n        methods: &#123;\n            showHide() &#123;\n                this.isShow = !this.isShow;\n            &#125;,\n            changeTitle(title) &#123;\n                this.title = title;\n            &#125;,\n            changeSrc(src) &#123;\n                this.src = src;\n            &#125;\n        &#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<hr>\n<h2 id=\"5-v-for使用\"><a href=\"#5-v-for使用\" class=\"headerlink\" title=\"5.v-for使用\"></a>5.v-for使用</h2><blockquote>\n<p>对象遍历</p>\n</blockquote>\n<p>创建vue模板</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;\n        $&#123;NAME&#125;\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot;&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n        methods: &#123;&#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"html\">&lt;div id=&quot;app&quot;&gt;\n    &#123;&#123;user.name&#125;&#125;&#123;&#123;user.age&#125;&#125;\n    &lt;br&gt;\n    &lt;span v-for=&quot;u in user&quot;&gt;\n        &#123;&#123;u&#125;&#125;\n    &lt;/span&gt;\n    &lt;br&gt;\n    &lt;span v-for=&quot;(value,key,index) in user&quot;&gt;\n        &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;\n    &lt;/span&gt;\n    &lt;br&gt;\n    &lt;ul&gt;\n        &lt;li v-for=&quot;a,index in arr&quot;&gt;\n            &#123;&#123;index&#125;&#125;:&#123;&#123;a&#125;&#125;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul&gt;\n        &lt;li v-for=&quot;u in users&quot; :key=&quot;u.id&quot;&gt;\n            &#123;&#123;u.id&#125;&#125;=&#123;&#123;u.name&#125;&#125;===&#123;&#123;u.age&#125;&#125;==&#123;&#123;u.state&#125;&#125;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            user: &#123;\n                name: &quot;小岑&quot;,\n                age: 24\n            &#125;,\n            arr: [&quot;土豆&quot;, &quot;玉米&quot;, &quot;小麦&quot;],\n            users: [&#123;\n                id: 1,\n                name: &quot;zhangs&quot;,\n                age: 25,\n                state: &quot;good&quot;\n            &#125;,\n                &#123;\n                    id: 2,\n                    name: &quot;lis&quot;,\n                    age: 25,\n                    state: &quot;bad&quot;\n                &#125;]\n        &#125;,\n        methods: &#123;&#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结在使用-for的时候一定要注意加入:key用来给vue内部提供重用和排序的唯—key\n</code></pre>\n<hr>\n<h2 id=\"6-v-model-双向绑定\"><a href=\"#6-v-model-双向绑定\" class=\"headerlink\" title=\"6.v-model 双向绑定\"></a>6.v-model 双向绑定</h2><blockquote>\n<p><code>v-model</code>:作用用来绑定标签元素的值与wue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p>\n</blockquote>\n<pre><code class=\"HTML\"> &lt;div id=&quot;app&quot;&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;\n    &lt;div&gt;\n        &#123;&#123;message&#125;&#125;\n    &lt;/div&gt;\n    &lt;input type=&quot;button&quot; value=&quot;改变输入框的值&quot; @click=&quot;changeMsg(&#39;凌哲熙&#39;)&quot;&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            message: &quot;&quot;\n        &#125;,\n        methods: &#123;\n            changeMsg(msg) &#123;\n                this.message = msg;\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结\n    1.使用v- model指令可以实现数据的双向绑定\n    2.所谓双向绑定表单中数据变化导致vue实例data数据变化vue实例中data数据的变化导致表单中数据变化称之为双向绑定\n# MVWM架构  双向绑定机制\n    Model:数据vue   实例中绑定数据\n    VM: ViewMode1   监听器\n    View:页面          页面展示的数据\n</code></pre>\n<h3 id=\"练习：记事本案例\"><a href=\"#练习：记事本案例\" class=\"headerlink\" title=\"练习：记事本案例\"></a>练习：记事本案例</h3><pre><code class=\"html\">&lt;div id=&quot;app&quot;&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;添加到记事本&quot; @click=&quot;save()&quot;&gt;\n    &lt;br&gt;\n    &lt;ul&gt;\n        &lt;li v-for=&quot;item,index in lists&quot;&gt;\n            &#123;&#123;index+1&#125;&#125;: &#123;&#123;item&#125;&#125; &lt;a href=&quot;javascript:&quot; @click=&quot;delItem(index)&quot;&gt;删除&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;span&gt;总数量：&#123;&#123;lists.length&#125;&#125; 条&lt;/span&gt; &lt;input type=&quot;button&quot; v-show=&quot;lists.length!=0&quot; value=&quot;删除所有&quot; @click=&quot;delAll()&quot;&gt;\n&lt;/div&gt;\n\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            lists:[&#39;今天下了一场暴雨&#39;,&#39;晚上回家吃小龙虾&#39;],\n            msg:&quot;&quot;\n        &#125;,\n        methods: &#123;\n            save() &#123;\n                if (&#39;&#39;!=this.msg) &#123;\n                    this.lists.push(this.msg);\n                    this.msg = &#39;&#39;;\n                &#125;\n            &#125;,\n            delItem(index) &#123;\n                this.lists.splice(index, 1);\n            &#125;,\n            delAll() &#123;\n                this.lists = [];\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<hr>\n<h2 id=\"7-事件修饰符\"><a href=\"#7-事件修饰符\" class=\"headerlink\" title=\"7.事件修饰符\"></a>7.事件修饰符</h2><blockquote>\n<p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p>\n</blockquote>\n<pre><code class=\"markdown\"># 1.常用的事件修饰符    \n    .stop\n    .prevent\n    .capture\n    .self\n    .once\n    .passive\n</code></pre>\n<h3 id=\"7-1-stop事件修饰符\"><a href=\"#7-1-stop事件修饰符\" class=\"headerlink\" title=\"7.1 stop事件修饰符\"></a>7.1 stop事件修饰符</h3><blockquote>\n<p>用来阻止事件冒泡</p>\n</blockquote>\n<pre><code class=\"html\">&lt;div id=&quot;app&quot;&gt;\n    &lt;div class=&quot;aa&quot; @click=&quot;divClick&quot;&gt;\n        &lt;!--阻止事件冒泡--&gt;\n        &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click.stop=&quot;btnClick&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;&#125;,\n        methods: &#123;\n            divClick() &#123;\n                alert(&quot;div is clicked&quot;);\n            &#125;,\n            btnClick() &#123;\n                alert(&#39;button is clicked&#39;);\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"7-2-prevent事件修饰符\"><a href=\"#7-2-prevent事件修饰符\" class=\"headerlink\" title=\"7.2 prevent事件修饰符\"></a>7.2 prevent事件修饰符</h3><blockquote>\n<p>用来阻止标签的默认行为</p>\n</blockquote>\n<pre><code class=\"html\">  &lt;a href=&quot;https://www.bilibili.com&quot; @click=&quot;aClick&quot;&gt;b站&lt;/a&gt;\n</code></pre>\n<h3 id=\"7-3-self事件修饰符\"><a href=\"#7-3-self事件修饰符\" class=\"headerlink\" title=\"7.3 self事件修饰符\"></a>7.3 self事件修饰符</h3><blockquote>\n<p> 用来针对于当前标签的事件触发=&gt;只触发自己标签的上特定动作的事件</p>\n</blockquote>\n<pre><code class=\"html\">    &lt;!--只触发标签自身的事件--&gt;\n&lt;div class=&quot;aa&quot; @click.self=&quot;divClick&quot;&gt;\n    &lt;!--阻止事件冒泡--&gt;\n    &lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click.stop=&quot;btnClick&quot;&gt;\n    &lt;input type=&quot;button&quot; value=&quot;按钮1&quot; @click=&quot;btnClick1&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"7-4-once-事件修饰符\"><a href=\"#7-4-once-事件修饰符\" class=\"headerlink\" title=\"7.4 once 事件修饰符\"></a>7.4 once 事件修饰符</h3><blockquote>\n<p>once 一次 作用：就是让指定事件只触发一次</p>\n</blockquote>\n<pre><code class=\"html\">&lt;!--.prevent ：用来阻止事件默认的行为.once ：用来只执行一次特定的事件--&gt;\n&lt;a href=&quot;https://www.baidu.com&quot; @click.prevent.once=&quot;aClick&quot;&gt;\n    百度\n&lt;/a&gt;\n</code></pre>\n<hr>\n<h2 id=\"8-按键修饰符\"><a href=\"#8-按键修饰符\" class=\"headerlink\" title=\"8.按键修饰符\"></a>8.按键修饰符</h2><blockquote>\n<p> 作用:用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p>\n</blockquote>\n<pre><code class=\"markdown\"># 按键修饰符    \n    .enter    \n    .tab\n    .delete (捕获“删除”和“退格”键)\n    .esc\n    .space\n    .up\n    .down\n    .left\n    .right\n</code></pre>\n<h3 id=\"8-1-enter-回车键\"><a href=\"#8-1-enter-回车键\" class=\"headerlink\" title=\"8.1 enter 回车键\"></a>8.1 enter 回车键</h3><blockquote>\n<p>用来在触发回车按键之后触发的事件</p>\n</blockquote>\n<pre><code class=\"html\">  &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.enter=&quot;keyups&quot;&gt;\n</code></pre>\n<h3 id=\"8-2-tab\"><a href=\"#8-2-tab\" class=\"headerlink\" title=\"8.2 tab\"></a>8.2 tab</h3><blockquote>\n<p>用来捕获到tab键执行到当前标签是才会触发</p>\n</blockquote>\n<pre><code class=\"html\">&lt;!--其他光标tab到该文本框的时候触发--&gt;\n&lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.tab=&quot;tabkey&quot;&gt;\n</code></pre>\n<h3 id=\"8-3-其他\"><a href=\"#8-3-其他\" class=\"headerlink\" title=\"8.3 其他\"></a>8.3 其他</h3><pre><code class=\"html\">    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.delete=&quot;deleteKey&quot;&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.esc=&quot;esckey&quot;&gt;\n    &lt;!--空格--&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.space=&quot;spacekey&quot;&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.left=&quot;leftkey&quot;&gt;\n    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; @keyup.right=&quot;rigthkey&quot;&gt;\n</code></pre>\n<h2 id=\"9-Axios基本使用\"><a href=\"#9-Axios基本使用\" class=\"headerlink\" title=\"9.Axios基本使用\"></a>9.Axios基本使用</h2><h3 id=\"9-1引言\"><a href=\"#9-1引言\" class=\"headerlink\" title=\"9.1引言\"></a>9.1引言</h3><blockquote>\n<p> <code>Axios</code> 是一个异步请求技术核心作用就是用来在页面中发送异步请求并获取对应数据在页面中渲染页面局部更新技术Aax</p>\n</blockquote>\n<h3 id=\"9-2-Axios第一个程序\"><a href=\"#9-2-Axios第一个程序\" class=\"headerlink\" title=\"9.2 Axios第一个程序\"></a>9.2 Axios第一个程序</h3><pre><code>中文网站：https://www.kancloud.cn/yunye/axios/234845\n安装：https://unpkg.com/axios/dist/axios.min.js\n</code></pre>\n<h4 id=\"9-2-1-GET请求\"><a href=\"#9-2-1-GET请求\" class=\"headerlink\" title=\"9.2.1 GET请求\"></a>9.2.1 GET请求</h4><pre><code class=\"js\">//发送Get请求\naxios.get(&quot;http://localhost:8080/findAll?name=xiaochen&quot;).then(function(response) &#123;\n    console.log(response.data);\n&#125;).\ncatch(function(error) &#123;\n    console.log(error);\n&#125;);\n</code></pre>\n<h4 id=\"9-2-2-POST请求方式\"><a href=\"#9-2-2-POST请求方式\" class=\"headerlink\" title=\"9.2.2 POST请求方式\"></a>9.2.2 POST请求方式</h4><pre><code class=\"js\">//POST请求\naxios.post(&#39;http://localhost:8080/save&#39;, &#123;\n    username: &#39;xiaochen&#39;,\n    age: 23,\n    email: &#39;5234@qq.com&#39;,\n    phone: &#39;15352252514&#39;\n&#125;).then(function(response) &#123;\n    console.log(response.data)\n&#125;).\ncatch(function(error) &#123;\n    console.log(error);\n&#125;);\n</code></pre>\n<h4 id=\"9-2-3-axios并发请求\"><a href=\"#9-2-3-axios并发请求\" class=\"headerlink\" title=\"9.2.3 axios并发请求\"></a>9.2.3 axios并发请求</h4><blockquote>\n<p><code>并发请求</code>：将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p>\n</blockquote>\n<pre><code class=\"js\"> //1.创建查询所有请求    \nfunction findAll() &#123;\n    return axios.get(&#39;http://localhost:8080/findAll?name=xiaochen&#39;);\n&#125;\n//2.创建保存请求    \nfunction save() &#123;\n    return axios.post(&#39;http://localhost:8080/save&#39;, &#123;\n        username: &#39;xiaochen&#39;,\n        email: &#39;5234@qq.com&#39;,\n        age: 23,\n        phone: &#39;15352252514&#39;\n    &#125;);\n&#125;\n//并发操作    \naxios.all([findAll(), save()]).then(axios.spread(function(res1, res2) &#123;\n    console.log(res1.data);\n    console.log(res2.data);\n&#125;));\n//用来发送一组并发请求\n</code></pre>\n<h3 id=\"9-2-vue-结合-axios-查询天气\"><a href=\"#9-2-vue-结合-axios-查询天气\" class=\"headerlink\" title=\"9.2  vue 结合 axios 查询天气\"></a>9.2  vue 结合 axios 查询天气</h3><pre><code class=\"vue\">&lt; div id=&quot;app&quot;&gt;\n&lt;div&gt;\n    &lt;input type=&quot;text&quot; v - model=&quot;name&quot; @keyup.delete=&quot;show&quot; @keyup.enter=&quot;searchCity&quot;&gt;\n    &lt;input type=&quot;button&quot; value=&quot;搜索&quot; @click=&quot;searchCity&quot;&gt;\n&lt;/div&gt;\n&lt;span v-for=&quot;city in citys&quot;&gt;\n        &lt;a href=&quot;&quot; @click.prevent=&quot;searchCitys(city)&quot;&gt;\n            &#123;&#123;city&#125;&#125; &amp;nbsp\n        &lt;/a&gt;\n    &lt;/span&gt;\n&lt;hr&gt;\n&lt;span v-show=&quot;isShow&quot;&gt;\n        &#123;&#123;name&#125;&#125;：今天天气是 &#123;&#123;weather&#125;&#125;\n    &lt;/span&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https:/ / cdn.jsdelivr.net / npm / vue / dist / vue.js &quot;&gt;\n&lt;/script&gt;\n&lt;!--引入axios--&gt;\n&lt;script src=&quot;https: //unpkg.com/axios/dist/axios.min.js&quot;&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            name: &#39;&#39;,\n            citys: [&#39;北京&#39;, &#39;上海&#39;, &#39;天津&#39;, &#39;深圳&#39;],\n            weather: &#39;&#39;,\n            isShow: false\n        &#125;,\n        methods: &#123;\n            searchCity() &#123;\n                let _this = this axios.get(&quot;http://localhost:8080/city/find?name=&quot; + this.name).then(function(response) &#123;\n                    console.log(response.data);\n                    _this.weather = response.data.message;\n                    _this.isShow = true;\n                &#125;).\n                catch(function(error) &#123;\n                    console.log(error);\n                &#125;);\n            &#125;,\n            show() &#123;\n                this.isShow = false;\n            &#125;,\n            searchCitys(name) &#123;\n                this.name = name;\n                this.searchCity();\n            &#125;\n        &#125;,\n        components: &#123;&#125;\n    &#125;);\n&lt;/script&gt;\n</code></pre>\n<hr>\n<h2 id=\"10-Vue生命周期\"><a href=\"#10-Vue生命周期\" class=\"headerlink\" title=\"10. Vue生命周期\"></a>10. Vue生命周期</h2><blockquote>\n<p><code>生命周期钩子</code>   ===》 <code>生命周期函数</code></p>\n</blockquote>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"Vue 实例生命周期\"></p>\n<p> Vue生命周期总结</p>\n<pre><code class=\"js\">    // 1.初始化阶段          \n    beforeCreate() &#123;//1.生命周期中第一个函数,该函数在执行时vue实例仅仅完成了自身事件的绑定和生命周期函的初始化工作,Vue实例中还没有 Data el methods相关属性            \n        console.log(&quot;beforeCreate:&quot; + this.msg);\n    &#125;,\n    created() &#123; //2.生命周期中第二个函数,该函数在执行时vue实例已经初始化了data属性和 methods中相关方法     \n        console.log(&quot;created:&quot; + this.msg);\n    &#125;,\n    beforeMount() &#123;//3.生命周期中第三个函数,该函数在执行时vue将E1中指定作用范围作为模板编译            \n        console.log(&quot; beforeMount:&quot; + document.getElementById(&quot;sp&quot;).innerText);\n    &#125;,\n    mounted() &#123;//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面           \n           console.log(&quot;Mounted: &quot; + document.getElementById(&quot;sp&quot;).innerText);\n    //2.运行阶段\n    beforeUpdate() &#123;//5.生命周期中第五个函数,该函数是data中数据发生变化时执行这个事件执行时仅仅是vue实例中data数据变化页面显示的依然是原始数据           \n        console.log(&quot;beforeUpdate: &quot; + this.msg);\n        console.log(&quot;beforeUpdate: &quot; + document.getElementById(&quot;sp&quot;).innerText);\n    &#125;,\n    updated() &#123;//6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化页面中数据已经和data中数据一致            \n        console.log(&quot;updated: &quot; + this.msg);\n        console.log(&quot;updated: &quot; + document.getElementById(&quot;sp&quot;).innerText);\n    &#125;,\n    //3.销毁阶段\n    beforeDestory() &#123;//7.生命周期第七个函数,该函数执行时,vue中所有数据 methods componet都没销到       \n    &#125;,\n    destoryed() &#123; //8.生命周期的第八个函数,该函数执行时,Wue实例彻底销毁        \n    &#125;\n</code></pre>\n<h2 id=\"11-Vue中的组件-Component\"><a href=\"#11-Vue中的组件-Component\" class=\"headerlink\" title=\"11.Vue中的组件( Component)\"></a>11.Vue中的组件( Component)</h2><h3 id=\"11-1组件作用\"><a href=\"#11-1组件作用\" class=\"headerlink\" title=\"11.1组件作用\"></a>11.1组件作用</h3><p>​    组件作用:用来减少wue实例对象中代码量,日后在使用wue开发过程中,可以根据不能业务功能将页面中划分不同的多个组件然后由多个组件去完成整个页面的布局便于日后使用<br>Vue进行开发时页面管理,方便开发人员维护</p>\n<h3 id=\"11-2-组件使用\"><a href=\"#11-2-组件使用\" class=\"headerlink\" title=\"11.2 组件使用\"></a>11.2 组件使用</h3><h4 id=\"11-2-1-全局组件注册\"><a href=\"#11-2-1-全局组件注册\" class=\"headerlink\" title=\"11.2.1 全局组件注册\"></a>11.2.1 全局组件注册</h4><p>说明:全局组件注册给vue实例,日后可以在任意ue实例的范围内使用该组件</p>\n<pre><code class=\"js\">//1.开发全局组件    \nVue.component(&#39;login&#39;,(template:&#39;&lt;div&gt;&lt;h1&gt;用户登录&lt;/h1&gt;&lt;/div&gt;&#39;    &#125;);\n//2.使用全局组件在Vue实例范围内    \n&lt;login&gt;&lt;/login&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 注意    \n    1.Vue.component用来开发全局组件  \n        参数1:组件的名称  \n        参数2: 组件配置&#123;&#125; template:&#39;&#39; 用来书写组件的htm1代码 template中必须有且只有一个root元素    \n    2.使用时需要在vue的作用范围内根据组件名使用全局组件    \n    3.如果在注册组件过程中使用驼峰命名组件的方式在使用组件时必须将驼峰的所有单词小写加入-线进行使用\n</code></pre>\n<h4 id=\"11-2-2-局部组件注册\"><a href=\"#11-2-2-局部组件注册\" class=\"headerlink\" title=\"11.2.2 局部组件注册\"></a>11.2.2 局部组件注册</h4><p>​    <code>说明:通过将组件注册给对应vue实例中一个 components属性来完成组件注册,这种方式不会对vue实例造成累加</code></p>\n<ul>\n<li>第一种开发</li>\n</ul>\n<pre><code class=\"js\">//局部组件登录模板\nlet login = &#123;    template:&#39;&lt;div&gt;&lt;h1&gt;用户管理&lt;/h1&gt;&lt;/div&gt;&#39;&#125;\nconst app = new Vue(&#123;    \n    el: &#39;#app&#39;,\n    data: &#123;&#125;,\n    methods: &#123;&#125;,\n    components: &#123;\n        login: login\n    &#125;&#125;);\n//使用局部组件\n&lt;login&gt;&lt;/login&gt;\n</code></pre>\n<ul>\n<li>第二种开发</li>\n</ul>\n<pre><code class=\"js\">//1.声明局部组件模板 template 标签 注意：在Vue实例作用范围外声明    \n&lt;template id=&quot;loginTemplate&quot;&gt;        \n    &lt;h1&gt;用户管理&lt;/h1&gt;    \n&lt;/template&gt;\n//2.定义变量用来保存模板配置对象    \nlet login = &#123; \n    //具体组件模板        \n    template: &#39;#loginTemplate&#39; \n    //使用自定义template 标签选择器即可    \n&#125;;\n//3.注册组件    \nconst app = new Vue(&#123;\n    el: &#39;#app&#39;,\n    data: &#123;&#125;,        \n    methods: &#123;&#125;,        \n    components: &#123;\n        //用来注册局部组件            \n        login: login \n        //注册局部组件\n    &#125;    \n&#125;);\n//4使用局部组件    \n&lt;login&gt;&lt;/login&gt;\n</code></pre>\n<h3 id=\"11-3-Prop的使用\"><a href=\"#11-3-Prop的使用\" class=\"headerlink\" title=\"11.3 Prop的使用\"></a>11.3 Prop的使用</h3><p><code>作用: props用来给组件传递相应静态数据或者是动态数据的</code></p>\n<h4 id=\"11-3-1-通过在组件上声明静态数据传递给组件内部\"><a href=\"#11-3-1-通过在组件上声明静态数据传递给组件内部\" class=\"headerlink\" title=\"11.3.1 通过在组件上声明静态数据传递给组件内部\"></a>11.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre><code class=\"js\">//1.声明组件模板配置对象    \nlet login= &#123;        \n    template:&#39;&lt;div&gt;&lt;h1&gt;欢迎：&#123;&#123;username&#125;&#125;年龄：&#123;&#123;age&#125;&#125;&lt;h1&gt;&lt;/div&gt;&#39;,        \n    props:[&#39;userName&#39;,&#39;age&#39;] // props作用用来接收使用组件时通过组件标签传递的数    \n&#125;\n//2.注册组件    \nconst app new Vue(&#123;        \n    el: &#39;#app&#39;,        \n    data: &#123;&#125;        \n    methods: &#123;&#125;,        \n    components:&#123;               \n       login   \n       //组件注册\n    &#125;    \n&#125;);\n//3.通过组件完成数据传递\n&lt;login user-name=&quot;小陈&quot; age=&quot;23&quot;&gt;&lt;/1ogin&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结    \n    1.使用组件时可以在组件上定义多个属性以及对应数据    \n    2.在组件内部可以使用 props数组生命多个定义在组件上的属性名日后可以在组件中通过&#123;属性名&#125;&#125;方式获取组件中属性值\n</code></pre>\n<h4 id=\"11-3-2-通过在组件上声明动态数据传递给组件内部\"><a href=\"#11-3-2-通过在组件上声明动态数据传递给组件内部\" class=\"headerlink\" title=\"11.3.2 通过在组件上声明动态数据传递给组件内部\"></a>11.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre><code class=\"js\">//1.声明组件模板对象 \n    const logins = &#123;        \n        template: &quot;&lt;div&gt;&lt;h1&gt;welcome &#123;&#123;userName&#125;&#125; ,age &#123;&#123;age&#125;&#125;, email: &#123;&#123;email&#125;&#125;,salary &#123;&#123;salary&#125;&#125; !&lt;/h1&gt;&lt;/div&gt;&quot;,        \n        props:[&quot;userName&quot;,&quot;age&quot;,&quot;email&quot;,&quot;salary&quot;]    \n    &#125; \n//2.注册局部组件 \n    const app = new Vue(&#123;\n        el:&#39;#app&#39;,\n        data:&#123;\n            email:&#39;333@qq.com&#39;,\n            salary:&#39;200&#39;\n        &#125;,\n        methods:&#123;&#125;,\n        components:&#123;\n            login  \n            //注册组件\n        &#125;    \n    &#125;);\n//3.使用组件 \n&lt;login :email=&quot;email&quot; :salary=&quot;salary&quot; user-name=&quot;小陈&quot; age=&quot;24&quot;&gt;&lt;/login&gt;\n</code></pre>\n<h4 id=\"11-3-2-prop的单项数据流\"><a href=\"#11-3-2-prop的单项数据流\" class=\"headerlink\" title=\"11.3.2 prop的单项数据流\"></a>11.3.2 prop的单项数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子prop之间形成了一个单向下行绑定:父级 prop 的更新会向下流动到子组件中,但是反过来则不行</code></p>\n<blockquote>\n<p>所有的prop都使得其父子prop之间形成了一个单向下行绑定:父级prop的更新会向下流动到子组件中,但是反过来则不行。这样会防止从子组件意外改变父级组件的状<br>态,从而导致你的应用的数据流向难以理解<br>额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Wue会在浏览器的控<br>制台中发出警告。一摘自官网</p>\n</blockquote>\n<h3 id=\"11-4-组件中定义数据和事件使用\"><a href=\"#11-4-组件中定义数据和事件使用\" class=\"headerlink\" title=\"11.4 组件中定义数据和事件使用\"></a>11.4 组件中定义数据和事件使用</h3><p>1.组件中定义属于组件的数据</p>\n<pre><code class=\"js\">//组件声明的配置对象 \nconst login = &#123;\n    template: &quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;name&#125;&#125; Vue&lt;ul&gt;&lt;li v-for=&#39;item,index in lists&#39;&gt;&#123;&#123;index+1&#125;&#125;==&#123;&#123;item&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&lt;/h1&gt;&lt;/div&gt;&quot;,\n    data() &#123;\n        return &#123;\n            name: &#39;learning&#39;,\n            lists: [&#39;java&#39;, &#39;js&#39;, &#39;python&#39;]\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>2.组件定义事件</p>\n<pre><code class=\"js\">const login =&#123;    \n    template: &quot;&lt;div&gt;&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;input type=&#39;button&#39; value=&#39;点击我修改名称&#39; @click=&#39;change&#39;&gt;&lt;/div&gt;&quot;,    \n    data() &#123;\n        return &#123;\n            name: &quot;john&quot;\n        &#125;;    \n    &#125;,    \n    methods:&#123;\n        change() &#123;\n            this.name = &quot;micheal&quot;;\n        &#125;    \n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"markdown\"># 总结    \n    1.组件中定义事件和直接在vue中定义事件基本一致直接在组件内部对应的htm1代码上加入@事件名=函数名方式即可        2.在组件内部使用 methods属性用来定义对应的事件函数即可,事件函数中this指向的是当前组件的实例\n</code></pre>\n<h3 id=\"11-5-向子组件中传递事件并在子组件中调用改事件\"><a href=\"#11-5-向子组件中传递事件并在子组件中调用改事件\" class=\"headerlink\" title=\"11.5 向子组件中传递事件并在子组件中调用改事件\"></a>11.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用this.$emit(函数名)方式调用</code></p>\n<pre><code class=\"js\">//1.声明组件\n    &lt;template id=&quot;login&quot;&gt;\n        &lt;div&gt;\n            &lt;h1&gt;Vue &#123;&#123;uname&#125;&#125;&lt;/h1&gt;\n            &lt;input type=&#39;button&#39; value=&#39;点我&#39; @click=&#39;change&#39;&gt;\n        &lt;/div&gt;\n    &lt;/template&gt;\n    const login = &#123;\n        template: &quot;#login&quot;,\n        data() &#123;\n            return &#123;\n                uname: this.name\n            &#125;;\n        &#125;,\n        methods: &#123;\n            change() &#123;\n                this.uname = &#39;点击后触发Vue事件&#39;\n                //调用Vue中实例的事件\n                this.$emit(&#39;fun&#39;)//调用组件传递过来的其他函数时需要使用this.$emit(&#39;函数名调用)\n            &#125;,\n        &#125;,\n        props: [&#39;name&#39;]&#125;\n    //2.注册组件\n    const app = new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            username: &#39;xiaochen&#39;    &#125;,\n        methods: &#123;\n            fun()&#123; //一个事件函数  将这个事件函数传递给子组件           \n                alert(&#39;Vue实例的事件&#39;)\n            &#125;\n        &#125;,\n        components: &#123;\n            login,  //组件的注册    \n        &#125;&#125;);\n//3.使用组件\n&lt;login :name=&quot;username&quot; @fun=fun&gt;&lt;/login&gt;   // ===&gt;在组件内部使用this.$emit(&quot;fun&quot;)\n</code></pre>\n<p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/img2021/05/jasper/20210602011206.png\" alt=\"image-20210602011155939\"></p>\n<h2 id=\"12-Vue路由\"><a href=\"#12-Vue路由\" class=\"headerlink\" title=\"12.Vue路由\"></a>12.Vue路由</h2><p><code>注意事项</code></p>\n<p>![image-20210602014845994](D:\\桌面\\学习\\文章\\docs\\1.Vue 入门.assets\\image-20210602014845994.png)</p>\n<h3 id=\"12-1-路由\"><a href=\"#12-1-路由\" class=\"headerlink\" title=\"12.1 路由\"></a>12.1 路由</h3><p><code>路由：根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一的请求管理</code></p>\n<h3 id=\"12-2-作用\"><a href=\"#12-2-作用\" class=\"headerlink\" title=\"12.2 作用\"></a>12.2 作用</h3><p>​    <code>用来在vue中实现组件间的动态切换</code></p>\n<h3 id=\"12-3-使用\"><a href=\"#12-3-使用\" class=\"headerlink\" title=\"12.3 使用\"></a>12.3 使用</h3><p>1.引入路由</p>\n<pre><code class=\"js\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt; //Vue 路由js\n</code></pre>\n<p>2.创建组件对象</p>\n<pre><code class=\"js\">/* 创建模板 */    \n&lt;template id=&quot;login&quot;&gt;\n    &lt;h1&gt;登录页面&lt;/h1&gt;    \n&lt;/template&gt;    \n&lt;template id=&quot;reg&quot;&gt;\n    &lt;h1&gt;注册页面&lt;/h1&gt;\n&lt;/template&gt;    \nconst login = &#123;        \n    template: &#39;#login&#39;    \n&#125;    \nconst register = &#123;\n    template: &#39;#reg&#39;\n&#125;\n</code></pre>\n<p>3.定义路由对象的规则</p>\n<pre><code class=\"js\">/* 定义路由 */    \nconst router = new VueRouter(&#123;\n    routes:[\n        &#123;path:&quot;/login&quot;,component:login&#125;,\n        //path:路由的路径  component：路由的相应组件\n        &#123;path:&quot;/reg&quot;,component:register&#125;\n    ]\n&#125;)\n</code></pre>\n<p>4.将路由对象注册到vue实例</p>\n<pre><code class=\"js\">//路由注册到Vue实例\nconst app = new Vue(&#123;\n    el: &#39;#app&#39;,\n    data: &#123;&#125;,\n    methods: &#123;&#125;,\n    router:router  //设置路由对象\n&#125;);\n</code></pre>\n<p>5.在页面中显示路由的组件</p>\n<pre><code class=\"vue\">&lt;!-- 显示路由组件 --&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n<p>6.根据链接切换路由</p>\n<pre><code class=\"html\">&lt;a href=&quot;#/login&quot;&gt;登录&lt;/a&gt;\n&lt;a href=&quot;#/reg&quot;&gt;注册&lt;/a&gt;\n</code></pre>\n<h3 id=\"12-4-router-link使用\"><a href=\"#12-4-router-link使用\" class=\"headerlink\" title=\"12.4  router-link使用\"></a>12.4  router-link使用</h3><p>​    <code>作用：用来替换我们在切换路由时使用a标签切换路由</code></p>\n<p>​    <code>好处：就是可以自动给路由路径加入#不需要手动加入</code></p>\n<pre><code class=\"vue\">&lt;router-link to=&quot;/login&quot; tag=&quot;button&quot;&gt;登录&lt;/router-link&gt;\n&lt;router-link to=&quot;/reg&quot; tag=&quot;span&quot;&gt;注册&lt;/router-link&gt;\n</code></pre>\n<pre><code class=\"markdown\"># 总结    \n    1. router-link用来替换使用a标签实现路由切换    好处是不需要书写#号直接书写路由路径    \n    2. router-1 ink to属性用来书写路由路径    tag属性:用来将 router-1ink渲染成指定的标签\n</code></pre>\n<h3 id=\"12-5-默认路由\"><a href=\"#12-5-默认路由\" class=\"headerlink\" title=\"12.5 默认路由\"></a>12.5 默认路由</h3><p>​    <code>作用:用来在第一次进入界面是显示一个默认的组件</code></p>\n<pre><code class=\"js\">/* 定义路由 */    \nconst router = new VueRouter(&#123;        \n    routes:[\n        &#123;path:&quot;/&quot;,redirect:&#39;/login&#39;&#125;, // redirect:用来当访问的是默认路由&quot;/&quot;时    跳转到指定的路由展示    推荐使用            \n        &#123;path:&quot;/login&quot;,component:login&#125;,\n        &#123;path:&quot;/reg&quot;,component:register&#125;\n    ] \n&#125;)\n</code></pre>\n<h3 id=\"12-6-路由中参数传递\"><a href=\"#12-6-路由中参数传递\" class=\"headerlink\" title=\"12.6 路由中参数传递\"></a>12.6 路由中参数传递</h3><ul>\n<li>第一种方式传递参数 传统方式</li>\n</ul>\n<ol>\n<li><p>通过?号形式拼接参数</p>\n<pre><code class=\"vue\">&lt;router-link to=&quot;/login?id=1&amp;name=张三&quot; tag=&quot;button&quot;&gt;i need login&lt;/router-link&gt;\n</code></pre>\n</li>\n<li><p>组件中获取参数</p>\n<pre><code class=\"js\">const login = &#123;        \n    template: &#39;#login&#39;,\n    created() &#123;\n        console.log(&quot;id: &quot; + this.$route.query.id + &quot;  ==&gt; name:&quot; + this.$route.query.name);        \n    &#125;    \n&#125;\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>第二种方式传递参数 restful</li>\n</ul>\n<ol>\n<li><p>通过使用路径方式传递</p>\n<pre><code class=\"js\">&lt;router-link to=&quot;/reg/2/李四&quot; tag=&quot;button&quot;&gt;i need register&lt;/router-link&gt;\nconst router = new VueRouter(&#123;\n    routes: [\n        &#123;path: &#39;/reg/:id/:name&#39;, component: reg&#125;\n    ]\n&#125;)\n</code></pre>\n</li>\n<li><p>组件中获取参数</p>\n<pre><code class=\"js\">const reg = &#123;    \n    template: &#39;#reg&#39;,\n    created() &#123;\n        console.log(&#39;id: &#39; + this.$route.params.id + &#39;  ===&gt;name:&#39; + this.$route.params.name);    \n    &#125;\n&#125;\n</code></pre>\n</li>\n</ol>"},{"title":"Hexo 文章添加字数统计和阅读时长","summary":"hexo 配置","abbrlink":14944,"date":"2022-07-24T02:55:35.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714225.jpg)\n\n<!-- more -->\n\n## 安装插件\n\n如果没有安装 hexo-wordcount 插件，先安装该插件：\n\n> npm i --save hexo-wordcount\n\n## 配置\nNext 主题默认集成了文章 【字数统计】和【阅读时长】，我们只需要开启配置即可，\n```yaml\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true         # 单篇 字数统计\n  min2read: true          # 单篇 阅读时长\n  totalcount: false       # 网站 字数统计\n  separated_meta: true\n```\n\n\n## 添加样式\n打开 /themes/hexo-theme-next/layout/_partials/post/post-meta.njk 文件，在  `div` 的最下面添加以下代码：\n```html\n<span title=\"{{ __('post.wordcount') }}\">\n  <span class=\"post-meta-divider\">&nbsp&nbsp|&nbsp&nbsphe</span>\n  <i class=\"fas fa-book\"></i>\n  字数统计:{{ wordcount(post.content) }}字\n</span>\n<span title=\"{{ __('post.min2read') }}\">\n  <span class=\"post-meta-divider\">&nbsp&nbsp|&nbsp&nbsp</span>\n  <i class=\"far fa-clock\"></i>\n  阅读时长≈{{ min2read(post.content) }}分钟\n</span>\n\n```\n\n## 效果\n![添加文字统计和阅读时长](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241340113.png)\n\n\n## 参考：\n - [Hexo添加字数统计、阅读时长](https://www.jianshu.com/p/baea8c95e39b)\n - [Hexo 文字置顶](https://lingzhexi.github.io/2021/09/24/文章置顶/)\n","source":"_posts/2021-09-24-Hexo-文章添加字数统计和阅读时长.md","raw":"---\ntitle: Hexo 文章添加字数统计和阅读时长\ntags: Hexo\ncategories: Hexo\nsummary: hexo 配置\nabbrlink: 14944\ndate: 2022-07-24 10:55:35\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714225.jpg)\n\n<!-- more -->\n\n## 安装插件\n\n如果没有安装 hexo-wordcount 插件，先安装该插件：\n\n> npm i --save hexo-wordcount\n\n## 配置\nNext 主题默认集成了文章 【字数统计】和【阅读时长】，我们只需要开启配置即可，\n```yaml\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true         # 单篇 字数统计\n  min2read: true          # 单篇 阅读时长\n  totalcount: false       # 网站 字数统计\n  separated_meta: true\n```\n\n\n## 添加样式\n打开 /themes/hexo-theme-next/layout/_partials/post/post-meta.njk 文件，在  `div` 的最下面添加以下代码：\n```html\n<span title=\"{{ __('post.wordcount') }}\">\n  <span class=\"post-meta-divider\">&nbsp&nbsp|&nbsp&nbsphe</span>\n  <i class=\"fas fa-book\"></i>\n  字数统计:{{ wordcount(post.content) }}字\n</span>\n<span title=\"{{ __('post.min2read') }}\">\n  <span class=\"post-meta-divider\">&nbsp&nbsp|&nbsp&nbsp</span>\n  <i class=\"far fa-clock\"></i>\n  阅读时长≈{{ min2read(post.content) }}分钟\n</span>\n\n```\n\n## 效果\n![添加文字统计和阅读时长](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241340113.png)\n\n\n## 参考：\n - [Hexo添加字数统计、阅读时长](https://www.jianshu.com/p/baea8c95e39b)\n - [Hexo 文字置顶](https://lingzhexi.github.io/2021/09/24/文章置顶/)\n","slug":"Hexo-文章添加字数统计和阅读时长","published":1,"updated":"2024-12-16T12:11:11.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllynz000hj0kr99b5365r","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714225.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>如果没有安装 hexo-wordcount 插件，先安装该插件：</p>\n<blockquote>\n<p>npm i –save hexo-wordcount</p>\n</blockquote>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Next 主题默认集成了文章 【字数统计】和【阅读时长】，我们只需要开启配置即可，</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># Post wordcount display settings</span>\n<span class=\"token comment\" spellcheck=\"true\"># Dependencies: https://github.com/willin/hexo-wordcount</span>\n<span class=\"token key atrule\">post_wordcount</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">item_text</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">wordcount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true         </span><span class=\"token comment\" spellcheck=\"true\"># 单篇 字数统计</span>\n  <span class=\"token key atrule\">min2read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true          </span><span class=\"token comment\" spellcheck=\"true\"># 单篇 阅读时长</span>\n  <span class=\"token key atrule\">totalcount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false       </span><span class=\"token comment\" spellcheck=\"true\"># 网站 字数统计</span>\n  <span class=\"token key atrule\">separated_meta</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n</code></pre>\n<h2 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h2><p>打开 /themes/hexo-theme-next/layout/_partials/post/post-meta.njk 文件，在  <code>div</code> 的最下面添加以下代码：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&amp;#123;&amp;#123; __(<span class=\"token punctuation\">'</span>post.wordcount<span class=\"token punctuation\">'</span>) &amp;#125;&amp;#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta-divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsphe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fas fa-book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n  字数统计:<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span> wordcount(post.content) <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>字\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&amp;#123;&amp;#123; __(<span class=\"token punctuation\">'</span>post.min2read<span class=\"token punctuation\">'</span>) &amp;#125;&amp;#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post-meta-divider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>far fa-clock<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n  阅读时长≈<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span> min2read(post.content) <span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>分钟\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241340113.png\" alt=\"添加文字统计和阅读时长\"></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/baea8c95e39b\">Hexo添加字数统计、阅读时长</a></li>\n<li><a href=\"https://lingzhexi.github.io/2021/09/24/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/\">Hexo 文字置顶</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714225.jpg\"></p>","more":"<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>如果没有安装 hexo-wordcount 插件，先安装该插件：</p>\n<blockquote>\n<p>npm i –save hexo-wordcount</p>\n</blockquote>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>Next 主题默认集成了文章 【字数统计】和【阅读时长】，我们只需要开启配置即可，</p>\n<pre><code class=\"yaml\"># Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true         # 单篇 字数统计\n  min2read: true          # 单篇 阅读时长\n  totalcount: false       # 网站 字数统计\n  separated_meta: true\n</code></pre>\n<h2 id=\"添加样式\"><a href=\"#添加样式\" class=\"headerlink\" title=\"添加样式\"></a>添加样式</h2><p>打开 /themes/hexo-theme-next/layout/_partials/post/post-meta.njk 文件，在  <code>div</code> 的最下面添加以下代码：</p>\n<pre><code class=\"html\">&lt;span title=&quot;&#123;&#123; __('post.wordcount') &#125;&#125;&quot;&gt;\n  &lt;span class=&quot;post-meta-divider&quot;&gt;&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsphe&lt;/span&gt;\n  &lt;i class=&quot;fas fa-book&quot;&gt;&lt;/i&gt;\n  字数统计:&#123;&#123; wordcount(post.content) &#125;&#125;字\n&lt;/span&gt;\n&lt;span title=&quot;&#123;&#123; __('post.min2read') &#125;&#125;&quot;&gt;\n  &lt;span class=&quot;post-meta-divider&quot;&gt;&amp;nbsp&amp;nbsp|&amp;nbsp&amp;nbsp&lt;/span&gt;\n  &lt;i class=&quot;far fa-clock&quot;&gt;&lt;/i&gt;\n  阅读时长≈&#123;&#123; min2read(post.content) &#125;&#125;分钟\n&lt;/span&gt;\n</code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241340113.png\" alt=\"添加文字统计和阅读时长\"></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/baea8c95e39b\">Hexo添加字数统计、阅读时长</a></li>\n<li><a href=\"https://lingzhexi.github.io/2021/09/24/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/\">Hexo 文字置顶</a></li>\n</ul>"},{"title":"Java 日志从入门到实战","summary":"介绍Java体系 log4j、log4j2、logback","abbrlink":29669,"date":"2021-10-15T06:22:03.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![bird-7016926_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021703915.jpg)\n\n<!--more-->\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [zhuanlan.zhihu.com](https://zhuanlan.zhihu.com/p/64353891)\n\n日志和异常处理结合得当的话，会给项目维护带来非常大的价值。\n\n*   **日志：**就是介绍一个过程和经历的详细记录。\n*   **项目日志：**就是项目开发过程的详细记录，一般由项目经理记录。\n*   **代码里的日志：**就是程序员记录某个开发过程的详细情况，这是项目里每个程序员需要做的工作。\n\n代码里的日志在项目中扮演着非常重要的角色，日志记录的详细程度决定系统是否容易维护，Java 项目中日志记录的框架有很多，在项目中如何选型也必将困惑。\n\n我们这场 chat 讨论的主题就是：**Java 代码里的日志**，主要是写给 Java 程序员看的，本篇 Chat 从以下六个方面对 Java 日志进行阐述：\n\n*   一、日志在项目中的作用\n*   二、Java 日志使用的困惑\n*   三、Java 日志演化历史\n*   四、使用不同框架的 Java 日志示例说明\n*   五、项目中日志记录遵守哪些原则\n*   六、一个推荐的项目 Java 日志实例\n\n以期通过本场 Chat 的学习，能使大家在编码过程中，对日志的处理过程加深认识、统一规范、得到收获，从零开始轻松掌握 Java 日志处理，并且可以运用到实际项目中。\n\n\n### 一、日志在项目中的作用\n\nLog 日志，主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等，也有利于将这些信息进行持久化（如果不将日志信息保存到文件或数据库，则信息便会丢失）。\n\n### 1. 查看程序当前运行状态\n\n如果想了解程序当前的运行情况，我们通过实时查看应用日志的输出，就能进行分析。\n\n比如，你在浏览器里输入一个 action 地址，该 url 负责执行一些批量处理，action 运行后，假设处理比较耗时，你再浏览器里无法直接看到程序的执行结果，此时，你可以打开系统日志，通过从日志输出信息就能轻松地分析该 url 的执行情况。\n\n### 2. 查看程序历史运行轨迹\n\n如果想了解历时程序的运行情况，我们通过查看应用历时日志的输出，就能进行分析。\n\n比如，你想了解下上周周末用户访问量，你可以打开系统上周周末的日志记录，进行分析。你想了解昨天的某个定时任务是否正常执行，你可以打开昨天的系统日志，精确查找该定时任务的输出信息，从而判断定时任务是否执行。\n\n### 3. 排查系统问题\n\n排查系统问题是程序员最熟悉的味道了，在项目维护过程中，出了任何问题，都需要程序员去进行排查。此时，如果没有清楚明了的日志记录，想要核查出问题的原因，难于上青天。\n\n一个优秀的程序员一定是个日志记录高手，如果日志记录的好，处理得当，排查问题则易如反掌。\n\n大家有没有遇到一种场景，一个问题发生了，有的人能迅速定位问题并解决，有的人搞了半天，还没发现问题的产生原因。\n\n其实快速定位问题的人一定记录了详细的日志，因此当问题发生的时候，通过核查问题发生时候的日志，就能快速的找出问题产生的原因。\n\n### 4. 优化系统性能\n\n通过记录程序运行的时间，就能判断程序从执行开始到执行结束消耗的时间，从而判断系统性能是否达标，为系统性能优化提供判断依据。\n\n### 5. 安全审计的基石\n\n网络安全越来越受到大家的关注，所以系统安全目前是项目过程非常重要的一个环节，安全审计也是系统中非常重要的部分。\n\n通过系统日志分析，可以判断一些非法攻击，非法调用，以及系统处理过程中的安全隐患。\n\n比如，大家平时都在做运营系统，其中运营人员在通过界面处理一些数据的时候，如果没有清楚的日志操作记录，一条数据被删除或者修改，你是无法找到是谁操作的，但是如果你做了相应的记录，该数据被谁删除或者修改就会一目了然。\n\n**通过以上 5 点说明了日志在项目维护过程中的重要作用**\n\n一个系统是否容易维护，很大程度上是基于程序员在程序开发过程中的代码日志是怎么记录的。\n\n日志记录的越清楚，维护起来就越容易，有的程序员没有日志记录意识，或者对日志记录认识不清，或者是不知道日志该如何记录，这势必会给项目后期的维护带来一个个大坑。\n\n当项目经理让你解决一个线上问题的时候，正好遇到了一个没有日志记录习惯的人写的代码，你就能体会到那种痛苦，不由地想要爆粗口。\n\n因此，作为一个程序员来说，掌握代码日志的记录方法，是程序员生涯的一项基本功。写代码时做好日志记录是 “即利人又利己” 的做法，不写日志记录就是 “损人不利己” 的做法。\n\n### 二、Java 日志使用的困惑\n\n大多数的程序员都能认识到日志在项目中的重要性，可是对日志记录具体要怎么做，做到什么程度，日志记录用什么工具，会有很多困惑。\n\n### 1. 工具困惑\n\n作为 Java 程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个，相信每个人都会对 JUL(Java Util Log)、JCL(Commons Logging)、Log4j、SLF4J、Logback、Log4j2 等等的日志工具，到底使用什么产生感到困扰。\n\n下面的第三节：“Java 日志演化历史”，第四节：“使用不同框架的 Java 日志示例说明”，为大家解惑 Java 日志框架的使用问题。\n\n### 2. 使用困惑\n\n有的程序员即使知道写 Java 程序用什么日志工具，可能对日志记录具体应该怎么写，写什么东西，什么情况下要写，这些仁者见仁智者见智的东西也会产生困扰。\n\n下面的第五节：“项目中日志记录遵守哪些原则”，为大家解惑日志记录要遵守哪些原则。\n\n有的程序员知道了该用哪个 Java 框架，也知道了日志记录的原则，可能还会对具体在项目中到底该如何操作产生困惑。\n\n### 3. 实战困惑\n\n下面的第六节：“一个推荐的项目 Java 日志实例”，为大家展示在具体项目过程中的应用示例。\n\n### 三、Java 日志演化历史\n\n最先出现的是 Apache 开源社区的 Log4j，这个日志确实是应用最广泛的日志工具，成为了 Java 日志的事实上的标准。\n\n然而，当时 Java 的开发主体 Sun 公司认为自己才是正统，在 Jdk1.4 中增加了 JUL（在 java.util.logging 包下）日志实现，企图对抗 Log4j，但是却造成了 Java 目前开发者记录日志局面的混乱，迄今为止仍饱受诟病。\n\n当然也有其他日志工具的出现，基本都是各自为政，这些日志系统互相没有关联。\n\n**为什么 JUL 的出现会导致开发局面混乱呢？**\n\n想象下你的项目应用使用 Log4j，然后使用了一个第三方库，而第三方库使用了 JUL，那么，你的应用就得同时使用 Log4j 和 JUL 两个日志工具了，然后又有需要使用另外一个第三方库，但是这个第三方库使用了 Log4j 和 JUL 之外的 simplelog。这个时候你的应用里各种 log 工具满天飞，这势必会使你的程序员感到崩溃。因为这些日志工具互相没有关联，替换和统一日志工具也就变成了比较棘手的一件事情。\n\n> 如果你遇到了这种问题，你该如何解决呢？  \n> 解决这个问题，我们会用到一个设计模式——“适配器模式”，即把这个问题进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象的接口层即可。\n\n为了搞定这个日常开发中比较棘手的问题，Apache 开源社区提供了一个日志框架作为日志的抽象，叫 commons-logging，也被称为 JCL(java common logging)，JCL 对各种日志接口进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象层即可，确实出色地完成了兼容主流的日志实现（Log4j、JUL、simplelog 等），较好的解决了上述问题，基本一统江湖，就连顶顶大名的 spring 也是依赖了 JCL。\n\n但是美好的日子并不长，作为元老级日志 Log4j 的作者 (Ceki Gülcü)，他觉得 JCL 不够优秀，所以他再度出山，搞出了一套更优雅的日志框架 SLF4J（这个也是抽象层），即简单日志门面（Simple Logging Facade for Java），并为 SLF4J 实现了一个亲儿子——logback，确实更加优雅了。\n\n最后，Ceki Gülcü 觉得还是得照顾下自己的 “大儿子”——Log4j，又把 Log4j 进行了改造，就是所谓的 Log4j2，同时支持 JCL 以及 SLF4J。\n\nSLF4J 的出现，又使 Java 日志体系变得混乱起来。\n\n下面是一张目前 Java 日志体系的示意图：\n\n![](https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg)\n\n日志库 Log4j，JUL，logback 是互相不兼容的，没有共同的 Interface，所以 commons-logging、SLF4J 通过适配器模式，抽象出来一个共同的接口，然后根据使用的具体日志框架来实现日志。\n\njava common logging 和 SLF4J 都是日志的接口，供用户使用，而没有提供实现，Log4j，JUL，logback 等等才是日志的真正实现。\n\n当我们调用日志接口时，接口会自动寻找恰当的实现，返回一个合适的实例给我们服务。这些过程都是透明化的，用户不需要进行任何操作。\n\n工具官方网站 Log4j[http://logging.apache.org/log4j/1.2](http://logging.apache.org/log4j/1.2)JCL[http://commons.apache.org/proper/commons-logging/](http://commons.apache.org/proper/commons-logging/)SLF4J[http://www.slf4j.org](http://www.slf4j.org/)logback[http://logback.qos.ch](http://logback.qos.ch/)Log4j2[https://logging.apache.org/log4j/2.x/](https://logging.apache.org/log4j/2.x/)\n\n### 四、使用不同框架的 Java 日志示例说明\n\n### 1. Log4j\n\n### **Log4j 介绍**\n\nLog4j（log for java）是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输出到日志文件、也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用程序的代码。\n\n### **Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n加入 log4j-1.2.17.jar 到 Libraries 下，如果使用 maven 项目，也可以选择在 pom.xml 中新增依赖如下：\n\n```\n<dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n```\n\n**（2）log4j.properties 配置**\n\nLog4j 有三个主要组件：记录器， appender 和布局。这三种类型的组件协同工作，使开发人员能够根据消息类型和级别记录消息，并在运行时控制这些消息的格式和报告位置。\n\nLog4j 建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。\n\n比如定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。ALL，打印所有的日志；OFF，关闭所有的日志输出。\n\nappenderName，就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。\n\n在 src 根目录下建立 log4j.properties，根据自己的需求，相应的修改其中的配置，其内容如下所示：\n\n```\n#配置根Logger\n    #改代码表示输输出info级别以上的日志，文件分别输出，一个是file，一个是error\n    log4j.rootLogger=info,file,error\n\n    #配置file日志信息输出目的地Appender\n    #定义名为file的输出端是每天产生一个日志文件\n    log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位INFO，默认为DEBUG。\n    log4j.appender.file.Threshold=INFO\n    #指定当前消息输出到jpm/log4j/log.log文件中\n    log4j.appender.file.File=/jpm/log4j/log.log\n    #指定按天来滚动日志文件\n    log4j.appender.file.DatePattern=yyyy-MM-dd\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.file.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.file.encoding=UTF-8\n\n    #配置error日志信息输出目的地Appender\n    #定义名为error的输出端是每天产生一个日志文件\n    log4j.appender.error=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位ERROR，默认为DEBUG。\n    log4j.appender.error.Threshold=ERROR\n    #指定当前消息输出到jpm/log4j/error.log文件中\n    log4j.appender.error.File=/jpm/log4j/error.log\n    #指定按月来滚动日志文件\n    log4j.appender.error.DatePattern=yyyy-MM\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.error.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.error.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.error.encoding=UTF-8\n\n    #使某个功能的日志单独输出到指定的日志文件\n    log4j.logger.saveUserLog=INFO,saveUserLog\n    #该配置就是让job的日志只输出到自己指定的日志文件中,表示Logger不会在父Logger的appender里输出，默认为true。\n    log4j.additivity.saveUserLog=false\n    log4j.appender.saveUserLog=org.apache.log4j.DailyRollingFileAppender\n    log4j.appender.saveUserLog.File=/jpm/log4j/saveUserLog.log\n    log4j.appender.saveUserLog.DatePattern=yyyy-MM-dd\n    log4j.appender.saveUserLog.Append=true\n    log4j.appender.saveUserLog.layout=org.apache.log4j.PatternLayout\n    log4j.appender.saveUserLog.layout.ConversionPattern=%m%n\n    log4j.appender.error.encoding=UTF-8\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm;\n\n    import org.apache.log4j.Logger;\n\n    public class TestLog4j {\n\n        public static void main(String[] args) {\n            final Logger logger = Logger.getLogger(TestLog4j.class);\n            final Logger saveUserLog = Logger.getLogger(\"saveUserLog\");\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"debug\");\n            }\n\n            logger.info(\"info\");\n            logger.error(\"error\");\n\n            saveUserLog.info(\"张三,男,26岁,北京大学,2018-05-19,学霸\");\n\n        }\n\n    }\n```\n\n**（4）以上代码示例生成的日志文件及日志详情**\n\n![](https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg)![](https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg)\n\n### 2. JUL（在 java.util.logging 包下）使用示例\n\n### **JUL 介绍**\n\nJava Logging API 是 Sun 公司于 2002 年 5 月正式发布的。它是自 J2SE 1.4 版本开始提供的一个新的应用程序接口，需 JDK1.4 版本以上才能支持，java.util.logging.* 包是 JDK 的日志记录 API。\n\n![](https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg)\n\n**强烈不推荐使用 java.util.logging 记录日志，因此这里不提供对应示例给大家。**\n\n### 3. java common logging 介绍\n\ncommons-logging 提供的是一个日志接口，是为那些需要建立在不同环境下使用不同日志架构的组件或库的开发者创建的，其中包括 log4j 以及 Java log 的日志架构。commons-logging 有两个基本的抽象类：Log(基本记录器) 和 LogFactory(负责创建 Log 实例)。把日志信息抽象成 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构。因为 Log4j 的强大功能，commons-logging 一般会和 Log4j 一起使用，这几乎成为了 Java 日志的标准工具。\n\n### 4. SLF4J 介绍\n\nSLF4J 全称为 Simple Logging Facade for JAVA，即 java 简单日志门面。 和 commons-loging 一样也是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案，能支持多个参数，并通过 {} 占位符进行替换。\n\n**看这个 Log4J 示例：**\n\n```\nLogger.debug(\"Hello \" + name);\n```\n\n由于字符串拼接的问题（注：上述语句会先拼接字符串，再根据当前级别是否低于 debug 决定是否输出本条日志，即使不输出日志，字符串拼接操作也会执行），因此许多公司一般强制使用下面的语句，这样只有当前处于 DEBUG 级别时才会执行字符串拼接：\n\n```\nif (logger.isDebugEnabled()) {\n        LOGGER.debug(“Hello ” + name);\n    }\n```\n\n它避免了字符串拼接问题，可是有点太繁琐了。而 SLF4J 提供下面这样简单的语法:\n\n```\nLOGGER.debug(\"Hello {}\", name);\n```\n\n它的形式类似第一条示例，但是又没有字符串拼接问题，也不像第二条那样繁琐。\n\n正是因为 SLF4J 的这个占位符功能，使得人们越来越多的使用 SLF4J 这个接口用到实际开发项目中。\n\n**为什么需要日志接口，直接使用具体的实现不就行了吗？**\n\n接口用于定制规范，可以有多个实现，使用时是面向接口的（导入的包都是 SLF4J 的包或者是 JCL 的包，而不是具体某个日志框架中的包），即直接和接口交互，不直接使用实现，所以当需要更换实现的时候，直接更换实就可以了，而不用更改代码中的日志相关代码。\n\n比如：SLF4J 定义了一套日志接口，项目中使用的日志框架是 log4j，开发中调用的所有接口都是 SLF4J 的，不直接使用 log4j，项目应用调用 SLF4J 的接口，SLF4J 的接口去调用 log4j 的实现，整个应用程序并没有直接使用 log4j，当项目需要更换更加优秀的日志框架时（如 logback）只需要引入 logback 的 jar 和 logback 对应的配置文件即可，完全不用更改 Java 代码中的日志相关的代码 [http://logger.info](http://logger.info)(“hello world”)，也不用修改日志相关的类的导入的包（import org.slf4j.Logger; import org.slf4j.LoggerFactory;）。\n\n因此日志门面的使用，为后续具体日志系统的实现更换带来了方便。\n\n### 5. logback 使用示例\n\n### **LogBack 介绍**\n\nLogBack 和 Log4j 都是开源日记工具库，LogBack 是 Log4j 的改良版本，比 Log4j 拥有更多的特性，同时也带来很大性能提升。LogBack 官方建议配合 Slf4j 使用，这样可以灵活地替换底层日志框架。\n\nLogback 主要由三个模块组成：\n\n*   logback-core\n*   logback-classic\n*   logback-access\n\n其中 logback-core 提供了 LogBack 的核心功能，是另外两个组件的基础。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J，所以当想配合 SLF4J 使用时，需要将 logback-classic 加入 classpath；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与 HTTP 访问相关的功能。\n\n### **logback 使用步骤说明**\n\n**（1）选择 jar 包**\n\n想在 Java 程序中使用 Logback，需要依赖三个 jar 包，分别是 slf4j-api，logback-core，logback-classic。其中 slf4j-api 并不是 Logback 的一部分，建议将 SLF4J 与 Logback 结合使用。\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-core</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-classic</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-access</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n```\n\n**（2）logback.xml**\n\n在 src 根目录下建立 logback.xml，根据自己的需求，相应的修改其中的配置，其内容如下所示：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n    <!-- status用来指定log4j本身的打印日志的级别 -->\n    <!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->\n    <configuration status=\"WARN\" monitorInterval=\"30\">\n        <!--先定义所有的appender -->\n        <appenders>\n            <!--这个输出控制台的配置 -->\n            <console >\n                <!--输出日志的格式 -->\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </console>\n\n            <!--定义输出到指定位置的文件 -->\n            <File >\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </File>\n\n            <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log\">\n                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->\n                <!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\"\n                    onMismatch=\"ACCEPT\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n                <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->\n                <DefaultRolloverStrategy max=\"30\" />\n            </RollingFile>\n\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log\">\n                <ThresholdFilter level=\"ERROR\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n            </RollingFile>\n        </appenders>\n\n        <!--只有定义了logger并引入的appender，appender才会生效 -->\n        <loggers>\n            <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->\n            <logger ></logger>\n            <logger ></logger>\n            <root level=\"INFO\">\n                <appender-ref ref=\"Console\" />\n                <appender-ref ref=\"log\" />\n                <appender-ref ref=\"RollingFileInfo\" />\n                <appender-ref ref=\"RollingFileError\" />\n            </root>\n        </loggers>\n\n    </configuration>\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.logback;    import org.slf4j.Logger;    import org.slf4j.LoggerFactory;    public class TestLogback {        public static void main(String[] args) {            final Logger LOGGER = LoggerFactory.getLogger(TestLogback.class);            LOGGER.debug(\"print debug log.\");            LOGGER.info(\"print info log.\");            LOGGER.error(\"print error log.\");        }    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg)![](https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg)\n\n**上例使用 SLF4J 做日志接口， logback 做日志实现的日志示例**\n\n### 6. Log4j2 使用示例\n\n### **Log4j2 介绍**\n\nApache Log4j 2 是对 Log4j 的升级，与其前身 Log4j 1.x 相比有了显着的改进，并提供了许多 Logback 可用的改进，同时支持 JCL 以及 SLF4J。\n\n### **Log4j2 使用步骤说明**\n\n**（1）选择 jar 包**\n\n引入 Log4j2 必要的包：log4j-api、log4j-core。\n\n**pom.xml 配置**\n\n```\n<dependency>                <groupId>org.apache.logging.log4j</groupId>                <artifactId>log4j-api</artifactId>                <version>2.8.2</version>            </dependency>            <dependency>                <groupId>org.apache.logging.log4j</groupId>                <artifactId>log4j-core</artifactId>                <version>2.8.2</version>            </dependency>\n```\n\n**（2）log2j 配置文件：log4j2.xml**\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n    <!-- status用来指定Log4j本身的打印日志的级别 -->\n    <!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->\n    <configuration status=\"WARN\" monitorInterval=\"30\">\n        <!--先定义所有的appender -->\n        <appenders>\n            <!--这个输出控制台的配置 -->\n            <console >\n                <!--输出日志的格式 -->\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </console>\n\n            <!--定义输出到指定位置的文件 -->\n            <File >\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </File>\n\n            <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log\">\n                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n                <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->\n                <DefaultRolloverStrategy max=\"30\" />\n            </RollingFile>\n\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log\">\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n            </RollingFile>\n        </appenders>\n\n        <!--只有定义了logger并引入的appender，appender才会生效 -->\n        <loggers>\n            <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->\n            <logger ></logger>\n            <logger ></logger>\n            <root level=\"INFO\">\n                <appender-ref ref=\"Console\" />\n                <appender-ref ref=\"log\" />\n                <appender-ref ref=\"RollingFileInfo\" />\n                <appender-ref ref=\"RollingFileError\" />\n            </root>\n        </loggers>\n\n    </configuration>\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.log4j2;\n\n    import org.apache.logging.log4j.LogManager;\n    import org.apache.logging.log4j.Logger;\n\n    public class TestLog4j2 {\n\n        public static void main(String[] args) {\n            final Logger LOGGER = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\n            LOGGER.debug(\"TestLog4j2 debug log.\");\n            LOGGER.info(\"TestLog4j2 info log.\");\n            LOGGER.error(\"TestLog4j2 error log.\");\n        }\n\n    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg)![](https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg)\n\n**（5）关于日志 level**\n\n共有 8 个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF。\n\n*   **All：**最低等级的，用于打开所有日志记录\n*   **Trace：**是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出\n*   **Debug：**指出细粒度信息事件对调试应用程序是非常有帮助的\n*   **Info：**消息在粗粒度级别上突出强调应用程序的运行过程\n*   **Warn：**输出警告及 warn 以下级别的日志\n*   **Error：**输出错误信息日志\n*   **Fatal：**输出每个严重的错误事件将会导致应用程序的退出的日志\n*   **OFF：**最高等级的，用于关闭所有日志记录\n\n程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。\n\n### 7. JCL(java common logging) + Log4j 使用示例\n\n### **JCL(java common logging) + Log4j 介绍**\n\n使用 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构（如 Log4j）。现在，Apache 通用日志工具 commons-logging 和 Log4j 已经成为 Java 日志的标准工具，这个组合是比较常用的一个日志框架组合。\n\n### **JCL(java common logging) + Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n```\ncommons-logging-1.2 + log4j1.2.17\n```\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>commons-logging</groupId>\n                <artifactId>commons-logging</artifactId>\n                <version>1.2</version>\n            </dependency>\n\n            <dependency>\n                <groupId>log4j</groupId>\n                <artifactId>log4j</artifactId>\n                <version>1.2.17</version>\n            </dependency>\n```\n\n**（2）配置 common-logging.properties 文件**\n\n只需要一行即可，放在 classpath 下，如果是 Maven 中就在 src/resources 下，不过如果没有 common-logging.properties 文件，但是 src 下有 log4j.properties 配置也可以正常的输出 Log4j 设置的日志。\n\n```\norg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger\n```\n\n**（3）log4j.properties 配置**\n\n参考《Log4j 使用步骤说明》\n\n**（4）输出日志的代码示例**\n\n```\npackage jpm.jcllog4j;\n\n    import org.apache.commons.logging.Log;\n    import org.apache.commons.logging.LogFactory;\n\n    public class TestJclAndLog4j {\n\n        public static void main(String[] args) {\n            final Log LOGGER = LogFactory.getLog(TestJclAndLog4j.class);\n            LOGGER.debug(\"TestJclAndLog4j debug log.\");\n            LOGGER.info(\"TestJclAndLog4j info log.\");\n            LOGGER.error(\"TestJclAndLog4j error log.\");\n        }\n    }\n```\n\n**（5）打印日志结果**\n\n![](https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg)![](https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg)\n\n### 8. SLF4J + Log4j 使用示例\n\n### **SLF4J + Log4j 介绍**\n\nSLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差异就在 SLF4J 用 用绑定包（slf4j-Log4j12.jar）来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现。\n\n### **SLF4J + Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n```\nslf4j-api.jar + slf4j-log4j12.jar\n```\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-log4j12</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n```\n\n**（2）log4j.properties 配置文件**\n\n参考《Log4j 使用步骤说明》\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.slf4jlog4j;\n\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    public class TestSlf4jAndLog4j {\n\n        public static void main(String[] args) {\n            final Logger LOGGER = LoggerFactory.getLogger(TestSlf4jAndLog4j.class);\n            LOGGER.debug(\"TestSlf4jAndLog4j debug log：{}\", \"debug\");\n            LOGGER.info(\"TestSlf4jAndLog4j info log：{}\", \"info\");\n            LOGGER.error(\"TestSlf4jAndLog4j error log：{}\", \"error\");\n        }\n\n    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg)![](https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg)\n\n### 五、项目中日志记录遵守哪些原则\n\n### 1. 阿里巴巴 Java 开发手册的日志规约\n\n大家可以参考去年 10 月份阿里推出的《阿里巴巴 Java 开发手册（终极版）.pdf》里的第二章第二节 “日志规约” 部分的内容。\n\n### 2. 个人经验总结\n\n记录项目日志要注意以下几点：\n\n1.  注意日志级别，尤其是 info 和 error 不能用混。\n2.  注意记录信息的准确性，切记日志表达不清楚。\n3.  注意不同的代码段日志说明不能重复。\n4.  捕获异常后，要及时记录异常详细信息，并把异常传递到外部。\n5.  时刻铭记，日志的记录是为了后期查询问题带来方便，因此重要的代码务必要记录日志。\n\n### 六、一个推荐的项目 Java 日志实例\n\n经过以上代码的分析，我们项目中使用的日志一般会选用一个日志接口和一个具体的日志实现。\n\n那么日志接口是选 JCL 呢，还是选 SLF4J 呢？下面我们把他俩做个对比，具体日志实现为 Log4j，如下图：\n\n![](https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg)\n\n从上图可以看出，用 slf4j 作为日志接口，对项目来说更好一些。\n\n所以，在实际项目中，我一般建议使用 SLF4J+Log4j 或者 slf4j+logback。\n\n**配置文件参见第四节**\n\n**推荐程序片段如下**\n\n```\ntry {\n                LOGGER.info(\"根据用户编码查询用户信息-开始，userId：{}\" , userId);\n                User user = userService.getUserById(userId);\n                LOGGER.info(\"根据用户编码查询用户信息-结束，userId：{}\" , userId);\n            } catch (CustomException e) {\n                LOGGER.error(\"根据用户编码查询用户信息-自定义异常:{}\" , e.getMessage());\n                throw new CustomException(\"根据用户编码查询用户信息-自定义异常{}\" , e.getMessage(), e);\n            } catch (Exception e) {\n                LOGGER.error(\"根据用户编码查询用户信息-捕获异常:{}\" , e.toString());\n                throw new ServiceException(根据用户编码查询用户信息-捕获异常:{}\" , e.toString(), e);\n            }\n```\n\n到此，Java 日志从入门到实战 就结束了，咱们下次再见，谢谢。","source":"_posts/2021-10-15-Java-日志从入门到实战.md","raw":"---\ntitle: Java 日志从入门到实战\ntags:\n  - JAVA\n  - 日志系统\ncategories: JAVA\nsummary: 介绍Java体系 log4j、log4j2、logback\nabbrlink: 29669\ndate: 2021-10-15 14:22:03\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![bird-7016926_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021703915.jpg)\n\n<!--more-->\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [zhuanlan.zhihu.com](https://zhuanlan.zhihu.com/p/64353891)\n\n日志和异常处理结合得当的话，会给项目维护带来非常大的价值。\n\n*   **日志：**就是介绍一个过程和经历的详细记录。\n*   **项目日志：**就是项目开发过程的详细记录，一般由项目经理记录。\n*   **代码里的日志：**就是程序员记录某个开发过程的详细情况，这是项目里每个程序员需要做的工作。\n\n代码里的日志在项目中扮演着非常重要的角色，日志记录的详细程度决定系统是否容易维护，Java 项目中日志记录的框架有很多，在项目中如何选型也必将困惑。\n\n我们这场 chat 讨论的主题就是：**Java 代码里的日志**，主要是写给 Java 程序员看的，本篇 Chat 从以下六个方面对 Java 日志进行阐述：\n\n*   一、日志在项目中的作用\n*   二、Java 日志使用的困惑\n*   三、Java 日志演化历史\n*   四、使用不同框架的 Java 日志示例说明\n*   五、项目中日志记录遵守哪些原则\n*   六、一个推荐的项目 Java 日志实例\n\n以期通过本场 Chat 的学习，能使大家在编码过程中，对日志的处理过程加深认识、统一规范、得到收获，从零开始轻松掌握 Java 日志处理，并且可以运用到实际项目中。\n\n\n### 一、日志在项目中的作用\n\nLog 日志，主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等，也有利于将这些信息进行持久化（如果不将日志信息保存到文件或数据库，则信息便会丢失）。\n\n### 1. 查看程序当前运行状态\n\n如果想了解程序当前的运行情况，我们通过实时查看应用日志的输出，就能进行分析。\n\n比如，你在浏览器里输入一个 action 地址，该 url 负责执行一些批量处理，action 运行后，假设处理比较耗时，你再浏览器里无法直接看到程序的执行结果，此时，你可以打开系统日志，通过从日志输出信息就能轻松地分析该 url 的执行情况。\n\n### 2. 查看程序历史运行轨迹\n\n如果想了解历时程序的运行情况，我们通过查看应用历时日志的输出，就能进行分析。\n\n比如，你想了解下上周周末用户访问量，你可以打开系统上周周末的日志记录，进行分析。你想了解昨天的某个定时任务是否正常执行，你可以打开昨天的系统日志，精确查找该定时任务的输出信息，从而判断定时任务是否执行。\n\n### 3. 排查系统问题\n\n排查系统问题是程序员最熟悉的味道了，在项目维护过程中，出了任何问题，都需要程序员去进行排查。此时，如果没有清楚明了的日志记录，想要核查出问题的原因，难于上青天。\n\n一个优秀的程序员一定是个日志记录高手，如果日志记录的好，处理得当，排查问题则易如反掌。\n\n大家有没有遇到一种场景，一个问题发生了，有的人能迅速定位问题并解决，有的人搞了半天，还没发现问题的产生原因。\n\n其实快速定位问题的人一定记录了详细的日志，因此当问题发生的时候，通过核查问题发生时候的日志，就能快速的找出问题产生的原因。\n\n### 4. 优化系统性能\n\n通过记录程序运行的时间，就能判断程序从执行开始到执行结束消耗的时间，从而判断系统性能是否达标，为系统性能优化提供判断依据。\n\n### 5. 安全审计的基石\n\n网络安全越来越受到大家的关注，所以系统安全目前是项目过程非常重要的一个环节，安全审计也是系统中非常重要的部分。\n\n通过系统日志分析，可以判断一些非法攻击，非法调用，以及系统处理过程中的安全隐患。\n\n比如，大家平时都在做运营系统，其中运营人员在通过界面处理一些数据的时候，如果没有清楚的日志操作记录，一条数据被删除或者修改，你是无法找到是谁操作的，但是如果你做了相应的记录，该数据被谁删除或者修改就会一目了然。\n\n**通过以上 5 点说明了日志在项目维护过程中的重要作用**\n\n一个系统是否容易维护，很大程度上是基于程序员在程序开发过程中的代码日志是怎么记录的。\n\n日志记录的越清楚，维护起来就越容易，有的程序员没有日志记录意识，或者对日志记录认识不清，或者是不知道日志该如何记录，这势必会给项目后期的维护带来一个个大坑。\n\n当项目经理让你解决一个线上问题的时候，正好遇到了一个没有日志记录习惯的人写的代码，你就能体会到那种痛苦，不由地想要爆粗口。\n\n因此，作为一个程序员来说，掌握代码日志的记录方法，是程序员生涯的一项基本功。写代码时做好日志记录是 “即利人又利己” 的做法，不写日志记录就是 “损人不利己” 的做法。\n\n### 二、Java 日志使用的困惑\n\n大多数的程序员都能认识到日志在项目中的重要性，可是对日志记录具体要怎么做，做到什么程度，日志记录用什么工具，会有很多困惑。\n\n### 1. 工具困惑\n\n作为 Java 程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个，相信每个人都会对 JUL(Java Util Log)、JCL(Commons Logging)、Log4j、SLF4J、Logback、Log4j2 等等的日志工具，到底使用什么产生感到困扰。\n\n下面的第三节：“Java 日志演化历史”，第四节：“使用不同框架的 Java 日志示例说明”，为大家解惑 Java 日志框架的使用问题。\n\n### 2. 使用困惑\n\n有的程序员即使知道写 Java 程序用什么日志工具，可能对日志记录具体应该怎么写，写什么东西，什么情况下要写，这些仁者见仁智者见智的东西也会产生困扰。\n\n下面的第五节：“项目中日志记录遵守哪些原则”，为大家解惑日志记录要遵守哪些原则。\n\n有的程序员知道了该用哪个 Java 框架，也知道了日志记录的原则，可能还会对具体在项目中到底该如何操作产生困惑。\n\n### 3. 实战困惑\n\n下面的第六节：“一个推荐的项目 Java 日志实例”，为大家展示在具体项目过程中的应用示例。\n\n### 三、Java 日志演化历史\n\n最先出现的是 Apache 开源社区的 Log4j，这个日志确实是应用最广泛的日志工具，成为了 Java 日志的事实上的标准。\n\n然而，当时 Java 的开发主体 Sun 公司认为自己才是正统，在 Jdk1.4 中增加了 JUL（在 java.util.logging 包下）日志实现，企图对抗 Log4j，但是却造成了 Java 目前开发者记录日志局面的混乱，迄今为止仍饱受诟病。\n\n当然也有其他日志工具的出现，基本都是各自为政，这些日志系统互相没有关联。\n\n**为什么 JUL 的出现会导致开发局面混乱呢？**\n\n想象下你的项目应用使用 Log4j，然后使用了一个第三方库，而第三方库使用了 JUL，那么，你的应用就得同时使用 Log4j 和 JUL 两个日志工具了，然后又有需要使用另外一个第三方库，但是这个第三方库使用了 Log4j 和 JUL 之外的 simplelog。这个时候你的应用里各种 log 工具满天飞，这势必会使你的程序员感到崩溃。因为这些日志工具互相没有关联，替换和统一日志工具也就变成了比较棘手的一件事情。\n\n> 如果你遇到了这种问题，你该如何解决呢？  \n> 解决这个问题，我们会用到一个设计模式——“适配器模式”，即把这个问题进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象的接口层即可。\n\n为了搞定这个日常开发中比较棘手的问题，Apache 开源社区提供了一个日志框架作为日志的抽象，叫 commons-logging，也被称为 JCL(java common logging)，JCL 对各种日志接口进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象层即可，确实出色地完成了兼容主流的日志实现（Log4j、JUL、simplelog 等），较好的解决了上述问题，基本一统江湖，就连顶顶大名的 spring 也是依赖了 JCL。\n\n但是美好的日子并不长，作为元老级日志 Log4j 的作者 (Ceki Gülcü)，他觉得 JCL 不够优秀，所以他再度出山，搞出了一套更优雅的日志框架 SLF4J（这个也是抽象层），即简单日志门面（Simple Logging Facade for Java），并为 SLF4J 实现了一个亲儿子——logback，确实更加优雅了。\n\n最后，Ceki Gülcü 觉得还是得照顾下自己的 “大儿子”——Log4j，又把 Log4j 进行了改造，就是所谓的 Log4j2，同时支持 JCL 以及 SLF4J。\n\nSLF4J 的出现，又使 Java 日志体系变得混乱起来。\n\n下面是一张目前 Java 日志体系的示意图：\n\n![](https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg)\n\n日志库 Log4j，JUL，logback 是互相不兼容的，没有共同的 Interface，所以 commons-logging、SLF4J 通过适配器模式，抽象出来一个共同的接口，然后根据使用的具体日志框架来实现日志。\n\njava common logging 和 SLF4J 都是日志的接口，供用户使用，而没有提供实现，Log4j，JUL，logback 等等才是日志的真正实现。\n\n当我们调用日志接口时，接口会自动寻找恰当的实现，返回一个合适的实例给我们服务。这些过程都是透明化的，用户不需要进行任何操作。\n\n工具官方网站 Log4j[http://logging.apache.org/log4j/1.2](http://logging.apache.org/log4j/1.2)JCL[http://commons.apache.org/proper/commons-logging/](http://commons.apache.org/proper/commons-logging/)SLF4J[http://www.slf4j.org](http://www.slf4j.org/)logback[http://logback.qos.ch](http://logback.qos.ch/)Log4j2[https://logging.apache.org/log4j/2.x/](https://logging.apache.org/log4j/2.x/)\n\n### 四、使用不同框架的 Java 日志示例说明\n\n### 1. Log4j\n\n### **Log4j 介绍**\n\nLog4j（log for java）是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输出到日志文件、也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用程序的代码。\n\n### **Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n加入 log4j-1.2.17.jar 到 Libraries 下，如果使用 maven 项目，也可以选择在 pom.xml 中新增依赖如下：\n\n```\n<dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n```\n\n**（2）log4j.properties 配置**\n\nLog4j 有三个主要组件：记录器， appender 和布局。这三种类型的组件协同工作，使开发人员能够根据消息类型和级别记录消息，并在运行时控制这些消息的格式和报告位置。\n\nLog4j 建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。\n\n比如定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。ALL，打印所有的日志；OFF，关闭所有的日志输出。\n\nappenderName，就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。\n\n在 src 根目录下建立 log4j.properties，根据自己的需求，相应的修改其中的配置，其内容如下所示：\n\n```\n#配置根Logger\n    #改代码表示输输出info级别以上的日志，文件分别输出，一个是file，一个是error\n    log4j.rootLogger=info,file,error\n\n    #配置file日志信息输出目的地Appender\n    #定义名为file的输出端是每天产生一个日志文件\n    log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位INFO，默认为DEBUG。\n    log4j.appender.file.Threshold=INFO\n    #指定当前消息输出到jpm/log4j/log.log文件中\n    log4j.appender.file.File=/jpm/log4j/log.log\n    #指定按天来滚动日志文件\n    log4j.appender.file.DatePattern=yyyy-MM-dd\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.file.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.file.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.file.encoding=UTF-8\n\n    #配置error日志信息输出目的地Appender\n    #定义名为error的输出端是每天产生一个日志文件\n    log4j.appender.error=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位ERROR，默认为DEBUG。\n    log4j.appender.error.Threshold=ERROR\n    #指定当前消息输出到jpm/log4j/error.log文件中\n    log4j.appender.error.File=/jpm/log4j/error.log\n    #指定按月来滚动日志文件\n    log4j.appender.error.DatePattern=yyyy-MM\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.error.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.error.layout.ConversionPattern=[%d{yyyy-MM-ddHH:mm:ss}][%-5p][jpm-%c{1}-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.error.encoding=UTF-8\n\n    #使某个功能的日志单独输出到指定的日志文件\n    log4j.logger.saveUserLog=INFO,saveUserLog\n    #该配置就是让job的日志只输出到自己指定的日志文件中,表示Logger不会在父Logger的appender里输出，默认为true。\n    log4j.additivity.saveUserLog=false\n    log4j.appender.saveUserLog=org.apache.log4j.DailyRollingFileAppender\n    log4j.appender.saveUserLog.File=/jpm/log4j/saveUserLog.log\n    log4j.appender.saveUserLog.DatePattern=yyyy-MM-dd\n    log4j.appender.saveUserLog.Append=true\n    log4j.appender.saveUserLog.layout=org.apache.log4j.PatternLayout\n    log4j.appender.saveUserLog.layout.ConversionPattern=%m%n\n    log4j.appender.error.encoding=UTF-8\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm;\n\n    import org.apache.log4j.Logger;\n\n    public class TestLog4j {\n\n        public static void main(String[] args) {\n            final Logger logger = Logger.getLogger(TestLog4j.class);\n            final Logger saveUserLog = Logger.getLogger(\"saveUserLog\");\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"debug\");\n            }\n\n            logger.info(\"info\");\n            logger.error(\"error\");\n\n            saveUserLog.info(\"张三,男,26岁,北京大学,2018-05-19,学霸\");\n\n        }\n\n    }\n```\n\n**（4）以上代码示例生成的日志文件及日志详情**\n\n![](https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg)![](https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg)\n\n### 2. JUL（在 java.util.logging 包下）使用示例\n\n### **JUL 介绍**\n\nJava Logging API 是 Sun 公司于 2002 年 5 月正式发布的。它是自 J2SE 1.4 版本开始提供的一个新的应用程序接口，需 JDK1.4 版本以上才能支持，java.util.logging.* 包是 JDK 的日志记录 API。\n\n![](https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg)\n\n**强烈不推荐使用 java.util.logging 记录日志，因此这里不提供对应示例给大家。**\n\n### 3. java common logging 介绍\n\ncommons-logging 提供的是一个日志接口，是为那些需要建立在不同环境下使用不同日志架构的组件或库的开发者创建的，其中包括 log4j 以及 Java log 的日志架构。commons-logging 有两个基本的抽象类：Log(基本记录器) 和 LogFactory(负责创建 Log 实例)。把日志信息抽象成 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构。因为 Log4j 的强大功能，commons-logging 一般会和 Log4j 一起使用，这几乎成为了 Java 日志的标准工具。\n\n### 4. SLF4J 介绍\n\nSLF4J 全称为 Simple Logging Facade for JAVA，即 java 简单日志门面。 和 commons-loging 一样也是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案，能支持多个参数，并通过 {} 占位符进行替换。\n\n**看这个 Log4J 示例：**\n\n```\nLogger.debug(\"Hello \" + name);\n```\n\n由于字符串拼接的问题（注：上述语句会先拼接字符串，再根据当前级别是否低于 debug 决定是否输出本条日志，即使不输出日志，字符串拼接操作也会执行），因此许多公司一般强制使用下面的语句，这样只有当前处于 DEBUG 级别时才会执行字符串拼接：\n\n```\nif (logger.isDebugEnabled()) {\n        LOGGER.debug(“Hello ” + name);\n    }\n```\n\n它避免了字符串拼接问题，可是有点太繁琐了。而 SLF4J 提供下面这样简单的语法:\n\n```\nLOGGER.debug(\"Hello {}\", name);\n```\n\n它的形式类似第一条示例，但是又没有字符串拼接问题，也不像第二条那样繁琐。\n\n正是因为 SLF4J 的这个占位符功能，使得人们越来越多的使用 SLF4J 这个接口用到实际开发项目中。\n\n**为什么需要日志接口，直接使用具体的实现不就行了吗？**\n\n接口用于定制规范，可以有多个实现，使用时是面向接口的（导入的包都是 SLF4J 的包或者是 JCL 的包，而不是具体某个日志框架中的包），即直接和接口交互，不直接使用实现，所以当需要更换实现的时候，直接更换实就可以了，而不用更改代码中的日志相关代码。\n\n比如：SLF4J 定义了一套日志接口，项目中使用的日志框架是 log4j，开发中调用的所有接口都是 SLF4J 的，不直接使用 log4j，项目应用调用 SLF4J 的接口，SLF4J 的接口去调用 log4j 的实现，整个应用程序并没有直接使用 log4j，当项目需要更换更加优秀的日志框架时（如 logback）只需要引入 logback 的 jar 和 logback 对应的配置文件即可，完全不用更改 Java 代码中的日志相关的代码 [http://logger.info](http://logger.info)(“hello world”)，也不用修改日志相关的类的导入的包（import org.slf4j.Logger; import org.slf4j.LoggerFactory;）。\n\n因此日志门面的使用，为后续具体日志系统的实现更换带来了方便。\n\n### 5. logback 使用示例\n\n### **LogBack 介绍**\n\nLogBack 和 Log4j 都是开源日记工具库，LogBack 是 Log4j 的改良版本，比 Log4j 拥有更多的特性，同时也带来很大性能提升。LogBack 官方建议配合 Slf4j 使用，这样可以灵活地替换底层日志框架。\n\nLogback 主要由三个模块组成：\n\n*   logback-core\n*   logback-classic\n*   logback-access\n\n其中 logback-core 提供了 LogBack 的核心功能，是另外两个组件的基础。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J，所以当想配合 SLF4J 使用时，需要将 logback-classic 加入 classpath；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与 HTTP 访问相关的功能。\n\n### **logback 使用步骤说明**\n\n**（1）选择 jar 包**\n\n想在 Java 程序中使用 Logback，需要依赖三个 jar 包，分别是 slf4j-api，logback-core，logback-classic。其中 slf4j-api 并不是 Logback 的一部分，建议将 SLF4J 与 Logback 结合使用。\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-core</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-classic</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-access</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n```\n\n**（2）logback.xml**\n\n在 src 根目录下建立 logback.xml，根据自己的需求，相应的修改其中的配置，其内容如下所示：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n    <!-- status用来指定log4j本身的打印日志的级别 -->\n    <!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->\n    <configuration status=\"WARN\" monitorInterval=\"30\">\n        <!--先定义所有的appender -->\n        <appenders>\n            <!--这个输出控制台的配置 -->\n            <console >\n                <!--输出日志的格式 -->\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </console>\n\n            <!--定义输出到指定位置的文件 -->\n            <File >\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </File>\n\n            <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log\">\n                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->\n                <!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\"\n                    onMismatch=\"ACCEPT\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n                <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->\n                <DefaultRolloverStrategy max=\"30\" />\n            </RollingFile>\n\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log\">\n                <ThresholdFilter level=\"ERROR\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n            </RollingFile>\n        </appenders>\n\n        <!--只有定义了logger并引入的appender，appender才会生效 -->\n        <loggers>\n            <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->\n            <logger ></logger>\n            <logger ></logger>\n            <root level=\"INFO\">\n                <appender-ref ref=\"Console\" />\n                <appender-ref ref=\"log\" />\n                <appender-ref ref=\"RollingFileInfo\" />\n                <appender-ref ref=\"RollingFileError\" />\n            </root>\n        </loggers>\n\n    </configuration>\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.logback;    import org.slf4j.Logger;    import org.slf4j.LoggerFactory;    public class TestLogback {        public static void main(String[] args) {            final Logger LOGGER = LoggerFactory.getLogger(TestLogback.class);            LOGGER.debug(\"print debug log.\");            LOGGER.info(\"print info log.\");            LOGGER.error(\"print error log.\");        }    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg)![](https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg)\n\n**上例使用 SLF4J 做日志接口， logback 做日志实现的日志示例**\n\n### 6. Log4j2 使用示例\n\n### **Log4j2 介绍**\n\nApache Log4j 2 是对 Log4j 的升级，与其前身 Log4j 1.x 相比有了显着的改进，并提供了许多 Logback 可用的改进，同时支持 JCL 以及 SLF4J。\n\n### **Log4j2 使用步骤说明**\n\n**（1）选择 jar 包**\n\n引入 Log4j2 必要的包：log4j-api、log4j-core。\n\n**pom.xml 配置**\n\n```\n<dependency>                <groupId>org.apache.logging.log4j</groupId>                <artifactId>log4j-api</artifactId>                <version>2.8.2</version>            </dependency>            <dependency>                <groupId>org.apache.logging.log4j</groupId>                <artifactId>log4j-core</artifactId>                <version>2.8.2</version>            </dependency>\n```\n\n**（2）log2j 配置文件：log4j2.xml**\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->\n    <!-- status用来指定Log4j本身的打印日志的级别 -->\n    <!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->\n    <configuration status=\"WARN\" monitorInterval=\"30\">\n        <!--先定义所有的appender -->\n        <appenders>\n            <!--这个输出控制台的配置 -->\n            <console >\n                <!--输出日志的格式 -->\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </console>\n\n            <!--定义输出到指定位置的文件 -->\n            <File >\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n            </File>\n\n            <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log\">\n                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n                <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->\n                <DefaultRolloverStrategy max=\"30\" />\n            </RollingFile>\n\n            <RollingFile \n                filePattern=\"/jpm/log4j2/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log\">\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\"\n                    onMismatch=\"DENY\" />\n                <PatternLayout\n                    pattern=\"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %logger{36} - %msg%n\" />\n                <Policies>\n                    <TimeBasedTriggeringPolicy />\n                    <SizeBasedTriggeringPolicy size=\"100 MB\" />\n                </Policies>\n            </RollingFile>\n        </appenders>\n\n        <!--只有定义了logger并引入的appender，appender才会生效 -->\n        <loggers>\n            <!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->\n            <logger ></logger>\n            <logger ></logger>\n            <root level=\"INFO\">\n                <appender-ref ref=\"Console\" />\n                <appender-ref ref=\"log\" />\n                <appender-ref ref=\"RollingFileInfo\" />\n                <appender-ref ref=\"RollingFileError\" />\n            </root>\n        </loggers>\n\n    </configuration>\n```\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.log4j2;\n\n    import org.apache.logging.log4j.LogManager;\n    import org.apache.logging.log4j.Logger;\n\n    public class TestLog4j2 {\n\n        public static void main(String[] args) {\n            final Logger LOGGER = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\n            LOGGER.debug(\"TestLog4j2 debug log.\");\n            LOGGER.info(\"TestLog4j2 info log.\");\n            LOGGER.error(\"TestLog4j2 error log.\");\n        }\n\n    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg)![](https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg)\n\n**（5）关于日志 level**\n\n共有 8 个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF。\n\n*   **All：**最低等级的，用于打开所有日志记录\n*   **Trace：**是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出\n*   **Debug：**指出细粒度信息事件对调试应用程序是非常有帮助的\n*   **Info：**消息在粗粒度级别上突出强调应用程序的运行过程\n*   **Warn：**输出警告及 warn 以下级别的日志\n*   **Error：**输出错误信息日志\n*   **Fatal：**输出每个严重的错误事件将会导致应用程序的退出的日志\n*   **OFF：**最高等级的，用于关闭所有日志记录\n\n程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。\n\n### 7. JCL(java common logging) + Log4j 使用示例\n\n### **JCL(java common logging) + Log4j 介绍**\n\n使用 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构（如 Log4j）。现在，Apache 通用日志工具 commons-logging 和 Log4j 已经成为 Java 日志的标准工具，这个组合是比较常用的一个日志框架组合。\n\n### **JCL(java common logging) + Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n```\ncommons-logging-1.2 + log4j1.2.17\n```\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>commons-logging</groupId>\n                <artifactId>commons-logging</artifactId>\n                <version>1.2</version>\n            </dependency>\n\n            <dependency>\n                <groupId>log4j</groupId>\n                <artifactId>log4j</artifactId>\n                <version>1.2.17</version>\n            </dependency>\n```\n\n**（2）配置 common-logging.properties 文件**\n\n只需要一行即可，放在 classpath 下，如果是 Maven 中就在 src/resources 下，不过如果没有 common-logging.properties 文件，但是 src 下有 log4j.properties 配置也可以正常的输出 Log4j 设置的日志。\n\n```\norg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger\n```\n\n**（3）log4j.properties 配置**\n\n参考《Log4j 使用步骤说明》\n\n**（4）输出日志的代码示例**\n\n```\npackage jpm.jcllog4j;\n\n    import org.apache.commons.logging.Log;\n    import org.apache.commons.logging.LogFactory;\n\n    public class TestJclAndLog4j {\n\n        public static void main(String[] args) {\n            final Log LOGGER = LogFactory.getLog(TestJclAndLog4j.class);\n            LOGGER.debug(\"TestJclAndLog4j debug log.\");\n            LOGGER.info(\"TestJclAndLog4j info log.\");\n            LOGGER.error(\"TestJclAndLog4j error log.\");\n        }\n    }\n```\n\n**（5）打印日志结果**\n\n![](https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg)![](https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg)\n\n### 8. SLF4J + Log4j 使用示例\n\n### **SLF4J + Log4j 介绍**\n\nSLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差异就在 SLF4J 用 用绑定包（slf4j-Log4j12.jar）来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现。\n\n### **SLF4J + Log4j 使用步骤说明**\n\n**（1）选择 jar 包**\n\n```\nslf4j-api.jar + slf4j-log4j12.jar\n```\n\n**pom.xml**\n\n```\n<dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-api</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>slf4j-log4j12</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n```\n\n**（2）log4j.properties 配置文件**\n\n参考《Log4j 使用步骤说明》\n\n**（3）输出日志的代码示例**\n\n```\npackage jpm.slf4jlog4j;\n\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    public class TestSlf4jAndLog4j {\n\n        public static void main(String[] args) {\n            final Logger LOGGER = LoggerFactory.getLogger(TestSlf4jAndLog4j.class);\n            LOGGER.debug(\"TestSlf4jAndLog4j debug log：{}\", \"debug\");\n            LOGGER.info(\"TestSlf4jAndLog4j info log：{}\", \"info\");\n            LOGGER.error(\"TestSlf4jAndLog4j error log：{}\", \"error\");\n        }\n\n    }\n```\n\n**（4）打印日志结果**\n\n![](https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg)![](https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg)\n\n### 五、项目中日志记录遵守哪些原则\n\n### 1. 阿里巴巴 Java 开发手册的日志规约\n\n大家可以参考去年 10 月份阿里推出的《阿里巴巴 Java 开发手册（终极版）.pdf》里的第二章第二节 “日志规约” 部分的内容。\n\n### 2. 个人经验总结\n\n记录项目日志要注意以下几点：\n\n1.  注意日志级别，尤其是 info 和 error 不能用混。\n2.  注意记录信息的准确性，切记日志表达不清楚。\n3.  注意不同的代码段日志说明不能重复。\n4.  捕获异常后，要及时记录异常详细信息，并把异常传递到外部。\n5.  时刻铭记，日志的记录是为了后期查询问题带来方便，因此重要的代码务必要记录日志。\n\n### 六、一个推荐的项目 Java 日志实例\n\n经过以上代码的分析，我们项目中使用的日志一般会选用一个日志接口和一个具体的日志实现。\n\n那么日志接口是选 JCL 呢，还是选 SLF4J 呢？下面我们把他俩做个对比，具体日志实现为 Log4j，如下图：\n\n![](https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg)\n\n从上图可以看出，用 slf4j 作为日志接口，对项目来说更好一些。\n\n所以，在实际项目中，我一般建议使用 SLF4J+Log4j 或者 slf4j+logback。\n\n**配置文件参见第四节**\n\n**推荐程序片段如下**\n\n```\ntry {\n                LOGGER.info(\"根据用户编码查询用户信息-开始，userId：{}\" , userId);\n                User user = userService.getUserById(userId);\n                LOGGER.info(\"根据用户编码查询用户信息-结束，userId：{}\" , userId);\n            } catch (CustomException e) {\n                LOGGER.error(\"根据用户编码查询用户信息-自定义异常:{}\" , e.getMessage());\n                throw new CustomException(\"根据用户编码查询用户信息-自定义异常{}\" , e.getMessage(), e);\n            } catch (Exception e) {\n                LOGGER.error(\"根据用户编码查询用户信息-捕获异常:{}\" , e.toString());\n                throw new ServiceException(根据用户编码查询用户信息-捕获异常:{}\" , e.toString(), e);\n            }\n```\n\n到此，Java 日志从入门到实战 就结束了，咱们下次再见，谢谢。","slug":"Java-日志从入门到实战","published":1,"updated":"2024-12-16T12:11:11.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyo3000mj0kr5f71bvit","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021703915.jpg\" alt=\"bird-7016926_1920\"></p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://zhuanlan.zhihu.com/p/64353891\">zhuanlan.zhihu.com</a></p>\n</blockquote>\n<p>日志和异常处理结合得当的话，会给项目维护带来非常大的价值。</p>\n<ul>\n<li>  <strong>日志：</strong>就是介绍一个过程和经历的详细记录。</li>\n<li>  <strong>项目日志：</strong>就是项目开发过程的详细记录，一般由项目经理记录。</li>\n<li>  <strong>代码里的日志：</strong>就是程序员记录某个开发过程的详细情况，这是项目里每个程序员需要做的工作。</li>\n</ul>\n<p>代码里的日志在项目中扮演着非常重要的角色，日志记录的详细程度决定系统是否容易维护，Java 项目中日志记录的框架有很多，在项目中如何选型也必将困惑。</p>\n<p>我们这场 chat 讨论的主题就是：<strong>Java 代码里的日志</strong>，主要是写给 Java 程序员看的，本篇 Chat 从以下六个方面对 Java 日志进行阐述：</p>\n<ul>\n<li>  一、日志在项目中的作用</li>\n<li>  二、Java 日志使用的困惑</li>\n<li>  三、Java 日志演化历史</li>\n<li>  四、使用不同框架的 Java 日志示例说明</li>\n<li>  五、项目中日志记录遵守哪些原则</li>\n<li>  六、一个推荐的项目 Java 日志实例</li>\n</ul>\n<p>以期通过本场 Chat 的学习，能使大家在编码过程中，对日志的处理过程加深认识、统一规范、得到收获，从零开始轻松掌握 Java 日志处理，并且可以运用到实际项目中。</p>\n<h3 id=\"一、日志在项目中的作用\"><a href=\"#一、日志在项目中的作用\" class=\"headerlink\" title=\"一、日志在项目中的作用\"></a>一、日志在项目中的作用</h3><p>Log 日志，主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等，也有利于将这些信息进行持久化（如果不将日志信息保存到文件或数据库，则信息便会丢失）。</p>\n<h3 id=\"1-查看程序当前运行状态\"><a href=\"#1-查看程序当前运行状态\" class=\"headerlink\" title=\"1. 查看程序当前运行状态\"></a>1. 查看程序当前运行状态</h3><p>如果想了解程序当前的运行情况，我们通过实时查看应用日志的输出，就能进行分析。</p>\n<p>比如，你在浏览器里输入一个 action 地址，该 url 负责执行一些批量处理，action 运行后，假设处理比较耗时，你再浏览器里无法直接看到程序的执行结果，此时，你可以打开系统日志，通过从日志输出信息就能轻松地分析该 url 的执行情况。</p>\n<h3 id=\"2-查看程序历史运行轨迹\"><a href=\"#2-查看程序历史运行轨迹\" class=\"headerlink\" title=\"2. 查看程序历史运行轨迹\"></a>2. 查看程序历史运行轨迹</h3><p>如果想了解历时程序的运行情况，我们通过查看应用历时日志的输出，就能进行分析。</p>\n<p>比如，你想了解下上周周末用户访问量，你可以打开系统上周周末的日志记录，进行分析。你想了解昨天的某个定时任务是否正常执行，你可以打开昨天的系统日志，精确查找该定时任务的输出信息，从而判断定时任务是否执行。</p>\n<h3 id=\"3-排查系统问题\"><a href=\"#3-排查系统问题\" class=\"headerlink\" title=\"3. 排查系统问题\"></a>3. 排查系统问题</h3><p>排查系统问题是程序员最熟悉的味道了，在项目维护过程中，出了任何问题，都需要程序员去进行排查。此时，如果没有清楚明了的日志记录，想要核查出问题的原因，难于上青天。</p>\n<p>一个优秀的程序员一定是个日志记录高手，如果日志记录的好，处理得当，排查问题则易如反掌。</p>\n<p>大家有没有遇到一种场景，一个问题发生了，有的人能迅速定位问题并解决，有的人搞了半天，还没发现问题的产生原因。</p>\n<p>其实快速定位问题的人一定记录了详细的日志，因此当问题发生的时候，通过核查问题发生时候的日志，就能快速的找出问题产生的原因。</p>\n<h3 id=\"4-优化系统性能\"><a href=\"#4-优化系统性能\" class=\"headerlink\" title=\"4. 优化系统性能\"></a>4. 优化系统性能</h3><p>通过记录程序运行的时间，就能判断程序从执行开始到执行结束消耗的时间，从而判断系统性能是否达标，为系统性能优化提供判断依据。</p>\n<h3 id=\"5-安全审计的基石\"><a href=\"#5-安全审计的基石\" class=\"headerlink\" title=\"5. 安全审计的基石\"></a>5. 安全审计的基石</h3><p>网络安全越来越受到大家的关注，所以系统安全目前是项目过程非常重要的一个环节，安全审计也是系统中非常重要的部分。</p>\n<p>通过系统日志分析，可以判断一些非法攻击，非法调用，以及系统处理过程中的安全隐患。</p>\n<p>比如，大家平时都在做运营系统，其中运营人员在通过界面处理一些数据的时候，如果没有清楚的日志操作记录，一条数据被删除或者修改，你是无法找到是谁操作的，但是如果你做了相应的记录，该数据被谁删除或者修改就会一目了然。</p>\n<p><strong>通过以上 5 点说明了日志在项目维护过程中的重要作用</strong></p>\n<p>一个系统是否容易维护，很大程度上是基于程序员在程序开发过程中的代码日志是怎么记录的。</p>\n<p>日志记录的越清楚，维护起来就越容易，有的程序员没有日志记录意识，或者对日志记录认识不清，或者是不知道日志该如何记录，这势必会给项目后期的维护带来一个个大坑。</p>\n<p>当项目经理让你解决一个线上问题的时候，正好遇到了一个没有日志记录习惯的人写的代码，你就能体会到那种痛苦，不由地想要爆粗口。</p>\n<p>因此，作为一个程序员来说，掌握代码日志的记录方法，是程序员生涯的一项基本功。写代码时做好日志记录是 “即利人又利己” 的做法，不写日志记录就是 “损人不利己” 的做法。</p>\n<h3 id=\"二、Java-日志使用的困惑\"><a href=\"#二、Java-日志使用的困惑\" class=\"headerlink\" title=\"二、Java 日志使用的困惑\"></a>二、Java 日志使用的困惑</h3><p>大多数的程序员都能认识到日志在项目中的重要性，可是对日志记录具体要怎么做，做到什么程度，日志记录用什么工具，会有很多困惑。</p>\n<h3 id=\"1-工具困惑\"><a href=\"#1-工具困惑\" class=\"headerlink\" title=\"1. 工具困惑\"></a>1. 工具困惑</h3><p>作为 Java 程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个，相信每个人都会对 JUL(Java Util Log)、JCL(Commons Logging)、Log4j、SLF4J、Logback、Log4j2 等等的日志工具，到底使用什么产生感到困扰。</p>\n<p>下面的第三节：“Java 日志演化历史”，第四节：“使用不同框架的 Java 日志示例说明”，为大家解惑 Java 日志框架的使用问题。</p>\n<h3 id=\"2-使用困惑\"><a href=\"#2-使用困惑\" class=\"headerlink\" title=\"2. 使用困惑\"></a>2. 使用困惑</h3><p>有的程序员即使知道写 Java 程序用什么日志工具，可能对日志记录具体应该怎么写，写什么东西，什么情况下要写，这些仁者见仁智者见智的东西也会产生困扰。</p>\n<p>下面的第五节：“项目中日志记录遵守哪些原则”，为大家解惑日志记录要遵守哪些原则。</p>\n<p>有的程序员知道了该用哪个 Java 框架，也知道了日志记录的原则，可能还会对具体在项目中到底该如何操作产生困惑。</p>\n<h3 id=\"3-实战困惑\"><a href=\"#3-实战困惑\" class=\"headerlink\" title=\"3. 实战困惑\"></a>3. 实战困惑</h3><p>下面的第六节：“一个推荐的项目 Java 日志实例”，为大家展示在具体项目过程中的应用示例。</p>\n<h3 id=\"三、Java-日志演化历史\"><a href=\"#三、Java-日志演化历史\" class=\"headerlink\" title=\"三、Java 日志演化历史\"></a>三、Java 日志演化历史</h3><p>最先出现的是 Apache 开源社区的 Log4j，这个日志确实是应用最广泛的日志工具，成为了 Java 日志的事实上的标准。</p>\n<p>然而，当时 Java 的开发主体 Sun 公司认为自己才是正统，在 Jdk1.4 中增加了 JUL（在 java.util.logging 包下）日志实现，企图对抗 Log4j，但是却造成了 Java 目前开发者记录日志局面的混乱，迄今为止仍饱受诟病。</p>\n<p>当然也有其他日志工具的出现，基本都是各自为政，这些日志系统互相没有关联。</p>\n<p><strong>为什么 JUL 的出现会导致开发局面混乱呢？</strong></p>\n<p>想象下你的项目应用使用 Log4j，然后使用了一个第三方库，而第三方库使用了 JUL，那么，你的应用就得同时使用 Log4j 和 JUL 两个日志工具了，然后又有需要使用另外一个第三方库，但是这个第三方库使用了 Log4j 和 JUL 之外的 simplelog。这个时候你的应用里各种 log 工具满天飞，这势必会使你的程序员感到崩溃。因为这些日志工具互相没有关联，替换和统一日志工具也就变成了比较棘手的一件事情。</p>\n<blockquote>\n<p>如果你遇到了这种问题，你该如何解决呢？<br>解决这个问题，我们会用到一个设计模式——“适配器模式”，即把这个问题进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象的接口层即可。</p>\n</blockquote>\n<p>为了搞定这个日常开发中比较棘手的问题，Apache 开源社区提供了一个日志框架作为日志的抽象，叫 commons-logging，也被称为 JCL(java common logging)，JCL 对各种日志接口进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象层即可，确实出色地完成了兼容主流的日志实现（Log4j、JUL、simplelog 等），较好的解决了上述问题，基本一统江湖，就连顶顶大名的 spring 也是依赖了 JCL。</p>\n<p>但是美好的日子并不长，作为元老级日志 Log4j 的作者 (Ceki Gülcü)，他觉得 JCL 不够优秀，所以他再度出山，搞出了一套更优雅的日志框架 SLF4J（这个也是抽象层），即简单日志门面（Simple Logging Facade for Java），并为 SLF4J 实现了一个亲儿子——logback，确实更加优雅了。</p>\n<p>最后，Ceki Gülcü 觉得还是得照顾下自己的 “大儿子”——Log4j，又把 Log4j 进行了改造，就是所谓的 Log4j2，同时支持 JCL 以及 SLF4J。</p>\n<p>SLF4J 的出现，又使 Java 日志体系变得混乱起来。</p>\n<p>下面是一张目前 Java 日志体系的示意图：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg\"></p>\n<p>日志库 Log4j，JUL，logback 是互相不兼容的，没有共同的 Interface，所以 commons-logging、SLF4J 通过适配器模式，抽象出来一个共同的接口，然后根据使用的具体日志框架来实现日志。</p>\n<p>java common logging 和 SLF4J 都是日志的接口，供用户使用，而没有提供实现，Log4j，JUL，logback 等等才是日志的真正实现。</p>\n<p>当我们调用日志接口时，接口会自动寻找恰当的实现，返回一个合适的实例给我们服务。这些过程都是透明化的，用户不需要进行任何操作。</p>\n<p>工具官方网站 Log4j<a href=\"http://logging.apache.org/log4j/1.2\">http://logging.apache.org/log4j/1.2</a>JCL<a href=\"http://commons.apache.org/proper/commons-logging/\">http://commons.apache.org/proper/commons-logging/</a>SLF4J<a href=\"http://www.slf4j.org/\">http://www.slf4j.org</a>logback<a href=\"http://logback.qos.ch/\">http://logback.qos.ch</a>Log4j2<a href=\"https://logging.apache.org/log4j/2.x/\">https://logging.apache.org/log4j/2.x/</a></p>\n<h3 id=\"四、使用不同框架的-Java-日志示例说明\"><a href=\"#四、使用不同框架的-Java-日志示例说明\" class=\"headerlink\" title=\"四、使用不同框架的 Java 日志示例说明\"></a>四、使用不同框架的 Java 日志示例说明</h3><h3 id=\"1-Log4j\"><a href=\"#1-Log4j\" class=\"headerlink\" title=\"1. Log4j\"></a>1. Log4j</h3><h3 id=\"Log4j-介绍\"><a href=\"#Log4j-介绍\" class=\"headerlink\" title=\"Log4j 介绍\"></a><strong>Log4j 介绍</strong></h3><p>Log4j（log for java）是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输出到日志文件、也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用程序的代码。</p>\n<h3 id=\"Log4j-使用步骤说明\"><a href=\"#Log4j-使用步骤说明\" class=\"headerlink\" title=\"Log4j 使用步骤说明\"></a><strong>Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>加入 log4j-1.2.17.jar 到 Libraries 下，如果使用 maven 项目，也可以选择在 pom.xml 中新增依赖如下：</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n        &lt;version&gt;1.2.17&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log4j.properties 配置</strong></p>\n<p>Log4j 有三个主要组件：记录器， appender 和布局。这三种类型的组件协同工作，使开发人员能够根据消息类型和级别记录消息，并在运行时控制这些消息的格式和报告位置。</p>\n<p>Log4j 建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</p>\n<p>比如定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。ALL，打印所有的日志；OFF，关闭所有的日志输出。</p>\n<p>appenderName，就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。</p>\n<p>在 src 根目录下建立 log4j.properties，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p>\n<pre><code>#配置根Logger\n    #改代码表示输输出info级别以上的日志，文件分别输出，一个是file，一个是error\n    log4j.rootLogger=info,file,error\n\n    #配置file日志信息输出目的地Appender\n    #定义名为file的输出端是每天产生一个日志文件\n    log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位INFO，默认为DEBUG。\n    log4j.appender.file.Threshold=INFO\n    #指定当前消息输出到jpm/log4j/log.log文件中\n    log4j.appender.file.File=/jpm/log4j/log.log\n    #指定按天来滚动日志文件\n    log4j.appender.file.DatePattern=yyyy-MM-dd\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.file.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.file.layout.ConversionPattern=[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.file.encoding=UTF-8\n\n    #配置error日志信息输出目的地Appender\n    #定义名为error的输出端是每天产生一个日志文件\n    log4j.appender.error=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位ERROR，默认为DEBUG。\n    log4j.appender.error.Threshold=ERROR\n    #指定当前消息输出到jpm/log4j/error.log文件中\n    log4j.appender.error.File=/jpm/log4j/error.log\n    #指定按月来滚动日志文件\n    log4j.appender.error.DatePattern=yyyy-MM\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.error.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.error.layout.ConversionPattern=[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.error.encoding=UTF-8\n\n    #使某个功能的日志单独输出到指定的日志文件\n    log4j.logger.saveUserLog=INFO,saveUserLog\n    #该配置就是让job的日志只输出到自己指定的日志文件中,表示Logger不会在父Logger的appender里输出，默认为true。\n    log4j.additivity.saveUserLog=false\n    log4j.appender.saveUserLog=org.apache.log4j.DailyRollingFileAppender\n    log4j.appender.saveUserLog.File=/jpm/log4j/saveUserLog.log\n    log4j.appender.saveUserLog.DatePattern=yyyy-MM-dd\n    log4j.appender.saveUserLog.Append=true\n    log4j.appender.saveUserLog.layout=org.apache.log4j.PatternLayout\n    log4j.appender.saveUserLog.layout.ConversionPattern=%m%n\n    log4j.appender.error.encoding=UTF-8\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm;\n\n    import org.apache.log4j.Logger;\n\n    public class TestLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger logger = Logger.getLogger(TestLog4j.class);\n            final Logger saveUserLog = Logger.getLogger(&quot;saveUserLog&quot;);\n\n            if (logger.isDebugEnabled()) &#123;\n                logger.debug(&quot;debug&quot;);\n            &#125;\n\n            logger.info(&quot;info&quot;);\n            logger.error(&quot;error&quot;);\n\n            saveUserLog.info(&quot;张三,男,26岁,北京大学,2018-05-19,学霸&quot;);\n\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）以上代码示例生成的日志文件及日志详情</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg\"></p>\n<h3 id=\"2-JUL（在-java-util-logging-包下）使用示例\"><a href=\"#2-JUL（在-java-util-logging-包下）使用示例\" class=\"headerlink\" title=\"2. JUL（在 java.util.logging 包下）使用示例\"></a>2. JUL（在 java.util.logging 包下）使用示例</h3><h3 id=\"JUL-介绍\"><a href=\"#JUL-介绍\" class=\"headerlink\" title=\"JUL 介绍\"></a><strong>JUL 介绍</strong></h3><p>Java Logging API 是 Sun 公司于 2002 年 5 月正式发布的。它是自 J2SE 1.4 版本开始提供的一个新的应用程序接口，需 JDK1.4 版本以上才能支持，java.util.logging.* 包是 JDK 的日志记录 API。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg\"></p>\n<p><strong>强烈不推荐使用 java.util.logging 记录日志，因此这里不提供对应示例给大家。</strong></p>\n<h3 id=\"3-java-common-logging-介绍\"><a href=\"#3-java-common-logging-介绍\" class=\"headerlink\" title=\"3. java common logging 介绍\"></a>3. java common logging 介绍</h3><p>commons-logging 提供的是一个日志接口，是为那些需要建立在不同环境下使用不同日志架构的组件或库的开发者创建的，其中包括 log4j 以及 Java log 的日志架构。commons-logging 有两个基本的抽象类：Log(基本记录器) 和 LogFactory(负责创建 Log 实例)。把日志信息抽象成 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构。因为 Log4j 的强大功能，commons-logging 一般会和 Log4j 一起使用，这几乎成为了 Java 日志的标准工具。</p>\n<h3 id=\"4-SLF4J-介绍\"><a href=\"#4-SLF4J-介绍\" class=\"headerlink\" title=\"4. SLF4J 介绍\"></a>4. SLF4J 介绍</h3><p>SLF4J 全称为 Simple Logging Facade for JAVA，即 java 简单日志门面。 和 commons-loging 一样也是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案，能支持多个参数，并通过 {} 占位符进行替换。</p>\n<p><strong>看这个 Log4J 示例：</strong></p>\n<pre><code>Logger.debug(&quot;Hello &quot; + name);\n</code></pre>\n<p>由于字符串拼接的问题（注：上述语句会先拼接字符串，再根据当前级别是否低于 debug 决定是否输出本条日志，即使不输出日志，字符串拼接操作也会执行），因此许多公司一般强制使用下面的语句，这样只有当前处于 DEBUG 级别时才会执行字符串拼接：</p>\n<pre><code>if (logger.isDebugEnabled()) &#123;\n        LOGGER.debug(“Hello ” + name);\n    &#125;\n</code></pre>\n<p>它避免了字符串拼接问题，可是有点太繁琐了。而 SLF4J 提供下面这样简单的语法:</p>\n<pre><code>LOGGER.debug(&quot;Hello &#123;&#125;&quot;, name);\n</code></pre>\n<p>它的形式类似第一条示例，但是又没有字符串拼接问题，也不像第二条那样繁琐。</p>\n<p>正是因为 SLF4J 的这个占位符功能，使得人们越来越多的使用 SLF4J 这个接口用到实际开发项目中。</p>\n<p><strong>为什么需要日志接口，直接使用具体的实现不就行了吗？</strong></p>\n<p>接口用于定制规范，可以有多个实现，使用时是面向接口的（导入的包都是 SLF4J 的包或者是 JCL 的包，而不是具体某个日志框架中的包），即直接和接口交互，不直接使用实现，所以当需要更换实现的时候，直接更换实就可以了，而不用更改代码中的日志相关代码。</p>\n<p>比如：SLF4J 定义了一套日志接口，项目中使用的日志框架是 log4j，开发中调用的所有接口都是 SLF4J 的，不直接使用 log4j，项目应用调用 SLF4J 的接口，SLF4J 的接口去调用 log4j 的实现，整个应用程序并没有直接使用 log4j，当项目需要更换更加优秀的日志框架时（如 logback）只需要引入 logback 的 jar 和 logback 对应的配置文件即可，完全不用更改 Java 代码中的日志相关的代码 <a href=\"http://logger.info/\">http://logger.info</a>(“hello world”)，也不用修改日志相关的类的导入的包（import org.slf4j.Logger; import org.slf4j.LoggerFactory;）。</p>\n<p>因此日志门面的使用，为后续具体日志系统的实现更换带来了方便。</p>\n<h3 id=\"5-logback-使用示例\"><a href=\"#5-logback-使用示例\" class=\"headerlink\" title=\"5. logback 使用示例\"></a>5. logback 使用示例</h3><h3 id=\"LogBack-介绍\"><a href=\"#LogBack-介绍\" class=\"headerlink\" title=\"LogBack 介绍\"></a><strong>LogBack 介绍</strong></h3><p>LogBack 和 Log4j 都是开源日记工具库，LogBack 是 Log4j 的改良版本，比 Log4j 拥有更多的特性，同时也带来很大性能提升。LogBack 官方建议配合 Slf4j 使用，这样可以灵活地替换底层日志框架。</p>\n<p>Logback 主要由三个模块组成：</p>\n<ul>\n<li>  logback-core</li>\n<li>  logback-classic</li>\n<li>  logback-access</li>\n</ul>\n<p>其中 logback-core 提供了 LogBack 的核心功能，是另外两个组件的基础。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J，所以当想配合 SLF4J 使用时，需要将 logback-classic 加入 classpath；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与 HTTP 访问相关的功能。</p>\n<h3 id=\"logback-使用步骤说明\"><a href=\"#logback-使用步骤说明\" class=\"headerlink\" title=\"logback 使用步骤说明\"></a><strong>logback 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>想在 Java 程序中使用 Logback，需要依赖三个 jar 包，分别是 slf4j-api，logback-core，logback-classic。其中 slf4j-api 并不是 Logback 的一部分，建议将 SLF4J 与 Logback 结合使用。</p>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-core&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-access&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）logback.xml</strong></p>\n<p>在 src 根目录下建立 logback.xml，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;\n    &lt;!-- status用来指定log4j本身的打印日志的级别 --&gt;\n    &lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --&gt;\n    &lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;\n        &lt;!--先定义所有的appender --&gt;\n        &lt;appenders&gt;\n            &lt;!--这个输出控制台的配置 --&gt;\n            &lt;console &gt;\n                &lt;!--输出日志的格式 --&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/console&gt;\n\n            &lt;!--定义输出到指定位置的文件 --&gt;\n            &lt;File &gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/File&gt;\n\n            &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;\n                &lt;!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&gt;\n                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot;\n                    onMismatch=&quot;ACCEPT&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n                &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --&gt;\n                &lt;DefaultRolloverStrategy max=&quot;30&quot; /&gt;\n            &lt;/RollingFile&gt;\n\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n            &lt;/RollingFile&gt;\n        &lt;/appenders&gt;\n\n        &lt;!--只有定义了logger并引入的appender，appender才会生效 --&gt;\n        &lt;loggers&gt;\n            &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;root level=&quot;INFO&quot;&gt;\n                &lt;appender-ref ref=&quot;Console&quot; /&gt;\n                &lt;appender-ref ref=&quot;log&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileInfo&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileError&quot; /&gt;\n            &lt;/root&gt;\n        &lt;/loggers&gt;\n\n    &lt;/configuration&gt;\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.logback;    import org.slf4j.Logger;    import org.slf4j.LoggerFactory;    public class TestLogback &#123;        public static void main(String[] args) &#123;            final Logger LOGGER = LoggerFactory.getLogger(TestLogback.class);            LOGGER.debug(&quot;print debug log.&quot;);            LOGGER.info(&quot;print info log.&quot;);            LOGGER.error(&quot;print error log.&quot;);        &#125;    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg\"><img src=\"https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg\"></p>\n<p><strong>上例使用 SLF4J 做日志接口， logback 做日志实现的日志示例</strong></p>\n<h3 id=\"6-Log4j2-使用示例\"><a href=\"#6-Log4j2-使用示例\" class=\"headerlink\" title=\"6. Log4j2 使用示例\"></a>6. Log4j2 使用示例</h3><h3 id=\"Log4j2-介绍\"><a href=\"#Log4j2-介绍\" class=\"headerlink\" title=\"Log4j2 介绍\"></a><strong>Log4j2 介绍</strong></h3><p>Apache Log4j 2 是对 Log4j 的升级，与其前身 Log4j 1.x 相比有了显着的改进，并提供了许多 Logback 可用的改进，同时支持 JCL 以及 SLF4J。</p>\n<h3 id=\"Log4j2-使用步骤说明\"><a href=\"#Log4j2-使用步骤说明\" class=\"headerlink\" title=\"Log4j2 使用步骤说明\"></a><strong>Log4j2 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>引入 Log4j2 必要的包：log4j-api、log4j-core。</p>\n<p><strong>pom.xml 配置</strong></p>\n<pre><code>&lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;                &lt;version&gt;2.8.2&lt;/version&gt;            &lt;/dependency&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;                &lt;version&gt;2.8.2&lt;/version&gt;            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log2j 配置文件：log4j2.xml</strong></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;\n    &lt;!-- status用来指定Log4j本身的打印日志的级别 --&gt;\n    &lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --&gt;\n    &lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;\n        &lt;!--先定义所有的appender --&gt;\n        &lt;appenders&gt;\n            &lt;!--这个输出控制台的配置 --&gt;\n            &lt;console &gt;\n                &lt;!--输出日志的格式 --&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/console&gt;\n\n            &lt;!--定义输出到指定位置的文件 --&gt;\n            &lt;File &gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/File&gt;\n\n            &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;\n                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n                &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --&gt;\n                &lt;DefaultRolloverStrategy max=&quot;30&quot; /&gt;\n            &lt;/RollingFile&gt;\n\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n            &lt;/RollingFile&gt;\n        &lt;/appenders&gt;\n\n        &lt;!--只有定义了logger并引入的appender，appender才会生效 --&gt;\n        &lt;loggers&gt;\n            &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;root level=&quot;INFO&quot;&gt;\n                &lt;appender-ref ref=&quot;Console&quot; /&gt;\n                &lt;appender-ref ref=&quot;log&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileInfo&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileError&quot; /&gt;\n            &lt;/root&gt;\n        &lt;/loggers&gt;\n\n    &lt;/configuration&gt;\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.log4j2;\n\n    import org.apache.logging.log4j.LogManager;\n    import org.apache.logging.log4j.Logger;\n\n    public class TestLog4j2 &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger LOGGER = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\n            LOGGER.debug(&quot;TestLog4j2 debug log.&quot;);\n            LOGGER.info(&quot;TestLog4j2 info log.&quot;);\n            LOGGER.error(&quot;TestLog4j2 error log.&quot;);\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg\"></p>\n<p><strong>（5）关于日志 level</strong></p>\n<p>共有 8 个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF。</p>\n<ul>\n<li>  <strong>All：</strong>最低等级的，用于打开所有日志记录</li>\n<li>  <strong>Trace：</strong>是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出</li>\n<li>  <strong>Debug：</strong>指出细粒度信息事件对调试应用程序是非常有帮助的</li>\n<li>  <strong>Info：</strong>消息在粗粒度级别上突出强调应用程序的运行过程</li>\n<li>  <strong>Warn：</strong>输出警告及 warn 以下级别的日志</li>\n<li>  <strong>Error：</strong>输出错误信息日志</li>\n<li>  <strong>Fatal：</strong>输出每个严重的错误事件将会导致应用程序的退出的日志</li>\n<li>  <strong>OFF：</strong>最高等级的，用于关闭所有日志记录</li>\n</ul>\n<p>程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。</p>\n<h3 id=\"7-JCL-java-common-logging-Log4j-使用示例\"><a href=\"#7-JCL-java-common-logging-Log4j-使用示例\" class=\"headerlink\" title=\"7. JCL(java common logging) + Log4j 使用示例\"></a>7. JCL(java common logging) + Log4j 使用示例</h3><h3 id=\"JCL-java-common-logging-Log4j-介绍\"><a href=\"#JCL-java-common-logging-Log4j-介绍\" class=\"headerlink\" title=\"JCL(java common logging) + Log4j 介绍\"></a><strong>JCL(java common logging) + Log4j 介绍</strong></h3><p>使用 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构（如 Log4j）。现在，Apache 通用日志工具 commons-logging 和 Log4j 已经成为 Java 日志的标准工具，这个组合是比较常用的一个日志框架组合。</p>\n<h3 id=\"JCL-java-common-logging-Log4j-使用步骤说明\"><a href=\"#JCL-java-common-logging-Log4j-使用步骤说明\" class=\"headerlink\" title=\"JCL(java common logging) + Log4j 使用步骤说明\"></a><strong>JCL(java common logging) + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<pre><code>commons-logging-1.2 + log4j1.2.17\n</code></pre>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n                &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n                &lt;version&gt;1.2&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;log4j&lt;/groupId&gt;\n                &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n                &lt;version&gt;1.2.17&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）配置 common-logging.properties 文件</strong></p>\n<p>只需要一行即可，放在 classpath 下，如果是 Maven 中就在 src/resources 下，不过如果没有 common-logging.properties 文件，但是 src 下有 log4j.properties 配置也可以正常的输出 Log4j 设置的日志。</p>\n<pre><code>org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger\n</code></pre>\n<p><strong>（3）log4j.properties 配置</strong></p>\n<p>参考《Log4j 使用步骤说明》</p>\n<p><strong>（4）输出日志的代码示例</strong></p>\n<pre><code>package jpm.jcllog4j;\n\n    import org.apache.commons.logging.Log;\n    import org.apache.commons.logging.LogFactory;\n\n    public class TestJclAndLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Log LOGGER = LogFactory.getLog(TestJclAndLog4j.class);\n            LOGGER.debug(&quot;TestJclAndLog4j debug log.&quot;);\n            LOGGER.info(&quot;TestJclAndLog4j info log.&quot;);\n            LOGGER.error(&quot;TestJclAndLog4j error log.&quot;);\n        &#125;\n    &#125;\n</code></pre>\n<p><strong>（5）打印日志结果</strong></p>\n<p><img src=\"https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg\"></p>\n<h3 id=\"8-SLF4J-Log4j-使用示例\"><a href=\"#8-SLF4J-Log4j-使用示例\" class=\"headerlink\" title=\"8. SLF4J + Log4j 使用示例\"></a>8. SLF4J + Log4j 使用示例</h3><h3 id=\"SLF4J-Log4j-介绍\"><a href=\"#SLF4J-Log4j-介绍\" class=\"headerlink\" title=\"SLF4J + Log4j 介绍\"></a><strong>SLF4J + Log4j 介绍</strong></h3><p>SLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差异就在 SLF4J 用 用绑定包（slf4j-Log4j12.jar）来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现。</p>\n<h3 id=\"SLF4J-Log4j-使用步骤说明\"><a href=\"#SLF4J-Log4j-使用步骤说明\" class=\"headerlink\" title=\"SLF4J + Log4j 使用步骤说明\"></a><strong>SLF4J + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<pre><code>slf4j-api.jar + slf4j-log4j12.jar\n</code></pre>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log4j.properties 配置文件</strong></p>\n<p>参考《Log4j 使用步骤说明》</p>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.slf4jlog4j;\n\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    public class TestSlf4jAndLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger LOGGER = LoggerFactory.getLogger(TestSlf4jAndLog4j.class);\n            LOGGER.debug(&quot;TestSlf4jAndLog4j debug log：&#123;&#125;&quot;, &quot;debug&quot;);\n            LOGGER.info(&quot;TestSlf4jAndLog4j info log：&#123;&#125;&quot;, &quot;info&quot;);\n            LOGGER.error(&quot;TestSlf4jAndLog4j error log：&#123;&#125;&quot;, &quot;error&quot;);\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg\"></p>\n<h3 id=\"五、项目中日志记录遵守哪些原则\"><a href=\"#五、项目中日志记录遵守哪些原则\" class=\"headerlink\" title=\"五、项目中日志记录遵守哪些原则\"></a>五、项目中日志记录遵守哪些原则</h3><h3 id=\"1-阿里巴巴-Java-开发手册的日志规约\"><a href=\"#1-阿里巴巴-Java-开发手册的日志规约\" class=\"headerlink\" title=\"1. 阿里巴巴 Java 开发手册的日志规约\"></a>1. 阿里巴巴 Java 开发手册的日志规约</h3><p>大家可以参考去年 10 月份阿里推出的《阿里巴巴 Java 开发手册（终极版）.pdf》里的第二章第二节 “日志规约” 部分的内容。</p>\n<h3 id=\"2-个人经验总结\"><a href=\"#2-个人经验总结\" class=\"headerlink\" title=\"2. 个人经验总结\"></a>2. 个人经验总结</h3><p>记录项目日志要注意以下几点：</p>\n<ol>\n<li> 注意日志级别，尤其是 info 和 error 不能用混。</li>\n<li> 注意记录信息的准确性，切记日志表达不清楚。</li>\n<li> 注意不同的代码段日志说明不能重复。</li>\n<li> 捕获异常后，要及时记录异常详细信息，并把异常传递到外部。</li>\n<li> 时刻铭记，日志的记录是为了后期查询问题带来方便，因此重要的代码务必要记录日志。</li>\n</ol>\n<h3 id=\"六、一个推荐的项目-Java-日志实例\"><a href=\"#六、一个推荐的项目-Java-日志实例\" class=\"headerlink\" title=\"六、一个推荐的项目 Java 日志实例\"></a>六、一个推荐的项目 Java 日志实例</h3><p>经过以上代码的分析，我们项目中使用的日志一般会选用一个日志接口和一个具体的日志实现。</p>\n<p>那么日志接口是选 JCL 呢，还是选 SLF4J 呢？下面我们把他俩做个对比，具体日志实现为 Log4j，如下图：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg\"></p>\n<p>从上图可以看出，用 slf4j 作为日志接口，对项目来说更好一些。</p>\n<p>所以，在实际项目中，我一般建议使用 SLF4J+Log4j 或者 slf4j+logback。</p>\n<p><strong>配置文件参见第四节</strong></p>\n<p><strong>推荐程序片段如下</strong></p>\n<pre><code>try &#123;\n                LOGGER.info(&quot;根据用户编码查询用户信息-开始，userId：&#123;&#125;&quot; , userId);\n                User user = userService.getUserById(userId);\n                LOGGER.info(&quot;根据用户编码查询用户信息-结束，userId：&#123;&#125;&quot; , userId);\n            &#125; catch (CustomException e) &#123;\n                LOGGER.error(&quot;根据用户编码查询用户信息-自定义异常:&#123;&#125;&quot; , e.getMessage());\n                throw new CustomException(&quot;根据用户编码查询用户信息-自定义异常&#123;&#125;&quot; , e.getMessage(), e);\n            &#125; catch (Exception e) &#123;\n                LOGGER.error(&quot;根据用户编码查询用户信息-捕获异常:&#123;&#125;&quot; , e.toString());\n                throw new ServiceException(根据用户编码查询用户信息-捕获异常:&#123;&#125;&quot; , e.toString(), e);\n            &#125;\n</code></pre>\n<p>到此，Java 日志从入门到实战 就结束了，咱们下次再见，谢谢。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021703915.jpg\" alt=\"bird-7016926_1920\"></p>","more":"<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://zhuanlan.zhihu.com/p/64353891\">zhuanlan.zhihu.com</a></p>\n</blockquote>\n<p>日志和异常处理结合得当的话，会给项目维护带来非常大的价值。</p>\n<ul>\n<li>  <strong>日志：</strong>就是介绍一个过程和经历的详细记录。</li>\n<li>  <strong>项目日志：</strong>就是项目开发过程的详细记录，一般由项目经理记录。</li>\n<li>  <strong>代码里的日志：</strong>就是程序员记录某个开发过程的详细情况，这是项目里每个程序员需要做的工作。</li>\n</ul>\n<p>代码里的日志在项目中扮演着非常重要的角色，日志记录的详细程度决定系统是否容易维护，Java 项目中日志记录的框架有很多，在项目中如何选型也必将困惑。</p>\n<p>我们这场 chat 讨论的主题就是：<strong>Java 代码里的日志</strong>，主要是写给 Java 程序员看的，本篇 Chat 从以下六个方面对 Java 日志进行阐述：</p>\n<ul>\n<li>  一、日志在项目中的作用</li>\n<li>  二、Java 日志使用的困惑</li>\n<li>  三、Java 日志演化历史</li>\n<li>  四、使用不同框架的 Java 日志示例说明</li>\n<li>  五、项目中日志记录遵守哪些原则</li>\n<li>  六、一个推荐的项目 Java 日志实例</li>\n</ul>\n<p>以期通过本场 Chat 的学习，能使大家在编码过程中，对日志的处理过程加深认识、统一规范、得到收获，从零开始轻松掌握 Java 日志处理，并且可以运用到实际项目中。</p>\n<h3 id=\"一、日志在项目中的作用\"><a href=\"#一、日志在项目中的作用\" class=\"headerlink\" title=\"一、日志在项目中的作用\"></a>一、日志在项目中的作用</h3><p>Log 日志，主要用于记录程序运行的情况，以便于程序在部署之后的排错调试等，也有利于将这些信息进行持久化（如果不将日志信息保存到文件或数据库，则信息便会丢失）。</p>\n<h3 id=\"1-查看程序当前运行状态\"><a href=\"#1-查看程序当前运行状态\" class=\"headerlink\" title=\"1. 查看程序当前运行状态\"></a>1. 查看程序当前运行状态</h3><p>如果想了解程序当前的运行情况，我们通过实时查看应用日志的输出，就能进行分析。</p>\n<p>比如，你在浏览器里输入一个 action 地址，该 url 负责执行一些批量处理，action 运行后，假设处理比较耗时，你再浏览器里无法直接看到程序的执行结果，此时，你可以打开系统日志，通过从日志输出信息就能轻松地分析该 url 的执行情况。</p>\n<h3 id=\"2-查看程序历史运行轨迹\"><a href=\"#2-查看程序历史运行轨迹\" class=\"headerlink\" title=\"2. 查看程序历史运行轨迹\"></a>2. 查看程序历史运行轨迹</h3><p>如果想了解历时程序的运行情况，我们通过查看应用历时日志的输出，就能进行分析。</p>\n<p>比如，你想了解下上周周末用户访问量，你可以打开系统上周周末的日志记录，进行分析。你想了解昨天的某个定时任务是否正常执行，你可以打开昨天的系统日志，精确查找该定时任务的输出信息，从而判断定时任务是否执行。</p>\n<h3 id=\"3-排查系统问题\"><a href=\"#3-排查系统问题\" class=\"headerlink\" title=\"3. 排查系统问题\"></a>3. 排查系统问题</h3><p>排查系统问题是程序员最熟悉的味道了，在项目维护过程中，出了任何问题，都需要程序员去进行排查。此时，如果没有清楚明了的日志记录，想要核查出问题的原因，难于上青天。</p>\n<p>一个优秀的程序员一定是个日志记录高手，如果日志记录的好，处理得当，排查问题则易如反掌。</p>\n<p>大家有没有遇到一种场景，一个问题发生了，有的人能迅速定位问题并解决，有的人搞了半天，还没发现问题的产生原因。</p>\n<p>其实快速定位问题的人一定记录了详细的日志，因此当问题发生的时候，通过核查问题发生时候的日志，就能快速的找出问题产生的原因。</p>\n<h3 id=\"4-优化系统性能\"><a href=\"#4-优化系统性能\" class=\"headerlink\" title=\"4. 优化系统性能\"></a>4. 优化系统性能</h3><p>通过记录程序运行的时间，就能判断程序从执行开始到执行结束消耗的时间，从而判断系统性能是否达标，为系统性能优化提供判断依据。</p>\n<h3 id=\"5-安全审计的基石\"><a href=\"#5-安全审计的基石\" class=\"headerlink\" title=\"5. 安全审计的基石\"></a>5. 安全审计的基石</h3><p>网络安全越来越受到大家的关注，所以系统安全目前是项目过程非常重要的一个环节，安全审计也是系统中非常重要的部分。</p>\n<p>通过系统日志分析，可以判断一些非法攻击，非法调用，以及系统处理过程中的安全隐患。</p>\n<p>比如，大家平时都在做运营系统，其中运营人员在通过界面处理一些数据的时候，如果没有清楚的日志操作记录，一条数据被删除或者修改，你是无法找到是谁操作的，但是如果你做了相应的记录，该数据被谁删除或者修改就会一目了然。</p>\n<p><strong>通过以上 5 点说明了日志在项目维护过程中的重要作用</strong></p>\n<p>一个系统是否容易维护，很大程度上是基于程序员在程序开发过程中的代码日志是怎么记录的。</p>\n<p>日志记录的越清楚，维护起来就越容易，有的程序员没有日志记录意识，或者对日志记录认识不清，或者是不知道日志该如何记录，这势必会给项目后期的维护带来一个个大坑。</p>\n<p>当项目经理让你解决一个线上问题的时候，正好遇到了一个没有日志记录习惯的人写的代码，你就能体会到那种痛苦，不由地想要爆粗口。</p>\n<p>因此，作为一个程序员来说，掌握代码日志的记录方法，是程序员生涯的一项基本功。写代码时做好日志记录是 “即利人又利己” 的做法，不写日志记录就是 “损人不利己” 的做法。</p>\n<h3 id=\"二、Java-日志使用的困惑\"><a href=\"#二、Java-日志使用的困惑\" class=\"headerlink\" title=\"二、Java 日志使用的困惑\"></a>二、Java 日志使用的困惑</h3><p>大多数的程序员都能认识到日志在项目中的重要性，可是对日志记录具体要怎么做，做到什么程度，日志记录用什么工具，会有很多困惑。</p>\n<h3 id=\"1-工具困惑\"><a href=\"#1-工具困惑\" class=\"headerlink\" title=\"1. 工具困惑\"></a>1. 工具困惑</h3><p>作为 Java 程序员，幸运的是，Java 拥有功能和性能都非常强大的日志库；不幸的是，这样的日志库有不止一个，相信每个人都会对 JUL(Java Util Log)、JCL(Commons Logging)、Log4j、SLF4J、Logback、Log4j2 等等的日志工具，到底使用什么产生感到困扰。</p>\n<p>下面的第三节：“Java 日志演化历史”，第四节：“使用不同框架的 Java 日志示例说明”，为大家解惑 Java 日志框架的使用问题。</p>\n<h3 id=\"2-使用困惑\"><a href=\"#2-使用困惑\" class=\"headerlink\" title=\"2. 使用困惑\"></a>2. 使用困惑</h3><p>有的程序员即使知道写 Java 程序用什么日志工具，可能对日志记录具体应该怎么写，写什么东西，什么情况下要写，这些仁者见仁智者见智的东西也会产生困扰。</p>\n<p>下面的第五节：“项目中日志记录遵守哪些原则”，为大家解惑日志记录要遵守哪些原则。</p>\n<p>有的程序员知道了该用哪个 Java 框架，也知道了日志记录的原则，可能还会对具体在项目中到底该如何操作产生困惑。</p>\n<h3 id=\"3-实战困惑\"><a href=\"#3-实战困惑\" class=\"headerlink\" title=\"3. 实战困惑\"></a>3. 实战困惑</h3><p>下面的第六节：“一个推荐的项目 Java 日志实例”，为大家展示在具体项目过程中的应用示例。</p>\n<h3 id=\"三、Java-日志演化历史\"><a href=\"#三、Java-日志演化历史\" class=\"headerlink\" title=\"三、Java 日志演化历史\"></a>三、Java 日志演化历史</h3><p>最先出现的是 Apache 开源社区的 Log4j，这个日志确实是应用最广泛的日志工具，成为了 Java 日志的事实上的标准。</p>\n<p>然而，当时 Java 的开发主体 Sun 公司认为自己才是正统，在 Jdk1.4 中增加了 JUL（在 java.util.logging 包下）日志实现，企图对抗 Log4j，但是却造成了 Java 目前开发者记录日志局面的混乱，迄今为止仍饱受诟病。</p>\n<p>当然也有其他日志工具的出现，基本都是各自为政，这些日志系统互相没有关联。</p>\n<p><strong>为什么 JUL 的出现会导致开发局面混乱呢？</strong></p>\n<p>想象下你的项目应用使用 Log4j，然后使用了一个第三方库，而第三方库使用了 JUL，那么，你的应用就得同时使用 Log4j 和 JUL 两个日志工具了，然后又有需要使用另外一个第三方库，但是这个第三方库使用了 Log4j 和 JUL 之外的 simplelog。这个时候你的应用里各种 log 工具满天飞，这势必会使你的程序员感到崩溃。因为这些日志工具互相没有关联，替换和统一日志工具也就变成了比较棘手的一件事情。</p>\n<blockquote>\n<p>如果你遇到了这种问题，你该如何解决呢？<br>解决这个问题，我们会用到一个设计模式——“适配器模式”，即把这个问题进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象的接口层即可。</p>\n</blockquote>\n<p>为了搞定这个日常开发中比较棘手的问题，Apache 开源社区提供了一个日志框架作为日志的抽象，叫 commons-logging，也被称为 JCL(java common logging)，JCL 对各种日志接口进行抽象，抽象出一个接口层，对每个日志实现都进行适配，这样这些提供给别人的库都直接使用抽象层即可，确实出色地完成了兼容主流的日志实现（Log4j、JUL、simplelog 等），较好的解决了上述问题，基本一统江湖，就连顶顶大名的 spring 也是依赖了 JCL。</p>\n<p>但是美好的日子并不长，作为元老级日志 Log4j 的作者 (Ceki Gülcü)，他觉得 JCL 不够优秀，所以他再度出山，搞出了一套更优雅的日志框架 SLF4J（这个也是抽象层），即简单日志门面（Simple Logging Facade for Java），并为 SLF4J 实现了一个亲儿子——logback，确实更加优雅了。</p>\n<p>最后，Ceki Gülcü 觉得还是得照顾下自己的 “大儿子”——Log4j，又把 Log4j 进行了改造，就是所谓的 Log4j2，同时支持 JCL 以及 SLF4J。</p>\n<p>SLF4J 的出现，又使 Java 日志体系变得混乱起来。</p>\n<p>下面是一张目前 Java 日志体系的示意图：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1d6add0536d2266211f2569a84a681ae_r.jpg\"></p>\n<p>日志库 Log4j，JUL，logback 是互相不兼容的，没有共同的 Interface，所以 commons-logging、SLF4J 通过适配器模式，抽象出来一个共同的接口，然后根据使用的具体日志框架来实现日志。</p>\n<p>java common logging 和 SLF4J 都是日志的接口，供用户使用，而没有提供实现，Log4j，JUL，logback 等等才是日志的真正实现。</p>\n<p>当我们调用日志接口时，接口会自动寻找恰当的实现，返回一个合适的实例给我们服务。这些过程都是透明化的，用户不需要进行任何操作。</p>\n<p>工具官方网站 Log4j<a href=\"http://logging.apache.org/log4j/1.2\">http://logging.apache.org/log4j/1.2</a>JCL<a href=\"http://commons.apache.org/proper/commons-logging/\">http://commons.apache.org/proper/commons-logging/</a>SLF4J<a href=\"http://www.slf4j.org/\">http://www.slf4j.org</a>logback<a href=\"http://logback.qos.ch/\">http://logback.qos.ch</a>Log4j2<a href=\"https://logging.apache.org/log4j/2.x/\">https://logging.apache.org/log4j/2.x/</a></p>\n<h3 id=\"四、使用不同框架的-Java-日志示例说明\"><a href=\"#四、使用不同框架的-Java-日志示例说明\" class=\"headerlink\" title=\"四、使用不同框架的 Java 日志示例说明\"></a>四、使用不同框架的 Java 日志示例说明</h3><h3 id=\"1-Log4j\"><a href=\"#1-Log4j\" class=\"headerlink\" title=\"1. Log4j\"></a>1. Log4j</h3><h3 id=\"Log4j-介绍\"><a href=\"#Log4j-介绍\" class=\"headerlink\" title=\"Log4j 介绍\"></a><strong>Log4j 介绍</strong></h3><p>Log4j（log for java）是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输出到日志文件、也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用程序的代码。</p>\n<h3 id=\"Log4j-使用步骤说明\"><a href=\"#Log4j-使用步骤说明\" class=\"headerlink\" title=\"Log4j 使用步骤说明\"></a><strong>Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>加入 log4j-1.2.17.jar 到 Libraries 下，如果使用 maven 项目，也可以选择在 pom.xml 中新增依赖如下：</p>\n<pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;log4j&lt;/groupId&gt;\n        &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n        &lt;version&gt;1.2.17&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log4j.properties 配置</strong></p>\n<p>Log4j 有三个主要组件：记录器， appender 和布局。这三种类型的组件协同工作，使开发人员能够根据消息类型和级别记录消息，并在运行时控制这些消息的格式和报告位置。</p>\n<p>Log4j 建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。</p>\n<p>比如定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。ALL，打印所有的日志；OFF，关闭所有的日志输出。</p>\n<p>appenderName，就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。</p>\n<p>在 src 根目录下建立 log4j.properties，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p>\n<pre><code>#配置根Logger\n    #改代码表示输输出info级别以上的日志，文件分别输出，一个是file，一个是error\n    log4j.rootLogger=info,file,error\n\n    #配置file日志信息输出目的地Appender\n    #定义名为file的输出端是每天产生一个日志文件\n    log4j.appender.file=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位INFO，默认为DEBUG。\n    log4j.appender.file.Threshold=INFO\n    #指定当前消息输出到jpm/log4j/log.log文件中\n    log4j.appender.file.File=/jpm/log4j/log.log\n    #指定按天来滚动日志文件\n    log4j.appender.file.DatePattern=yyyy-MM-dd\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.file.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.file.layout.ConversionPattern=[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.file.encoding=UTF-8\n\n    #配置error日志信息输出目的地Appender\n    #定义名为error的输出端是每天产生一个日志文件\n    log4j.appender.error=org.apache.log4j.DailyRollingFileAppender\n    #指定日志信息的最低输出级别位ERROR，默认为DEBUG。\n    log4j.appender.error.Threshold=ERROR\n    #指定当前消息输出到jpm/log4j/error.log文件中\n    log4j.appender.error.File=/jpm/log4j/error.log\n    #指定按月来滚动日志文件\n    log4j.appender.error.DatePattern=yyyy-MM\n    #配置日志信息的格式（布局）Layout是可以灵活地指定布局模式\n    log4j.appender.error.layout=org.apache.log4j.PatternLayout\n    #格式化日志，Log4j采用类似C语言中的printf函数的打印格式格式化日志信息\n    log4j.appender.error.layout.ConversionPattern=[%d&#123;yyyy-MM-ddHH:mm:ss&#125;][%-5p][jpm-%c&#123;1&#125;-%M(%L)]-%m%n\n    #指定输出信息的编码\n    log4j.appender.error.encoding=UTF-8\n\n    #使某个功能的日志单独输出到指定的日志文件\n    log4j.logger.saveUserLog=INFO,saveUserLog\n    #该配置就是让job的日志只输出到自己指定的日志文件中,表示Logger不会在父Logger的appender里输出，默认为true。\n    log4j.additivity.saveUserLog=false\n    log4j.appender.saveUserLog=org.apache.log4j.DailyRollingFileAppender\n    log4j.appender.saveUserLog.File=/jpm/log4j/saveUserLog.log\n    log4j.appender.saveUserLog.DatePattern=yyyy-MM-dd\n    log4j.appender.saveUserLog.Append=true\n    log4j.appender.saveUserLog.layout=org.apache.log4j.PatternLayout\n    log4j.appender.saveUserLog.layout.ConversionPattern=%m%n\n    log4j.appender.error.encoding=UTF-8\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm;\n\n    import org.apache.log4j.Logger;\n\n    public class TestLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger logger = Logger.getLogger(TestLog4j.class);\n            final Logger saveUserLog = Logger.getLogger(&quot;saveUserLog&quot;);\n\n            if (logger.isDebugEnabled()) &#123;\n                logger.debug(&quot;debug&quot;);\n            &#125;\n\n            logger.info(&quot;info&quot;);\n            logger.error(&quot;error&quot;);\n\n            saveUserLog.info(&quot;张三,男,26岁,北京大学,2018-05-19,学霸&quot;);\n\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）以上代码示例生成的日志文件及日志详情</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a8903ca4a3d5f97a1d696998fc00e150_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-28c0f94b7a08b1d3526714e7f53f83c4_r.jpg\"></p>\n<h3 id=\"2-JUL（在-java-util-logging-包下）使用示例\"><a href=\"#2-JUL（在-java-util-logging-包下）使用示例\" class=\"headerlink\" title=\"2. JUL（在 java.util.logging 包下）使用示例\"></a>2. JUL（在 java.util.logging 包下）使用示例</h3><h3 id=\"JUL-介绍\"><a href=\"#JUL-介绍\" class=\"headerlink\" title=\"JUL 介绍\"></a><strong>JUL 介绍</strong></h3><p>Java Logging API 是 Sun 公司于 2002 年 5 月正式发布的。它是自 J2SE 1.4 版本开始提供的一个新的应用程序接口，需 JDK1.4 版本以上才能支持，java.util.logging.* 包是 JDK 的日志记录 API。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-66266d98c49b4d310d53694cfdc74b01_r.jpg\"></p>\n<p><strong>强烈不推荐使用 java.util.logging 记录日志，因此这里不提供对应示例给大家。</strong></p>\n<h3 id=\"3-java-common-logging-介绍\"><a href=\"#3-java-common-logging-介绍\" class=\"headerlink\" title=\"3. java common logging 介绍\"></a>3. java common logging 介绍</h3><p>commons-logging 提供的是一个日志接口，是为那些需要建立在不同环境下使用不同日志架构的组件或库的开发者创建的，其中包括 log4j 以及 Java log 的日志架构。commons-logging 有两个基本的抽象类：Log(基本记录器) 和 LogFactory(负责创建 Log 实例)。把日志信息抽象成 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构。因为 Log4j 的强大功能，commons-logging 一般会和 Log4j 一起使用，这几乎成为了 Java 日志的标准工具。</p>\n<h3 id=\"4-SLF4J-介绍\"><a href=\"#4-SLF4J-介绍\" class=\"headerlink\" title=\"4. SLF4J 介绍\"></a>4. SLF4J 介绍</h3><p>SLF4J 全称为 Simple Logging Facade for JAVA，即 java 简单日志门面。 和 commons-loging 一样也是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案，能支持多个参数，并通过 {} 占位符进行替换。</p>\n<p><strong>看这个 Log4J 示例：</strong></p>\n<pre><code>Logger.debug(&quot;Hello &quot; + name);\n</code></pre>\n<p>由于字符串拼接的问题（注：上述语句会先拼接字符串，再根据当前级别是否低于 debug 决定是否输出本条日志，即使不输出日志，字符串拼接操作也会执行），因此许多公司一般强制使用下面的语句，这样只有当前处于 DEBUG 级别时才会执行字符串拼接：</p>\n<pre><code>if (logger.isDebugEnabled()) &#123;\n        LOGGER.debug(“Hello ” + name);\n    &#125;\n</code></pre>\n<p>它避免了字符串拼接问题，可是有点太繁琐了。而 SLF4J 提供下面这样简单的语法:</p>\n<pre><code>LOGGER.debug(&quot;Hello &#123;&#125;&quot;, name);\n</code></pre>\n<p>它的形式类似第一条示例，但是又没有字符串拼接问题，也不像第二条那样繁琐。</p>\n<p>正是因为 SLF4J 的这个占位符功能，使得人们越来越多的使用 SLF4J 这个接口用到实际开发项目中。</p>\n<p><strong>为什么需要日志接口，直接使用具体的实现不就行了吗？</strong></p>\n<p>接口用于定制规范，可以有多个实现，使用时是面向接口的（导入的包都是 SLF4J 的包或者是 JCL 的包，而不是具体某个日志框架中的包），即直接和接口交互，不直接使用实现，所以当需要更换实现的时候，直接更换实就可以了，而不用更改代码中的日志相关代码。</p>\n<p>比如：SLF4J 定义了一套日志接口，项目中使用的日志框架是 log4j，开发中调用的所有接口都是 SLF4J 的，不直接使用 log4j，项目应用调用 SLF4J 的接口，SLF4J 的接口去调用 log4j 的实现，整个应用程序并没有直接使用 log4j，当项目需要更换更加优秀的日志框架时（如 logback）只需要引入 logback 的 jar 和 logback 对应的配置文件即可，完全不用更改 Java 代码中的日志相关的代码 <a href=\"http://logger.info/\">http://logger.info</a>(“hello world”)，也不用修改日志相关的类的导入的包（import org.slf4j.Logger; import org.slf4j.LoggerFactory;）。</p>\n<p>因此日志门面的使用，为后续具体日志系统的实现更换带来了方便。</p>\n<h3 id=\"5-logback-使用示例\"><a href=\"#5-logback-使用示例\" class=\"headerlink\" title=\"5. logback 使用示例\"></a>5. logback 使用示例</h3><h3 id=\"LogBack-介绍\"><a href=\"#LogBack-介绍\" class=\"headerlink\" title=\"LogBack 介绍\"></a><strong>LogBack 介绍</strong></h3><p>LogBack 和 Log4j 都是开源日记工具库，LogBack 是 Log4j 的改良版本，比 Log4j 拥有更多的特性，同时也带来很大性能提升。LogBack 官方建议配合 Slf4j 使用，这样可以灵活地替换底层日志框架。</p>\n<p>Logback 主要由三个模块组成：</p>\n<ul>\n<li>  logback-core</li>\n<li>  logback-classic</li>\n<li>  logback-access</li>\n</ul>\n<p>其中 logback-core 提供了 LogBack 的核心功能，是另外两个组件的基础。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J，所以当想配合 SLF4J 使用时，需要将 logback-classic 加入 classpath；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与 HTTP 访问相关的功能。</p>\n<h3 id=\"logback-使用步骤说明\"><a href=\"#logback-使用步骤说明\" class=\"headerlink\" title=\"logback 使用步骤说明\"></a><strong>logback 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>想在 Java 程序中使用 Logback，需要依赖三个 jar 包，分别是 slf4j-api，logback-core，logback-classic。其中 slf4j-api 并不是 Logback 的一部分，建议将 SLF4J 与 Logback 结合使用。</p>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-core&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n                &lt;artifactId&gt;logback-access&lt;/artifactId&gt;\n                &lt;version&gt;1.2.3&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）logback.xml</strong></p>\n<p>在 src 根目录下建立 logback.xml，根据自己的需求，相应的修改其中的配置，其内容如下所示：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;\n    &lt;!-- status用来指定log4j本身的打印日志的级别 --&gt;\n    &lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --&gt;\n    &lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;\n        &lt;!--先定义所有的appender --&gt;\n        &lt;appenders&gt;\n            &lt;!--这个输出控制台的配置 --&gt;\n            &lt;console &gt;\n                &lt;!--输出日志的格式 --&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/console&gt;\n\n            &lt;!--定义输出到指定位置的文件 --&gt;\n            &lt;File &gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/File&gt;\n\n            &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;\n                &lt;!-- DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&gt;\n                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot;\n                    onMismatch=&quot;ACCEPT&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n                &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --&gt;\n                &lt;DefaultRolloverStrategy max=&quot;30&quot; /&gt;\n            &lt;/RollingFile&gt;\n\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n            &lt;/RollingFile&gt;\n        &lt;/appenders&gt;\n\n        &lt;!--只有定义了logger并引入的appender，appender才会生效 --&gt;\n        &lt;loggers&gt;\n            &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;root level=&quot;INFO&quot;&gt;\n                &lt;appender-ref ref=&quot;Console&quot; /&gt;\n                &lt;appender-ref ref=&quot;log&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileInfo&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileError&quot; /&gt;\n            &lt;/root&gt;\n        &lt;/loggers&gt;\n\n    &lt;/configuration&gt;\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.logback;    import org.slf4j.Logger;    import org.slf4j.LoggerFactory;    public class TestLogback &#123;        public static void main(String[] args) &#123;            final Logger LOGGER = LoggerFactory.getLogger(TestLogback.class);            LOGGER.debug(&quot;print debug log.&quot;);            LOGGER.info(&quot;print info log.&quot;);            LOGGER.error(&quot;print error log.&quot;);        &#125;    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5cf7e342e2821235428d3f1c33a7cd2_b.jpg\"><img src=\"https://pic3.zhimg.com/v2-9c2ceb4f73b1771b0fde829117e9d33a_r.jpg\"></p>\n<p><strong>上例使用 SLF4J 做日志接口， logback 做日志实现的日志示例</strong></p>\n<h3 id=\"6-Log4j2-使用示例\"><a href=\"#6-Log4j2-使用示例\" class=\"headerlink\" title=\"6. Log4j2 使用示例\"></a>6. Log4j2 使用示例</h3><h3 id=\"Log4j2-介绍\"><a href=\"#Log4j2-介绍\" class=\"headerlink\" title=\"Log4j2 介绍\"></a><strong>Log4j2 介绍</strong></h3><p>Apache Log4j 2 是对 Log4j 的升级，与其前身 Log4j 1.x 相比有了显着的改进，并提供了许多 Logback 可用的改进，同时支持 JCL 以及 SLF4J。</p>\n<h3 id=\"Log4j2-使用步骤说明\"><a href=\"#Log4j2-使用步骤说明\" class=\"headerlink\" title=\"Log4j2 使用步骤说明\"></a><strong>Log4j2 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<p>引入 Log4j2 必要的包：log4j-api、log4j-core。</p>\n<p><strong>pom.xml 配置</strong></p>\n<pre><code>&lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;                &lt;version&gt;2.8.2&lt;/version&gt;            &lt;/dependency&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;                &lt;version&gt;2.8.2&lt;/version&gt;            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log2j 配置文件：log4j2.xml</strong></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;\n    &lt;!-- status用来指定Log4j本身的打印日志的级别 --&gt;\n    &lt;!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数 --&gt;\n    &lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;\n        &lt;!--先定义所有的appender --&gt;\n        &lt;appenders&gt;\n            &lt;!--这个输出控制台的配置 --&gt;\n            &lt;console &gt;\n                &lt;!--输出日志的格式 --&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/console&gt;\n\n            &lt;!--定义输出到指定位置的文件 --&gt;\n            &lt;File &gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n            &lt;/File&gt;\n\n            &lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;\n                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n                &lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 --&gt;\n                &lt;DefaultRolloverStrategy max=&quot;30&quot; /&gt;\n            &lt;/RollingFile&gt;\n\n            &lt;RollingFile \n                filePattern=&quot;/jpm/log4j2/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;\n                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot;\n                    onMismatch=&quot;DENY&quot; /&gt;\n                &lt;PatternLayout\n                    pattern=&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %logger&#123;36&#125; - %msg%n&quot; /&gt;\n                &lt;Policies&gt;\n                    &lt;TimeBasedTriggeringPolicy /&gt;\n                    &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot; /&gt;\n                &lt;/Policies&gt;\n            &lt;/RollingFile&gt;\n        &lt;/appenders&gt;\n\n        &lt;!--只有定义了logger并引入的appender，appender才会生效 --&gt;\n        &lt;loggers&gt;\n            &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息 --&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;logger &gt;&lt;/logger&gt;\n            &lt;root level=&quot;INFO&quot;&gt;\n                &lt;appender-ref ref=&quot;Console&quot; /&gt;\n                &lt;appender-ref ref=&quot;log&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileInfo&quot; /&gt;\n                &lt;appender-ref ref=&quot;RollingFileError&quot; /&gt;\n            &lt;/root&gt;\n        &lt;/loggers&gt;\n\n    &lt;/configuration&gt;\n</code></pre>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.log4j2;\n\n    import org.apache.logging.log4j.LogManager;\n    import org.apache.logging.log4j.Logger;\n\n    public class TestLog4j2 &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger LOGGER = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\n            LOGGER.debug(&quot;TestLog4j2 debug log.&quot;);\n            LOGGER.info(&quot;TestLog4j2 info log.&quot;);\n            LOGGER.error(&quot;TestLog4j2 error log.&quot;);\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-be11d8203d8c529c9a9020a05967bdf8_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-2f11d92ede4c1418d88ca05e481cf044_r.jpg\"></p>\n<p><strong>（5）关于日志 level</strong></p>\n<p>共有 8 个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF。</p>\n<ul>\n<li>  <strong>All：</strong>最低等级的，用于打开所有日志记录</li>\n<li>  <strong>Trace：</strong>是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出</li>\n<li>  <strong>Debug：</strong>指出细粒度信息事件对调试应用程序是非常有帮助的</li>\n<li>  <strong>Info：</strong>消息在粗粒度级别上突出强调应用程序的运行过程</li>\n<li>  <strong>Warn：</strong>输出警告及 warn 以下级别的日志</li>\n<li>  <strong>Error：</strong>输出错误信息日志</li>\n<li>  <strong>Fatal：</strong>输出每个严重的错误事件将会导致应用程序的退出的日志</li>\n<li>  <strong>OFF：</strong>最高等级的，用于关闭所有日志记录</li>\n</ul>\n<p>程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。</p>\n<h3 id=\"7-JCL-java-common-logging-Log4j-使用示例\"><a href=\"#7-JCL-java-common-logging-Log4j-使用示例\" class=\"headerlink\" title=\"7. JCL(java common logging) + Log4j 使用示例\"></a>7. JCL(java common logging) + Log4j 使用示例</h3><h3 id=\"JCL-java-common-logging-Log4j-介绍\"><a href=\"#JCL-java-common-logging-Log4j-介绍\" class=\"headerlink\" title=\"JCL(java common logging) + Log4j 介绍\"></a><strong>JCL(java common logging) + Log4j 介绍</strong></h3><p>使用 commons-logging 的 Log 接口，并由 commons-logging 在运行时决定使用哪种日志架构（如 Log4j）。现在，Apache 通用日志工具 commons-logging 和 Log4j 已经成为 Java 日志的标准工具，这个组合是比较常用的一个日志框架组合。</p>\n<h3 id=\"JCL-java-common-logging-Log4j-使用步骤说明\"><a href=\"#JCL-java-common-logging-Log4j-使用步骤说明\" class=\"headerlink\" title=\"JCL(java common logging) + Log4j 使用步骤说明\"></a><strong>JCL(java common logging) + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<pre><code>commons-logging-1.2 + log4j1.2.17\n</code></pre>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n                &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n                &lt;version&gt;1.2&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;log4j&lt;/groupId&gt;\n                &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n                &lt;version&gt;1.2.17&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）配置 common-logging.properties 文件</strong></p>\n<p>只需要一行即可，放在 classpath 下，如果是 Maven 中就在 src/resources 下，不过如果没有 common-logging.properties 文件，但是 src 下有 log4j.properties 配置也可以正常的输出 Log4j 设置的日志。</p>\n<pre><code>org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger\n</code></pre>\n<p><strong>（3）log4j.properties 配置</strong></p>\n<p>参考《Log4j 使用步骤说明》</p>\n<p><strong>（4）输出日志的代码示例</strong></p>\n<pre><code>package jpm.jcllog4j;\n\n    import org.apache.commons.logging.Log;\n    import org.apache.commons.logging.LogFactory;\n\n    public class TestJclAndLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Log LOGGER = LogFactory.getLog(TestJclAndLog4j.class);\n            LOGGER.debug(&quot;TestJclAndLog4j debug log.&quot;);\n            LOGGER.info(&quot;TestJclAndLog4j info log.&quot;);\n            LOGGER.error(&quot;TestJclAndLog4j error log.&quot;);\n        &#125;\n    &#125;\n</code></pre>\n<p><strong>（5）打印日志结果</strong></p>\n<p><img src=\"https://pic2.zhimg.com/v2-953e2376a2fac3d9af730ceb2ca40a81_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-f3927da8d2998d641730acb45ca0cf0c_r.jpg\"></p>\n<h3 id=\"8-SLF4J-Log4j-使用示例\"><a href=\"#8-SLF4J-Log4j-使用示例\" class=\"headerlink\" title=\"8. SLF4J + Log4j 使用示例\"></a>8. SLF4J + Log4j 使用示例</h3><h3 id=\"SLF4J-Log4j-介绍\"><a href=\"#SLF4J-Log4j-介绍\" class=\"headerlink\" title=\"SLF4J + Log4j 介绍\"></a><strong>SLF4J + Log4j 介绍</strong></h3><p>SLF4j+Log4j 与 JCL+Log4J 的使用方式差不多，主要差异就在 SLF4J 用 用绑定包（slf4j-Log4j12.jar）来告知用哪种日志实现，而 JCL 是通过配置文件来获得该选择哪个日志实现。</p>\n<h3 id=\"SLF4J-Log4j-使用步骤说明\"><a href=\"#SLF4J-Log4j-使用步骤说明\" class=\"headerlink\" title=\"SLF4J + Log4j 使用步骤说明\"></a><strong>SLF4J + Log4j 使用步骤说明</strong></h3><p><strong>（1）选择 jar 包</strong></p>\n<pre><code>slf4j-api.jar + slf4j-log4j12.jar\n</code></pre>\n<p><strong>pom.xml</strong></p>\n<pre><code>&lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n                &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n                &lt;version&gt;1.7.25&lt;/version&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<p><strong>（2）log4j.properties 配置文件</strong></p>\n<p>参考《Log4j 使用步骤说明》</p>\n<p><strong>（3）输出日志的代码示例</strong></p>\n<pre><code>package jpm.slf4jlog4j;\n\n    import org.slf4j.Logger;\n    import org.slf4j.LoggerFactory;\n\n    public class TestSlf4jAndLog4j &#123;\n\n        public static void main(String[] args) &#123;\n            final Logger LOGGER = LoggerFactory.getLogger(TestSlf4jAndLog4j.class);\n            LOGGER.debug(&quot;TestSlf4jAndLog4j debug log：&#123;&#125;&quot;, &quot;debug&quot;);\n            LOGGER.info(&quot;TestSlf4jAndLog4j info log：&#123;&#125;&quot;, &quot;info&quot;);\n            LOGGER.error(&quot;TestSlf4jAndLog4j error log：&#123;&#125;&quot;, &quot;error&quot;);\n        &#125;\n\n    &#125;\n</code></pre>\n<p><strong>（4）打印日志结果</strong></p>\n<p><img src=\"https://pic1.zhimg.com/v2-990aca0df5ebd71d0a29ebad5a5d6858_b.jpg\"><img src=\"https://pic1.zhimg.com/v2-25cbbac94a5b4ad99c08b6ebc3cc12f0_r.jpg\"></p>\n<h3 id=\"五、项目中日志记录遵守哪些原则\"><a href=\"#五、项目中日志记录遵守哪些原则\" class=\"headerlink\" title=\"五、项目中日志记录遵守哪些原则\"></a>五、项目中日志记录遵守哪些原则</h3><h3 id=\"1-阿里巴巴-Java-开发手册的日志规约\"><a href=\"#1-阿里巴巴-Java-开发手册的日志规约\" class=\"headerlink\" title=\"1. 阿里巴巴 Java 开发手册的日志规约\"></a>1. 阿里巴巴 Java 开发手册的日志规约</h3><p>大家可以参考去年 10 月份阿里推出的《阿里巴巴 Java 开发手册（终极版）.pdf》里的第二章第二节 “日志规约” 部分的内容。</p>\n<h3 id=\"2-个人经验总结\"><a href=\"#2-个人经验总结\" class=\"headerlink\" title=\"2. 个人经验总结\"></a>2. 个人经验总结</h3><p>记录项目日志要注意以下几点：</p>\n<ol>\n<li> 注意日志级别，尤其是 info 和 error 不能用混。</li>\n<li> 注意记录信息的准确性，切记日志表达不清楚。</li>\n<li> 注意不同的代码段日志说明不能重复。</li>\n<li> 捕获异常后，要及时记录异常详细信息，并把异常传递到外部。</li>\n<li> 时刻铭记，日志的记录是为了后期查询问题带来方便，因此重要的代码务必要记录日志。</li>\n</ol>\n<h3 id=\"六、一个推荐的项目-Java-日志实例\"><a href=\"#六、一个推荐的项目-Java-日志实例\" class=\"headerlink\" title=\"六、一个推荐的项目 Java 日志实例\"></a>六、一个推荐的项目 Java 日志实例</h3><p>经过以上代码的分析，我们项目中使用的日志一般会选用一个日志接口和一个具体的日志实现。</p>\n<p>那么日志接口是选 JCL 呢，还是选 SLF4J 呢？下面我们把他俩做个对比，具体日志实现为 Log4j，如下图：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d80377fa8f2af3220eb3574ec4bbe8b2_r.jpg\"></p>\n<p>从上图可以看出，用 slf4j 作为日志接口，对项目来说更好一些。</p>\n<p>所以，在实际项目中，我一般建议使用 SLF4J+Log4j 或者 slf4j+logback。</p>\n<p><strong>配置文件参见第四节</strong></p>\n<p><strong>推荐程序片段如下</strong></p>\n<pre><code>try &#123;\n                LOGGER.info(&quot;根据用户编码查询用户信息-开始，userId：&#123;&#125;&quot; , userId);\n                User user = userService.getUserById(userId);\n                LOGGER.info(&quot;根据用户编码查询用户信息-结束，userId：&#123;&#125;&quot; , userId);\n            &#125; catch (CustomException e) &#123;\n                LOGGER.error(&quot;根据用户编码查询用户信息-自定义异常:&#123;&#125;&quot; , e.getMessage());\n                throw new CustomException(&quot;根据用户编码查询用户信息-自定义异常&#123;&#125;&quot; , e.getMessage(), e);\n            &#125; catch (Exception e) &#123;\n                LOGGER.error(&quot;根据用户编码查询用户信息-捕获异常:&#123;&#125;&quot; , e.toString());\n                throw new ServiceException(根据用户编码查询用户信息-捕获异常:&#123;&#125;&quot; , e.toString(), e);\n            &#125;\n</code></pre>\n<p>到此，Java 日志从入门到实战 就结束了，咱们下次再见，谢谢。</p>"},{"title":"Spring Cloud 常见面试题","summary":"微服务架构的组成","abbrlink":19188,"date":"2022-02-05T03:41:46.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021655862.jpg)\n\n# 微服务基础\n\n## 1.什么是微服务架构\n\n​\t微服务架构就是将**单体的应用程序分成多个应用程序**，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。\n\n## 2.为什么需要学习Spring Cloud\n\n- 首先Spring Cloud基于Spring Boot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得 Spring MVC ，Mybatis 错综复杂的配置，有了Spring Boot，这些东西都不需要了，Spring Boot好处不再赘诉，Spring Cloud就基于Spring Boot把市场上优秀的服务框架组合起来，通过Spring Boot风 格进行再封装屏蔽掉了复杂的配置和实现原理 \n- 什么叫做开箱即用？即使是当年的黄金搭档 Dubbo + ZooKeeper下载配置起来也是颇费心神的！而 Spring Cloud完成这些只需要一个jar的依赖就可以了！ \n- Spring Cloud大多数子模块都是直击痛点，像 Zuul 解决的跨域，Fegin 解决的负载均衡，Hystrix的熔 断机制等等等等\n\n## 3. Spring Cloud 是什么\n\n- Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如 **服务发现注册**、**配置中心**、**智能路由**、**消息总线**、**负载均衡**、**断路器**、**数据监控**等，都可以用Spring Boot的开发风格做到一键启动和部署。\n\n-  Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留 出了一套简单易懂、易部署和易维护的分布式系统开发工具包\n\n## 4. Spring Cloud的优缺点\n\n优点\n\n1. 耦合低\n2. 配置简单\n3. 跨平台\n4. 可配置独立的数据库\n5. 可以组件间之间通讯\n\n缺点：\n\n1. 部署麻烦\n2. 数据管理麻烦\n3. 系统集成测试\n4. 性能监控复杂\n\n## 5. Spring Boot 和 Spring Cloud 区别？\n\n- Spring Boot 专注单体快速开发\n\n- Spring Cloud 关注全局微服务协调整理治理框架，将Spring Boot 单体微服务整个管理\n\n- 各个微服务之间提供，配置管理，服务发现，断路器，路由，微代理，消息总线，全局锁，决策竞选，分布式会话等\n\n## 6.Spring Cloud 和 Spring Boot 版本对应关系?\n\n| Release Train       | Boot Version                          |\n| :------------------ | :------------------------------------ |\n| 2020.0.x aka Ilford | 2.4.x, 2.5.x (Starting with 2020.0.3) |\n| Hoxton              | 2.2.x, 2.3.x (Starting with SR5)      |\n| Greenwich           | 2.1.x                                 |\n| Finchley            | 2.0.x                                 |\n| Edgware             | 1.5.x                                 |\n| Dalston             | 1.5.x                                 |\n\n## 7.SpringCloud由什么组成\n\n这里列举几个主要的组件\n\n- Eureka 服务注册和发现\n- Zuul 网关\n- Ribbon 负载均衡\n- Feign 声明式Web服务客户端\n- Hystrix 断路器\n- Config 分布式统一配置管理\n\n# Eureka 篇\n\n## 8.服务注册和发现是什么意思？Spring Cloud 如何实现的?\n\n​\t一般Spring Cloud 项目由多个模块服务组成，通常在属性文件中进行配置，随着越来越多的服务开发和部署，添加修改属性变得复杂。由于所有服务都通过Eureka 服务注册统一由Eureka服务管理并通过Eureka完成查找，这样就无需知道服务的地的任何修改了。\n\n## 9.什么是Eureka\n\n​\tEureka 作为 Spring Cloud 服务注册中心，系统中的服务使用 Eureka 客户端将其连接 Eureka Service 中并保持心跳，可以通过 Eureka 服务来监控其他微服务是否正常运行\n\n## 10.Eureka 如何实现高可用\n\n​\t通过集群注册多台 Eureka，将各个 微服务 相互注册\n\n## 11.Eureka 的自我保护机制\n\n​\t默认情况下，如果 Eureka 服务一定时间没有收到某个微服务的心跳，那个Eureka 服务会进入自我保护模式，在该模式下 Eureka 服务会保护注册表中的信息，不删除注册表中的数据，当网路恢复后，自动退出保护模式。\n\n## 12.DiscoveryClient 作用\n\n​\t可以从注册中心中的服务别名来注册服务器信息\n\n## 13.Eureka 和ZooKeeper 的区别\n\n1. ZooKeeper 的节点服务挂了要选举，选举期间的注册服务瘫痪\n2. Eureka的各个节点平等，服务器挂了没关系，只要由一台可以保证服务即可，如果数据不是最新的，可能是启动了自我保护机制导致的。\n\n3. Eureka 本质是工程，ZooKeeper 是进程\n4. ZooKeeper 保证CP，Eureka 保证 AP\n\n> CAP: C:一致性、A:可用性、P:分区容错性\n\n# Zuul 篇\n\n## 14.什么是网关\n\n- 网关相当与网络服务框架的入口，所有网络请求都必须通过网关才能转发到具体的服务\n\n## 15.作用是什么\n\n- 统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单\n\n## 16.什么是Spring Cloud Zuul (服务网关)\n\n- Spring Cloud 的一套路由方案，会根据请求路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，对外隐蔽了微服务的真正接口地址，\n  三个重要概念\n  - 动态路由表：Zuul 支持 Eureka 路由，手动配置路由\n  - 路由定位： 根据请求路径，Zuul 有自己一套定位服务规则以及路由表达式匹配\n  - 反向代理：客户端请求到路由网关，网关手里后，目标发送请求，拿到相应后给到客户端\n- 应用场景：\n  - 对外暴露\n  - 权限校验\n  - 服务聚合\n  - 日志审计\n\n## 17.网关和过滤器有什么区别\n\n- 网关对所有的服务请求进行分析过滤，过滤器是对于单个服务而言的\n\n## 18.常用的网关框架\n\n- Nginxx、Zuul、Gateway\n\n## 19.Zuul 和 Nginx区别\n\n- Zuul java 实现，主要是网关服务\n- Nginx C 实现，性能高于Zuul，可以做Zuul集群\n\n## 20.如何设计一套API接口\n\n- API分类：开发API接口 和 内网API接口\n  - 内网：局域网，为内部服务考虑\n  - 外网：外部单位提供接口调用，遵循Oauth2.0权限\n- 考虑安全和幂等性\n\n## 21.ZuulFilter 常用那些方法\n\n- Run()：过滤器的具体业务逻辑 \n- shouldFilter()：判断过滤器是否有效 \n- filterOrder()：过滤器执行顺序 \n- filterType()：过滤器拦截位置\n\n## 22.实现动态Zuul网关路由转发\n\n- 通过path配置拦截请求，通过ServicerId配置中心转发道服务列表，内部使用Ribbon实现本地负载均衡和转发\n\n# Ribbon\n\n## 23.负载均衡的意义\n","source":"_posts/2022-02-23-Spring-Cloud-常见面试题.md","raw":"---\ntitle: Spring Cloud 常见面试题\ntags: 面试\ncategories: 面试\nsummary: 微服务架构的组成\nabbrlink: 19188\ndate: 2022-02-05 11:41:46\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021655862.jpg)\n\n# 微服务基础\n\n## 1.什么是微服务架构\n\n​\t微服务架构就是将**单体的应用程序分成多个应用程序**，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。\n\n## 2.为什么需要学习Spring Cloud\n\n- 首先Spring Cloud基于Spring Boot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得 Spring MVC ，Mybatis 错综复杂的配置，有了Spring Boot，这些东西都不需要了，Spring Boot好处不再赘诉，Spring Cloud就基于Spring Boot把市场上优秀的服务框架组合起来，通过Spring Boot风 格进行再封装屏蔽掉了复杂的配置和实现原理 \n- 什么叫做开箱即用？即使是当年的黄金搭档 Dubbo + ZooKeeper下载配置起来也是颇费心神的！而 Spring Cloud完成这些只需要一个jar的依赖就可以了！ \n- Spring Cloud大多数子模块都是直击痛点，像 Zuul 解决的跨域，Fegin 解决的负载均衡，Hystrix的熔 断机制等等等等\n\n## 3. Spring Cloud 是什么\n\n- Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如 **服务发现注册**、**配置中心**、**智能路由**、**消息总线**、**负载均衡**、**断路器**、**数据监控**等，都可以用Spring Boot的开发风格做到一键启动和部署。\n\n-  Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留 出了一套简单易懂、易部署和易维护的分布式系统开发工具包\n\n## 4. Spring Cloud的优缺点\n\n优点\n\n1. 耦合低\n2. 配置简单\n3. 跨平台\n4. 可配置独立的数据库\n5. 可以组件间之间通讯\n\n缺点：\n\n1. 部署麻烦\n2. 数据管理麻烦\n3. 系统集成测试\n4. 性能监控复杂\n\n## 5. Spring Boot 和 Spring Cloud 区别？\n\n- Spring Boot 专注单体快速开发\n\n- Spring Cloud 关注全局微服务协调整理治理框架，将Spring Boot 单体微服务整个管理\n\n- 各个微服务之间提供，配置管理，服务发现，断路器，路由，微代理，消息总线，全局锁，决策竞选，分布式会话等\n\n## 6.Spring Cloud 和 Spring Boot 版本对应关系?\n\n| Release Train       | Boot Version                          |\n| :------------------ | :------------------------------------ |\n| 2020.0.x aka Ilford | 2.4.x, 2.5.x (Starting with 2020.0.3) |\n| Hoxton              | 2.2.x, 2.3.x (Starting with SR5)      |\n| Greenwich           | 2.1.x                                 |\n| Finchley            | 2.0.x                                 |\n| Edgware             | 1.5.x                                 |\n| Dalston             | 1.5.x                                 |\n\n## 7.SpringCloud由什么组成\n\n这里列举几个主要的组件\n\n- Eureka 服务注册和发现\n- Zuul 网关\n- Ribbon 负载均衡\n- Feign 声明式Web服务客户端\n- Hystrix 断路器\n- Config 分布式统一配置管理\n\n# Eureka 篇\n\n## 8.服务注册和发现是什么意思？Spring Cloud 如何实现的?\n\n​\t一般Spring Cloud 项目由多个模块服务组成，通常在属性文件中进行配置，随着越来越多的服务开发和部署，添加修改属性变得复杂。由于所有服务都通过Eureka 服务注册统一由Eureka服务管理并通过Eureka完成查找，这样就无需知道服务的地的任何修改了。\n\n## 9.什么是Eureka\n\n​\tEureka 作为 Spring Cloud 服务注册中心，系统中的服务使用 Eureka 客户端将其连接 Eureka Service 中并保持心跳，可以通过 Eureka 服务来监控其他微服务是否正常运行\n\n## 10.Eureka 如何实现高可用\n\n​\t通过集群注册多台 Eureka，将各个 微服务 相互注册\n\n## 11.Eureka 的自我保护机制\n\n​\t默认情况下，如果 Eureka 服务一定时间没有收到某个微服务的心跳，那个Eureka 服务会进入自我保护模式，在该模式下 Eureka 服务会保护注册表中的信息，不删除注册表中的数据，当网路恢复后，自动退出保护模式。\n\n## 12.DiscoveryClient 作用\n\n​\t可以从注册中心中的服务别名来注册服务器信息\n\n## 13.Eureka 和ZooKeeper 的区别\n\n1. ZooKeeper 的节点服务挂了要选举，选举期间的注册服务瘫痪\n2. Eureka的各个节点平等，服务器挂了没关系，只要由一台可以保证服务即可，如果数据不是最新的，可能是启动了自我保护机制导致的。\n\n3. Eureka 本质是工程，ZooKeeper 是进程\n4. ZooKeeper 保证CP，Eureka 保证 AP\n\n> CAP: C:一致性、A:可用性、P:分区容错性\n\n# Zuul 篇\n\n## 14.什么是网关\n\n- 网关相当与网络服务框架的入口，所有网络请求都必须通过网关才能转发到具体的服务\n\n## 15.作用是什么\n\n- 统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单\n\n## 16.什么是Spring Cloud Zuul (服务网关)\n\n- Spring Cloud 的一套路由方案，会根据请求路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，对外隐蔽了微服务的真正接口地址，\n  三个重要概念\n  - 动态路由表：Zuul 支持 Eureka 路由，手动配置路由\n  - 路由定位： 根据请求路径，Zuul 有自己一套定位服务规则以及路由表达式匹配\n  - 反向代理：客户端请求到路由网关，网关手里后，目标发送请求，拿到相应后给到客户端\n- 应用场景：\n  - 对外暴露\n  - 权限校验\n  - 服务聚合\n  - 日志审计\n\n## 17.网关和过滤器有什么区别\n\n- 网关对所有的服务请求进行分析过滤，过滤器是对于单个服务而言的\n\n## 18.常用的网关框架\n\n- Nginxx、Zuul、Gateway\n\n## 19.Zuul 和 Nginx区别\n\n- Zuul java 实现，主要是网关服务\n- Nginx C 实现，性能高于Zuul，可以做Zuul集群\n\n## 20.如何设计一套API接口\n\n- API分类：开发API接口 和 内网API接口\n  - 内网：局域网，为内部服务考虑\n  - 外网：外部单位提供接口调用，遵循Oauth2.0权限\n- 考虑安全和幂等性\n\n## 21.ZuulFilter 常用那些方法\n\n- Run()：过滤器的具体业务逻辑 \n- shouldFilter()：判断过滤器是否有效 \n- filterOrder()：过滤器执行顺序 \n- filterType()：过滤器拦截位置\n\n## 22.实现动态Zuul网关路由转发\n\n- 通过path配置拦截请求，通过ServicerId配置中心转发道服务列表，内部使用Ribbon实现本地负载均衡和转发\n\n# Ribbon\n\n## 23.负载均衡的意义\n","slug":"Spring-Cloud-常见面试题","published":1,"updated":"2024-12-16T12:11:11.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyo6000pj0krca68b6ql","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021655862.jpg\"></p>\n<h1 id=\"微服务基础\"><a href=\"#微服务基础\" class=\"headerlink\" title=\"微服务基础\"></a>微服务基础</h1><h2 id=\"1-什么是微服务架构\"><a href=\"#1-什么是微服务架构\" class=\"headerlink\" title=\"1.什么是微服务架构\"></a>1.什么是微服务架构</h2><p>​    微服务架构就是将<strong>单体的应用程序分成多个应用程序</strong>，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。</p>\n<h2 id=\"2-为什么需要学习Spring-Cloud\"><a href=\"#2-为什么需要学习Spring-Cloud\" class=\"headerlink\" title=\"2.为什么需要学习Spring Cloud\"></a>2.为什么需要学习Spring Cloud</h2><ul>\n<li>首先Spring Cloud基于Spring Boot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得 Spring MVC ，Mybatis 错综复杂的配置，有了Spring Boot，这些东西都不需要了，Spring Boot好处不再赘诉，Spring Cloud就基于Spring Boot把市场上优秀的服务框架组合起来，通过Spring Boot风 格进行再封装屏蔽掉了复杂的配置和实现原理 </li>\n<li>什么叫做开箱即用？即使是当年的黄金搭档 Dubbo + ZooKeeper下载配置起来也是颇费心神的！而 Spring Cloud完成这些只需要一个jar的依赖就可以了！ </li>\n<li>Spring Cloud大多数子模块都是直击痛点，像 Zuul 解决的跨域，Fegin 解决的负载均衡，Hystrix的熔 断机制等等等等</li>\n</ul>\n<h2 id=\"3-Spring-Cloud-是什么\"><a href=\"#3-Spring-Cloud-是什么\" class=\"headerlink\" title=\"3. Spring Cloud 是什么\"></a>3. Spring Cloud 是什么</h2><ul>\n<li><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如 <strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>智能路由</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用Spring Boot的开发风格做到一键启动和部署。</p>\n</li>\n<li><p> Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留 出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>\n</li>\n</ul>\n<h2 id=\"4-Spring-Cloud的优缺点\"><a href=\"#4-Spring-Cloud的优缺点\" class=\"headerlink\" title=\"4. Spring Cloud的优缺点\"></a>4. Spring Cloud的优缺点</h2><p>优点</p>\n<ol>\n<li>耦合低</li>\n<li>配置简单</li>\n<li>跨平台</li>\n<li>可配置独立的数据库</li>\n<li>可以组件间之间通讯</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>部署麻烦</li>\n<li>数据管理麻烦</li>\n<li>系统集成测试</li>\n<li>性能监控复杂</li>\n</ol>\n<h2 id=\"5-Spring-Boot-和-Spring-Cloud-区别？\"><a href=\"#5-Spring-Boot-和-Spring-Cloud-区别？\" class=\"headerlink\" title=\"5. Spring Boot 和 Spring Cloud 区别？\"></a>5. Spring Boot 和 Spring Cloud 区别？</h2><ul>\n<li><p>Spring Boot 专注单体快速开发</p>\n</li>\n<li><p>Spring Cloud 关注全局微服务协调整理治理框架，将Spring Boot 单体微服务整个管理</p>\n</li>\n<li><p>各个微服务之间提供，配置管理，服务发现，断路器，路由，微代理，消息总线，全局锁，决策竞选，分布式会话等</p>\n</li>\n</ul>\n<h2 id=\"6-Spring-Cloud-和-Spring-Boot-版本对应关系\"><a href=\"#6-Spring-Cloud-和-Spring-Boot-版本对应关系\" class=\"headerlink\" title=\"6.Spring Cloud 和 Spring Boot 版本对应关系?\"></a>6.Spring Cloud 和 Spring Boot 版本对应关系?</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Release Train</th>\n<th align=\"left\">Boot Version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2020.0.x aka Ilford</td>\n<td align=\"left\">2.4.x, 2.5.x (Starting with 2020.0.3)</td>\n</tr>\n<tr>\n<td align=\"left\">Hoxton</td>\n<td align=\"left\">2.2.x, 2.3.x (Starting with SR5)</td>\n</tr>\n<tr>\n<td align=\"left\">Greenwich</td>\n<td align=\"left\">2.1.x</td>\n</tr>\n<tr>\n<td align=\"left\">Finchley</td>\n<td align=\"left\">2.0.x</td>\n</tr>\n<tr>\n<td align=\"left\">Edgware</td>\n<td align=\"left\">1.5.x</td>\n</tr>\n<tr>\n<td align=\"left\">Dalston</td>\n<td align=\"left\">1.5.x</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-SpringCloud由什么组成\"><a href=\"#7-SpringCloud由什么组成\" class=\"headerlink\" title=\"7.SpringCloud由什么组成\"></a>7.SpringCloud由什么组成</h2><p>这里列举几个主要的组件</p>\n<ul>\n<li>Eureka 服务注册和发现</li>\n<li>Zuul 网关</li>\n<li>Ribbon 负载均衡</li>\n<li>Feign 声明式Web服务客户端</li>\n<li>Hystrix 断路器</li>\n<li>Config 分布式统一配置管理</li>\n</ul>\n<h1 id=\"Eureka-篇\"><a href=\"#Eureka-篇\" class=\"headerlink\" title=\"Eureka 篇\"></a>Eureka 篇</h1><h2 id=\"8-服务注册和发现是什么意思？Spring-Cloud-如何实现的\"><a href=\"#8-服务注册和发现是什么意思？Spring-Cloud-如何实现的\" class=\"headerlink\" title=\"8.服务注册和发现是什么意思？Spring Cloud 如何实现的?\"></a>8.服务注册和发现是什么意思？Spring Cloud 如何实现的?</h2><p>​    一般Spring Cloud 项目由多个模块服务组成，通常在属性文件中进行配置，随着越来越多的服务开发和部署，添加修改属性变得复杂。由于所有服务都通过Eureka 服务注册统一由Eureka服务管理并通过Eureka完成查找，这样就无需知道服务的地的任何修改了。</p>\n<h2 id=\"9-什么是Eureka\"><a href=\"#9-什么是Eureka\" class=\"headerlink\" title=\"9.什么是Eureka\"></a>9.什么是Eureka</h2><p>​    Eureka 作为 Spring Cloud 服务注册中心，系统中的服务使用 Eureka 客户端将其连接 Eureka Service 中并保持心跳，可以通过 Eureka 服务来监控其他微服务是否正常运行</p>\n<h2 id=\"10-Eureka-如何实现高可用\"><a href=\"#10-Eureka-如何实现高可用\" class=\"headerlink\" title=\"10.Eureka 如何实现高可用\"></a>10.Eureka 如何实现高可用</h2><p>​    通过集群注册多台 Eureka，将各个 微服务 相互注册</p>\n<h2 id=\"11-Eureka-的自我保护机制\"><a href=\"#11-Eureka-的自我保护机制\" class=\"headerlink\" title=\"11.Eureka 的自我保护机制\"></a>11.Eureka 的自我保护机制</h2><p>​    默认情况下，如果 Eureka 服务一定时间没有收到某个微服务的心跳，那个Eureka 服务会进入自我保护模式，在该模式下 Eureka 服务会保护注册表中的信息，不删除注册表中的数据，当网路恢复后，自动退出保护模式。</p>\n<h2 id=\"12-DiscoveryClient-作用\"><a href=\"#12-DiscoveryClient-作用\" class=\"headerlink\" title=\"12.DiscoveryClient 作用\"></a>12.DiscoveryClient 作用</h2><p>​    可以从注册中心中的服务别名来注册服务器信息</p>\n<h2 id=\"13-Eureka-和ZooKeeper-的区别\"><a href=\"#13-Eureka-和ZooKeeper-的区别\" class=\"headerlink\" title=\"13.Eureka 和ZooKeeper 的区别\"></a>13.Eureka 和ZooKeeper 的区别</h2><ol>\n<li><p>ZooKeeper 的节点服务挂了要选举，选举期间的注册服务瘫痪</p>\n</li>\n<li><p>Eureka的各个节点平等，服务器挂了没关系，只要由一台可以保证服务即可，如果数据不是最新的，可能是启动了自我保护机制导致的。</p>\n</li>\n<li><p>Eureka 本质是工程，ZooKeeper 是进程</p>\n</li>\n<li><p>ZooKeeper 保证CP，Eureka 保证 AP</p>\n</li>\n</ol>\n<blockquote>\n<p>CAP: C:一致性、A:可用性、P:分区容错性</p>\n</blockquote>\n<h1 id=\"Zuul-篇\"><a href=\"#Zuul-篇\" class=\"headerlink\" title=\"Zuul 篇\"></a>Zuul 篇</h1><h2 id=\"14-什么是网关\"><a href=\"#14-什么是网关\" class=\"headerlink\" title=\"14.什么是网关\"></a>14.什么是网关</h2><ul>\n<li>网关相当与网络服务框架的入口，所有网络请求都必须通过网关才能转发到具体的服务</li>\n</ul>\n<h2 id=\"15-作用是什么\"><a href=\"#15-作用是什么\" class=\"headerlink\" title=\"15.作用是什么\"></a>15.作用是什么</h2><ul>\n<li>统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单</li>\n</ul>\n<h2 id=\"16-什么是Spring-Cloud-Zuul-服务网关\"><a href=\"#16-什么是Spring-Cloud-Zuul-服务网关\" class=\"headerlink\" title=\"16.什么是Spring Cloud Zuul (服务网关)\"></a>16.什么是Spring Cloud Zuul (服务网关)</h2><ul>\n<li>Spring Cloud 的一套路由方案，会根据请求路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，对外隐蔽了微服务的真正接口地址，<br>三个重要概念<ul>\n<li>动态路由表：Zuul 支持 Eureka 路由，手动配置路由</li>\n<li>路由定位： 根据请求路径，Zuul 有自己一套定位服务规则以及路由表达式匹配</li>\n<li>反向代理：客户端请求到路由网关，网关手里后，目标发送请求，拿到相应后给到客户端</li>\n</ul>\n</li>\n<li>应用场景：<ul>\n<li>对外暴露</li>\n<li>权限校验</li>\n<li>服务聚合</li>\n<li>日志审计</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"17-网关和过滤器有什么区别\"><a href=\"#17-网关和过滤器有什么区别\" class=\"headerlink\" title=\"17.网关和过滤器有什么区别\"></a>17.网关和过滤器有什么区别</h2><ul>\n<li>网关对所有的服务请求进行分析过滤，过滤器是对于单个服务而言的</li>\n</ul>\n<h2 id=\"18-常用的网关框架\"><a href=\"#18-常用的网关框架\" class=\"headerlink\" title=\"18.常用的网关框架\"></a>18.常用的网关框架</h2><ul>\n<li>Nginxx、Zuul、Gateway</li>\n</ul>\n<h2 id=\"19-Zuul-和-Nginx区别\"><a href=\"#19-Zuul-和-Nginx区别\" class=\"headerlink\" title=\"19.Zuul 和 Nginx区别\"></a>19.Zuul 和 Nginx区别</h2><ul>\n<li>Zuul java 实现，主要是网关服务</li>\n<li>Nginx C 实现，性能高于Zuul，可以做Zuul集群</li>\n</ul>\n<h2 id=\"20-如何设计一套API接口\"><a href=\"#20-如何设计一套API接口\" class=\"headerlink\" title=\"20.如何设计一套API接口\"></a>20.如何设计一套API接口</h2><ul>\n<li>API分类：开发API接口 和 内网API接口<ul>\n<li>内网：局域网，为内部服务考虑</li>\n<li>外网：外部单位提供接口调用，遵循Oauth2.0权限</li>\n</ul>\n</li>\n<li>考虑安全和幂等性</li>\n</ul>\n<h2 id=\"21-ZuulFilter-常用那些方法\"><a href=\"#21-ZuulFilter-常用那些方法\" class=\"headerlink\" title=\"21.ZuulFilter 常用那些方法\"></a>21.ZuulFilter 常用那些方法</h2><ul>\n<li>Run()：过滤器的具体业务逻辑 </li>\n<li>shouldFilter()：判断过滤器是否有效 </li>\n<li>filterOrder()：过滤器执行顺序 </li>\n<li>filterType()：过滤器拦截位置</li>\n</ul>\n<h2 id=\"22-实现动态Zuul网关路由转发\"><a href=\"#22-实现动态Zuul网关路由转发\" class=\"headerlink\" title=\"22.实现动态Zuul网关路由转发\"></a>22.实现动态Zuul网关路由转发</h2><ul>\n<li>通过path配置拦截请求，通过ServicerId配置中心转发道服务列表，内部使用Ribbon实现本地负载均衡和转发</li>\n</ul>\n<h1 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h1><h2 id=\"23-负载均衡的意义\"><a href=\"#23-负载均衡的意义\" class=\"headerlink\" title=\"23.负载均衡的意义\"></a>23.负载均衡的意义</h2>","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021655862.jpg\"></p>\n<h1 id=\"微服务基础\"><a href=\"#微服务基础\" class=\"headerlink\" title=\"微服务基础\"></a>微服务基础</h1><h2 id=\"1-什么是微服务架构\"><a href=\"#1-什么是微服务架构\" class=\"headerlink\" title=\"1.什么是微服务架构\"></a>1.什么是微服务架构</h2><p>​    微服务架构就是将<strong>单体的应用程序分成多个应用程序</strong>，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管理。</p>\n<h2 id=\"2-为什么需要学习Spring-Cloud\"><a href=\"#2-为什么需要学习Spring-Cloud\" class=\"headerlink\" title=\"2.为什么需要学习Spring Cloud\"></a>2.为什么需要学习Spring Cloud</h2><ul>\n<li>首先Spring Cloud基于Spring Boot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得 Spring MVC ，Mybatis 错综复杂的配置，有了Spring Boot，这些东西都不需要了，Spring Boot好处不再赘诉，Spring Cloud就基于Spring Boot把市场上优秀的服务框架组合起来，通过Spring Boot风 格进行再封装屏蔽掉了复杂的配置和实现原理 </li>\n<li>什么叫做开箱即用？即使是当年的黄金搭档 Dubbo + ZooKeeper下载配置起来也是颇费心神的！而 Spring Cloud完成这些只需要一个jar的依赖就可以了！ </li>\n<li>Spring Cloud大多数子模块都是直击痛点，像 Zuul 解决的跨域，Fegin 解决的负载均衡，Hystrix的熔 断机制等等等等</li>\n</ul>\n<h2 id=\"3-Spring-Cloud-是什么\"><a href=\"#3-Spring-Cloud-是什么\" class=\"headerlink\" title=\"3. Spring Cloud 是什么\"></a>3. Spring Cloud 是什么</h2><ul>\n<li><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如 <strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>智能路由</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用Spring Boot的开发风格做到一键启动和部署。</p>\n</li>\n<li><p> Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留 出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>\n</li>\n</ul>\n<h2 id=\"4-Spring-Cloud的优缺点\"><a href=\"#4-Spring-Cloud的优缺点\" class=\"headerlink\" title=\"4. Spring Cloud的优缺点\"></a>4. Spring Cloud的优缺点</h2><p>优点</p>\n<ol>\n<li>耦合低</li>\n<li>配置简单</li>\n<li>跨平台</li>\n<li>可配置独立的数据库</li>\n<li>可以组件间之间通讯</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>部署麻烦</li>\n<li>数据管理麻烦</li>\n<li>系统集成测试</li>\n<li>性能监控复杂</li>\n</ol>\n<h2 id=\"5-Spring-Boot-和-Spring-Cloud-区别？\"><a href=\"#5-Spring-Boot-和-Spring-Cloud-区别？\" class=\"headerlink\" title=\"5. Spring Boot 和 Spring Cloud 区别？\"></a>5. Spring Boot 和 Spring Cloud 区别？</h2><ul>\n<li><p>Spring Boot 专注单体快速开发</p>\n</li>\n<li><p>Spring Cloud 关注全局微服务协调整理治理框架，将Spring Boot 单体微服务整个管理</p>\n</li>\n<li><p>各个微服务之间提供，配置管理，服务发现，断路器，路由，微代理，消息总线，全局锁，决策竞选，分布式会话等</p>\n</li>\n</ul>\n<h2 id=\"6-Spring-Cloud-和-Spring-Boot-版本对应关系\"><a href=\"#6-Spring-Cloud-和-Spring-Boot-版本对应关系\" class=\"headerlink\" title=\"6.Spring Cloud 和 Spring Boot 版本对应关系?\"></a>6.Spring Cloud 和 Spring Boot 版本对应关系?</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Release Train</th>\n<th align=\"left\">Boot Version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2020.0.x aka Ilford</td>\n<td align=\"left\">2.4.x, 2.5.x (Starting with 2020.0.3)</td>\n</tr>\n<tr>\n<td align=\"left\">Hoxton</td>\n<td align=\"left\">2.2.x, 2.3.x (Starting with SR5)</td>\n</tr>\n<tr>\n<td align=\"left\">Greenwich</td>\n<td align=\"left\">2.1.x</td>\n</tr>\n<tr>\n<td align=\"left\">Finchley</td>\n<td align=\"left\">2.0.x</td>\n</tr>\n<tr>\n<td align=\"left\">Edgware</td>\n<td align=\"left\">1.5.x</td>\n</tr>\n<tr>\n<td align=\"left\">Dalston</td>\n<td align=\"left\">1.5.x</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-SpringCloud由什么组成\"><a href=\"#7-SpringCloud由什么组成\" class=\"headerlink\" title=\"7.SpringCloud由什么组成\"></a>7.SpringCloud由什么组成</h2><p>这里列举几个主要的组件</p>\n<ul>\n<li>Eureka 服务注册和发现</li>\n<li>Zuul 网关</li>\n<li>Ribbon 负载均衡</li>\n<li>Feign 声明式Web服务客户端</li>\n<li>Hystrix 断路器</li>\n<li>Config 分布式统一配置管理</li>\n</ul>\n<h1 id=\"Eureka-篇\"><a href=\"#Eureka-篇\" class=\"headerlink\" title=\"Eureka 篇\"></a>Eureka 篇</h1><h2 id=\"8-服务注册和发现是什么意思？Spring-Cloud-如何实现的\"><a href=\"#8-服务注册和发现是什么意思？Spring-Cloud-如何实现的\" class=\"headerlink\" title=\"8.服务注册和发现是什么意思？Spring Cloud 如何实现的?\"></a>8.服务注册和发现是什么意思？Spring Cloud 如何实现的?</h2><p>​    一般Spring Cloud 项目由多个模块服务组成，通常在属性文件中进行配置，随着越来越多的服务开发和部署，添加修改属性变得复杂。由于所有服务都通过Eureka 服务注册统一由Eureka服务管理并通过Eureka完成查找，这样就无需知道服务的地的任何修改了。</p>\n<h2 id=\"9-什么是Eureka\"><a href=\"#9-什么是Eureka\" class=\"headerlink\" title=\"9.什么是Eureka\"></a>9.什么是Eureka</h2><p>​    Eureka 作为 Spring Cloud 服务注册中心，系统中的服务使用 Eureka 客户端将其连接 Eureka Service 中并保持心跳，可以通过 Eureka 服务来监控其他微服务是否正常运行</p>\n<h2 id=\"10-Eureka-如何实现高可用\"><a href=\"#10-Eureka-如何实现高可用\" class=\"headerlink\" title=\"10.Eureka 如何实现高可用\"></a>10.Eureka 如何实现高可用</h2><p>​    通过集群注册多台 Eureka，将各个 微服务 相互注册</p>\n<h2 id=\"11-Eureka-的自我保护机制\"><a href=\"#11-Eureka-的自我保护机制\" class=\"headerlink\" title=\"11.Eureka 的自我保护机制\"></a>11.Eureka 的自我保护机制</h2><p>​    默认情况下，如果 Eureka 服务一定时间没有收到某个微服务的心跳，那个Eureka 服务会进入自我保护模式，在该模式下 Eureka 服务会保护注册表中的信息，不删除注册表中的数据，当网路恢复后，自动退出保护模式。</p>\n<h2 id=\"12-DiscoveryClient-作用\"><a href=\"#12-DiscoveryClient-作用\" class=\"headerlink\" title=\"12.DiscoveryClient 作用\"></a>12.DiscoveryClient 作用</h2><p>​    可以从注册中心中的服务别名来注册服务器信息</p>\n<h2 id=\"13-Eureka-和ZooKeeper-的区别\"><a href=\"#13-Eureka-和ZooKeeper-的区别\" class=\"headerlink\" title=\"13.Eureka 和ZooKeeper 的区别\"></a>13.Eureka 和ZooKeeper 的区别</h2><ol>\n<li><p>ZooKeeper 的节点服务挂了要选举，选举期间的注册服务瘫痪</p>\n</li>\n<li><p>Eureka的各个节点平等，服务器挂了没关系，只要由一台可以保证服务即可，如果数据不是最新的，可能是启动了自我保护机制导致的。</p>\n</li>\n<li><p>Eureka 本质是工程，ZooKeeper 是进程</p>\n</li>\n<li><p>ZooKeeper 保证CP，Eureka 保证 AP</p>\n</li>\n</ol>\n<blockquote>\n<p>CAP: C:一致性、A:可用性、P:分区容错性</p>\n</blockquote>\n<h1 id=\"Zuul-篇\"><a href=\"#Zuul-篇\" class=\"headerlink\" title=\"Zuul 篇\"></a>Zuul 篇</h1><h2 id=\"14-什么是网关\"><a href=\"#14-什么是网关\" class=\"headerlink\" title=\"14.什么是网关\"></a>14.什么是网关</h2><ul>\n<li>网关相当与网络服务框架的入口，所有网络请求都必须通过网关才能转发到具体的服务</li>\n</ul>\n<h2 id=\"15-作用是什么\"><a href=\"#15-作用是什么\" class=\"headerlink\" title=\"15.作用是什么\"></a>15.作用是什么</h2><ul>\n<li>统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单</li>\n</ul>\n<h2 id=\"16-什么是Spring-Cloud-Zuul-服务网关\"><a href=\"#16-什么是Spring-Cloud-Zuul-服务网关\" class=\"headerlink\" title=\"16.什么是Spring Cloud Zuul (服务网关)\"></a>16.什么是Spring Cloud Zuul (服务网关)</h2><ul>\n<li>Spring Cloud 的一套路由方案，会根据请求路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，对外隐蔽了微服务的真正接口地址，<br>三个重要概念<ul>\n<li>动态路由表：Zuul 支持 Eureka 路由，手动配置路由</li>\n<li>路由定位： 根据请求路径，Zuul 有自己一套定位服务规则以及路由表达式匹配</li>\n<li>反向代理：客户端请求到路由网关，网关手里后，目标发送请求，拿到相应后给到客户端</li>\n</ul>\n</li>\n<li>应用场景：<ul>\n<li>对外暴露</li>\n<li>权限校验</li>\n<li>服务聚合</li>\n<li>日志审计</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"17-网关和过滤器有什么区别\"><a href=\"#17-网关和过滤器有什么区别\" class=\"headerlink\" title=\"17.网关和过滤器有什么区别\"></a>17.网关和过滤器有什么区别</h2><ul>\n<li>网关对所有的服务请求进行分析过滤，过滤器是对于单个服务而言的</li>\n</ul>\n<h2 id=\"18-常用的网关框架\"><a href=\"#18-常用的网关框架\" class=\"headerlink\" title=\"18.常用的网关框架\"></a>18.常用的网关框架</h2><ul>\n<li>Nginxx、Zuul、Gateway</li>\n</ul>\n<h2 id=\"19-Zuul-和-Nginx区别\"><a href=\"#19-Zuul-和-Nginx区别\" class=\"headerlink\" title=\"19.Zuul 和 Nginx区别\"></a>19.Zuul 和 Nginx区别</h2><ul>\n<li>Zuul java 实现，主要是网关服务</li>\n<li>Nginx C 实现，性能高于Zuul，可以做Zuul集群</li>\n</ul>\n<h2 id=\"20-如何设计一套API接口\"><a href=\"#20-如何设计一套API接口\" class=\"headerlink\" title=\"20.如何设计一套API接口\"></a>20.如何设计一套API接口</h2><ul>\n<li>API分类：开发API接口 和 内网API接口<ul>\n<li>内网：局域网，为内部服务考虑</li>\n<li>外网：外部单位提供接口调用，遵循Oauth2.0权限</li>\n</ul>\n</li>\n<li>考虑安全和幂等性</li>\n</ul>\n<h2 id=\"21-ZuulFilter-常用那些方法\"><a href=\"#21-ZuulFilter-常用那些方法\" class=\"headerlink\" title=\"21.ZuulFilter 常用那些方法\"></a>21.ZuulFilter 常用那些方法</h2><ul>\n<li>Run()：过滤器的具体业务逻辑 </li>\n<li>shouldFilter()：判断过滤器是否有效 </li>\n<li>filterOrder()：过滤器执行顺序 </li>\n<li>filterType()：过滤器拦截位置</li>\n</ul>\n<h2 id=\"22-实现动态Zuul网关路由转发\"><a href=\"#22-实现动态Zuul网关路由转发\" class=\"headerlink\" title=\"22.实现动态Zuul网关路由转发\"></a>22.实现动态Zuul网关路由转发</h2><ul>\n<li>通过path配置拦截请求，通过ServicerId配置中心转发道服务列表，内部使用Ribbon实现本地负载均衡和转发</li>\n</ul>\n<h1 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a>Ribbon</h1><h2 id=\"23-负载均衡的意义\"><a href=\"#23-负载均衡的意义\" class=\"headerlink\" title=\"23.负载均衡的意义\"></a>23.负载均衡的意义</h2>"},{"title":"SpringBoot 常见面试题","summary":"SpringBoot原理，简化了Spring配置","abbrlink":10749,"date":"2022-01-22T08:12:10.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021716011.jpg)\n\n<!--more-->\n\n## 1.什么是 SpringBoot \nSpring组件一站式解决方案，主要简化了 Spring 难度，简省了繁重的配置，提供了各种的启动器，是开发上手快\n\n## 2.Spring Boot 优点\n\n1. 开箱即用，原理繁琐配置\n2. 内嵌服务器、安全管理、运行数据监控、运行状态检查、外部化配置\n3. 易上手开发效率高，有完善的第三方start库和官网 starter\n\n总结：**编码、配置、部署、监控** 简单\n\n\n## 2.SpringBoot 启动类注解？它是由那些注解组成？\n@SpringBootApplication\n- @SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能。\n- @EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项\n- @SpringBootApplication(exclude={DataSourceAutoConfiguration.class})\n- @ComponentScan：Spring组件扫描\n\n## 3.yaml是什么\n用来表达数据序列化的参数\n\n## 4.SpringBoot启动方式\n1. main方法\n2. 命令行 java -jar\n3. mvn/gradle\n\n## 5.SpringBoot 需要独立的容器独立？\n内置了Tomcat/Jetty\n\n## 6.SpringBoot自动配置原理\n\t在sprinBoot启动时由 @SpringBootApplication 注解会自动去maven中读取每个 starter 中的 spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把 bean注入SpringContext中 //（SpringContext是Spring的配置文件）\n\n## 7.SpringBoot监视器是什么，如何配置监控？\n\n\tSpring boot actuator 是 spring 启动框架中的重要功能之一。\n\tSpring boot 监视器可帮助您访问生产环境中 **正在运行的应用程序的当前状态** 。\n\t有几个指标必须在生产环境中进行检查和监控。即使一 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接 作为 HTTP URL 访问的REST 端点来检查状态。\n\npom.xml\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\nyml\n\n```yaml\nmanagement:\n    endpoint:\n        health: ## 开启健康监控端点\n            enabled: true\n        beans: ## 开启Bean实例监控端点\n            enabled: true\n```\n\n健康监控开启标志，启动了两个端点，默认之开启 health 和 info 端口\n\n![image-20220223093051031](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png) \n\nyml\n\n```yaml\nmanagement:\n\tendpoints:\n\t\tweb:\n\t\t\texposure:\n\t\t\t\tinclude: \"*\" ## 开启所有端点暴露\n```\n\n\n\n## 8.查看各个监控信息？\n\n/actuator 端点 ，默认开启了两个端点，health 和 info\n\n```json\n{\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:9999/actuator\",\n      \"templated\": false\n    },\n    \"health\": {\n      \"href\": \"http://localhost:9999/actuator/health\", 查看当前服务的是否上线\n      \"templated\": false\n    },\n    \"health-path\": {\n      \"href\": \"http://localhost:9999/actuator/health/{*path}\",\n      \"templated\": true\n    },\n    \"info\": {\n      \"href\": \"http://localhost:9999/actuator/info\",\n      \"templated\": false\n    }\n  }\n}\n```\n\n如果将所有端点暴露\n\n访问路径： ip:port/actuator/xx\n\n![image-20220223094652254](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png) \n\n### loggers 端点\n\n访问 `http://localhost:8080/actuator/loggers` 可以查看当前应用的日志级别等信息：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png) \n\n这里面本身并不特别，但是有一个功能却非常有用，比如我们生产环境日志级别一般都是 info，但是现在有一个 bug 通过 info 级别无法排查，那么我们就可以临时修改 log 级别。\n\n比如上图中的 ROOT 节点是 info 级别，那么我们可以通过 postman 等工具来发一个 post 请求修改日志级别。 \n\n![image-20220223095330889](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png) \n\n修改之后就会发现，日志由原来的 info 变成了 debug： \n\n![image-20220223095351178](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png) \n\n### metrics 端点\n\n非常重要的监控端点，监控内容包含 JVM内存、堆、类加载、处理器和 tomcat 容器等重要的指标\n\n![image-20220223095921378](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png) \n\n### 自定义监控端点 \n\n> 这一部分之后再详介绍\n\n## 9.SpringBoot 中的starter?\n\n可以理解成对依赖的一种合成，starter会把一个或者一套功能相关的依赖包含进来，避免造轮子。\n\n\n\n## 10.什么是SpringProfiles\n\n开发到生产，经过开发（dev）、测试（test）、上线（prod），主要针对不同的的配置。Spring Profiles允许用户根据配置文件（dev/test/prod）来注册bean。\n\n## 11.激活不同环境配置\n\nyml:\n\n```yaml\nspring:\n\tprofiles:\n\t\tactive: dev\n```\n\n   命令行：\n\n```shell\njava -jar xx.jar --spring.profiles.active=dev\n```\n\n## 12.SpringBoot异常处理相关注解？\n\n@ControllerAdvice\n\n@ExceptinoHandler\n\n## 13.SpringBoot1.1 和 2.x的区别？\n\n1. SpringBoot 2基于Spring5和JDK8，Spring 1.x用的最低版本\n2. 配置变更，参数名\n3. SpringBoot 2相关插件最低版本很多都要比原来高\n4. 2.x配置中的中文可以直接读取\n\n## 14. Spring Boot 中如何解决跨域问题 ? \n\n\t后端通过 （CORS，Cross origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ， 现在可以通过实现 **WebMvcConfigurer** 接口然后重写 **addCorsMappings** 方法解决跨域问题。\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n        .allowedOrigins(\"*\")\n        .allowCredentials(true)\n        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n        .maxAge(3600);\n    }\n}\n```\n\n\n\n## 参考：\n\nhttps://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA","source":"_posts/2022-02-22-Spring-Boot-常见面试题.md","raw":"---\ntitle: SpringBoot 常见面试题\ntags: 面试\ncategories: 面试\nsummary: SpringBoot原理，简化了Spring配置\nabbrlink: 10749\ndate: 2022-01-22 16:12:10\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021716011.jpg)\n\n<!--more-->\n\n## 1.什么是 SpringBoot \nSpring组件一站式解决方案，主要简化了 Spring 难度，简省了繁重的配置，提供了各种的启动器，是开发上手快\n\n## 2.Spring Boot 优点\n\n1. 开箱即用，原理繁琐配置\n2. 内嵌服务器、安全管理、运行数据监控、运行状态检查、外部化配置\n3. 易上手开发效率高，有完善的第三方start库和官网 starter\n\n总结：**编码、配置、部署、监控** 简单\n\n\n## 2.SpringBoot 启动类注解？它是由那些注解组成？\n@SpringBootApplication\n- @SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能。\n- @EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项\n- @SpringBootApplication(exclude={DataSourceAutoConfiguration.class})\n- @ComponentScan：Spring组件扫描\n\n## 3.yaml是什么\n用来表达数据序列化的参数\n\n## 4.SpringBoot启动方式\n1. main方法\n2. 命令行 java -jar\n3. mvn/gradle\n\n## 5.SpringBoot 需要独立的容器独立？\n内置了Tomcat/Jetty\n\n## 6.SpringBoot自动配置原理\n\t在sprinBoot启动时由 @SpringBootApplication 注解会自动去maven中读取每个 starter 中的 spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把 bean注入SpringContext中 //（SpringContext是Spring的配置文件）\n\n## 7.SpringBoot监视器是什么，如何配置监控？\n\n\tSpring boot actuator 是 spring 启动框架中的重要功能之一。\n\tSpring boot 监视器可帮助您访问生产环境中 **正在运行的应用程序的当前状态** 。\n\t有几个指标必须在生产环境中进行检查和监控。即使一 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接 作为 HTTP URL 访问的REST 端点来检查状态。\n\npom.xml\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\nyml\n\n```yaml\nmanagement:\n    endpoint:\n        health: ## 开启健康监控端点\n            enabled: true\n        beans: ## 开启Bean实例监控端点\n            enabled: true\n```\n\n健康监控开启标志，启动了两个端点，默认之开启 health 和 info 端口\n\n![image-20220223093051031](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png) \n\nyml\n\n```yaml\nmanagement:\n\tendpoints:\n\t\tweb:\n\t\t\texposure:\n\t\t\t\tinclude: \"*\" ## 开启所有端点暴露\n```\n\n\n\n## 8.查看各个监控信息？\n\n/actuator 端点 ，默认开启了两个端点，health 和 info\n\n```json\n{\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:9999/actuator\",\n      \"templated\": false\n    },\n    \"health\": {\n      \"href\": \"http://localhost:9999/actuator/health\", 查看当前服务的是否上线\n      \"templated\": false\n    },\n    \"health-path\": {\n      \"href\": \"http://localhost:9999/actuator/health/{*path}\",\n      \"templated\": true\n    },\n    \"info\": {\n      \"href\": \"http://localhost:9999/actuator/info\",\n      \"templated\": false\n    }\n  }\n}\n```\n\n如果将所有端点暴露\n\n访问路径： ip:port/actuator/xx\n\n![image-20220223094652254](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png) \n\n### loggers 端点\n\n访问 `http://localhost:8080/actuator/loggers` 可以查看当前应用的日志级别等信息：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png) \n\n这里面本身并不特别，但是有一个功能却非常有用，比如我们生产环境日志级别一般都是 info，但是现在有一个 bug 通过 info 级别无法排查，那么我们就可以临时修改 log 级别。\n\n比如上图中的 ROOT 节点是 info 级别，那么我们可以通过 postman 等工具来发一个 post 请求修改日志级别。 \n\n![image-20220223095330889](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png) \n\n修改之后就会发现，日志由原来的 info 变成了 debug： \n\n![image-20220223095351178](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png) \n\n### metrics 端点\n\n非常重要的监控端点，监控内容包含 JVM内存、堆、类加载、处理器和 tomcat 容器等重要的指标\n\n![image-20220223095921378](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png) \n\n### 自定义监控端点 \n\n> 这一部分之后再详介绍\n\n## 9.SpringBoot 中的starter?\n\n可以理解成对依赖的一种合成，starter会把一个或者一套功能相关的依赖包含进来，避免造轮子。\n\n\n\n## 10.什么是SpringProfiles\n\n开发到生产，经过开发（dev）、测试（test）、上线（prod），主要针对不同的的配置。Spring Profiles允许用户根据配置文件（dev/test/prod）来注册bean。\n\n## 11.激活不同环境配置\n\nyml:\n\n```yaml\nspring:\n\tprofiles:\n\t\tactive: dev\n```\n\n   命令行：\n\n```shell\njava -jar xx.jar --spring.profiles.active=dev\n```\n\n## 12.SpringBoot异常处理相关注解？\n\n@ControllerAdvice\n\n@ExceptinoHandler\n\n## 13.SpringBoot1.1 和 2.x的区别？\n\n1. SpringBoot 2基于Spring5和JDK8，Spring 1.x用的最低版本\n2. 配置变更，参数名\n3. SpringBoot 2相关插件最低版本很多都要比原来高\n4. 2.x配置中的中文可以直接读取\n\n## 14. Spring Boot 中如何解决跨域问题 ? \n\n\t后端通过 （CORS，Cross origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ， 现在可以通过实现 **WebMvcConfigurer** 接口然后重写 **addCorsMappings** 方法解决跨域问题。\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n        .allowedOrigins(\"*\")\n        .allowCredentials(true)\n        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n        .maxAge(3600);\n    }\n}\n```\n\n\n\n## 参考：\n\nhttps://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA","slug":"Spring-Boot-常见面试题","published":1,"updated":"2024-12-16T12:11:11.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyob000vj0krejvkgvde","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021716011.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-什么是-SpringBoot\"><a href=\"#1-什么是-SpringBoot\" class=\"headerlink\" title=\"1.什么是 SpringBoot\"></a>1.什么是 SpringBoot</h2><p>Spring组件一站式解决方案，主要简化了 Spring 难度，简省了繁重的配置，提供了各种的启动器，是开发上手快</p>\n<h2 id=\"2-Spring-Boot-优点\"><a href=\"#2-Spring-Boot-优点\" class=\"headerlink\" title=\"2.Spring Boot 优点\"></a>2.Spring Boot 优点</h2><ol>\n<li>开箱即用，原理繁琐配置</li>\n<li>内嵌服务器、安全管理、运行数据监控、运行状态检查、外部化配置</li>\n<li>易上手开发效率高，有完善的第三方start库和官网 starter</li>\n</ol>\n<p>总结：<strong>编码、配置、部署、监控</strong> 简单</p>\n<h2 id=\"2-SpringBoot-启动类注解？它是由那些注解组成？\"><a href=\"#2-SpringBoot-启动类注解？它是由那些注解组成？\" class=\"headerlink\" title=\"2.SpringBoot 启动类注解？它是由那些注解组成？\"></a>2.SpringBoot 启动类注解？它是由那些注解组成？</h2><p>@SpringBootApplication</p>\n<ul>\n<li>@SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能。</li>\n<li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li>\n<li>@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})</li>\n<li>@ComponentScan：Spring组件扫描</li>\n</ul>\n<h2 id=\"3-yaml是什么\"><a href=\"#3-yaml是什么\" class=\"headerlink\" title=\"3.yaml是什么\"></a>3.yaml是什么</h2><p>用来表达数据序列化的参数</p>\n<h2 id=\"4-SpringBoot启动方式\"><a href=\"#4-SpringBoot启动方式\" class=\"headerlink\" title=\"4.SpringBoot启动方式\"></a>4.SpringBoot启动方式</h2><ol>\n<li>main方法</li>\n<li>命令行 java -jar</li>\n<li>mvn/gradle</li>\n</ol>\n<h2 id=\"5-SpringBoot-需要独立的容器独立？\"><a href=\"#5-SpringBoot-需要独立的容器独立？\" class=\"headerlink\" title=\"5.SpringBoot 需要独立的容器独立？\"></a>5.SpringBoot 需要独立的容器独立？</h2><p>内置了Tomcat/Jetty</p>\n<h2 id=\"6-SpringBoot自动配置原理\"><a href=\"#6-SpringBoot自动配置原理\" class=\"headerlink\" title=\"6.SpringBoot自动配置原理\"></a>6.SpringBoot自动配置原理</h2><pre><code>在sprinBoot启动时由 @SpringBootApplication 注解会自动去maven中读取每个 starter 中的 spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把 bean注入SpringContext中 //（SpringContext是Spring的配置文件）\n</code></pre>\n<h2 id=\"7-SpringBoot监视器是什么，如何配置监控？\"><a href=\"#7-SpringBoot监视器是什么，如何配置监控？\" class=\"headerlink\" title=\"7.SpringBoot监视器是什么，如何配置监控？\"></a>7.SpringBoot监视器是什么，如何配置监控？</h2><pre><code>Spring boot actuator 是 spring 启动框架中的重要功能之一。\nSpring boot 监视器可帮助您访问生产环境中 **正在运行的应用程序的当前状态** 。\n有几个指标必须在生产环境中进行检查和监控。即使一 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接 作为 HTTP URL 访问的REST 端点来检查状态。\n</code></pre>\n<p>pom.xml</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>yml</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">health</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">## 开启健康监控端点</span>\n            <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">beans</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">## 开启Bean实例监控端点</span>\n            <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n</code></pre>\n<p>健康监控开启标志，启动了两个端点，默认之开启 health 和 info 端口</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png\" alt=\"image-20220223093051031\"> </p>\n<p>yml</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token comment\" spellcheck=\"true\">## 开启所有端点暴露</span>\n</code></pre>\n<h2 id=\"8-查看各个监控信息？\"><a href=\"#8-查看各个监控信息？\" class=\"headerlink\" title=\"8.查看各个监控信息？\"></a>8.查看各个监控信息？</h2><p>/actuator 端点 ，默认开启了两个端点，health 和 info</p>\n<pre class=\" language-json\"><code class=\"language-json\">&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">\"_links\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:9999/actuator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:9999/actuator/health\"</span><span class=\"token punctuation\">,</span> 查看当前服务的是否上线\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"health-path\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:9999/actuator/health/&amp;#123;*path&amp;#125;\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"info\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:9999/actuator/info\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"templated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果将所有端点暴露</p>\n<p>访问路径： ip:port/actuator/xx</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png\" alt=\"image-20220223094652254\"> </p>\n<h3 id=\"loggers-端点\"><a href=\"#loggers-端点\" class=\"headerlink\" title=\"loggers 端点\"></a>loggers 端点</h3><p>访问 <code>http://localhost:8080/actuator/loggers</code> 可以查看当前应用的日志级别等信息：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png\"> </p>\n<p>这里面本身并不特别，但是有一个功能却非常有用，比如我们生产环境日志级别一般都是 info，但是现在有一个 bug 通过 info 级别无法排查，那么我们就可以临时修改 log 级别。</p>\n<p>比如上图中的 ROOT 节点是 info 级别，那么我们可以通过 postman 等工具来发一个 post 请求修改日志级别。 </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png\" alt=\"image-20220223095330889\"> </p>\n<p>修改之后就会发现，日志由原来的 info 变成了 debug： </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png\" alt=\"image-20220223095351178\"> </p>\n<h3 id=\"metrics-端点\"><a href=\"#metrics-端点\" class=\"headerlink\" title=\"metrics 端点\"></a>metrics 端点</h3><p>非常重要的监控端点，监控内容包含 JVM内存、堆、类加载、处理器和 tomcat 容器等重要的指标</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png\" alt=\"image-20220223095921378\"> </p>\n<h3 id=\"自定义监控端点\"><a href=\"#自定义监控端点\" class=\"headerlink\" title=\"自定义监控端点\"></a>自定义监控端点</h3><blockquote>\n<p>这一部分之后再详介绍</p>\n</blockquote>\n<h2 id=\"9-SpringBoot-中的starter\"><a href=\"#9-SpringBoot-中的starter\" class=\"headerlink\" title=\"9.SpringBoot 中的starter?\"></a>9.SpringBoot 中的starter?</h2><p>可以理解成对依赖的一种合成，starter会把一个或者一套功能相关的依赖包含进来，避免造轮子。</p>\n<h2 id=\"10-什么是SpringProfiles\"><a href=\"#10-什么是SpringProfiles\" class=\"headerlink\" title=\"10.什么是SpringProfiles\"></a>10.什么是SpringProfiles</h2><p>开发到生产，经过开发（dev）、测试（test）、上线（prod），主要针对不同的的配置。Spring Profiles允许用户根据配置文件（dev/test/prod）来注册bean。</p>\n<h2 id=\"11-激活不同环境配置\"><a href=\"#11-激活不同环境配置\" class=\"headerlink\" title=\"11.激活不同环境配置\"></a>11.激活不同环境配置</h2><p>yml:</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev\n</code></pre>\n<p>   命令行：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">java -jar xx.jar --spring.profiles.active=dev\n</code></pre>\n<h2 id=\"12-SpringBoot异常处理相关注解？\"><a href=\"#12-SpringBoot异常处理相关注解？\" class=\"headerlink\" title=\"12.SpringBoot异常处理相关注解？\"></a>12.SpringBoot异常处理相关注解？</h2><p>@ControllerAdvice</p>\n<p>@ExceptinoHandler</p>\n<h2 id=\"13-SpringBoot1-1-和-2-x的区别？\"><a href=\"#13-SpringBoot1-1-和-2-x的区别？\" class=\"headerlink\" title=\"13.SpringBoot1.1 和 2.x的区别？\"></a>13.SpringBoot1.1 和 2.x的区别？</h2><ol>\n<li>SpringBoot 2基于Spring5和JDK8，Spring 1.x用的最低版本</li>\n<li>配置变更，参数名</li>\n<li>SpringBoot 2相关插件最低版本很多都要比原来高</li>\n<li>2.x配置中的中文可以直接读取</li>\n</ol>\n<h2 id=\"14-Spring-Boot-中如何解决跨域问题\"><a href=\"#14-Spring-Boot-中如何解决跨域问题\" class=\"headerlink\" title=\"14. Spring Boot 中如何解决跨域问题 ?\"></a>14. Spring Boot 中如何解决跨域问题 ?</h2><pre><code>后端通过 （CORS，Cross origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ， 现在可以通过实现 **WebMvcConfigurer** 接口然后重写 **addCorsMappings** 方法解决跨域问题。\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CorsConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span>CorsRegistry registry<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">allowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">maxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA\">https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA</a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021716011.jpg\"></p>","more":"<h2 id=\"1-什么是-SpringBoot\"><a href=\"#1-什么是-SpringBoot\" class=\"headerlink\" title=\"1.什么是 SpringBoot\"></a>1.什么是 SpringBoot</h2><p>Spring组件一站式解决方案，主要简化了 Spring 难度，简省了繁重的配置，提供了各种的启动器，是开发上手快</p>\n<h2 id=\"2-Spring-Boot-优点\"><a href=\"#2-Spring-Boot-优点\" class=\"headerlink\" title=\"2.Spring Boot 优点\"></a>2.Spring Boot 优点</h2><ol>\n<li>开箱即用，原理繁琐配置</li>\n<li>内嵌服务器、安全管理、运行数据监控、运行状态检查、外部化配置</li>\n<li>易上手开发效率高，有完善的第三方start库和官网 starter</li>\n</ol>\n<p>总结：<strong>编码、配置、部署、监控</strong> 简单</p>\n<h2 id=\"2-SpringBoot-启动类注解？它是由那些注解组成？\"><a href=\"#2-SpringBoot-启动类注解？它是由那些注解组成？\" class=\"headerlink\" title=\"2.SpringBoot 启动类注解？它是由那些注解组成？\"></a>2.SpringBoot 启动类注解？它是由那些注解组成？</h2><p>@SpringBootApplication</p>\n<ul>\n<li>@SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能。</li>\n<li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li>\n<li>@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})</li>\n<li>@ComponentScan：Spring组件扫描</li>\n</ul>\n<h2 id=\"3-yaml是什么\"><a href=\"#3-yaml是什么\" class=\"headerlink\" title=\"3.yaml是什么\"></a>3.yaml是什么</h2><p>用来表达数据序列化的参数</p>\n<h2 id=\"4-SpringBoot启动方式\"><a href=\"#4-SpringBoot启动方式\" class=\"headerlink\" title=\"4.SpringBoot启动方式\"></a>4.SpringBoot启动方式</h2><ol>\n<li>main方法</li>\n<li>命令行 java -jar</li>\n<li>mvn/gradle</li>\n</ol>\n<h2 id=\"5-SpringBoot-需要独立的容器独立？\"><a href=\"#5-SpringBoot-需要独立的容器独立？\" class=\"headerlink\" title=\"5.SpringBoot 需要独立的容器独立？\"></a>5.SpringBoot 需要独立的容器独立？</h2><p>内置了Tomcat/Jetty</p>\n<h2 id=\"6-SpringBoot自动配置原理\"><a href=\"#6-SpringBoot自动配置原理\" class=\"headerlink\" title=\"6.SpringBoot自动配置原理\"></a>6.SpringBoot自动配置原理</h2><pre><code>在sprinBoot启动时由 @SpringBootApplication 注解会自动去maven中读取每个 starter 中的 spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把 bean注入SpringContext中 //（SpringContext是Spring的配置文件）\n</code></pre>\n<h2 id=\"7-SpringBoot监视器是什么，如何配置监控？\"><a href=\"#7-SpringBoot监视器是什么，如何配置监控？\" class=\"headerlink\" title=\"7.SpringBoot监视器是什么，如何配置监控？\"></a>7.SpringBoot监视器是什么，如何配置监控？</h2><pre><code>Spring boot actuator 是 spring 启动框架中的重要功能之一。\nSpring boot 监视器可帮助您访问生产环境中 **正在运行的应用程序的当前状态** 。\n有几个指标必须在生产环境中进行检查和监控。即使一 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接 作为 HTTP URL 访问的REST 端点来检查状态。\n</code></pre>\n<p>pom.xml</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>yml</p>\n<pre><code class=\"yaml\">management:\n    endpoint:\n        health: ## 开启健康监控端点\n            enabled: true\n        beans: ## 开启Bean实例监控端点\n            enabled: true\n</code></pre>\n<p>健康监控开启标志，启动了两个端点，默认之开启 health 和 info 端口</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223093051031.png\" alt=\"image-20220223093051031\"> </p>\n<p>yml</p>\n<pre><code class=\"yaml\">management:\n    endpoints:\n        web:\n            exposure:\n                include: &quot;*&quot; ## 开启所有端点暴露\n</code></pre>\n<h2 id=\"8-查看各个监控信息？\"><a href=\"#8-查看各个监控信息？\" class=\"headerlink\" title=\"8.查看各个监控信息？\"></a>8.查看各个监控信息？</h2><p>/actuator 端点 ，默认开启了两个端点，health 和 info</p>\n<pre><code class=\"json\">&#123;\n  &quot;_links&quot;: &#123;\n    &quot;self&quot;: &#123;\n      &quot;href&quot;: &quot;http://localhost:9999/actuator&quot;,\n      &quot;templated&quot;: false\n    &#125;,\n    &quot;health&quot;: &#123;\n      &quot;href&quot;: &quot;http://localhost:9999/actuator/health&quot;, 查看当前服务的是否上线\n      &quot;templated&quot;: false\n    &#125;,\n    &quot;health-path&quot;: &#123;\n      &quot;href&quot;: &quot;http://localhost:9999/actuator/health/&#123;*path&#125;&quot;,\n      &quot;templated&quot;: true\n    &#125;,\n    &quot;info&quot;: &#123;\n      &quot;href&quot;: &quot;http://localhost:9999/actuator/info&quot;,\n      &quot;templated&quot;: false\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>如果将所有端点暴露</p>\n<p>访问路径： ip:port/actuator/xx</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223094652254.png\" alt=\"image-20220223094652254\"> </p>\n<h3 id=\"loggers-端点\"><a href=\"#loggers-端点\" class=\"headerlink\" title=\"loggers 端点\"></a>loggers 端点</h3><p>访问 <code>http://localhost:8080/actuator/loggers</code> 可以查看当前应用的日志级别等信息：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095239970.png\"> </p>\n<p>这里面本身并不特别，但是有一个功能却非常有用，比如我们生产环境日志级别一般都是 info，但是现在有一个 bug 通过 info 级别无法排查，那么我们就可以临时修改 log 级别。</p>\n<p>比如上图中的 ROOT 节点是 info 级别，那么我们可以通过 postman 等工具来发一个 post 请求修改日志级别。 </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095330889.png\" alt=\"image-20220223095330889\"> </p>\n<p>修改之后就会发现，日志由原来的 info 变成了 debug： </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095351178.png\" alt=\"image-20220223095351178\"> </p>\n<h3 id=\"metrics-端点\"><a href=\"#metrics-端点\" class=\"headerlink\" title=\"metrics 端点\"></a>metrics 端点</h3><p>非常重要的监控端点，监控内容包含 JVM内存、堆、类加载、处理器和 tomcat 容器等重要的指标</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2021/12/image-20220223095921378.png\" alt=\"image-20220223095921378\"> </p>\n<h3 id=\"自定义监控端点\"><a href=\"#自定义监控端点\" class=\"headerlink\" title=\"自定义监控端点\"></a>自定义监控端点</h3><blockquote>\n<p>这一部分之后再详介绍</p>\n</blockquote>\n<h2 id=\"9-SpringBoot-中的starter\"><a href=\"#9-SpringBoot-中的starter\" class=\"headerlink\" title=\"9.SpringBoot 中的starter?\"></a>9.SpringBoot 中的starter?</h2><p>可以理解成对依赖的一种合成，starter会把一个或者一套功能相关的依赖包含进来，避免造轮子。</p>\n<h2 id=\"10-什么是SpringProfiles\"><a href=\"#10-什么是SpringProfiles\" class=\"headerlink\" title=\"10.什么是SpringProfiles\"></a>10.什么是SpringProfiles</h2><p>开发到生产，经过开发（dev）、测试（test）、上线（prod），主要针对不同的的配置。Spring Profiles允许用户根据配置文件（dev/test/prod）来注册bean。</p>\n<h2 id=\"11-激活不同环境配置\"><a href=\"#11-激活不同环境配置\" class=\"headerlink\" title=\"11.激活不同环境配置\"></a>11.激活不同环境配置</h2><p>yml:</p>\n<pre><code class=\"yaml\">spring:\n    profiles:\n        active: dev\n</code></pre>\n<p>   命令行：</p>\n<pre><code class=\"shell\">java -jar xx.jar --spring.profiles.active=dev\n</code></pre>\n<h2 id=\"12-SpringBoot异常处理相关注解？\"><a href=\"#12-SpringBoot异常处理相关注解？\" class=\"headerlink\" title=\"12.SpringBoot异常处理相关注解？\"></a>12.SpringBoot异常处理相关注解？</h2><p>@ControllerAdvice</p>\n<p>@ExceptinoHandler</p>\n<h2 id=\"13-SpringBoot1-1-和-2-x的区别？\"><a href=\"#13-SpringBoot1-1-和-2-x的区别？\" class=\"headerlink\" title=\"13.SpringBoot1.1 和 2.x的区别？\"></a>13.SpringBoot1.1 和 2.x的区别？</h2><ol>\n<li>SpringBoot 2基于Spring5和JDK8，Spring 1.x用的最低版本</li>\n<li>配置变更，参数名</li>\n<li>SpringBoot 2相关插件最低版本很多都要比原来高</li>\n<li>2.x配置中的中文可以直接读取</li>\n</ol>\n<h2 id=\"14-Spring-Boot-中如何解决跨域问题\"><a href=\"#14-Spring-Boot-中如何解决跨域问题\" class=\"headerlink\" title=\"14. Spring Boot 中如何解决跨域问题 ?\"></a>14. Spring Boot 中如何解决跨域问题 ?</h2><pre><code>后端通过 （CORS，Cross origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ， 现在可以通过实现 **WebMvcConfigurer** 接口然后重写 **addCorsMappings** 方法解决跨域问题。\n</code></pre>\n<pre><code class=\"java\">@Configuration\npublic class CorsConfig implements WebMvcConfigurer &#123;\n    @Override\n    public void addCorsMappings(CorsRegistry registry) &#123;\n        registry.addMapping(&quot;/**&quot;)\n        .allowedOrigins(&quot;*&quot;)\n        .allowCredentials(true)\n        .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)\n        .maxAge(3600);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA\">https://mp.weixin.qq.com/s/kisvBJABJ27rb6JNZdCyqA</a></p>"},{"title":"互联网图书合集","summary":"互联网从业者的精神食粮","abbrlink":25303,"date":"2021-10-12T07:33:32.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![desert-gee44587c8_1280](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021654217.jpg)\n\n<!--more-->\n\n>　　转载：https://github.com/itdevbooks\n## 前言\n\n计算机类的书籍非常贵，天天买纸质书是不可能的了，所以对电子书的需求量还是挺多的。同时很多小伙伴不知道哪些书是经典，哪些是辣鸡，作为一个互联网从业12年的职场老鸟，我深知看书，看好书再加上实践才能高速成长。\n\n计算机类电子书下载，编程电子书整理下载，包括 [C](https://github.com/itdevbooks/pdf#c-语言)，[C#](https://github.com/itdevbooks/pdf#c-语言-1)，[**Docker**](https://github.com/itdevbooks/pdf#docker)，[**Elasticsearch**](https://github.com/itdevbooks/pdf#elasticsearch)，[Git](https://github.com/itdevbooks/pdf#git)，[Hadoop](https://github.com/itdevbooks/pdf#hadoop)，[HeadFirst](https://github.com/itdevbooks/pdf#headFirst)，[Java](https://github.com/itdevbooks/pdf#java)，[Javascript](https://github.com/itdevbooks/pdf#javascript)，[jvm](https://github.com/itdevbooks/pdf#jvm)，[Kafka](https://github.com/itdevbooks/pdf#kafka)，[**Linux**](https://github.com/itdevbooks/pdf#linux)，[Maven](https://github.com/itdevbooks/pdf#maven)，[MongoDB](https://github.com/itdevbooks/pdf#mongodb)，[MyBatis](https://github.com/itdevbooks/pdf#mybatis)，[MySQL](https://github.com/itdevbooks/pdf#mysql)，[**Netty**](https://github.com/itdevbooks/pdf#netty)，[Nginx](https://github.com/itdevbooks/pdf#nginx)，[Python](https://github.com/itdevbooks/pdf#python)，[**RabbitMQ**](https://github.com/itdevbooks/pdf#rabbitmq)，[Redis](https://github.com/itdevbooks/pdf#redis)，[Scala](https://github.com/itdevbooks/pdf#scala)，[Solr](https://github.com/itdevbooks/pdf#solr)，[Spark](https://github.com/itdevbooks/pdf#spark)，[**Spring**](https://github.com/itdevbooks/pdf#spring)，[**SpringBoot**](https://github.com/itdevbooks/pdf#springboot)，[**SpringCloud**](https://github.com/itdevbooks/pdf#springcloud)，[TCPIP](https://github.com/itdevbooks/pdf#tcpip)，[Tomcat](https://github.com/itdevbooks/pdf#tomcat)，[Zookeeper](https://github.com/itdevbooks/pdf#zookeeper)，[人工智能](https://github.com/itdevbooks/pdf#人工智能)，[**大数据类**](https://github.com/itdevbooks/pdf#大数据类)，[**并发编程**](https://github.com/itdevbooks/pdf#并发编程)，[数据库类](https://github.com/itdevbooks/pdf#数据库类)，[数据挖掘](https://github.com/itdevbooks/pdf#数据挖掘)，[新面试题](https://github.com/itdevbooks/pdf#新面试题)，[**架构设计**](https://github.com/itdevbooks/pdf#架构设计)，[**算法系列**](https://github.com/itdevbooks/pdf#算法系列)，[计算机类](https://github.com/itdevbooks/pdf#计算机类)，[**设计模式**](https://github.com/itdevbooks/pdf#设计模式)，[软件测试](https://github.com/itdevbooks/pdf#软件测试)，[重构优化](https://github.com/itdevbooks/pdf#重构优化)，等更多分类\n\n重要说明：这些书涵盖入门和进阶所需，请大家各取所需，另外还会原创大厂面试题，陆续会提交上来，请大家持续关注这个项目。\n\n## [新增：文末有 3625 页互联网大厂面试题](https://github.com/itdevbooks/pdf#新增第二版面试题)\n\n# 书籍分40多个技术大类\n\n|   |    |    |    |     |\n| ------------ | ------------ | ------------ | ------------ | ------------ |\n|[C](https://github.com/itdevbooks/pdf#c-语言)  | [C#](https://github.com/itdevbooks/pdf#c-语言-1) |  [Docker](https://github.com/itdevbooks/pdf#docker) | [Elasticsearch](https://github.com/itdevbooks/pdf#elasticsearch)  | [Git](https://github.com/itdevbooks/pdf#git)  |\n|[Hadoop](https://github.com/itdevbooks/pdf#hadoop)   | [HeadFirst](https://github.com/itdevbooks/pdf#headfirst)   | [Java](https://github.com/itdevbooks/pdf#java)   | [Javascript](https://github.com/itdevbooks/pdf#javascript)   |  [JVM](https://github.com/itdevbooks/pdf#jvm)  |\n| [Kafka](https://github.com/itdevbooks/pdf#kafka)   |  [Linux](https://github.com/itdevbooks/pdf#linux)  |  [Maven](https://github.com/itdevbooks/pdf#naven)  | [MongoDB](https://github.com/itdevbooks/pdf#mongodb)   |  [MyBatis](https://github.com/itdevbooks/pdf#mybatis)  |\n| [MySQL](https://github.com/itdevbooks/pdf#mysql)   |  [Netty](https://github.com/itdevbooks/pdf#netty)  |  [Nginx](https://github.com/itdevbooks/pdf#nginx)  | [Python](https://github.com/itdevbooks/pdf#python)   |  [RabbitMQ](https://github.com/itdevbooks/pdf#rabbitmq)  |\n| [Redis](https://github.com/itdevbooks/pdf#redis)   |  [Scala](https://github.com/itdevbooks/pdf#scala)  |  [Solr](https://github.com/itdevbooks/pdf#solr)  | [Spark](https://github.com/itdevbooks/pdf#spark)   |  [Spring](https://github.com/itdevbooks/pdf#spring)  |\n| [SpringBoot](https://github.com/itdevbooks/pdf#springboot)   |  [SpringCloud](https://github.com/itdevbooks/pdf#springcloud)  |  [TCPIP](https://github.com/itdevbooks/pdf#tcpip)  | [Tomcat](https://github.com/itdevbooks/pdf#tomcat)   |  [Zookeeper](https://github.com/itdevbooks/pdf#zookeeper)  |\n| [人工智能](https://github.com/itdevbooks/pdf#人工智能)   |  [大数据类](https://github.com/itdevbooks/pdf#大数据类)  |  [并发编程](https://github.com/itdevbooks/pdf#并发编程)  | [数据库类](https://github.com/itdevbooks/pdf#数据库类)   |  [数据挖掘](https://github.com/itdevbooks/pdf#数据挖掘)  |\n| [面试题](https://github.com/itdevbooks/pdf#新面试题)   |  [架构设计](https://github.com/itdevbooks/pdf#架构设计)  |  [算法系列](https://github.com/itdevbooks/pdf#算法系列)  | [计算机类](https://github.com/itdevbooks/pdf#计算机类)   |  [设计模式](https://github.com/itdevbooks/pdf#设计模式)  |\n| [软件测试](https://github.com/itdevbooks/pdf#软件测试)   |  [重构优化](https://github.com/itdevbooks/pdf#重构优化)  |[第二版-面试题](https://github.com/itdevbooks/pdf#新增第二版面试题)   | 每天都有更新  | |   |\n\n\n\n## C 语言\n\n21天学通c++_第7版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFtWjkx8awd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pv45msRWe0sCurOM9RR9uQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvdj\n\nC++ Primer Plus（第6版）_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMRGakxl2lc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EVlg9WH-6kJjmjjTjaty0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wsfu\n\nC++ Primer第5版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFmCLkx8e4j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oxGcN9OoQs2tRXs3sas_XA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qeke\n\nCOBOL语言（上）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ix653kx8ebg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IZq6yXLmUB22rZKkfxSbjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stqa\n\nCOBOL语言（下）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOFeMkx842h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10FlZxU52Vrsy8kUo-MnSoA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：drsv\n\nC程序设计语言（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iscm1kx84di)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nTISepdSatvOMRcMu6Zw_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kuhe\n\nC程序设计语言（第二版）习题解答.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2SkIkx84ej)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MZDmM5AqyKsDQ1k3reeZ0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphb\n\nC程序设计语言（第二版）新版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iRieOkx84hc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Lb6J7LM0kVy_ZSOp7Ubtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjcf\n\nC程序设计语言（第二版）中文译版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4Mqvkxl7ri)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W7Xb8ubRnLDLWUATMxblxQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdvu\n\nC程序设计语言（英文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5DhSkx84oj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E_hMl1VLVlDn44ew_mrHrw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfne\n\nC大纲.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iX8jpkx84te)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13zvfjFYaY6Pl8VutieLNHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtf\n\nC大全语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXei8kx852d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Rd6trlbNhigXbMsg4uMYnA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfwp\n\nC和指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGENEkx85ta)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R1hZBoyKkKLj9EBC2ZUPtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcdg\n\nC基础班范例代码训练.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAxOEkx85xe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167--PYVLr5Uc-Fa4_pCXzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mrah\n\nC与指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9IGjkx866d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x9JB86DDKi6s9dldrJsa-w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxcg\n\nC语言编程精粹.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igjXpkx86he)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W8aWffFDOvubzfNHEC7-Cg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgds\n\nC语言参考手册第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iL8Jfkx86pc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z2ErBjh1ERW5-lbqR9R4Uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twgf\n\nC语言程序设计现代方法（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1X6bkx8y1g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oaxzlxeaCkYGXAEn-mCSgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dfey\n\nC语言大全第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ihGbpkx8yid)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xVIHCdekVp3iRibektJ7bg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skvj\n\nC语言函数大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYowkkx8ylg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kDqsE3BP2UC7XupD2FzRXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkk\n\nC语言解析教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYmUXkx8yvg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TYbhCfo1t3dIm0gAjLeOYw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：brmp\n\nC语言深度解剖.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQR1zkx8yyj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wc0IeIWQR28jG0uOtqKz_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjxw\n\nC语言实现病毒源码演示.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iO1Q5kx8yza)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LZ1VEwZXoYuVJlN6nxAi8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：60dt\n\nC专家编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i12vOkxll0f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12jZ8IHA1Cb__KMsFDa4eqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gkup\n\nLinux操作系统下C语言编程入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8JH3kx8zde)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Nx2y1lTvdEpBuf4QhV0fyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtj\n\n华为C语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ivg6Gkx8zgh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yC1zRs37Sy-6trq4zV8kQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awkd\n\n可变目标C编译器设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ixH3vkx914h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L9NuvV6SdF-8Bi-zreB4Ag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vjdh\n\n数据结构-教程c语言版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iocoikx91pi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TEjTJ05RRfnygjQlSkXKiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccwm\n\n数据结构（C_语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iq3rekx917a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_787HiYRbxx5U-9W6t779w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：medm\n\n数据结构（C语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioouykx91ng)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E--h4WLOoeNH8wpHZ7zajA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sscd\n\n数据结构、算法与应用C++语言描述原书和引2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8E2Zkxlsgd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V7QAFKLY_S9eYeoeRzCgvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjgt\n\n算法：C语言实现第1-4部分基础知识、数据结构、排序及搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwTadkx92sh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h4e4RBl8jgj2netJV1nYfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykat\n\n网络环境下的C语言编程技巧及实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaQELkx92yd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d7iJN5JVJL_UrzpubO1k9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjht\n\n自制编程语言基于C语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i3JC8kxlzti)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vk5rAD2pAscURdISdhR2ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybqh\n\n\n## C# 语言\n\nASP.NET.2.0.XML.高级编程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iykcDkx9wxc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1I7oyBgWo1wrlQ5iIIE1m8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngna\n\nASP.NET.2.0.高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iUm0ekx9p1i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yQaRuIvML31ealbl_EZHqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsts\n\nASP.NET.2.0.入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVn3Nkx9s3i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jogs5FFdaRTibdhw9KjlDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqjp\n\nASP.NET.2.0.数据库入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyVSAkx9smh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1C5dfWMcQCJZak0VQqWtw1g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaqh\n\nASP.NET.基础教程-C#案例版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0I0pkx9sxi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mIxJUSHRJ0fNIyOaGUo8xA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnaw\n\nASP.NET技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9p1nkx9tyf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SJ_DX1wVXY1u4MdZmurpZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gryv\n\nC#.4.0完全参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i44Sskxa01e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eCg6Th8Ouc8Q_mlQFScblg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqkr\n\nC#.COM..编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i7sh4kx9u2j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oQwLHhblmo3EprJKAlq-1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncbr\n\nC#3.0完全自学宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iODgKkx9veh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DTLQFDSfuMsivoo8XLHi2g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fejw\n\nC#编程宝典十年典藏版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOQOUkxa6sh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pLtxx5w0ccPNsTKk_0d9yw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cyjp\n\nC#编程参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/itzFDkxa4eb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18XKKpwlV9R8vUX4TPdYmRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tckx\n\nC#编程思想.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2AiQkxa29e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sESNaACnZyNwtEOXnbZtbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augj\n\nC#编程语言详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ij48tkxa1mb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1USE8I8Ig_lJrWrBsBss7hw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqkw\n\nC#程序开发范例宝典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CY60VTs0FdlJJbKN-RciWA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eyhe\n\nC#程序员参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iKmc8kxaa1e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fMjV4BVdfxHpbTbeMipHxg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hbbp\n\nC#技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwvIJkxad8j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VA3R90-5tHSyh2Ak7dTm3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wywp\n\nC#入门经典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iet3jkxahyj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qBKgqHgs4dAJsHvopasEjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xafy\n\nC#软件项目开发全程剖析-全面透视SharpDevelop软件的开发内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOhl0kxai6h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10Up6eUcpL-JuRL9RuaqjqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnv\n\nC#设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5kBOkxaibc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fUn2p0sSb-dPdIrfg9KmKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnns\n\nC#网络编程技术教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCoHMkxaj7e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Xskb_NvWezmdabyzRh8fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cerg\n\nC#项目开发案例全程实录（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ivNoskxakzi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QEa2INDhZhvbGSlAh_LT9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agjn\n\nC#学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuDRekxrw6d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hYrT0cLyF5uUMIoUNElXBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：veex\n\nC#应用程序开发全程演练-从灵感到实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuA6Dkxrzte)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yi9CiqleBP6BfR4Xf9NPlw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbew\n\nC#与.NET4高级程序设计-第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iL0D9kxs7qj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mGs2xNNvmPJ54AHsbmhShA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyby\n\nC#与.NET技术平台实战演练.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0UaPkxscsb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z1Oar2-0wm53BCA-f6zElw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebvx\n\nC#字符串和正则表达式参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iENCCkxal8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jZxa5iTBvVN8iUHi9Q8yjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cmth\n\nC＃高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iY8hHkxacni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vQTjdPk4hyF-efpbdYj_fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mtpu\n\nMicrosoft.C#.Windows.程序设计（上下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i77A1kxamni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UQSZpztOy3ITdZurmfV1ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqnq\n\nProgramming.ASP.NET.中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9GvLkxanub)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19A0krBK5AsbjC2MJIfPfWA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jssu\n\nProgramming.C#.中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/itoRZkxaq1a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JDZNMzG8WuvaYnizfuTidA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmtx\n\nVisual.C#.NET.网络核心编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYlxmkxaqaj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1eatMs_xYJffB0LJLTC5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jsrq\n\nVisualC#.NET案例开发集锦.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ibtTTkxatwj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dW2LSBwkGlKUSDhBbIfFMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfcp\n\nVisualC#.NET网络编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQ1d8kxaumf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x1FLbBHDRzHRLDFJHSljSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kxgn\n\nWindows应用高级编程-C#编程篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWj4Nkxav0j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/192y69NahClrpiI2hkF80gA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbpp\n\n程序员突击Visual.C#.2008原理与系统开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igcpSkxax4f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OWf7AK5ezToNiQMo0AZyQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：murm\n\n叩响C#之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaV7Xkxaxpg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lHUal4JysWeqwmBXYiHuuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atej\n\n\n## Docker\n\nDocker-从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMYo7kxbaaj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ccTG4htfo-jZ1Nb8nnKeNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：enbt\n\nDocker_practice.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOELrkxba8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V8vGD2R9OG2a88HpDxG_rg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fraf\n\nDocker经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/imwLzkxbacb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sJWlwtTSnHZhLneX2dBfaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej\n\nDocker容器与容器云（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMsrNkxbb3i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R5PqIB_G9pIKi3b2Rzlaeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfnw\n\nDocker入门白皮书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGMwKkxbb5a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16HDLIsj_Rd0tgfKpbTCEgw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kskk\n\nGo语言实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ilZK4kxbb7c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZdtpkG6DMd3t7-ywJOWRCQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sedj\n\nKubernetes实战（套装共2册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOexQkxbblg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15K6r6JEsdGVuQTVIydruxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xueu\n\nSpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXnsOkxbdhe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c6dNs1T6klinsbNtHl32GQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrdb\n\nSpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4H8xkxbe4h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1t0r0CuIyV1fcR4l5M83ttw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crbf\n\n第一本Docker书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioCPhkxbe5i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12US2-reChfZgwy3eqpJpGA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uvmt\n\n深入浅出Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCKMWkxbf8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13-Ov2ZrCVAmHz13Ah8Xmpg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfkw\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/im4CZkxbieb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KekRLkLCvLTbq24J3TNWiQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrse\n\n微服务架构下Docker实践，以及Docker在测试环境的应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVmIXkxbigd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ngvZs7yWfuRxUxxST43LzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmj\n\n\n## Elasticsearch\n\nBetterELK,新浪实时日志分析服务进化.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iP88Ukxd2wf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uUxY9AtKQEy-if3fKkhK4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfgc\n\nElasticsearch-guide-chinese.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/isNeDkxd30j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Df0xspbMMVJn20-C522niw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：baxm\n\nElasticsearch-the-definitive-guide-cn.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuT60kxd38h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Td3Y7k0gQpL4jpQfmc05uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrfs\n\nElasticsearch6.1官方入门教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iu6Jokxd2yh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MXfjtz5ynkY_u08UDOCaLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：knfe\n\nElasticsearch大数据搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCJ3Dkxd8mb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j4K2lZpt7ywpjo-cyodlyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxuu\n\nElasticsearch分布式大数据搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOGbbkxdade)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AHxsGuZJFXDxZoGjOcBXmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bytq\n\nElasticsearch服务器开发（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCU5Ykxdb7e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LcjmOWCBbLfEPT_woN1GuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xatu\n\nElasticsearch集成Hadoop最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iG4M4kxdcha)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bOwD5PBqfD31NJfWFXso3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfcp\n\nElasticsearch技术解析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ija6Bkxdckd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x5QOR_wrxC5BV9JorAmxtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jews\n\nElasticsearch技术解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iunVckxdgkh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HdKY0kVDVzc6KKkvU8fK5Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afay\n\nElasticSearch可扩展的开源弹性搜索解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1APTkxdhgj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12mH096foYT5y4YWsHFlSeA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxjr\n\nElasticsearch权威指南（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iScNMkxdhtc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VV9O_660sDBo_YB62QYx-w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwtf\n\nElasticSearch入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTWCxkxdi4d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BzO1GTBbHSmwca68Vdlbmw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hukk\n\nElasticsearch实战inaction中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ipDJIkxx1re)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BpK6r6MW29zb46lH_wG0yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pveu\n\nSpringBoot集成Elasticsearch7.4实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ip2uYkxdidc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16GhqhpmVUfKHLll3z_dnlQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tewy\n\n大数据搜索与日志挖掘及可视化方案++ELK+Stack++Elasticsearch+Logstash+Kibana++第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i3E26kxxjqb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q1DrL8kopQDJPvTESqy9Sw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vudd\n\n深入理解ElasticSearch.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/izKODkxdrwf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A8_KVHXsuFe6u--XZgL6eA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxpf\n\n实战Elasticsearch、Logstash、Kibana++分布式大数据搜索与日志挖掘及可视化解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAwXbkxdpyf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xnY8s6i7hI8bzRmy38s-sQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncce\n\n数据分析与决策技术丛书ELKstack权威指南,饶琛琳编著,P394.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4AjAkxdila)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Rugsxq8mfnK_tEtFB80Q4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pgab\n\n搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2KLFkxdinc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y4THdUHLG8WTa5ipYTovKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffjd\n\n最新版Elasticsearch调优搜索速度.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iNXvZkxdjrc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ewPAjJ6zWPeBHLPQx66QVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trqt\n\n\n## Git\n\nGitBook（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLUKFkxe29i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xhG-q_BEFY-U4uuY9oybDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kvak\n\nGitCheatSheet中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/il9lkkxe2ed)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M_aVeiwUR0Hwf9l7SjziFg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvwp\n\nGitforTeams.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ibym9kxe2la)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LY1Ie9FN78aUybcNxM4BcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qrrp\n\nGitHub入门与实践（日）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyqIekxe2ti)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Db3YzGgVjQt9kSMg8HfcUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahjm\n\nGit版本控制管理（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioRcDkxe31g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eJTo4qBAsiGvCSVLuU7SPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：adrk\n\nGit版本控制管理（第二版）迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLkpMkxe3ni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oimhw2LAiuVkD_8gnV_NrA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyct\n\nGit官方手册中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9bekkxe3za)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NC6Oi4HdJ5b72VKaIdJR7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saqd\n\nGit讲义-深度讲解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLMXTkxe4de)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hRGXi6L31eOj6YhTPaEUnA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swyh\n\nGit教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioXiZkxe4ja)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kOBBwQi_cC6j3QvgRr6RuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrp\n\nGit权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaye2kxe62f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13bGqDQ35cJgVfp0ht9SkqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkak\n\nGit中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iR2Swkxe8pa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Hlh9b3NX6roVOruQ8-RcuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmux\n\nGit中文手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEl0ikxeana)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gNKclKvcNITBXDniY0dadA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtpb\n\nProGit中文版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHn3pkxeawj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OkqTAyfUoCFOzgnYmImMDA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkry\n\nProGit中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMrizkxebib)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l98hVaPhqHkYq3nSkETZUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwgk\n\n版本控制之道使用Git.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iW6o3kxec3c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GpOXPOBpfB8Yi15VGnIgKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfth\n\n常用Git命令清单.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ifScYkxec7g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yx5lwu0gskwfmHvn7D7M1g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajkn\n\n从+0+开始学习+GitHub+系列.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ifHzvkxecla)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dakSbdxFubYb_lNoApeaqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbqg\n\n完全学会GITGITHUBGITSERVER的24堂课.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ij3V8kxedhc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12Hk4dMkfkE1L0WERrEa-qg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbpj\n\n\n## Hadoop\n\nHadoop搭建与Eclipse开发环境设置.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQTivkxehba)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-yw-COXzqlIlOl95h8I74w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvda\n\nHadoop大数据分析与挖掘实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAlA8kxei4j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_ndlcCJjmYnPk7s914U__w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwvr\n\nHadoop高级编程-构建与实现大数据解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4JMrkxeich)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ISRomZnhzO3pTSE33HLvYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xubc\n\nHadoop公平调度器指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia2mkkxel5i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Be1AoEQZyIRVlRf261bbOQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwyq\n\nHadoop技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHJbDkxemed)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Nxfu7ytEhdfTDv6_G6TyNA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvvg\n\nhadoop简介.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLHp3kxemwb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HjPoXCY4-aQ9OJiXNGvdfA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebfm\n\nhadoop开发者第三期.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/imUQnkxenfa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qnnDciMx68FIYpGqj0ZrnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhs\n\nHadoop开发者第四期.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iPUH6kxenoj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pfi3AUbMfcCKz-jG85orUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgx\n\nHadoop开发者入门专刊.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGk6wkxente)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/107Z2PCG-Q_Njiyg7bV0ibQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kejg\n\nHadoop权威指南（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1S3lkxeo7i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CFuFsngiC9nmKwc2J4_zCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvab\n\nHadoop权威指南（中文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/irntIkxepxa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1e1oWfYr8atVYQA3Swhb71w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tqar\n\n基于Hadoop平台的亿贝用户邮件数据分析（苏立）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHLQekxeqad)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1obIfdffIOX8w348MC9njVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr\n\n实战Hadoop：开启通向云计算的捷径（刘鹏）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTT9Hkxered)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l-HrGhtJ3fZ6nJou4gnC7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsbw\n\n数据算法HadoopSpark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTxcMkxetbc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OWxadCpz_iqE1Fq4cVR9JA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxf\n\n数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTxcMkxetbc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CL8-WG7XQOxbWLisgb7TZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdey\n\n在Windows上安装Hadoop教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8EVmkxetcd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w1JBUHP9K4E5QwYje-UM3A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmkv\n\n\n## HeadFirst\n\nHead First Ajax（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXpYUkxeuhe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-RyMwcVfgc2PplMHm0UKww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyuq\n\nHead First C# 第二版-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iAQ0rcy9gH2yO1DEgv7Y_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mhtd\n\nHead First HTML5 Programming 中文版 .pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioWjikxev2f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-uMMg_GjFQedOAJQQ3UrgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjyy\n\nHead First HTML与CSS、XHTML.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iH1LQkxeypg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167awhMP91mzcBGFPoIcLDA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hspd\n\nHead First Java 中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEwj9kxf18h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/155P-tL24jowuGMtNdY2wSA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvpy\n\nHead First JavaScript 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iERoWkxf5zi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cRLHU-NKIA0nQ2XMzHp2sA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fkby\n\nHead First Java第二版涵盖java5.0.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXHoSkxf8md)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NM7eb06vGK2iBMOF_6uEYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cebe\n\nHead First Networking 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iZ0Pwkxf9if)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dD968W_tr-SUq1i_HdubVA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upkx\n\nHead First PMP 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ijZbskxf9tg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DeZdj4zh7hxDnpINLdq0RA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxau\n\nHead First Python 重视大脑的学习指南  中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0A5nkxfa9c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hLAU9HqUbpgh1PQ7DVn3gQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avey\n\nHead First Servlet JSP.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i7J8Zkxfcsd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mlSoZJ42ukvB7Rl0YBRGdw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkv\n\nHead First Servlets and JSP 第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i83VIkxfhni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/139L7zhrwsgNhgIGmf1jRZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pysa\n\nHead First 设计模式（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i6b7Wkxfj6d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GX8ZZT2_ISqJv47sBwFvgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafw\n\n## Java\n\n21天学通Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwPMNkxfsde)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KcnqkVnoSiiOkZmkzYNGfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jeyg\n\nEffective+Java+中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4R1ikxfsub)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13qz0iXAQdfv-7FiXiodIww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqgg\n\nEffectiveJava（中文版第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEXrIkxgepi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JCdDt9dMSxIT01jBSBRDIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cpen\n\nJava8函数式编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igZEhkxgc2d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_-85Wx3LYJHSktFYCH_hUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjan\n\nJava8中的炫酷特性和Java9中的新特性-杨晓峰.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iDzpOkxgfkj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O6euAamgF3Y7v1JnfGyjjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkwc\n\nJavaNIO（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWsplkxgfnc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/139eXkJl2jtagTZm-ROxL7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpaq\n\nJavaOOP-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iRe3ekxgg7c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vubz7vJybbosl3iLFWPhCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmp\n\nJavaRESTfulWebService实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1xFVkxghvc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O7km01HayjzW_yYRCyR3gw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfju\n\nJavaServlet和jsp学习指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia4bkkxgkqf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1muJPmcUcjV4k4wBQqPT8yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：daqb\n\nJavaTCPIPSocket编程（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFwCJkxgnna)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/197jWtCamqIFQdqiPcrQCew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vynk\n\nJavaWEB服务.构建与运行.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2MGbkxgo0d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z1XCRAtblPvbgt9qN8CMVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrr\n\nJavaWeb企业项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iNjuGkyordi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iZGKcMOmQmMYuxUfAkJEbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aumu\n\nJavaWeb整合开发王者归来.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1U2pDBLUyYqvIjo7w7gRQZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fprs\n\nJava编程的逻辑.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ijGyakxgtwf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PiN48omo9JLLzb63sP0Bkw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xtxs\n\nJava编程思想第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJiGqkxhdeh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1p_E22a4VUpWVYgzqMmfDIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mnpq\n\nJava编辑思想（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGM8Fkxhdjc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eLEyRlUpxZqp5_ISdZu86w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfaj\n\nJava程序员修炼之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHblakxhfmh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zhIZCnmLFzbBCxtwtxKltg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpea\n\nJava从小白到大牛精简版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iapU1kxhfqb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Kd7gdxnNtOzHDLpLYxk7vA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kaqv\n\nJava典型模块与项目实战大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ie7Xvkxhjsh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x_SsiWi2OLw3HF1CRWOJSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：assw\n\nJava关键技术JSP与JDBC应用详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWXqykxhlri)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RImaM6qZcRlN_ueUN2MaEQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tscq\n\nJava核心技术卷一基础知识第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJTXAkxhngj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1urz-kz246b7KJEMREYIJyA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjmy\n\nJava核心技术卷二高级特性原书第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVCbnkyoaha)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1biNDg0wY9NhzPEbYYFqKhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjzp\n\nJava基础概念.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaqL3kxhnib)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l8iKRzjGPYBXwrTm281LPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfu\n\nJava基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqFPekxhnmf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wrCF3ttjvPTmMavEx27UMg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rrma\n\nJava开发之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2vEZkxhs6j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wgivWU-eJuvzXC3DILpEzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvpq\n\nJava数据库应用基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEJ8Ckxht7g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17DQzOJFnaXQ2M6RWNvzo8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fawd\n\nJava特种兵上.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJTuVkxhwqd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iGdCv9y6HCfMwA8QKbsmTA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmgf\n\nJava图形与网络游戏开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iayknkxhx6j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1B0XNM5dr7tijN-CMMKNOUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjjb\n\nJava网络应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia9AHkxi1jg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OS8fQKKsjgcHd23oRIJ0Jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bdxn\n\nJava与模式（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ik4Aqkxi1zc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qbwz2PMClWo11Eb1zrl1EQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：asfv\n\nJava语言程序设计-进阶篇（原书第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyQI3kxi2fi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GdX636VmycTU9t-4OgbgIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqnn\n\nWeb安全开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOSPgkxi2jc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h5fZHvtNbodM7hZbrpRLCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhsj\n\nWeb性能测试实战详解+Web开发典藏大系.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTd6Akxi4kf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zC2VwRjNr8mT69ENmNUJ0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bsct\n\nWeb应用安全权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEc6nkxi5of)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17YmTumIWjckrqBcP6Gu4RA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydkm\n\nWeb应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i72VPkxi7mf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n4pmkCkYbk9cDFGvMLW1HQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfqe\n\n编写高效优雅Java程序.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqkHBkxi7oh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/111RMs5dIwOt9I09aE4iMhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nskv\n\n菜鸟成长之路—Java程序员职场全攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAbu0kxi9di)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bcnbsfSP-agoIFKUUPwgzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vxjx\n\n大型网站系统与JAVA中间件实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqHZdkxig4b)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MliFXVP-mjZoMWs_RpANXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdbx\n\n分布式Java应用基础与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5ci2kxihcf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1X2x4RA1D2-Ig8vcr1KOrqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dbeu\n\n疯狂Java讲义.pdf&nbsp;&nbsp;&nbsp;&nbsp;nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fYIQdDNdncR3JyxAr_x-dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hejg\n\n高性能响应式Web开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9wUOkxiife)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EcPNoFTVUtHePBWePLm7tw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafb\n\n构建高性能Web站点.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/icEMlkxijkf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13gYFTc0bRJvR87nY51slqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndfc\n\n解密搜索引擎技术实战Java精华版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iX3Z8kxikne)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wjiwni7ABH2R1jUIfvrHUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：susc\n\n了不起的Nodejs将JavaScript进行到底.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXFJkkxilyb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O8Aaw8iyWNwVrD6VN6mtQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xbbx\n\n零成本实现Web性能测试.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iUq4xkximsb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XS1Jy7fHc5koAkh9xbqcDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：varj\n\n码出高效：Java开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i34i6kxirqj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hlLIkAJYIkmeFZuUFkmrOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqxs\n\n深入分析JavaWeb技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuhbakxitgb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14QwWsW4jClVyL6SepaZrNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbqt\n\n使用Java.Web服务构建SOA.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyx8mkxiuab)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BsDNPiQs6Lml_UkPP6aUNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：lof7\n\n\n## Javascript\n\nJavaScript基础教程（中文第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KrBmT24VTDJblH9pfGTzOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxer\n\nJavaScript框架高级编程应用Prototype、YUI、ExtJS、Dojo、MooTools.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dCyMSxlsdX_szCA05PB63A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfb\n\nJavaScript框架设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x226ttlJYfSYquDEojIRMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akbn\n\nJavaScript面向对象精要.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GXRA3uhy_-tgksrw1Sl9Pg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jvrm\n\nJavaScript权威指南（第六版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AhnItsQRwZN5OKH_o_amxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxuf\n\nJavaScript权威指南（第五版）中文版（上）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ya6dqxo2zKB-oOolJf_oZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vpmn\n\nJavaScript权威指南（第五版）中文版（下）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4ATUyl12uM7xL1xqUGtAg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdar\n\nJavaScript入门经典（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jmmwbpkUaEnn8TD4Kv0x_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wawc\n\n## JVM\n\nglibc内存管理ptmalloc源代码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zrCQ4sOaDKl17P8KfD6pxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnbu\n\nHotSpot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xpa-yfb221Kdq-FIwWbmug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aqee\n\nJava+JVM.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A93OKyY11xjyGu8Y4T4wwQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dwyb\n\nJava性能权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sXEQx5eXIhLAq_hi70_1YA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfan\n\nJava性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gBnhP28-YJjzojiRlKEakQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aapq\n\nJava虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vTwsR8WgRpq--yKoBzR40A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yabq\n\nJava虚拟机规范-JavaSE7.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RitXq-hZRH-tZiVK--NYtA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnab\n\nJava虚拟机规范-JavaSE8版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uOmGGM4SdWvtZsOlGIVIww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yadt\n\nJava虚拟机解释执行机制研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/146F4WskyY_6WmbBjhK_olQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hffn\n\nJVM.Spec.v9.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1crTDBQ48j8pBSmJ41eY7Ag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjpk\n\nJVM定制改进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CFcHX0HasDNgOBl7tRLRZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkj\n\nTwitter的JVM性能调优经验.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uWIvg9guDm4JZKnAhb0Gtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swpn\n\n揭秘Java虚拟机-JVM设计原理与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrNNvxFlqJsiNnONbRiXTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uprt\n\n垃圾回收的算法与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Iiwe_Aw2MwdqbufDzJtcBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynpk\n\n垃圾回收算法手册++自动内存管理的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iKLOyw9YS2CT_1qTcHN-LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcpg\n\n深入Java内存模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NOyDh5_zyeI_J1MGmeQfjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmkk\n\n深入Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lOU9AMAviJLzQ_bEt6zw5Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghds\n\n深入理解Java虚拟机：JVM高级特性与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1T0bTPTLwwOPXKXdEhKDKDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxe\n\n深入理解Java虚拟机：JVM高级特性与最佳实践（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UdIG3CvNYE4sT75YgUYong)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrng\n\n实战Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/151o-bzu51xsRNQwfDH-v0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxkn\n\n实战JAVA虚拟机JVM故障诊断与性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LxC19YKuOhbTaTk3oRUVOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfrp\n\n虚拟机系统与进程的通用平台.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n1g5gbqHqbnVKeScHKDIvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjxg\n\n自己动手写Java虚拟机（Java核心技术系列）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18tOPFGWfkHt8wHec6gHjuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdcw\n\n## Kafka\n\nApache Kafka实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1F2gu3LgHSz7-mCu1grPE0A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjcw\n\nkafka-高性能揭秘及优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V-y3nnC2W43ICl4KtvUd0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbey\n\nKafka并不难学！入门、进阶、商业实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SEWr4qFnK_Xo7TAWbrtBCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tyyy\n\nKafka技术内幕-图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ws1V7-zlfwlN412zLQuEtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbgr\n\nKafka技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SMnb-k18Oe0tGfrCo9OeHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftsy\n\nKafka权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WzjA7J2eSK-1AyJNJYfPjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prjv\n\nKafka源码解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jnaMi49J-2ssZ2VI-0IOjA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eymk\n\n深入理解Kafka核心设计与实践原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sHmX9x4QrYEmo8CVDO05Og)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jubt\n\n图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fs_pLDYhO-X3Gw0VGX__GA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhjd\n\n## Linux\n\nLinux C编程一站式学习(最新版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nSM92Y0ACgKCnW5c_MBOQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wchx\n\nLinuxC函数库参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10g6n3vUw3WjWHCleKCeO3A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edaw\n\nLinuxShell脚本攻略（中文版带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Y1Ur18yR7WhLADdf0X2YQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcnn\n\nLinux宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YtnnSKHEdHoDupKYHK694w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvbj\n\nLinux程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10lItD3ThyEvIcys7viEMqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mwxb\n\nLinux初学者入门优秀教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i6xgfH_rbCWVQpbn0T5wag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jmpr\n\nLinux防火墙（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fo3ZVIPIDTx66H6AXIDSLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tudk\n\nLinux命令详解词典].施威铭研究室..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1psZy9LInYtBYtRKwNVqo2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpqc\n\nLinux内核IO性能优化及块BIO处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NBSUxyHYkRD7gNrfcvuAKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphr\n\nLinux内核设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sCG7F3X8pRuRrKf-rWL7bw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dyas\n\nLinux企业运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RH87jSJ-bM8zR7GRUCuL5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gffg\n\nLinux系统常用命令快速入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oXW-YdsQS9FWX7FE_-ngrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxmn\n\nUnix与Linux.Shell编程.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kV_srGnJaXKXbFsQnySR0w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfk\n\n鸟哥的Linux私房菜-基础篇-第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fQOp0ay4V6BrXxOyg-L5CQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnuy\n\n鸟哥的Linux私房菜-基础篇第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MRfO9rnOs4I9PFmL0yYdpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ptnk\n\n鸟哥的Linux私房菜-基础学习篇%28第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d_fU9jnwFOzWBM09zZzY1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgcm\n\n鸟哥的Linux私房菜-基础学习篇（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BO2mAcbpmWeHpMwk8zJ_tQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jesv\n\n鸟哥的Linux私房菜.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L2cDjyajadQLfnq8KEKvVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：syue\n\n鸟哥的LINUX私房菜_基础学习篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mFe83qmAJFxPpUitkHoHsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vhdp\n\n鸟哥的Linux私房菜：服务器架设篇（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1K4TM42FaxqvwI8Z40XronQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvpc\n\n鸟哥的Linux私房菜：服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gZqiZz4kXz0QLBlculqXZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghbv\n\n鸟哥的Linux私房菜服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lGXi89r_HYVKJmEaT4gn3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxjm\n\n鸟哥私房菜（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f5_hfVlNO1hksn_CO-cb4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byyb\n\n循序渐进Linux第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZK5-N-9aVPy9INC5XBDf1w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykch\n\n## Maven\n\nMaven权威指南_中文清晰.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bdYjpFbdTgO1jdirwXUaKw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwqy\n\nMaven权威指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jCxc7DsQYI9sM9jB99DZ-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrhe\n\nMaven实战（完整带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lfCCDoH1oMF950slGA5yNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dncc\n\nMaven应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1siK3mklE4FNgoN-DyA-sFQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cysv\n\n## MongoDB\n\n50TipsandTricksforMongoDBDevelopers.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wDIEHzT8fyDQq_-nx-Vc_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcrm\n\nMongoDBTheDefinitiveGuide.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SgRaWvocG9J24OFD4ctZiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uruj\n\nMongoDB大数据处理权威指南-第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1viqo7Xf5u1RY_RrZxgoxvw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhdj\n\nmongodb分片教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XKCPsKYozxR2w1KUvGUdbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqsj\n\nMongoDB权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XFgtsaN2vh5XqhwNRpuH7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvkj\n\nMongoDB实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z81kDxzBUphuvmC-bOleZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ggmy\n\nMongoDB游记之轻松入门到进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pcBGRm__NQ0bWb5dJ7v9-Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrnr\n\nMongoDB运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1er045VTi4TRIVueLv4fZFQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quyw\n\nScalingMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SsTNYOMU_WXrC8MVB2TKqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byxj\n\nTheDefinitiveGuidetoMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uuCMIGBDkPXsHiqEh4g7Tg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fafw\n\n大数据存储MongoDB实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FCRYw9GGSrKFZwAaBCK7lg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qnrp\n\n深入学习MongoDb.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19x0Yi3xyzohl6Akqr6YKUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkva\n\n## MyBatis\n\nJavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f_o0B3_zvlHVaOL2AXbAQA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpvv\n\nMyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19SxKgiAEyf6p3c8Nn9gFWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndvu\n\nMyBatis3用户指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AE0PgRl_89WoIuOR2yeOog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykkm\n\nMyBatis3中文用户指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j1TMakPzclyy4q6hJXoxNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwqq\n\nMyBatis从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bgAr1YxXLUF--3gIzXvGGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykne\n\nMyBatis技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11Bb7EqCMrOZk9qdZeT9Yqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rytk\n\nSpring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nFPpcI__63rusGRnaAPtIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxst\n\nSpring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fantirermH4IZ_Bg1q9R0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arxs\n\n深入浅出MyBatis技术原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AR7-WWcbSlfBbMPvAVKH3w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqaq\n\n一本小小的MyBatis源码分析书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-ci1QjI-Pgqr92J9sAWYcg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cejt\n\n\n## MySQL\n\nMySQL5.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P2rN3s0e3PC_U7WXXyozGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjvd\n\nMySQL5权威指南中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dm7uzjGkoQZuN6uwb20HnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edfs\n\nMySQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kOo5TpfRepC2YkHkALX-AQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvmx\n\nMySQL高性能书籍_第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19kYPQ_Y-1QPWRPxtUrqVzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvkk\n\nMySQL管理之道，性能调优，高可用与监控（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q6ZeXnTTbsqZAk7hb1uxUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kwpb\n\nMySQL技术内幕.第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Edkesp8UWAvg3zsP7ASAVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bajp\n\nMySQL技术内幕：InnoDB存储引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Bzxj4jlK9WbyC5FmlEHaAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvnp\n\nMySQL技术内幕：InnoDB存储引擎（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19IgB4YxDaLWM4QyHPaPPhw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gtet\n\nMySQL技术内幕：SQL编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12o1A5-9YWVXlZ_8y9mnnsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tapk\n\nMySQL开发者SQL权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16WtukI0dylCyRe4mx9XZ2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nsvv\n\nMySQL权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uGow9RNUz5ZpzpOKcJHcqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qndv\n\nMySQL入门很简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Js1-s-YAPfTANBdEQVb7Tg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：huhm\n\nMySQL入门很简单－学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BXgczzido8DYWAw_5I0GUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nwgq\n\nMySQL数据库开发的三十六条规定-石展.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/183DOyuMxnPKTP9k_7mmpNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfxf\n\nMySQL性能调优与架构设计--全册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xy-7uSydvbty3O3V9FDdrQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aket\n\nMySQL性能调优与架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1njPg4JsO0lRpzuHKR2CLlw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjxv\n\nMysql性能优化教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LvCrKzNTHmjfK_nUMakXhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etch\n\nMySQL运维内参：MySQL、Galera、Inception核心原理与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KvaTodjLvF0Gn0eqt2DWoQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtmy\n\nMySQL最佳优化完美攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ul9g5e44BABbScNeWM50wA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chts\n\n高可用MySQL_构建健壮的数据中心.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LTcu5PFGvqSK15wsa44gbQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：envf\n\n高性能MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/101-v3r_-PHZtsXbJcDHAxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtwy\n\n高性能MySQL（第二版）中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1Z0tgOxm1TWWIEyTt-TNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akcb\n\n高性能MySQL（第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mzhuEvZ0n7Kwb6y4oqlUfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwns\n\n高性能MySQL第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YuxX2mrJmRKKRqdD0SIU4A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjps\n\n深入浅出MySQL++数据库开发、优化与管理维护（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-691pY2chOJp8pk6cZ2uTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wast\n\n深入浅出MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f2043vmGRx_dusNiANPNPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rjhc\n\n深入浅出MySQL数据库开发优化与管理维护.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PgWkcukmRUi1qXxD19381g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：absj\n\n## Netty\n\nNetty5.0架构剖析和源码解读.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DwH83VFmXv7Dtl4CaNUMGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqwx\n\nNettyinAction第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lehtQaEjHXGAJ19W8Wr7Ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecpc\n\nNetty权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1se8QSu4Fuypt1aBDO_U0ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbvj\n\nNetty实战（精髓）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12dcJfI17WxLBtk3lhuU5Gw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwxe\n\nNetty实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TVs1rydRUcrru8N030L2qg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wasw\n\n开源电子书：Netty4开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ft4211OqluHHlZazaqf0Dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpfw\n\n开源电子书：Netty手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qe6Yjw71LpHmA0PAVIGXbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mkpj\n\nNetty 入门与实战：仿写微信 IM 即时通讯系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h8E7ozV2kuGi1Eb-bsuVVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhct\n\n## Nginx\n\nNginx高性能Web服务器详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1amY8cgIv7Zxci8YFupIxCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjwk\n\nNginx开发从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lfiRc9A6xfE5NiZu6bPTQA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnja\n\n精通Nginx第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HPKEC-RBXQ0jX01jn8Rh_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgxu\n\n决战Nginx技术卷：高性能Web服务器部署与运维.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvIYX-QesMmay96QfUlNCA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccdy\n\n开源电子书：Nginx开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yEHGKaIIWmU0-yHGEx2Vkg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：guaa\n\n深入理解Nginx：模块开发与架构解析（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A01qpz8rTz7Gt4C0SQS8Cw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：umpm\n\n深入剖析Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12cb86rd92hMjsiean_Fzug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chpu\n\n实战Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VPXRFg_9TyChY18lwDXnyA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dexy\n\n实战Nginx：取代Apache的高性能Web服务器.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IVpgtls7W8x5IC0PWJ26IQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkej\n\n学习NginxHTTPServer中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12oMND71vtg94ZCxOhk1vVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjhj\n\n## Python\n\nHead_First_Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VFiGTiEH1UZ-O1Q7ESxWMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxjd\n\nIntermediate_Python中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JKffHxAIWXf9AT8uzJhePA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxhk\n\nNumPy攻略-Python科学计算与数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12sy-W34olu2FxJhuF-QO7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：urga\n\nPython100经典练习题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qEG1lr_-q4Sdjs0_GC_NRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvxx\n\nPython3.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fb_hFaz3j5DGN58IkrnS6w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgdk\n\nPython3程序开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NMNOw8CoRuYayX6pAlLAXg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfgn\n\nPython3高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QUanOjYMbvelhTJ0c-WfDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stdr\n\nPython3萌新入门笔记及练习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Y1R7C1Vbe9MyqpEatCoSaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tjrm\n\nPython3网络爬虫数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DonjcwYxRwtK2-UlWK102g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej\n\nPythonbyLiao.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lX2Ww1oH1rlNRsNiSUyRKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmkt\n\nPythonCookbook（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tCuQxQkdz3TWI6By6o8lhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ypqq\n\nPythonQtGUI快速编程PYQT编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qyY6q48Uaf5q18Hy-KlmJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rptg\n\nPythonWeb开发：测试驱动方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OwkXe4OiEZqnGxPiTSb-ow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgjf\n\nPythonWeb开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WN4hg9V1Gb8678ni6ZHb8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqad\n\nPython编程：从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rxHSlRYDeRzER86Iat3bBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qpew\n\nPython编程初学者指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QigptG5G3bUT3LBR5bGh4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfba\n\nPython编程导论第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DIW_V74AqzmbkSHqFM3VgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rymv\n\nPython编程快速上手-让繁琐工作自动化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cXMjJxqrgvE7mRfeo_YOqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfcg\n\nPython编程入门经典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bnwDSA2FtSOKU3OfSA4oHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvur\n\nPython编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Mxu0wcIplfr50h3uaFgINQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfbk\n\nPython标准库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14Sb6PDlIfE9Q6j-NwWpfSQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vyfw\n\nPython参考手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YnYbkhEfeyrFqK0bOHkx-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfmd\n\nPython程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UgzN9KU0ohONquoSp0fUQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：axgj\n\nPython地理空间分析指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YgFdxCGCD88mDbv-N5UPsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ibeq\n\nPython高级编程（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qlPvBIfqav2NOaXdRGyQEQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbpf\n\nPython高级编程（清华）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-2WqO3Vr6KIGPhhJ3VuZxg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtgk\n\nPython高性能编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AfkFyRnsHeCcrdnzTBmDbw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxee\n\nPython核心编程第三版中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1npiohmcnxEfOBYDz8xgl7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：djfv\n\nPython核心编程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q__Bab9vh6rrQTNcXs89OA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：evtr\n\nPython灰帽子-黑客与逆向工程师的Python编程之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VauUNGVKpDVcjP0nwHXxWg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhcc\n\nPython机器学习基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u7mQNMYqGHGa0z-JFpZzXw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgvu\n\nPython机器学习及实践－从零开始通往KAGGLE竞赛之路.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QL4Q-ZRSEN8Nw0FiGjQYNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apjt\n\nPython机器学习预测分析核心算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pl9gvj4Aa3UvUWH606gghA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btgd\n\nPython基础教程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P1CTx-pZVqmnjhgmabTtYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxtx\n\nPython技术参考大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16AorSuzzprwITIH5pQnLDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryv\n\nPython简明教程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RWVAaXsTN8UZVT93qYGAow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qqfd\n\nPython金融大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hPZGpgcJ4mrD-hPUHi6v-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkde\n\nPython金融实战###.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT6jWL6evmLno-DqxOwztQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdtd\n\nPython进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MgdTNPvZmL4wCO30fD1PYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpge\n\nPython开发技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cBUeX7g9FO-YmQfm4tjqew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fsen\n\nPython开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSoagU8uWVrd06PEV3M8cg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akms\n\nPython科学计算.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_QM1-pKyOX6igigD68dubA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnf\n\nPython科学计算张若愚.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BKh190iPHJ6YuV8dF4u-SA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqkk\n\nPython快速入门.（英文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iueknRUbscCwbuVJqnVAYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpmf\n\nPython面向对象编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VDoUBcjeJE3E4PvpHTDnkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfqt\n\nPython爬虫开发与项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19HvOnwlddYVTu1J_A3Ar_w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bppw\n\nPython入门经典-图灵图书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ADZTfo8d-BhWRVMTuc9vbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnys\n\nPython入门经典_以解决计算问题为导向的Python编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AtmPablSgCYCEGlzVt0nsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qwcc\n\nPython实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zuj5_Pf6hlBWRDcttgs1Hw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmkk\n\nPython数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oV8MkV9MeIEJd5vvKykSTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nuyd\n\nPython数据分析基础教程：NumPy学习指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n_3DdmFSJIr2hvrQVdYR_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtfw\n\nPython数据分析实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1etCRbwO9pnh92ZfDmk_Thw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpl0\n\nPython数据科学手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y0YDhW1j2c-7y3JYa5XcRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdpm\n\nPython数据可视化编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1t1M1cPbVc3Q4GY8KJzu3zQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wbbj\n\nPython网络编程基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LiKopPZbm-cl3EZSsQNvaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxmc\n\nPython网络数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_WYX4OuYfLZejHffPyxElw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avqp\n\nPython文本处理指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_2WB8aYQIsN_N_ejDHkqng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xsbp\n\nPython学习手册（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/112mWtJksF52XuuTbhAZDDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbkb\n\nPython学习手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yf-Kx3QUi4FxRA4EeMSKgg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newx\n\nPython语言及其应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M7vxF3rWfBkaEkMx1e1jfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jper\n\nPython语言入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ag-d9IZhcJJlq0EtjCGbRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjvg\n\nPython源码剖析-深度探索动态语言核心技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KOpCn8WpfD-u1TFDo2S1vQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrdk\n\nSelenium2自动化测试实战基于Python语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JHkKIFuYyOneIRIuZ5CWng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sned\n\n贝叶斯思维统计建模的PYTHON学习法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jgwOa7pAxWizS74wZgPsaA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvh\n\n笨办法学Python（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j3X9eHXyyiEx6Qt_5NG-hA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrwu\n\n编程小白的第一本Python入门书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1779Scda492B6cV_JDtYVKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gawm\n\n编写高质量代码改善Python程序的91个建议.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RbeRjcOyoED4XssfehWCrQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fdqf\n\n常用数据挖掘算法总结及Python实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17bCvudE58piFmzXuqPxyLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crhc\n\n从Excel到Python数据分析进阶指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wGm22yDbNZb3-fMxg9U1xw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sjej\n\n从Python开始学编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xbTixG5vp46jF978gzhjSA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jpcd\n\n基于Python实现的微信好友数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lUNyfgLjJQ7a3wYTJohSUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkxh\n\n简明Python教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yAKe7FKdjykrPw1VCf0dyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjpe\n\n精通Python爬虫框架Scrapy.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SsXFFATYsFuGpOIB4Wu0tA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agdt\n\n精通Python设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15mPbGSDAge1rerPKlPNzOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cstd\n\n可爱的Python脚本语言入门精品文章.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xa_FLvZY1HALR1DCQxgXkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcss\n\n利用Python进行数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_UV9ksV1nB-74Y6jUPGgBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqcg\n\n量化投资以Python为工具.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UY9A2psHqVvwBLFctFGhfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hqng\n\n流畅的Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tMriduk7AKgjhbso8PoYkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhra\n\n深度学习入门：基于Python的理论与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wHkyJ49Jd0-tWN2HnyseAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uptu\n\n深入Python3中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Om4fYBrWWQRsdubmQZOnQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fscr\n\n数据结构与算法-Python语言描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_26rHItQjriX-uoAnfDDIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srqh\n\n网络爬虫－Python和数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MbwZbJ4iCa3d--QGY_gvvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yngd\n\n用Python进行自然语言处理（中文翻译NLTK）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15g8eTQEUTNC4XfGFAXlqSg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yunh\n\n用Python写网络爬虫.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yTWnUNcViJoXTPH07sRjyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nhas\n\n征服Python语言基础与典型应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11dPvt3a-TK_DZafOLWHXyw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfpc\n\n## RabbitMQ\n\nLearningRabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11OLPEtgvamlehbM-kaJPCQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjef\n\nManning.RabbitMQ.in.Depth.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/141oa5XeaJoYbImQ1J1AVpg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmvx\n\nRabbitMQinAction.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Z-PX_oQvCrm8ZkfqZRFsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kqnj\n\nRabbitMQ安装与使用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mCd1AXHWZ_SNoLe05y53dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ryge\n\nRabbitMQ实战+高效部署分布式消息队列.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AW-9Ld_h0oNBo8MBNWmlIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnvq\n\nRabbitMQ实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16KUEfZ7E0LQ9EtWVZZoq1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfa\n\nRabbitMQ学习整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dqd2kKDrRyF8BFfhIM3_3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quhr\n\nRabbitMQ研究v1.1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tZtvd8venJ-OH2dgpz3MyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvhh\n\nRocketMQ实战与原理解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YFSlSY9fssmzGNl4pAGTjA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhc\n\n深入RabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u1zZr6sYHgCk_ombXpwgVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jwns\n\n## Redis\n\nRedis4.xCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT5vxTrQ6GkplG7oC_njig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyje\n\nRedis开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HrA_VRs6-eTS1eV1a3QX7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qehg\n\nRedis开发运维实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LV8ltQSf9eZIxITQUftoDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txvx\n\nRedis开发运维指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y5toFOh6L78MBmm8NgsoGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kegb\n\nRedis命令参考.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QE2WAnsasYtoVLzDcyvd5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：haps\n\nredis命令参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VZOS8sNEt1VrdhGJWUsH6Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxpf\n\nRedis入门手册（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TLR49uLo-QKh6rkDmK2UIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnmw\n\nRedis入门指南+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13ouDpjbckPseqR9unl8Qlg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwrx\n\nRedis入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KHQ1IRHFwM7QR7MQVDLIQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：setg\n\nRedis入门指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VaYgcB11STHoRbY0v5Cbjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyry\n\nRedis设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x485r6hUdA6ReGS_Qs-8ug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgja\n\nRedis设计与实现（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iBfqH71XF21v7UC8hp4gVA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvhp\n\nRedis深度历险：核心原理和应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dv-L9npNpGst2NB9QnF-9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmjs\n\nRedis实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TC2fhntA5c3-AGQeLxWN8Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bayn\n\nRedis实战JosiahL.Carlson.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JU2GEnIx4Z3dY_GjmpZ_ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcea\n\nRedis实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fJklWMC9wxvbS4WJSYLAfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sdkm\n\nRedis小白入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LQG-Tens7eeKk2gTGlacQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqmt\n\nRedis学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NkE18t6odi2HXv9Oo52LOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbc\n\n左手MongoDB，右手Redis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mqaPNHWzR2mAQOR9MtQYYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：usvk\n\n## Scala\n\nScala伴生对象.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AjvtMiN_yNmkjHBWwIz1wA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtbr\n\nScala编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15pq_oc-8ekzfPFfri415hQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swak\n\nScala编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pyEdgq_T0VBoguk4zSIDHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wudx\n\nScala编程思想-原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1niHLNXLzzskDEGNprsZSyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqbb\n\nScala并发编程程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mj_9nxhpaUr9i3Do8WhyNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgpa\n\nScala程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hAYn_whVc1uJ2wyk3qdlzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kmwv\n\nScala基础语法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RDSS-Eo0SPgW_uyfKwBCCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wqet\n\nScala集合.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AER6yVefvsjBdx0qfX4Afg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gyyf\n\nScala学习手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XePbusG3vktRYwoQyM6eqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhdt\n\nScala语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eE7s7mSKmEbyE0UEhEKTtQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhwu\n\n快学Scala.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MubjIXRpV00O4iuk8BHN2w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfdv\n\n## Solr\n\nApacheSolrEssentials.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Yf5ACO-f2CwWllCB90Va6Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngks\n\nApacheSolr参考指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PveHHBLEa0UxlUM38_h9ng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvtx\n\ncookbooksolr4.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1G0AKrEIwS9sPhnXgSmF-1w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucyq\n\nJava搜索服务Solr操作指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SHLK-B5km75SvV8Vlhv9XA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frjr\n\nSolr+In+Action.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n2Ru2eEVAJhep6s9UfHFog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhpj\n\nSolrJ教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AF7OMIaxKH24WBSn0Sz0MA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ttnn\n\nSolr的应用教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i6P1YWKu2P1hdOKxhWiV4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydqr\n\nSolr权威指南上卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZLt1IPqpib1shVCwXH_wuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdeh\n\nSolr权威指南下卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M5IyLBOevsCppdmcKiPr0A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqbv\n\nSolr实战中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xAOp9m5nTedRTWQoWN0CBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqbm\n\n搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14dPfzeUfz_VOiGIAyUsAWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mevj\n\n用Solr构建垂直搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fztu32bV-8gzlLA63YOtDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utgg\n\n## Spark\n\nLearningSpark.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a3pZe9TldXUHp_Cc0e_hMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpbb\n\nSparkContext.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BmslNv9yFOOHAm1v0zNU9g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahwk\n\nSparkCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SbU88xeawgY43To6x0lqIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjnw\n\nspark编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oBgXPSls4C2teTD4l1KljA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryq\n\nSpark初识.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PSgvOmfNshU_MLtyI09WVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecua\n\nSpark大数据处理：技术应用与性能优化（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rX0IMFa9mGOhkalQ3DBGAQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffyf\n\nSpark大数据分析实战（大数据技术丛书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NgQ9bG27C0Y10HPe_s5pxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sccm\n\nSpark高级数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrcXrbyKGFdXJaK3EPY3KQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mntr\n\nSpark机器学习-NickPentreath.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dnYnxh0Wpej4O78lZmBFdA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uubr\n\nSpark机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f1cgmkbyfAmXnQzp3RfXXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkwp\n\nSpark快速大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18rEWffYn03R9MMPXZyXt4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rqdp\n\nSpark快速数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/125J1v1mT5sjpho1RALszGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhvq\n\nSpark内核.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrAjbQwrIZoGeqiuWZgXWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvj\n\nSpark之SQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UmzDoY2i4Rv6RP_x2a5Dyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yamy\n\nSpark总结.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oS-ORk8JmuyD2Rvhlswngw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：htvg\n\n大数据Spark企业级实战版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E5t7vvCg-lL4pcHPBuQvOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vsye\n\n深入理解Spark：核心思想与源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ui-OYpKb0PrZfKS-SR5cUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvbc\n\n数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QjxarlwM3jR53fBd8h3vJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：scym\n\n## Spring\n\nJavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13t5wcfnzzSI8MaSoDs-f6A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuqh\n\nJavaEE设计模式：Spring企业级开发最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nwMCWnj6AbBVTjzv27Spsg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rber\n\nSpring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mA9IBQAXMFHSuxMYb0dwOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuau\n\nSpring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10cNgpDROfBl8Y9YaiYOKXQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uugy\n\nSpring+Security3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bSbTHCM5sdyK4vzcmsRxsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cecb\n\nSpring.in.Action_4th.Edition-Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JeGK6-fJM5JA2ob0LGEp5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbna\n\nSpring3.0就这么简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vcGkxbdbPeJr8ZFpbasiUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgfh\n\nSpringBatch批处理框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14J6GWb8yloJobdjTn6Yo8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhaq\n\nSpringDataJPA从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mb60lfExZerVL74IMMcB-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhfd\n\nSpringData实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YFgOkiOdgpI-YxS2snxDVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ymgf\n\nSpringframeworkreference.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jeZ1XWcSTTLqKovtq07BLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gghe\n\nSpringinaction中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19hVshSMI9dKPbxj8mgufSg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvpv\n\nSpringMvc教学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yBGQhQrMuDD2yW2Yo1Kurg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxym\n\nSpring技术内幕：深入解析Spring架构与设计原理-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14O9Be78yllAL42XgwyD6Xw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvwg\n\nSpring揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12lJjIJQBpUFJEe6SHReEFA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bmtb\n\nSpring揭秘（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y3ra1sLoZgRMLw5NwPnkfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqqa\n\nSpring实战（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ym5f1CjAaYTp2UC7q6PSLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtsa\n\nSpring实战（第三版）.（Spring.in.Action.3rd.Edition）.Craig.Walls.文字版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JWMfgnsNN3CiN4kKnhAedQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xuaq\n\nSpring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AxldKhH5nE457d_z7xQ0fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uwey\n\nSpring微服务.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CNk_cfmr2NkT_wLdGB_I9g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dycv\n\nSpring微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MfsYnFhcS8prjR0MgidsFA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wtqy\n\nSpring源码深度解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yUdNGv7JwkimJ-D8ELk4_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnam\n\nSpring源码深度解析[郝佳编著]sample.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1N55_R0jemO6OYrKDeTMtvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：caha\n\nSpring中文开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1trSR0TnHIwXlwxhHaT1BOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utnd\n\n精通Spring+4.x++企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sboKbsdGcoJ_9C-ghJ-EzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uyhq\n\n精通Spring4.X企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oGAa4XQHyqZwn5fEmDLyLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjms\n\n精通SpringMVC4.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UPTbM8hzQXmuzHRzYnvavA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svmc\n\n精通Spring（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TjoTtbfCUpY9vjkEXfj3-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdb\n\n开源电子书：SpringMVC开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nvqA3ZUsmt4nHlNo6KtFnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbwt\n\n看透SpringMVC源代码分析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Axx-brgEQPAyceeduOC4EA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qgbs\n\n\n## SpringBoot\n\nJavaEE开发的颠覆者SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18_ChlhYC5WPR0z2em0XEJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skhv\n\nSpringBoot2参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L9ybprmzbVKVO7dM9N_dZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wcqd\n\nSpringBoot2精髓.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17z6b52RndqkYMy3XogSd8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmyr\n\nSpringBootCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r4_0rJJoAcOS8BHLlMsmvw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjq\n\nSpringBootreference-guide-zh.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ueA9qfWcEgmIo-KFuY4WYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvck\n\nSpringBoot揭秘：快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1I3kIasza2KLVGalih1jueA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wp25\n\nSpringBoot揭秘快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YYCf7Nt4fIWshEDqOOHCxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfp\n\nSpringBoot企业级应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10oNwJpuoxIIeLJo_1L--WQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytyn\n\nSpringBoot实战,丁雪丰（译者）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kH2XcrxHu9blC-VpWIOT6g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：erre\n\nSpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yLfvcBg6kialAeCK8UtA3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mcxf\n\nSpringBoot实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bJXfMZbKc7BRW4Os_e0ZQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：iqh5\n\n从零开始学SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wvveBEUlFd39oIE13CeMjg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nffk\n\n开源电子书：SpringBoot开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zK-xruUmxZcMl_PBu537eg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnca\n\n深入浅出SpringBoot2.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a0KXvVa0DxgijdD2iFi3nA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cvrv\n\n深入实践SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1o28NYp6qS0GwErBZkQQEHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fhce\n\n微服务架构基础SpringBoot+SpringCloud+Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DKC_sCenraRpiSrWUiTrXw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrac\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qSMW_4LOLB5u3wggmpNgSQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkws\n\n一步一步学SpringBoot2微服务项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m0hb9sIdkp3L_uvQEVof4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etuc\n\n## SpringCloud\n\nSpringCloudDalston中文文档+参考手册+中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17OOwAEwU9m1xH9peLYwNuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gepu\n\nSpringCloudFinchley.RELEASE参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UYPHxpKS4ApQ5HPIjDg14A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbcb\n\nSpringCloud_Data_Flow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zg2AZwiLBCsUkBHEpv-_zQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqsb\n\nSpringCloud微服务架构进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CvIBWtGQkM30gb6vIuB_TA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrpg\n\nSpringCloud微服务架构开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hb5Ha9Df7DGhgysizIKG1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaje\n\nSpringCloud微服务实战-翟永超-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jzzH6aZMuplJn2f55dIreg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svry\n\nSpringCloud微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17fBvrg0dS3jShZCtVextKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkf\n\nSpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RZNBY5GtJEUWnSvUNOfl2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytxu\n\nSpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tVqVWKNM2aAxM-CfDqL6bw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eygt\n\nSpringCloud中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AsaM1V-xAWB1N1HE0ygf1Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjde\n\n疯狂SpringCloud微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17m-C1i1m4UZQ1fBU_7AKjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：m75a\n\n深入理解SpringCloud与微服务构建-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UvDP10G8oFquvLkkou9vKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpaf\n\n深入理解SpringCloud与微服务构建.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dvcYUenti_PGA3IFDjDPog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gpvu\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SJH1l-B_NS0SvrSn9MvCcQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyde\n\n重新定义SpringCloud实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1toi6LIOPhm7uIcBshhBtJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr\n\n## TCPIP\n\nHTTP权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V-E7qA1chayHptjMqWD4jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfxn\n\nTCPIP网络编程技术基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A0tNLreWUnfnC0OZNRzYzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egcj\n\nTCPIP详解卷1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18-1DGhzaiIGFCqnrDwuRcw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhqk\n\nTCPIP详解卷2.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TxZ6eXOKXMLtuwUQ11b-ZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hckb\n\nTCPIP详解卷3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1U-Bu8UCYxbo82T9WPIkILQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbbs\n\n图解HTTP.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iBy_vgZybISzYQ-pcHGXlQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uybd\n\n图解TCPIP（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4WusvoRv5JUT5N136KbPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eaeg\n\n## Tomcat\n\nHowTomcatWorks中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bUzW18tucUfnpZplko1QuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqpn\n\nJava+Web开发与实战--Eclipse+Tomcat+Servlet+JSP整合应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kIkW5Dy4MG19TST7MWsBlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnje\n\nTomcat架构解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1e_gKL2PnAratdONt3ktbvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtph\n\nTomcat内核设计剖析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R1zlCwMWNOeuNHTmvbw00g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aycy\n\nTomcat权威指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvlZIh42lE9jt2oZdYntDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcpx\n\nTomcat源码研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PR52YaEr_IISdx0VAXVoTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：teru\n\n基于Tomcat5.0和_Axis2开发Web_Service应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zFz490uTpZ5XfpVV9m3UVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhkw\n\n深入剖析Tomcat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bIQQtU5IDwgqMufy6qRtRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkmw\n\n## Zookeeper\n\nNetty_Redis_Zookeeper高并发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HglGmsYXMxLn5vme3-qtdQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfje\n\nZookeeper_3.3.5源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xIWKqaK8QQSjRd0qzMqwVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdjy\n\nZooKeeper分布式过程协同技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V0yMLS7N_zl5FBgOLRq67w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwqs\n\nZooKeeper原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1T1I8mrhHn16-4MZGi_e8LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdv\n\n从Paxos到Zookeeper分布式一致性原理与实践（书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hIQ0y498zyjOPsK09-8wEw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xamx\n\n## 并发编程\n\nJava并发编程的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12noqXaPB5jQqf-dZq_mVRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vvqk\n\nJava并发编程核心方法与框架,高洪岩著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AbDG2WWDfEZDNPsmmc3cpA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkx\n\nJava并发编程实践（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Fp2XewwqOPQ4DDS0CP26Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udhx\n\nJava并发编程实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z31bV_2pKLb8QYGeqIaYTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pygh\n\nJava并发编程学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DiWDJysVBMcC3BU2-77E2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmat\n\nJava程序性能优化让你的Java程序更快、更稳定.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Zu7PDffnvK-jQJ-2pTS_xg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dysx\n\nJava多线程编程核心技术-迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/194HtZ2V0Fo2qPjNKmCo3ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cwnt\n\nJava多线程编程核心技术_.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IWYc0eB7T6cB1IMbW4bb9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxqn\n\nJava多线程编程深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jiOK9QuIwkLkR53Qu8SEbQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsrq\n\nJava线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BhqzszXZMCvxPNyUO0l6OQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grjv\n\nJava性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YsLDmlDmpf2D1ID1K0uCRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrcr\n\nUNIX网络编程卷1(第3版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_tLFKEMmZeCbHEttWn-9hQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fyhq\n\nUNIX网络编程卷1(第3版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cNyPJY6Pgf1erI5tPqwGkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjph\n\nUNIX网络编程卷2(第2版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16iP-wOr-97AAnmhkfTN8_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wujv\n\nUNIX网络编程卷2(第2版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12TQGM2WSWTCO6_YmuEhj-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvme\n\n高并发环境下的数据产品架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14P_iYOF9iTNv4swqv9H3tA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngnp\n\n七周七并发模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NQlbnSS9aL5cjpVWhqzFAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hhvn\n\n深入浅出 Java 多线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wLJPyMZK01aQQj4xE6VsBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvec\n\n实战Java高并发程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O9ITt7hdt5i1sDSLIeTFUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajhj\n\n搜索引擎优化魔法书+SEO+Magic+Book.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ulpf4W7o-MM7kLSk_3jopg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dejw\n\n## 大数据类\n\nDruid实时大数据分析原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/143Fl3BExT295-apzDYERmQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvwt\n\n白话大数据与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H3UPxGOLyboxe-WT8rRxiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfsk\n\n百度2015大数据云计算研发笔试卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ANm9rUkfPaLE2v30cWfdXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjan\n\n大话数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ExZMQaZVhcwgbGOcjgD9kA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udnq\n\n大数据：互联网大规模数据挖掘与分布式处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UdsXXk-o1Ay1w1HM46l5Uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytah\n\n大数据处理hive深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14ohVpdzzq-kybnX_AQAKqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cchf\n\n大数据时代：生活、工作与思维的大变革》.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qheslcB63Wl1RgyroXXU-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fmhd\n\n大数据之路：阿里巴巴大数据实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yB0FYU0selFFaW9hHqUBeA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utjg\n\n分布式文件系统HDFS，大数据存储实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V_e-unVW9enh39FX8F60kQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvvf\n\n傅强-当当在大数据挖掘分析与管理—个性化精准营销方面的探索.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mZP6vdBzErKVVmIY6VFz4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgac\n\n用户网络行为画像大数据中的用户网络行为画像分析与内容推荐应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NomTFjPQGsBqubmmNqWhIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdsy\n\n云计算大数据10.9日课腾讯邮箱垃圾邮箱解密-机器学习之贝叶斯分类.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EEdMdCYi6f-pdz_w57IaWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cadp\n\n云计算和大数据时代网络技术揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1q9iVEL2eHolQPrGbq2yYjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfeu\n\n自己动手做大数据系统.张魁（带书签文字版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oef-psBj1qyYh3A7b5Y2lQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xugy\n\n## 计算机类\n\n编码：隐匿在计算机软硬件背后的语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ub9V4Kyo-Uqk8_nGJlFXhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wxsc\n\n程序是怎样跑起来的.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FvoZx3Izkc8-4PrlS1qrAQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtdf\n\n程序员的数学3+线性代数.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OTxVO8d_xx08Fy86s6IZmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynfv\n\n计算机操作系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AHemuAa0ylbcaOrAqXNkdQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uudw\n\n计算机操作系统（第3版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i3aCX4UPEWRmbaPN1j_cpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdpc\n\n计算机系统要素：从零开始构建现代计算机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-rZX-unw9HhH7Z-vqosJJg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vary\n\n计算机组成：结构化方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YT8u3GT5jdmpWSMc3tSAoA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avgg\n\n计算机组成及汇编语言原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Me5ih2DjRku7m_32bbvvUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkme\n\n计算机组成与嵌入式系统原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sGkzfLXCIfZHoAatt4dApA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aknv\n\n计算机组成与设计硬件软件接口原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yVvP4VmAKcVUgxjOwEjy-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyxu\n\n计算机组成与体系结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12wuTAlW0Wx0eZ-FGHvje5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qcvk\n\n计算机组成与体系结构：性能设计第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19MY0qTxeJTTlu2cD7TtOTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mjqd\n\n计算机组成原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qKi0pi85y4DhJ3tiG4I3HA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkdx\n\n计算理论导引原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bUKiyTvLBwn2-UuZJ0-FcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wpqp\n\n深入理解计算机系统（原书第三版3）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16hvccmhx4k6IMGcE89_1KA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xyyu\n\n实时系统与编程语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oqAaL8_vHDgOychXpKXdPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sbuy\n\n网络科学原理与应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ywhevg1Yryj9jWI8kGOnKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnty\n\n## 架构设计\n\nMicrosoft.NET.框架程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kQrL65G9MvFJHVWTYCIF4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgtb\n\n阿里双11系统管控调度架构与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SPIZK_zzFobxhHmTSBDTGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：acmb\n\n程序员必读之软件架构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WSIqyXJ9hxZTrucSXbzn7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ysdp\n\n大规模分布式存储系统：原理解析与架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lSqIq8U6gyFDP0uVpqbLTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dckf\n\n大规模分布式系统架构与设计实战..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VzZ7rPaTYt6CXCirDrdJ3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：embe\n\n大数据架构师指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m_fOWgcxs1KB0g6ZSQkcrw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqgx\n\n大数据架构详解：从数据获取到深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BOxy1UYgpQnwZQOjsHaUhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdtk\n\n大型电商分布式系统实践 - 第三课.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c_DDSlFcVvCGVcRhTkDL3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gafm\n\n大型分布式网站架构设计与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H2d-yqMcNoK1nss04B8auA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nbuw\n\n大型分布式网站架构设计与实践.带目录书签..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167Glqiy01WM5O6dlzwhk4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdtt\n\n大型网站服务器容量规划（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PcYP-GWVaNo0w4scEzdAhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejjn\n\n大型网站技术架构：核心原理与案例分析+李智慧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OVmhvHeEPzgwPEbPplcgGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmem\n\n大型网站技术架构：核心原理与案例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R8ItDeKjXdZChQmYjNDTdw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmxj\n\n分布式系统原理 介绍.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O_EMeQ8ZnhUpQurCME8dJQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trrb\n\n计算机程序设计艺术（第二卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fbtY-Zd6qylgpnWJ1EnsgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbb\n\n计算机程序设计艺术（第三卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1aASj5P2lPohVGBb0HRif3w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhnd\n\n计算机程序设计艺术（第一卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KiP1N-KmCWkFptqVQC5Qfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pfrk\n\n计算机网络与因特网原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IcaX8b29y_qULbcUKSR6dg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdfh\n\n计算机系统概论（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15dGDm5XHjSL_qjmWmsyFpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dgpe\n\n计算机系统结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16__4vm_xk9QV4Jt35klVZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfca\n\n架构即未来现代企业可扩展的Web架构流程和组织原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uErhVIjSuczf1jm6YxZs1Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwuy\n\n架构探险：从零开始写分布式服务框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pmU3H0sEYfolwuy02P3yew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arfq\n\n架构探险从零开始写Javaweb框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VO93QIrOWu800GzwVKIhTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwws\n\n架构演进：滴滴打车架构演变及应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PCW2Y8psLPI-Hb3pXaelfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgyn\n\n架构演进：豆瓣架构演进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gG8fgFQoPGypigCzgtoZrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuhm\n\n架构演进：京东服务框架实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Zw3MG4k6K5G5Ao4PXU3wg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：psqv\n\n架构演进：京东应用架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16ZUuKJgy6NaPpP-kMG1yzw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbmq\n\n架构演进：汽车之家架构分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wHHeiii23aui5-g6yBluZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wber\n\n架构演进：人寿系统架构演变.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OA56l9dM8ho7qA7D28jOUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmms\n\n架构演进：网易开源.pptx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AGn0Og5v3QyTrwwmMAI8Ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykgy\n\n架构演进：微信之道－至简.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qRy8pJly-tN3JMUg4cpspA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yapu\n\n架构演进：小米的经验分享.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d_zYN8SExBJZz5ezXX2BKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmqn\n\n架构演进：一亿用户增长背后的架构秘密（全文PPT）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eGKa-TAw8rRDK7vrM20oIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augf\n\n架构演进：知乎架构变迁史.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CZr31zOQfdWXDSg6dEN4nw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eknk\n\n面向对象程序设计图形应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h0C6BVqLeJWC7t1F6dGshQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxnq\n\n面向对象软件工程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_SeVnUc1Hu413KhzDcAFgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkhm\n\n面向对象与传统软件工程统一过程的理论与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tkej8trl4c36HwnzgcioaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxd\n\n敏捷软件开发：原则、模式与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HujV9N_tIm2Ue-M_F_9eNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rspa\n\n轻量级微服务架构（上册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18qfvhPp649heoFmXktvFOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xftj\n\n轻量级微服务架构（下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zoX-AJLBxN5yUa5VYTgBoQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcmb\n\n人人都是架构师+分布式系统架构落地与瓶颈突破.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4sMiCOdT06pxd-e4-dbcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dirl\n\n软件安全从源头开始.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KFw4y1VXHsOmqwOfb8oVew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdsr\n\n软件工程架构驱动的软件开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mntiX1Sznsl8yqS98zSHxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjtd\n\n软件工程面向对象和传统的方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fG3_AqJu-tLX2QHUOw-Q7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ews3\n\n软件工程原书第9版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1o8Ymui9KxyEdLy3A8E-mXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdgn\n\n软件构架实践_第二版_林_巴斯等著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fzHMMsD2wK7b4Xp-CugCeQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhfx\n\n软件架构师的12项修炼.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QLZMF249JTHhcY6bDENNWg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxyr\n\n软件可靠性方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IPzTU6DIrv31Gi1ZCMHdOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahss\n\n深入理解Nginx模块开发与架构解析第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ldqoJcfcSIeBSWByqPBOVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sknj\n\n数据密集型应用系统设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vo1nEA1gj-1NF_t5lVh-KA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgkx\n\n数据通信、计算机网络与开放系统（原书第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Fv9GeGueBOHOxcnH5o53Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjst\n\n数据通信基础设施、联网和安全原书第七版T.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nWlpGl3m87mzVw5e-lNS4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njdc\n\n数据通信与网络-原书第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zgd8JZF8OXG8f3O76ob0JA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjkb\n\n数字设计和计算机体系结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mokVM4hllmfU1_dSR0Q3RQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdxx\n\n数字图像处理疑难解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/154jpOVPO8CNRtgg8s2UtgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：spdu\n\n推荐系统整体架构和mycat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CuZ8VUbbJMlqZ3iNHyvPng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfrm\n\n微服设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eXxSXr_At-Dm_fk_jQCOBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atfj\n\n微服务分布式构架开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QUMfzz7sEnA6dvaTWhsJfA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：abgn\n\n微服务架构与实践（王磊著）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LFeA-0pDUbDjxqpJ8KB3xg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntaw\n\n系统分析与设计导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L_9aH3VmLpi8slWRGI8dZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pncy\n\n系统分析与设计教程原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11D62FySweDeHetxiSgaBhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wnuk\n\n系统分析与设计敏捷迭代方法原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1slWRoJVVfHzOOYRsM2y8iw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ycyd\n\n系统分析与设计原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AWfWNGlOUQ1MwMXuUkOfvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgsr\n\n系统架构：复杂系统的产品设计与开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L5aTNNiasKgr5zEKG2kXNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xstp\n\n现代操作系统第三版英文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cqO-1t5ktFyaLGoSFYrFmA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rebf\n\n阎宏-Java与模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mZ3euwfuuZYZz0dWD2ETeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdn\n\n一线架构师实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f_6dngfklUJLM7hOhD83lQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ktet\n\n亿级流量网站架构核心技术+跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MoSsDMzUzGc513NCrGZqzg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rgww\n\n亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hLOp66q0bIlJ3XRTFNZTgg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upfs\n\n云计算架构技术与实践+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pi4i2YntSaPYdoSHvsonVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newj\n\n重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17TwdU1c0BZAbGAOD-PAQ7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fceb\n\n自动机理论、语言和计算导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zlg_0XChqqcCO5oQAqNQ8g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsyr\n\n## 人工智能\n\n白话深度学习与TensorFlow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZLw__yjBUaZlWksJp7v7FA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ddjm\n\n机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1D5Ev9mTVN7js9OhjpKH2yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t44o\n\n机器学习numpy和pandas基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kk9_TAsA_R6Yb_VJKx2duw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhys\n\n机器学习实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pTrPGVbmLQMrIcSwMCSbLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecgp\n\n人工智能复杂问题求解的结构和策略原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SDsUMKH04iyaCT9NMlapbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ermp\n\n人工智能智能系统指南（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wvu4z-_LSzofglfox1e4ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnxh\n\n深度学习-无水印-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FY_754yfqikeY5qc1rKEmw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfnn\n\n神经网络和深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CJbzqyobhwqchZksZN7yCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfax\n\n神经网络与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L3IqJJXj8IEw5DYhu17YWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mgtu\n\n神经网络原理.原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Btx6EMx-zgP1wFT1_nKrZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhc5\n\n## 软件测试\n\n软件测试基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10s7yvEvwMy1caKWAwcFUPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdbt\n\n软件测试基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oRJNseVIFgDs6SLBL3XFZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qaav\n\n软件测试原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1aTkoMSzGdkAa1wXxmOLMbw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krgp\n\n软件测试原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10vW1n9E_7_O4bwdlOMX0EA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcwd\n\n## 设计模式\n\n23种Java设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eh5oqb8vbdq5RAlSL79D8Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yfja\n\n23种设计模式知识要点.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QAL-yAVeqjRcwfsD2JGcvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pynv\n\n24个Java代码（Java经典模式设计）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OoosrBfBWK9QAK0TQIE4ew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdkn\n\nHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a9C2j3RckNZZwCWOzZagzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnws\n\nJavaHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSFgFkhK6lOlIGog2r8teA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfhj\n\nJavaWeb模式设计之道（jb51.net）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ViNmcCBVrjbhzC4YlGtVOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egag\n\nJava并发编程：设计原则与模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MLgSHc7_gYUF2p3IP6vjUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxvt\n\nJava多线程编程实战指南设计模式篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OakxWURtDF1MhnB5ChmvSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awws\n\nJava设计模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IktvcAQWoBjbOVq_LXe7Ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dasf\n\n大话设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1nQRPcA5hNyxqQas2SWEg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afcx\n\n设计模式-可复用面向对象软件的基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1odKYhYMr4oHMhKtkQHXmog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewss\n\n设计模式之禅.秦小波.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WWXQJ_kXE7bFNL6YGg2Uww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rsun\n\n设计模式之禅（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KWoz-LdblGericVV-ydvqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ehkb\n\n图解Java多线程设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GZsmyslADdDiG9ubWqQ1RQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dsvh\n\n图解设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1teydg8GdbD2e-dmiNbJ1NQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wubt\n\n研磨设计模式-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_Eh7vreNW5U69pSVz9UZgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvud\n\n研磨设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Hdjlf0Go3N6vzQIBqGfqvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhpx\n\n## 数据库类\n\nJava网站数据库设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_J34VM8FGV5GvIpcnmNEMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrmj\n\nPostgreSQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kMwCMbF-HPnwHN3Eub5dhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjar\n\nPostgreSQL详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Zlr13EcrCVviOqi5uMZy2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpbb\n\nPowerDesigner16系统分析与建模实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19uRhLZ-y-wSeJLwtDHg1LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpc\n\nPowerDesigner_15.1教程（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eOffPVGYRVnuUxKZFz0C5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvag\n\nPowerDesigner教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oPirlfDkZ8KPbBZ05cJdQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjau\n\nSQLCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BNG6VD7RGH5gIRX63xcwtA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbgc\n\nSQLite权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b4ou4nLGMtDOzuW0UwmTIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbpu\n\nSQL查询的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EvRbBfMRjBeKhSrCe36DHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxxm\n\nSQL经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/192IgNkJiN_jCWn4uM5Yr0w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrmj\n\nSQL语句大全大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT7Pp57YlCrBk41z_eIyUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkvr\n\nSQL语言艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11Dte6piqSqH5Pu6kJ-aY3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vuvg\n\nSQL注入攻击与防御第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-8dOeTUpDLDrvVJ-Cvc7Lg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyux\n\nSQL注入攻击与防御原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1joJZS9_QK4Pzc1rzXlKxlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efms\n\nVisualC#数据库高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yMlj5LyHy9Wz4camNrLeGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：l0lz\n\n设计有效的数据库系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kt5mzpLMsvN51RDIszTaaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnbx\n\n数据库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19eNfc0qaI5nZn4nSS0wKgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqxw\n\n数据库查询优化器的艺术：原理解析与SQL性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fr11ipECSDb-svyemX4zDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxcv\n\n数据库管理基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1edShCJlIVc1tDRqiJmNgJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saky\n\n数据库管理系统第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VgjYq5wkzPa5c0GpbTnTYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hwek\n\n数据库设计教程第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1llPfN3VXo6Mw5YPaycYRiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bkww\n\n数据库系统导论-原书第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RK6fCpXZX3fEkvM5SBU2_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dhge\n\n数据库系统概念-原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DkVWc-iGeBWWxZuOtxYwxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sakx\n\n数据库系统基础教程-原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w33HafOgk7h3GLJ-Ut5Zzg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftbp\n\n数据库系统全书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z54u7ZLvyHMEVO-aP2iwcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhvb\n\n数据库系统设计实现与管理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Up8b6C498s7M1lLlC0ReXQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xddg\n\n数据库系统实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FWzyeTSTOGoCnDNTpUOSfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxqx\n\n数据库与事务处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PsJ45MHV0PCsgyrj8pDTzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yspv\n\n## 数据挖掘\n\n社交网站的数据挖掘与分析_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pu9o4QYGXmBsgvJ0sGqjaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vywe\n\n数据挖掘：实用机器学习技术（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NroTWqpcLB19cl1IyWyOpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjmb\n\n数据挖掘概念与技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pumcjYmKfFZ8VaUcZgCEYw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykup\n\n数据挖掘基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EREYruDyMCPmq9kqR7Uq8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yckk\n\n数据挖掘实用机器学习工具与技术原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Li7Xjrwmipc0U9ijr5WwUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwgt\n\n数据挖掘原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gu8oHS2XtuPv5Jxu77DlLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vkmp\n\n## 算法系列\n\nC数据结构和算法分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/119TlKdgXWYj5QdrGwCyicA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ckwh\n\nC数值算法程序大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zHEV2a4YA4MN0_jN4iZLPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgw\n\nJava常用算法手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HWvLLZPJE61zXIm8yaoapg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skcw\n\nJava常用算法手册第三版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vm36ZPfncut62oZ2jJ5-3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjk\n\nJava数据结构和算法.第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_EKJ5IgHjZFYdLk1o4Mu2w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：csad\n\n啊哈！算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c8pUakJY6xfOYUaVJKvnqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：npxg\n\n大数据算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b9H66pNc8Z0LzMvLlgizMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvuc\n\n高级数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VdHbHaxefL7CA0yoniZGIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grrm\n\n和小浩学算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jOHwgH8FY5QKpZnJRhzRvA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtke\n\n计算机算法分析与设计课件.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PFCrqYhrgJUDtXFti-P1LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kctg\n\n经典算法大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rZ6xTTlHOVtqoAImgJcakw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfj\n\n离散数学导学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SzLiz4kVKQfgAdmdK3yrbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srjf\n\n离散数学及其应用原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w4iebO1bfNocgMfPa8XuQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjck\n\n漫画算法：小灰的算法之旅 - 魏梦舒.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tFgroWnaYQr-X2ci5OtPRQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjms\n\n密码学导引.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h099raG_ivawHCZ4tWk31w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twdc\n\n密码学基础教程秘密与承诺.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pY7nr8w6Uhh4WjhY4PYrjg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tysf\n\n密码学算法协议c实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m2Hy-VfgwD5fx6MK273kJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twqg\n\n深入理解机器学习从原理到算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1szpU-intfQFlzxkxX1WEHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwgp\n\n数据结构（C#语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mcQEiZMNZsODci_n0QUbZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uavm\n\n数据结构（Java版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Tjp1nRZuhWhvC_HKwxYbuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mckf\n\n数据结构讲义（严蔚敏版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eFHuo2TmZhl6RH7FwwgR_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwyg\n\n数据结构实例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JNYwq4XX8Mp4a7SYK_jcQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtwf\n\n数据结构与STL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pg8gyoFANjlCYyc4CNq_vw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccgm\n\n数据结构与算法-JAVA语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ofptqxxZgfGglBuB9B9T9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgpj\n\n数据结构与算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1K3DmV6P7m2uWLeNsfNg2cA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fegs\n\n数据结构与算法Java版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10BI3NCMafNx8niBYV2PYrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wftu\n\n数据结构与算法（JAVA语言版解密）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19sIVT9nm2ZbIxLMfcEEtWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbwv\n\n数据科学入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18W_8MN5Uu4H-zsSRmr4AhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkab\n\n算法导论（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P9lqf2fUYuJ-laoTS4JJtQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhaf\n\n算法导论（原书第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RZkZH5Tb4lE38kmieurRRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpr\n\n算法导论第三版中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tjZd9odmAiJCJ4VvvaMMuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dute\n\n算法第四版-谢路云译.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YVRjo6YXQrb8DBU9phOB8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgtg\n\n算法第四版-谢路云译Java描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19B3NF1NqUMi_MnDGtZPEKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqpr\n\n算法分析导论_11562998.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wqvb7mEF67Qeybyet8IXhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrgq\n\n算法概论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u6NJjJpocFe_1gKlfAY4rw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gebr\n\n算法基础.打开算法之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L8Zqr4LLlEqA0oKbDps5aQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yssa\n\n算法设计手册-第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dDxKZVxq2_TplFro3cmElA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpet\n\n算法设计与分析导论_11888784.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i2mSmNW72raCBbmsc2BxAg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjsr\n\n算法设计与分析基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1umRr7JTLfp6tgWvKBGzcuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfgv\n\n算法图解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KaUCkSW_Nt1yZTfDwqTEYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdkb\n\n算法与数据结构-实用算法基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h61A39ID5ZYVdAs_Fp1vmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvbu\n\n图解数据结构-使用Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w_dYMOWZLxGBtUYmADog5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpvd\n\n## 新面试题\n\nDubbo面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i-2HU_podnONkXCIVITXBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dewh\n\nElasticsearch面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JfNokxTzcoTGwXof-hA6vQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fryw\n\nJava程序员面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mchSdZg81Nz0fjoDp8E2Dg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wdcc\n\nJava程序员面试宝典（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1asqIE61lGXposZ-p0AlyZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vunv\n\nJava程序员面试笔试宝典-何昊.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qLnsU39IHDSKkog5aLS8FA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ukgj\n\nJava程序员面试笔试真题库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSBYutVnwVHvj6z_lv5OJg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swsf\n\nJava程序员面试笔试真题与解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19i4svUmbEDBi-_KZYtB1Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gybx\n\nJava核心知识点面试题整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/143GVY2tfMh_d_xM0oaxyLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rcdm\n\nJava面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Kbdx5etJnN7esz01lc8gnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vawb\n\nJVM面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvsniJFbncUrylWV47u6rA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcgr\n\nKafka面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZI_f14B-UbRYVl6c3naCtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyyw\n\nLinux面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10mthqPHRgqu9cSGdhAWitA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxyv\n\nMemcached面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12FgrF54YqbQi_JES2Ug8AA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tvew\n\nMongoDB面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FIxAbXaSHzD5sLf8Q4HT5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxhn\n\nMyBatis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1v0Llj_7wVPMKPHWGozAl_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aewm\n\nMysql面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VUZM3sqXp5O6vfJEfylMsg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyae\n\nRabbitMQ面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VOPFZGNxv4v8EK4I-f4GlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txtf\n\nRedis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mrY2VfeqTdPQZ-wu1Qn3Jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xnaj\n\nSpringBoot面试题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W1SVyA5URstE2vYYZRhs6g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：area\n\nSpringCloud面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mc8P9o2FwXslX1HZtY3O0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqdn\n\nString面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UKTA4SBUI7ySilvKDUT0og)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpny\n\nZooKeeper面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11xLMllJ1O8J22Fs2q4AmmA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqbn\n\n剑指offer第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GnoqSMTaakGcA4HJi4fPiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxyb\n\n\n\n## 重构优化\n\nJava虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MBwYNHEVuOq-V1FpPq7tfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：texj\n\n编程之美-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1trz5QH73sRboEDtQjPtEJQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mawq\n\n大神手把手教你Java性能优化-江南白衣（加强版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lSGEI4vD4moEV3Uzcg_rkw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucrd\n\n代码大全2中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_GEyjV0Y4w3XpkRDj6iHrA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aych\n\n代码整洁之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xxiz8LzT7u1wazR0o-nEJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tymx\n\n江南白衣优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jGcfNaiT1k1V8tX6uabb8g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mvpa\n\n重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UGnVQwvguIMuFMf6yy8l4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bssy\n\n\n## 新增，第二版：面试题\n\n第二版：面试题 Android 100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iKSwXFJ6QYnSvpDITa0rwg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewdu\n\n第二版：面试题 Android 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O4GgpzQg5S_22XHmhzegeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bspw\n\n第二版：面试题 CSS 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mrrBhTMgAM8ENTs1AukWaA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksge\n\n第二版：面试题 CSS 50  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fjpSyKzZwASii8wCPb7S0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prfb\n\n第二版：面试题 Dubbo  19 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TPsIFslNRspYSm9U8FNBkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ppmv\n\n第二版：面试题 Dubbo 30 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Wkqpp5DhXKGQxQbu_00kg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etff\n\n第二版：面试题 Dubbo 58 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r3K652QB2msrF8ph_MkQLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sayu\n\n第二版：面试题 Elasticsearch 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r0zJ19iQhpHMa9j-fsDDIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxak\n\n第二版：面试题 HTML 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zdFSUdU2eCZo6s6tcy0E_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmab\n\n第二版：面试题 Java  100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wDv-YWEyWXGzuJjHJ1UcGA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：junt\n\n第二版：面试题 Java  17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L__c7fExhoH3KbyILzFalg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyxy\n\n第二版：面试题 Java  算法 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1s3NQewKgT3Ly93K5U7BPUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：affq\n\n第二版：面试题 Java 133 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mxmXTNaMzru3RyRpZOME2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykde\n\n第二版：面试题 Java 47  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kGwAhK36voheuvYNOUpA5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfym\n\n第二版：面试题 Java 95 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mvPwDa9vBaUpBX_SGybp4A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtxu\n\n第二版：面试题 Java 集合 72 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vuEueYxuKJwN3IF7otPp9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swqr\n\n第二版：面试题 Java 综合 84 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17OaURL3iWKAEjtBSfKWMnw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btry\n\n第二版：面试题 JavaScript 43 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YA_0XYBPqBTeY7ngpSxixA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xmys\n\n第二版：面试题 JavaScript 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1p9s7pCEDDl-tOHXwZ2v4Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kytg\n\n第二版：面试题 JavaScript 96 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WRfTrjEMEZAdrGrTk9_Waw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfrb\n\n第二版：面试题 JVM 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y4Mxc9JhyHjZQgpuH0qC2g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfwx\n\n第二版：面试题 Kafka 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H64nJGtvYwxQK2KVD1h3jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdq\n\n第二版：面试题 kafka 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZXyeUUAivxuy5GskxEd2LQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efuf\n\n第二版：面试题 Kafka 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H8kXIFfxCsGno25_y6bS5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuye\n\n第二版：面试题 Linux 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sOqNqcc4PpScq858S93zbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qadp\n\n第二版：面试题 Linux 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1968KSi1QiqC9rPauU95p5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etun\n\n第二版：面试题 Memcached 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/189Q1AZmcQVXDyQC5eT1knA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpuf\n\n第二版：面试题 MongoDB 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L3ukE4vqeDQdLcb_b4TNUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jhmr\n\n第二版：面试题 MyBatis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1D8ICwwMg5gMdMKFn2LF2Mg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfsd\n\n第二版：面试题 MyBatis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xuruCkfd_zLpjYndFf-uIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucst\n\n第二版：面试题 MySQL 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nAHFJHPRvS22aWxbc1i4WQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqnk\n\n第二版：面试题 MySql 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QeaKsRriqbxmGvMgugAHkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbjr\n\n第二版：面试题 MySQL索引 6 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H5qdmoCP3yMLvr_7gWVGMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqgg\n\n第二版：面试题 Netty 11 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bXgemm4jllpH73l7TA3-Vw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jamh\n\n第二版：面试题 Nginx 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1329KFq2Wfg9IqZnUMe3fBA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqet\n\n第二版：面试题 Python  36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kRyX4jAuQ41yR_euJk4nTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：unjj\n\n第二版：面试题 Python 292 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OTrxw-3JxKDgKQspoqs_pw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kydp\n\n第二版：面试题 RabbitMQ 12 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zMkeMXa6e9A4jvmJWOuEBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntsu\n\n第二版：面试题 RabbitMQ 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mk6rfXq6ronvvQmv-tRr5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkd\n\n第二版：面试题 React 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bI6NHgk8Qgk9W433Jt2Xig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksdw\n\n第二版：面试题 Redis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OUNs5_ZZA4ug2S1rTTJFEw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejyc\n\n第二版：面试题 Redis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13ns5YkrurQzGBvH5XbswPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cnsj\n\n第二版：面试题 Spring 55 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tT4RIqUishJS605rNJDaBA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pswp\n\n第二版：面试题 Spring 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10c5Pfv9BZnsjsrLR0A3iow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxfv\n\n第二版：面试题 SpringBoot 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1idLAz8DDuSURBXYO2PJzUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfxs\n\n第二版：面试题 SpringBoot 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dFnZIePqMFeEINB51QaA-Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t25p\n\n第二版：面试题 SpringCloud 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1naqYsW4UzMfiLHq3NrSrKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxb\n\n第二版：面试题 SpringCloud 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tzoUY3TZg8dwAAljnDNfaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmgd\n\n第二版：面试题 SpringCloud 29 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1seZo1XloSEc0fNBncSW4vg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxda\n\n第二版：面试题 SpringCloud 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1v36uJU32IXNkvqZZK9EAdg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbvn\n\n第二版：面试题 SpringCloud 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GG9X8Av_HZKh56ZWNRWEiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhbr\n\n第二版：面试题 SpringCloud 8 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gXQq18Zu0SEfC7hH6Oping)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfwf\n\n第二版：面试题 SpringMVC 35 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15QaXlVGXUPh4FHGAF0y3JQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：canh\n\n第二版：面试题 Tomcat 16 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HkloT28H8Jb8Z1Cslaj22Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmqb\n\n第二版：面试题 Vue 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bE36aDEoRFLlv9vP33WMNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcmg\n\n第二版：面试题 Vue 39 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dwPL_XHNnOMYDETFQ4Xs4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vapx\n\n第二版：面试题 ZooKeeper 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12_kkYMkwPuhts8RnoQWm9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ufqw\n\n第二版：面试题 ZooKeeper 28 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q-sxq0vpzInt-9HKTRqZ_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkjh\n\n第二版：面试题 ZooKeeper 36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1B5T6Hmeb_uIvAV2wQHNVwA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dkwd\n\n第二版：面试题 并发编程 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FYsA869oaPcv1LJF9mdJnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwek\n\n第二版：面试题 并发编程 48 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m5ThtAWHp4k2FGxQ72LHXg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njgu\n\n第二版：面试题 多线程 75 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wiw1kA_iWQCjyFBTbndjtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxty\n\n第二版：面试题 精选设计模式 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TijTPNvjqFAOBosM78ax7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sxnn\n\n第二版：面试题 前端汇总 100  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19XbZKt8QDrbDtTkBXOjy9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtfq\n\n第二版：面试题 前端综合 45  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MiXOm2pkWFBvQL3-qrocfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybev\n\n## 免责声明\n\n书籍全部来源于网络其他人的整理，我这里只是收集整理了他们的链接，如有侵权，马上联系我，我立马删除对应链接。我的邮箱：75997533@qq.com\n","source":"_posts/2021-10-12-互联网图书合集.md","raw":"---\ntitle: 互联网图书合集\ntags: 书籍\ncategories: 书籍\nsummary: 互联网从业者的精神食粮\nabbrlink: 25303\ndate: 2021-10-12 15:33:32\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![desert-gee44587c8_1280](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021654217.jpg)\n\n<!--more-->\n\n>　　转载：https://github.com/itdevbooks\n## 前言\n\n计算机类的书籍非常贵，天天买纸质书是不可能的了，所以对电子书的需求量还是挺多的。同时很多小伙伴不知道哪些书是经典，哪些是辣鸡，作为一个互联网从业12年的职场老鸟，我深知看书，看好书再加上实践才能高速成长。\n\n计算机类电子书下载，编程电子书整理下载，包括 [C](https://github.com/itdevbooks/pdf#c-语言)，[C#](https://github.com/itdevbooks/pdf#c-语言-1)，[**Docker**](https://github.com/itdevbooks/pdf#docker)，[**Elasticsearch**](https://github.com/itdevbooks/pdf#elasticsearch)，[Git](https://github.com/itdevbooks/pdf#git)，[Hadoop](https://github.com/itdevbooks/pdf#hadoop)，[HeadFirst](https://github.com/itdevbooks/pdf#headFirst)，[Java](https://github.com/itdevbooks/pdf#java)，[Javascript](https://github.com/itdevbooks/pdf#javascript)，[jvm](https://github.com/itdevbooks/pdf#jvm)，[Kafka](https://github.com/itdevbooks/pdf#kafka)，[**Linux**](https://github.com/itdevbooks/pdf#linux)，[Maven](https://github.com/itdevbooks/pdf#maven)，[MongoDB](https://github.com/itdevbooks/pdf#mongodb)，[MyBatis](https://github.com/itdevbooks/pdf#mybatis)，[MySQL](https://github.com/itdevbooks/pdf#mysql)，[**Netty**](https://github.com/itdevbooks/pdf#netty)，[Nginx](https://github.com/itdevbooks/pdf#nginx)，[Python](https://github.com/itdevbooks/pdf#python)，[**RabbitMQ**](https://github.com/itdevbooks/pdf#rabbitmq)，[Redis](https://github.com/itdevbooks/pdf#redis)，[Scala](https://github.com/itdevbooks/pdf#scala)，[Solr](https://github.com/itdevbooks/pdf#solr)，[Spark](https://github.com/itdevbooks/pdf#spark)，[**Spring**](https://github.com/itdevbooks/pdf#spring)，[**SpringBoot**](https://github.com/itdevbooks/pdf#springboot)，[**SpringCloud**](https://github.com/itdevbooks/pdf#springcloud)，[TCPIP](https://github.com/itdevbooks/pdf#tcpip)，[Tomcat](https://github.com/itdevbooks/pdf#tomcat)，[Zookeeper](https://github.com/itdevbooks/pdf#zookeeper)，[人工智能](https://github.com/itdevbooks/pdf#人工智能)，[**大数据类**](https://github.com/itdevbooks/pdf#大数据类)，[**并发编程**](https://github.com/itdevbooks/pdf#并发编程)，[数据库类](https://github.com/itdevbooks/pdf#数据库类)，[数据挖掘](https://github.com/itdevbooks/pdf#数据挖掘)，[新面试题](https://github.com/itdevbooks/pdf#新面试题)，[**架构设计**](https://github.com/itdevbooks/pdf#架构设计)，[**算法系列**](https://github.com/itdevbooks/pdf#算法系列)，[计算机类](https://github.com/itdevbooks/pdf#计算机类)，[**设计模式**](https://github.com/itdevbooks/pdf#设计模式)，[软件测试](https://github.com/itdevbooks/pdf#软件测试)，[重构优化](https://github.com/itdevbooks/pdf#重构优化)，等更多分类\n\n重要说明：这些书涵盖入门和进阶所需，请大家各取所需，另外还会原创大厂面试题，陆续会提交上来，请大家持续关注这个项目。\n\n## [新增：文末有 3625 页互联网大厂面试题](https://github.com/itdevbooks/pdf#新增第二版面试题)\n\n# 书籍分40多个技术大类\n\n|   |    |    |    |     |\n| ------------ | ------------ | ------------ | ------------ | ------------ |\n|[C](https://github.com/itdevbooks/pdf#c-语言)  | [C#](https://github.com/itdevbooks/pdf#c-语言-1) |  [Docker](https://github.com/itdevbooks/pdf#docker) | [Elasticsearch](https://github.com/itdevbooks/pdf#elasticsearch)  | [Git](https://github.com/itdevbooks/pdf#git)  |\n|[Hadoop](https://github.com/itdevbooks/pdf#hadoop)   | [HeadFirst](https://github.com/itdevbooks/pdf#headfirst)   | [Java](https://github.com/itdevbooks/pdf#java)   | [Javascript](https://github.com/itdevbooks/pdf#javascript)   |  [JVM](https://github.com/itdevbooks/pdf#jvm)  |\n| [Kafka](https://github.com/itdevbooks/pdf#kafka)   |  [Linux](https://github.com/itdevbooks/pdf#linux)  |  [Maven](https://github.com/itdevbooks/pdf#naven)  | [MongoDB](https://github.com/itdevbooks/pdf#mongodb)   |  [MyBatis](https://github.com/itdevbooks/pdf#mybatis)  |\n| [MySQL](https://github.com/itdevbooks/pdf#mysql)   |  [Netty](https://github.com/itdevbooks/pdf#netty)  |  [Nginx](https://github.com/itdevbooks/pdf#nginx)  | [Python](https://github.com/itdevbooks/pdf#python)   |  [RabbitMQ](https://github.com/itdevbooks/pdf#rabbitmq)  |\n| [Redis](https://github.com/itdevbooks/pdf#redis)   |  [Scala](https://github.com/itdevbooks/pdf#scala)  |  [Solr](https://github.com/itdevbooks/pdf#solr)  | [Spark](https://github.com/itdevbooks/pdf#spark)   |  [Spring](https://github.com/itdevbooks/pdf#spring)  |\n| [SpringBoot](https://github.com/itdevbooks/pdf#springboot)   |  [SpringCloud](https://github.com/itdevbooks/pdf#springcloud)  |  [TCPIP](https://github.com/itdevbooks/pdf#tcpip)  | [Tomcat](https://github.com/itdevbooks/pdf#tomcat)   |  [Zookeeper](https://github.com/itdevbooks/pdf#zookeeper)  |\n| [人工智能](https://github.com/itdevbooks/pdf#人工智能)   |  [大数据类](https://github.com/itdevbooks/pdf#大数据类)  |  [并发编程](https://github.com/itdevbooks/pdf#并发编程)  | [数据库类](https://github.com/itdevbooks/pdf#数据库类)   |  [数据挖掘](https://github.com/itdevbooks/pdf#数据挖掘)  |\n| [面试题](https://github.com/itdevbooks/pdf#新面试题)   |  [架构设计](https://github.com/itdevbooks/pdf#架构设计)  |  [算法系列](https://github.com/itdevbooks/pdf#算法系列)  | [计算机类](https://github.com/itdevbooks/pdf#计算机类)   |  [设计模式](https://github.com/itdevbooks/pdf#设计模式)  |\n| [软件测试](https://github.com/itdevbooks/pdf#软件测试)   |  [重构优化](https://github.com/itdevbooks/pdf#重构优化)  |[第二版-面试题](https://github.com/itdevbooks/pdf#新增第二版面试题)   | 每天都有更新  | |   |\n\n\n\n## C 语言\n\n21天学通c++_第7版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFtWjkx8awd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pv45msRWe0sCurOM9RR9uQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvdj\n\nC++ Primer Plus（第6版）_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMRGakxl2lc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EVlg9WH-6kJjmjjTjaty0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wsfu\n\nC++ Primer第5版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFmCLkx8e4j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oxGcN9OoQs2tRXs3sas_XA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qeke\n\nCOBOL语言（上）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ix653kx8ebg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IZq6yXLmUB22rZKkfxSbjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stqa\n\nCOBOL语言（下）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOFeMkx842h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10FlZxU52Vrsy8kUo-MnSoA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：drsv\n\nC程序设计语言（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iscm1kx84di)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nTISepdSatvOMRcMu6Zw_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kuhe\n\nC程序设计语言（第二版）习题解答.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2SkIkx84ej)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MZDmM5AqyKsDQ1k3reeZ0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphb\n\nC程序设计语言（第二版）新版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iRieOkx84hc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Lb6J7LM0kVy_ZSOp7Ubtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjcf\n\nC程序设计语言（第二版）中文译版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4Mqvkxl7ri)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W7Xb8ubRnLDLWUATMxblxQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdvu\n\nC程序设计语言（英文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5DhSkx84oj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E_hMl1VLVlDn44ew_mrHrw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfne\n\nC大纲.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iX8jpkx84te)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13zvfjFYaY6Pl8VutieLNHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtf\n\nC大全语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXei8kx852d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Rd6trlbNhigXbMsg4uMYnA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfwp\n\nC和指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGENEkx85ta)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R1hZBoyKkKLj9EBC2ZUPtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcdg\n\nC基础班范例代码训练.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAxOEkx85xe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167--PYVLr5Uc-Fa4_pCXzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mrah\n\nC与指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9IGjkx866d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x9JB86DDKi6s9dldrJsa-w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxcg\n\nC语言编程精粹.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igjXpkx86he)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W8aWffFDOvubzfNHEC7-Cg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgds\n\nC语言参考手册第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iL8Jfkx86pc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z2ErBjh1ERW5-lbqR9R4Uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twgf\n\nC语言程序设计现代方法（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1X6bkx8y1g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oaxzlxeaCkYGXAEn-mCSgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dfey\n\nC语言大全第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ihGbpkx8yid)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xVIHCdekVp3iRibektJ7bg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skvj\n\nC语言函数大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYowkkx8ylg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kDqsE3BP2UC7XupD2FzRXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkk\n\nC语言解析教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYmUXkx8yvg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TYbhCfo1t3dIm0gAjLeOYw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：brmp\n\nC语言深度解剖.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQR1zkx8yyj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wc0IeIWQR28jG0uOtqKz_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjxw\n\nC语言实现病毒源码演示.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iO1Q5kx8yza)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LZ1VEwZXoYuVJlN6nxAi8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：60dt\n\nC专家编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i12vOkxll0f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12jZ8IHA1Cb__KMsFDa4eqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gkup\n\nLinux操作系统下C语言编程入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8JH3kx8zde)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Nx2y1lTvdEpBuf4QhV0fyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtj\n\n华为C语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ivg6Gkx8zgh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yC1zRs37Sy-6trq4zV8kQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awkd\n\n可变目标C编译器设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ixH3vkx914h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L9NuvV6SdF-8Bi-zreB4Ag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vjdh\n\n数据结构-教程c语言版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iocoikx91pi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TEjTJ05RRfnygjQlSkXKiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccwm\n\n数据结构（C_语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iq3rekx917a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_787HiYRbxx5U-9W6t779w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：medm\n\n数据结构（C语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioouykx91ng)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E--h4WLOoeNH8wpHZ7zajA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sscd\n\n数据结构、算法与应用C++语言描述原书和引2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8E2Zkxlsgd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V7QAFKLY_S9eYeoeRzCgvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjgt\n\n算法：C语言实现第1-4部分基础知识、数据结构、排序及搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwTadkx92sh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h4e4RBl8jgj2netJV1nYfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykat\n\n网络环境下的C语言编程技巧及实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaQELkx92yd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d7iJN5JVJL_UrzpubO1k9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjht\n\n自制编程语言基于C语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i3JC8kxlzti)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vk5rAD2pAscURdISdhR2ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybqh\n\n\n## C# 语言\n\nASP.NET.2.0.XML.高级编程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iykcDkx9wxc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1I7oyBgWo1wrlQ5iIIE1m8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngna\n\nASP.NET.2.0.高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iUm0ekx9p1i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yQaRuIvML31ealbl_EZHqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsts\n\nASP.NET.2.0.入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVn3Nkx9s3i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jogs5FFdaRTibdhw9KjlDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqjp\n\nASP.NET.2.0.数据库入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyVSAkx9smh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1C5dfWMcQCJZak0VQqWtw1g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaqh\n\nASP.NET.基础教程-C#案例版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0I0pkx9sxi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mIxJUSHRJ0fNIyOaGUo8xA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnaw\n\nASP.NET技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9p1nkx9tyf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SJ_DX1wVXY1u4MdZmurpZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gryv\n\nC#.4.0完全参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i44Sskxa01e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eCg6Th8Ouc8Q_mlQFScblg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqkr\n\nC#.COM..编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i7sh4kx9u2j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oQwLHhblmo3EprJKAlq-1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncbr\n\nC#3.0完全自学宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iODgKkx9veh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DTLQFDSfuMsivoo8XLHi2g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fejw\n\nC#编程宝典十年典藏版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOQOUkxa6sh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pLtxx5w0ccPNsTKk_0d9yw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cyjp\n\nC#编程参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/itzFDkxa4eb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18XKKpwlV9R8vUX4TPdYmRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tckx\n\nC#编程思想.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2AiQkxa29e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sESNaACnZyNwtEOXnbZtbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augj\n\nC#编程语言详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ij48tkxa1mb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1USE8I8Ig_lJrWrBsBss7hw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqkw\n\nC#程序开发范例宝典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CY60VTs0FdlJJbKN-RciWA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eyhe\n\nC#程序员参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iKmc8kxaa1e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fMjV4BVdfxHpbTbeMipHxg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hbbp\n\nC#技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwvIJkxad8j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VA3R90-5tHSyh2Ak7dTm3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wywp\n\nC#入门经典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iet3jkxahyj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qBKgqHgs4dAJsHvopasEjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xafy\n\nC#软件项目开发全程剖析-全面透视SharpDevelop软件的开发内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOhl0kxai6h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10Up6eUcpL-JuRL9RuaqjqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnv\n\nC#设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5kBOkxaibc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fUn2p0sSb-dPdIrfg9KmKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnns\n\nC#网络编程技术教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCoHMkxaj7e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Xskb_NvWezmdabyzRh8fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cerg\n\nC#项目开发案例全程实录（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ivNoskxakzi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QEa2INDhZhvbGSlAh_LT9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agjn\n\nC#学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuDRekxrw6d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hYrT0cLyF5uUMIoUNElXBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：veex\n\nC#应用程序开发全程演练-从灵感到实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuA6Dkxrzte)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yi9CiqleBP6BfR4Xf9NPlw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbew\n\nC#与.NET4高级程序设计-第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iL0D9kxs7qj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mGs2xNNvmPJ54AHsbmhShA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyby\n\nC#与.NET技术平台实战演练.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0UaPkxscsb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z1Oar2-0wm53BCA-f6zElw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebvx\n\nC#字符串和正则表达式参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iENCCkxal8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jZxa5iTBvVN8iUHi9Q8yjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cmth\n\nC＃高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iY8hHkxacni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vQTjdPk4hyF-efpbdYj_fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mtpu\n\nMicrosoft.C#.Windows.程序设计（上下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i77A1kxamni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UQSZpztOy3ITdZurmfV1ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqnq\n\nProgramming.ASP.NET.中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9GvLkxanub)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19A0krBK5AsbjC2MJIfPfWA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jssu\n\nProgramming.C#.中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/itoRZkxaq1a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JDZNMzG8WuvaYnizfuTidA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmtx\n\nVisual.C#.NET.网络核心编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iYlxmkxaqaj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1eatMs_xYJffB0LJLTC5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jsrq\n\nVisualC#.NET案例开发集锦.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ibtTTkxatwj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dW2LSBwkGlKUSDhBbIfFMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfcp\n\nVisualC#.NET网络编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQ1d8kxaumf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x1FLbBHDRzHRLDFJHSljSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kxgn\n\nWindows应用高级编程-C#编程篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWj4Nkxav0j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/192y69NahClrpiI2hkF80gA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbpp\n\n程序员突击Visual.C#.2008原理与系统开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igcpSkxax4f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OWf7AK5ezToNiQMo0AZyQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：murm\n\n叩响C#之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaV7Xkxaxpg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lHUal4JysWeqwmBXYiHuuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atej\n\n\n## Docker\n\nDocker-从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMYo7kxbaaj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ccTG4htfo-jZ1Nb8nnKeNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：enbt\n\nDocker_practice.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOELrkxba8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V8vGD2R9OG2a88HpDxG_rg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fraf\n\nDocker经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/imwLzkxbacb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sJWlwtTSnHZhLneX2dBfaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej\n\nDocker容器与容器云（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMsrNkxbb3i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R5PqIB_G9pIKi3b2Rzlaeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfnw\n\nDocker入门白皮书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGMwKkxbb5a)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16HDLIsj_Rd0tgfKpbTCEgw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kskk\n\nGo语言实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ilZK4kxbb7c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZdtpkG6DMd3t7-ywJOWRCQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sedj\n\nKubernetes实战（套装共2册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOexQkxbblg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15K6r6JEsdGVuQTVIydruxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xueu\n\nSpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXnsOkxbdhe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c6dNs1T6klinsbNtHl32GQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrdb\n\nSpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4H8xkxbe4h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1t0r0CuIyV1fcR4l5M83ttw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crbf\n\n第一本Docker书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioCPhkxbe5i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12US2-reChfZgwy3eqpJpGA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uvmt\n\n深入浅出Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCKMWkxbf8h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13-Ov2ZrCVAmHz13Ah8Xmpg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfkw\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/im4CZkxbieb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KekRLkLCvLTbq24J3TNWiQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrse\n\n微服务架构下Docker实践，以及Docker在测试环境的应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVmIXkxbigd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ngvZs7yWfuRxUxxST43LzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmj\n\n\n## Elasticsearch\n\nBetterELK,新浪实时日志分析服务进化.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iP88Ukxd2wf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uUxY9AtKQEy-if3fKkhK4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfgc\n\nElasticsearch-guide-chinese.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/isNeDkxd30j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Df0xspbMMVJn20-C522niw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：baxm\n\nElasticsearch-the-definitive-guide-cn.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuT60kxd38h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Td3Y7k0gQpL4jpQfmc05uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrfs\n\nElasticsearch6.1官方入门教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iu6Jokxd2yh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MXfjtz5ynkY_u08UDOCaLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：knfe\n\nElasticsearch大数据搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCJ3Dkxd8mb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j4K2lZpt7ywpjo-cyodlyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxuu\n\nElasticsearch分布式大数据搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOGbbkxdade)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AHxsGuZJFXDxZoGjOcBXmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bytq\n\nElasticsearch服务器开发（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iCU5Ykxdb7e)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LcjmOWCBbLfEPT_woN1GuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xatu\n\nElasticsearch集成Hadoop最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iG4M4kxdcha)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bOwD5PBqfD31NJfWFXso3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfcp\n\nElasticsearch技术解析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ija6Bkxdckd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x5QOR_wrxC5BV9JorAmxtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jews\n\nElasticsearch技术解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iunVckxdgkh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HdKY0kVDVzc6KKkvU8fK5Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afay\n\nElasticSearch可扩展的开源弹性搜索解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1APTkxdhgj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12mH096foYT5y4YWsHFlSeA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxjr\n\nElasticsearch权威指南（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iScNMkxdhtc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VV9O_660sDBo_YB62QYx-w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwtf\n\nElasticSearch入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTWCxkxdi4d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BzO1GTBbHSmwca68Vdlbmw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hukk\n\nElasticsearch实战inaction中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ipDJIkxx1re)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BpK6r6MW29zb46lH_wG0yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pveu\n\nSpringBoot集成Elasticsearch7.4实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ip2uYkxdidc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16GhqhpmVUfKHLll3z_dnlQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tewy\n\n大数据搜索与日志挖掘及可视化方案++ELK+Stack++Elasticsearch+Logstash+Kibana++第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i3E26kxxjqb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q1DrL8kopQDJPvTESqy9Sw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vudd\n\n深入理解ElasticSearch.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/izKODkxdrwf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A8_KVHXsuFe6u--XZgL6eA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxpf\n\n实战Elasticsearch、Logstash、Kibana++分布式大数据搜索与日志挖掘及可视化解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAwXbkxdpyf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xnY8s6i7hI8bzRmy38s-sQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncce\n\n数据分析与决策技术丛书ELKstack权威指南,饶琛琳编著,P394.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4AjAkxdila)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Rugsxq8mfnK_tEtFB80Q4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pgab\n\n搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2KLFkxdinc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y4THdUHLG8WTa5ipYTovKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffjd\n\n最新版Elasticsearch调优搜索速度.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iNXvZkxdjrc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ewPAjJ6zWPeBHLPQx66QVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trqt\n\n\n## Git\n\nGitBook（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLUKFkxe29i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xhG-q_BEFY-U4uuY9oybDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kvak\n\nGitCheatSheet中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/il9lkkxe2ed)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M_aVeiwUR0Hwf9l7SjziFg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvwp\n\nGitforTeams.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ibym9kxe2la)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LY1Ie9FN78aUybcNxM4BcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qrrp\n\nGitHub入门与实践（日）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyqIekxe2ti)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Db3YzGgVjQt9kSMg8HfcUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahjm\n\nGit版本控制管理（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioRcDkxe31g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eJTo4qBAsiGvCSVLuU7SPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：adrk\n\nGit版本控制管理（第二版）迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLkpMkxe3ni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oimhw2LAiuVkD_8gnV_NrA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyct\n\nGit官方手册中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9bekkxe3za)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NC6Oi4HdJ5b72VKaIdJR7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saqd\n\nGit讲义-深度讲解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLMXTkxe4de)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hRGXi6L31eOj6YhTPaEUnA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swyh\n\nGit教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioXiZkxe4ja)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kOBBwQi_cC6j3QvgRr6RuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrp\n\nGit权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaye2kxe62f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13bGqDQ35cJgVfp0ht9SkqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkak\n\nGit中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iR2Swkxe8pa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Hlh9b3NX6roVOruQ8-RcuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmux\n\nGit中文手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEl0ikxeana)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gNKclKvcNITBXDniY0dadA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtpb\n\nProGit中文版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHn3pkxeawj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OkqTAyfUoCFOzgnYmImMDA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkry\n\nProGit中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iMrizkxebib)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l98hVaPhqHkYq3nSkETZUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwgk\n\n版本控制之道使用Git.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iW6o3kxec3c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GpOXPOBpfB8Yi15VGnIgKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfth\n\n常用Git命令清单.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ifScYkxec7g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yx5lwu0gskwfmHvn7D7M1g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajkn\n\n从+0+开始学习+GitHub+系列.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ifHzvkxecla)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dakSbdxFubYb_lNoApeaqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbqg\n\n完全学会GITGITHUBGITSERVER的24堂课.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ij3V8kxedhc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12Hk4dMkfkE1L0WERrEa-qg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbpj\n\n\n## Hadoop\n\nHadoop搭建与Eclipse开发环境设置.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iQTivkxehba)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-yw-COXzqlIlOl95h8I74w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvda\n\nHadoop大数据分析与挖掘实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAlA8kxei4j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_ndlcCJjmYnPk7s914U__w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwvr\n\nHadoop高级编程-构建与实现大数据解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4JMrkxeich)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ISRomZnhzO3pTSE33HLvYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xubc\n\nHadoop公平调度器指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia2mkkxel5i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Be1AoEQZyIRVlRf261bbOQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwyq\n\nHadoop技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHJbDkxemed)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Nxfu7ytEhdfTDv6_G6TyNA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvvg\n\nhadoop简介.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iLHp3kxemwb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HjPoXCY4-aQ9OJiXNGvdfA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebfm\n\nhadoop开发者第三期.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/imUQnkxenfa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qnnDciMx68FIYpGqj0ZrnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhs\n\nHadoop开发者第四期.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iPUH6kxenoj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pfi3AUbMfcCKz-jG85orUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgx\n\nHadoop开发者入门专刊.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGk6wkxente)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/107Z2PCG-Q_Njiyg7bV0ibQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kejg\n\nHadoop权威指南（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1S3lkxeo7i)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CFuFsngiC9nmKwc2J4_zCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvab\n\nHadoop权威指南（中文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/irntIkxepxa)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1e1oWfYr8atVYQA3Swhb71w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tqar\n\n基于Hadoop平台的亿贝用户邮件数据分析（苏立）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHLQekxeqad)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1obIfdffIOX8w348MC9njVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr\n\n实战Hadoop：开启通向云计算的捷径（刘鹏）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTT9Hkxered)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l-HrGhtJ3fZ6nJou4gnC7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsbw\n\n数据算法HadoopSpark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTxcMkxetbc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OWxadCpz_iqE1Fq4cVR9JA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxf\n\n数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTxcMkxetbc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CL8-WG7XQOxbWLisgb7TZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdey\n\n在Windows上安装Hadoop教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i8EVmkxetcd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w1JBUHP9K4E5QwYje-UM3A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmkv\n\n\n## HeadFirst\n\nHead First Ajax（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXpYUkxeuhe)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-RyMwcVfgc2PplMHm0UKww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyuq\n\nHead First C# 第二版-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iAQ0rcy9gH2yO1DEgv7Y_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mhtd\n\nHead First HTML5 Programming 中文版 .pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ioWjikxev2f)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-uMMg_GjFQedOAJQQ3UrgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjyy\n\nHead First HTML与CSS、XHTML.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iH1LQkxeypg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167awhMP91mzcBGFPoIcLDA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hspd\n\nHead First Java 中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEwj9kxf18h)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/155P-tL24jowuGMtNdY2wSA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvpy\n\nHead First JavaScript 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iERoWkxf5zi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cRLHU-NKIA0nQ2XMzHp2sA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fkby\n\nHead First Java第二版涵盖java5.0.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXHoSkxf8md)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NM7eb06vGK2iBMOF_6uEYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cebe\n\nHead First Networking 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iZ0Pwkxf9if)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dD968W_tr-SUq1i_HdubVA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upkx\n\nHead First PMP 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ijZbskxf9tg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DeZdj4zh7hxDnpINLdq0RA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxau\n\nHead First Python 重视大脑的学习指南  中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i0A5nkxfa9c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hLAU9HqUbpgh1PQ7DVn3gQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avey\n\nHead First Servlet JSP.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i7J8Zkxfcsd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mlSoZJ42ukvB7Rl0YBRGdw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkv\n\nHead First Servlets and JSP 第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i83VIkxfhni)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/139L7zhrwsgNhgIGmf1jRZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pysa\n\nHead First 设计模式（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i6b7Wkxfj6d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GX8ZZT2_ISqJv47sBwFvgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafw\n\n## Java\n\n21天学通Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iwPMNkxfsde)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KcnqkVnoSiiOkZmkzYNGfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jeyg\n\nEffective+Java+中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i4R1ikxfsub)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13qz0iXAQdfv-7FiXiodIww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqgg\n\nEffectiveJava（中文版第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEXrIkxgepi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JCdDt9dMSxIT01jBSBRDIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cpen\n\nJava8函数式编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/igZEhkxgc2d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_-85Wx3LYJHSktFYCH_hUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjan\n\nJava8中的炫酷特性和Java9中的新特性-杨晓峰.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iDzpOkxgfkj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O6euAamgF3Y7v1JnfGyjjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkwc\n\nJavaNIO（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWsplkxgfnc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/139eXkJl2jtagTZm-ROxL7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpaq\n\nJavaOOP-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iRe3ekxgg7c)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vubz7vJybbosl3iLFWPhCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmp\n\nJavaRESTfulWebService实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i1xFVkxghvc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O7km01HayjzW_yYRCyR3gw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfju\n\nJavaServlet和jsp学习指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia4bkkxgkqf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1muJPmcUcjV4k4wBQqPT8yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：daqb\n\nJavaTCPIPSocket编程（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iFwCJkxgnna)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/197jWtCamqIFQdqiPcrQCew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vynk\n\nJavaWEB服务.构建与运行.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2MGbkxgo0d)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z1XCRAtblPvbgt9qN8CMVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrr\n\nJavaWeb企业项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iNjuGkyordi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iZGKcMOmQmMYuxUfAkJEbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aumu\n\nJavaWeb整合开发王者归来.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1U2pDBLUyYqvIjo7w7gRQZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fprs\n\nJava编程的逻辑.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ijGyakxgtwf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PiN48omo9JLLzb63sP0Bkw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xtxs\n\nJava编程思想第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJiGqkxhdeh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1p_E22a4VUpWVYgzqMmfDIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mnpq\n\nJava编辑思想（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iGM8Fkxhdjc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eLEyRlUpxZqp5_ISdZu86w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfaj\n\nJava程序员修炼之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iHblakxhfmh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zhIZCnmLFzbBCxtwtxKltg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpea\n\nJava从小白到大牛精简版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iapU1kxhfqb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Kd7gdxnNtOzHDLpLYxk7vA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kaqv\n\nJava典型模块与项目实战大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ie7Xvkxhjsh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x_SsiWi2OLw3HF1CRWOJSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：assw\n\nJava关键技术JSP与JDBC应用详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iWXqykxhlri)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RImaM6qZcRlN_ueUN2MaEQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tscq\n\nJava核心技术卷一基础知识第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJTXAkxhngj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1urz-kz246b7KJEMREYIJyA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjmy\n\nJava核心技术卷二高级特性原书第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iVCbnkyoaha)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1biNDg0wY9NhzPEbYYFqKhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjzp\n\nJava基础概念.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iaqL3kxhnib)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1l8iKRzjGPYBXwrTm281LPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfu\n\nJava基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqFPekxhnmf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wrCF3ttjvPTmMavEx27UMg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rrma\n\nJava开发之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i2vEZkxhs6j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wgivWU-eJuvzXC3DILpEzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvpq\n\nJava数据库应用基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEJ8Ckxht7g)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17DQzOJFnaXQ2M6RWNvzo8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fawd\n\nJava特种兵上.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iJTuVkxhwqd)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iGdCv9y6HCfMwA8QKbsmTA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmgf\n\nJava图形与网络游戏开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iayknkxhx6j)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1B0XNM5dr7tijN-CMMKNOUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjjb\n\nJava网络应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ia9AHkxi1jg)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OS8fQKKsjgcHd23oRIJ0Jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bdxn\n\nJava与模式（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/ik4Aqkxi1zc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qbwz2PMClWo11Eb1zrl1EQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：asfv\n\nJava语言程序设计-进阶篇（原书第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyQI3kxi2fi)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GdX636VmycTU9t-4OgbgIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqnn\n\nWeb安全开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iOSPgkxi2jc)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h5fZHvtNbodM7hZbrpRLCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhsj\n\nWeb性能测试实战详解+Web开发典藏大系.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iTd6Akxi4kf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zC2VwRjNr8mT69ENmNUJ0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bsct\n\nWeb应用安全权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iEc6nkxi5of)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17YmTumIWjckrqBcP6Gu4RA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydkm\n\nWeb应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i72VPkxi7mf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n4pmkCkYbk9cDFGvMLW1HQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfqe\n\n编写高效优雅Java程序.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqkHBkxi7oh)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/111RMs5dIwOt9I09aE4iMhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nskv\n\n菜鸟成长之路—Java程序员职场全攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iAbu0kxi9di)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bcnbsfSP-agoIFKUUPwgzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vxjx\n\n大型网站系统与JAVA中间件实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iqHZdkxig4b)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MliFXVP-mjZoMWs_RpANXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdbx\n\n分布式Java应用基础与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i5ci2kxihcf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1X2x4RA1D2-Ig8vcr1KOrqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dbeu\n\n疯狂Java讲义.pdf&nbsp;&nbsp;&nbsp;&nbsp;nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fYIQdDNdncR3JyxAr_x-dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hejg\n\n高性能响应式Web开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i9wUOkxiife)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EcPNoFTVUtHePBWePLm7tw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafb\n\n构建高性能Web站点.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/icEMlkxijkf)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13gYFTc0bRJvR87nY51slqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndfc\n\n解密搜索引擎技术实战Java精华版.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iX3Z8kxikne)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wjiwni7ABH2R1jUIfvrHUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：susc\n\n了不起的Nodejs将JavaScript进行到底.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iXFJkkxilyb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O8Aaw8iyWNwVrD6VN6mtQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xbbx\n\n零成本实现Web性能测试.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iUq4xkximsb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XS1Jy7fHc5koAkh9xbqcDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：varj\n\n码出高效：Java开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/i34i6kxirqj)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hlLIkAJYIkmeFZuUFkmrOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqxs\n\n深入分析JavaWeb技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iuhbakxitgb)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14QwWsW4jClVyL6SepaZrNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbqt\n\n使用Java.Web服务构建SOA.pdf&nbsp;&nbsp;&nbsp;&nbsp;[不限速下载](https://itdevtools.lanzous.com/iyx8mkxiuab)✅&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BsDNPiQs6Lml_UkPP6aUNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：lof7\n\n\n## Javascript\n\nJavaScript基础教程（中文第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KrBmT24VTDJblH9pfGTzOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxer\n\nJavaScript框架高级编程应用Prototype、YUI、ExtJS、Dojo、MooTools.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dCyMSxlsdX_szCA05PB63A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfb\n\nJavaScript框架设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x226ttlJYfSYquDEojIRMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akbn\n\nJavaScript面向对象精要.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GXRA3uhy_-tgksrw1Sl9Pg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jvrm\n\nJavaScript权威指南（第六版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AhnItsQRwZN5OKH_o_amxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxuf\n\nJavaScript权威指南（第五版）中文版（上）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ya6dqxo2zKB-oOolJf_oZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vpmn\n\nJavaScript权威指南（第五版）中文版（下）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4ATUyl12uM7xL1xqUGtAg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdar\n\nJavaScript入门经典（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jmmwbpkUaEnn8TD4Kv0x_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wawc\n\n## JVM\n\nglibc内存管理ptmalloc源代码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zrCQ4sOaDKl17P8KfD6pxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnbu\n\nHotSpot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xpa-yfb221Kdq-FIwWbmug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aqee\n\nJava+JVM.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A93OKyY11xjyGu8Y4T4wwQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dwyb\n\nJava性能权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sXEQx5eXIhLAq_hi70_1YA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfan\n\nJava性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gBnhP28-YJjzojiRlKEakQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aapq\n\nJava虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vTwsR8WgRpq--yKoBzR40A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yabq\n\nJava虚拟机规范-JavaSE7.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RitXq-hZRH-tZiVK--NYtA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnab\n\nJava虚拟机规范-JavaSE8版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uOmGGM4SdWvtZsOlGIVIww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yadt\n\nJava虚拟机解释执行机制研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/146F4WskyY_6WmbBjhK_olQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hffn\n\nJVM.Spec.v9.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1crTDBQ48j8pBSmJ41eY7Ag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjpk\n\nJVM定制改进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CFcHX0HasDNgOBl7tRLRZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkj\n\nTwitter的JVM性能调优经验.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uWIvg9guDm4JZKnAhb0Gtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swpn\n\n揭秘Java虚拟机-JVM设计原理与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrNNvxFlqJsiNnONbRiXTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uprt\n\n垃圾回收的算法与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Iiwe_Aw2MwdqbufDzJtcBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynpk\n\n垃圾回收算法手册++自动内存管理的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iKLOyw9YS2CT_1qTcHN-LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcpg\n\n深入Java内存模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NOyDh5_zyeI_J1MGmeQfjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmkk\n\n深入Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lOU9AMAviJLzQ_bEt6zw5Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghds\n\n深入理解Java虚拟机：JVM高级特性与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1T0bTPTLwwOPXKXdEhKDKDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxe\n\n深入理解Java虚拟机：JVM高级特性与最佳实践（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UdIG3CvNYE4sT75YgUYong)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrng\n\n实战Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/151o-bzu51xsRNQwfDH-v0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxkn\n\n实战JAVA虚拟机JVM故障诊断与性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LxC19YKuOhbTaTk3oRUVOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfrp\n\n虚拟机系统与进程的通用平台.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n1g5gbqHqbnVKeScHKDIvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjxg\n\n自己动手写Java虚拟机（Java核心技术系列）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18tOPFGWfkHt8wHec6gHjuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdcw\n\n## Kafka\n\nApache Kafka实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1F2gu3LgHSz7-mCu1grPE0A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjcw\n\nkafka-高性能揭秘及优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V-y3nnC2W43ICl4KtvUd0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbey\n\nKafka并不难学！入门、进阶、商业实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SEWr4qFnK_Xo7TAWbrtBCw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tyyy\n\nKafka技术内幕-图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ws1V7-zlfwlN412zLQuEtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbgr\n\nKafka技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SMnb-k18Oe0tGfrCo9OeHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftsy\n\nKafka权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WzjA7J2eSK-1AyJNJYfPjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prjv\n\nKafka源码解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jnaMi49J-2ssZ2VI-0IOjA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eymk\n\n深入理解Kafka核心设计与实践原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sHmX9x4QrYEmo8CVDO05Og)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jubt\n\n图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fs_pLDYhO-X3Gw0VGX__GA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhjd\n\n## Linux\n\nLinux C编程一站式学习(最新版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nSM92Y0ACgKCnW5c_MBOQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wchx\n\nLinuxC函数库参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10g6n3vUw3WjWHCleKCeO3A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edaw\n\nLinuxShell脚本攻略（中文版带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Y1Ur18yR7WhLADdf0X2YQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcnn\n\nLinux宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YtnnSKHEdHoDupKYHK694w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvbj\n\nLinux程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10lItD3ThyEvIcys7viEMqA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mwxb\n\nLinux初学者入门优秀教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i6xgfH_rbCWVQpbn0T5wag)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jmpr\n\nLinux防火墙（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fo3ZVIPIDTx66H6AXIDSLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tudk\n\nLinux命令详解词典].施威铭研究室..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1psZy9LInYtBYtRKwNVqo2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpqc\n\nLinux内核IO性能优化及块BIO处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NBSUxyHYkRD7gNrfcvuAKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphr\n\nLinux内核设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sCG7F3X8pRuRrKf-rWL7bw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dyas\n\nLinux企业运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RH87jSJ-bM8zR7GRUCuL5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gffg\n\nLinux系统常用命令快速入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oXW-YdsQS9FWX7FE_-ngrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxmn\n\nUnix与Linux.Shell编程.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kV_srGnJaXKXbFsQnySR0w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfk\n\n鸟哥的Linux私房菜-基础篇-第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fQOp0ay4V6BrXxOyg-L5CQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnuy\n\n鸟哥的Linux私房菜-基础篇第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MRfO9rnOs4I9PFmL0yYdpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ptnk\n\n鸟哥的Linux私房菜-基础学习篇%28第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d_fU9jnwFOzWBM09zZzY1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgcm\n\n鸟哥的Linux私房菜-基础学习篇（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BO2mAcbpmWeHpMwk8zJ_tQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jesv\n\n鸟哥的Linux私房菜.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L2cDjyajadQLfnq8KEKvVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：syue\n\n鸟哥的LINUX私房菜_基础学习篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mFe83qmAJFxPpUitkHoHsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vhdp\n\n鸟哥的Linux私房菜：服务器架设篇（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1K4TM42FaxqvwI8Z40XronQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvpc\n\n鸟哥的Linux私房菜：服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gZqiZz4kXz0QLBlculqXZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghbv\n\n鸟哥的Linux私房菜服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lGXi89r_HYVKJmEaT4gn3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxjm\n\n鸟哥私房菜（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f5_hfVlNO1hksn_CO-cb4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byyb\n\n循序渐进Linux第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZK5-N-9aVPy9INC5XBDf1w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykch\n\n## Maven\n\nMaven权威指南_中文清晰.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bdYjpFbdTgO1jdirwXUaKw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwqy\n\nMaven权威指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jCxc7DsQYI9sM9jB99DZ-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrhe\n\nMaven实战（完整带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lfCCDoH1oMF950slGA5yNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dncc\n\nMaven应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1siK3mklE4FNgoN-DyA-sFQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cysv\n\n## MongoDB\n\n50TipsandTricksforMongoDBDevelopers.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wDIEHzT8fyDQq_-nx-Vc_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcrm\n\nMongoDBTheDefinitiveGuide.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SgRaWvocG9J24OFD4ctZiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uruj\n\nMongoDB大数据处理权威指南-第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1viqo7Xf5u1RY_RrZxgoxvw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhdj\n\nmongodb分片教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XKCPsKYozxR2w1KUvGUdbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqsj\n\nMongoDB权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XFgtsaN2vh5XqhwNRpuH7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvkj\n\nMongoDB实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z81kDxzBUphuvmC-bOleZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ggmy\n\nMongoDB游记之轻松入门到进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pcBGRm__NQ0bWb5dJ7v9-Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrnr\n\nMongoDB运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1er045VTi4TRIVueLv4fZFQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quyw\n\nScalingMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SsTNYOMU_WXrC8MVB2TKqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byxj\n\nTheDefinitiveGuidetoMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uuCMIGBDkPXsHiqEh4g7Tg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fafw\n\n大数据存储MongoDB实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FCRYw9GGSrKFZwAaBCK7lg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qnrp\n\n深入学习MongoDb.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19x0Yi3xyzohl6Akqr6YKUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkva\n\n## MyBatis\n\nJavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f_o0B3_zvlHVaOL2AXbAQA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpvv\n\nMyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19SxKgiAEyf6p3c8Nn9gFWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndvu\n\nMyBatis3用户指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AE0PgRl_89WoIuOR2yeOog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykkm\n\nMyBatis3中文用户指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j1TMakPzclyy4q6hJXoxNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwqq\n\nMyBatis从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bgAr1YxXLUF--3gIzXvGGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykne\n\nMyBatis技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11Bb7EqCMrOZk9qdZeT9Yqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rytk\n\nSpring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nFPpcI__63rusGRnaAPtIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxst\n\nSpring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fantirermH4IZ_Bg1q9R0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arxs\n\n深入浅出MyBatis技术原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AR7-WWcbSlfBbMPvAVKH3w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqaq\n\n一本小小的MyBatis源码分析书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-ci1QjI-Pgqr92J9sAWYcg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cejt\n\n\n## MySQL\n\nMySQL5.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P2rN3s0e3PC_U7WXXyozGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjvd\n\nMySQL5权威指南中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dm7uzjGkoQZuN6uwb20HnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edfs\n\nMySQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kOo5TpfRepC2YkHkALX-AQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvmx\n\nMySQL高性能书籍_第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19kYPQ_Y-1QPWRPxtUrqVzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvkk\n\nMySQL管理之道，性能调优，高可用与监控（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q6ZeXnTTbsqZAk7hb1uxUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kwpb\n\nMySQL技术内幕.第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Edkesp8UWAvg3zsP7ASAVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bajp\n\nMySQL技术内幕：InnoDB存储引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Bzxj4jlK9WbyC5FmlEHaAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvnp\n\nMySQL技术内幕：InnoDB存储引擎（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19IgB4YxDaLWM4QyHPaPPhw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gtet\n\nMySQL技术内幕：SQL编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12o1A5-9YWVXlZ_8y9mnnsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tapk\n\nMySQL开发者SQL权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16WtukI0dylCyRe4mx9XZ2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nsvv\n\nMySQL权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uGow9RNUz5ZpzpOKcJHcqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qndv\n\nMySQL入门很简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Js1-s-YAPfTANBdEQVb7Tg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：huhm\n\nMySQL入门很简单－学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BXgczzido8DYWAw_5I0GUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nwgq\n\nMySQL数据库开发的三十六条规定-石展.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/183DOyuMxnPKTP9k_7mmpNQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfxf\n\nMySQL性能调优与架构设计--全册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xy-7uSydvbty3O3V9FDdrQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aket\n\nMySQL性能调优与架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1njPg4JsO0lRpzuHKR2CLlw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjxv\n\nMysql性能优化教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LvCrKzNTHmjfK_nUMakXhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etch\n\nMySQL运维内参：MySQL、Galera、Inception核心原理与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KvaTodjLvF0Gn0eqt2DWoQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtmy\n\nMySQL最佳优化完美攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ul9g5e44BABbScNeWM50wA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chts\n\n高可用MySQL_构建健壮的数据中心.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LTcu5PFGvqSK15wsa44gbQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：envf\n\n高性能MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/101-v3r_-PHZtsXbJcDHAxA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtwy\n\n高性能MySQL（第二版）中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1Z0tgOxm1TWWIEyTt-TNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akcb\n\n高性能MySQL（第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mzhuEvZ0n7Kwb6y4oqlUfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwns\n\n高性能MySQL第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YuxX2mrJmRKKRqdD0SIU4A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjps\n\n深入浅出MySQL++数据库开发、优化与管理维护（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-691pY2chOJp8pk6cZ2uTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wast\n\n深入浅出MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f2043vmGRx_dusNiANPNPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rjhc\n\n深入浅出MySQL数据库开发优化与管理维护.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PgWkcukmRUi1qXxD19381g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：absj\n\n## Netty\n\nNetty5.0架构剖析和源码解读.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DwH83VFmXv7Dtl4CaNUMGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqwx\n\nNettyinAction第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lehtQaEjHXGAJ19W8Wr7Ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecpc\n\nNetty权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1se8QSu4Fuypt1aBDO_U0ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbvj\n\nNetty实战（精髓）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12dcJfI17WxLBtk3lhuU5Gw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwxe\n\nNetty实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TVs1rydRUcrru8N030L2qg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wasw\n\n开源电子书：Netty4开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ft4211OqluHHlZazaqf0Dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpfw\n\n开源电子书：Netty手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qe6Yjw71LpHmA0PAVIGXbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mkpj\n\nNetty 入门与实战：仿写微信 IM 即时通讯系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h8E7ozV2kuGi1Eb-bsuVVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhct\n\n## Nginx\n\nNginx高性能Web服务器详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1amY8cgIv7Zxci8YFupIxCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjwk\n\nNginx开发从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lfiRc9A6xfE5NiZu6bPTQA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnja\n\n精通Nginx第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HPKEC-RBXQ0jX01jn8Rh_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgxu\n\n决战Nginx技术卷：高性能Web服务器部署与运维.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvIYX-QesMmay96QfUlNCA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccdy\n\n开源电子书：Nginx开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yEHGKaIIWmU0-yHGEx2Vkg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：guaa\n\n深入理解Nginx：模块开发与架构解析（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A01qpz8rTz7Gt4C0SQS8Cw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：umpm\n\n深入剖析Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12cb86rd92hMjsiean_Fzug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chpu\n\n实战Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VPXRFg_9TyChY18lwDXnyA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dexy\n\n实战Nginx：取代Apache的高性能Web服务器.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IVpgtls7W8x5IC0PWJ26IQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkej\n\n学习NginxHTTPServer中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12oMND71vtg94ZCxOhk1vVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjhj\n\n## Python\n\nHead_First_Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VFiGTiEH1UZ-O1Q7ESxWMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxjd\n\nIntermediate_Python中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JKffHxAIWXf9AT8uzJhePA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxhk\n\nNumPy攻略-Python科学计算与数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12sy-W34olu2FxJhuF-QO7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：urga\n\nPython100经典练习题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qEG1lr_-q4Sdjs0_GC_NRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvxx\n\nPython3.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fb_hFaz3j5DGN58IkrnS6w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgdk\n\nPython3程序开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NMNOw8CoRuYayX6pAlLAXg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfgn\n\nPython3高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QUanOjYMbvelhTJ0c-WfDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stdr\n\nPython3萌新入门笔记及练习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Y1R7C1Vbe9MyqpEatCoSaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tjrm\n\nPython3网络爬虫数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DonjcwYxRwtK2-UlWK102g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej\n\nPythonbyLiao.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lX2Ww1oH1rlNRsNiSUyRKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmkt\n\nPythonCookbook（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tCuQxQkdz3TWI6By6o8lhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ypqq\n\nPythonQtGUI快速编程PYQT编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qyY6q48Uaf5q18Hy-KlmJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rptg\n\nPythonWeb开发：测试驱动方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OwkXe4OiEZqnGxPiTSb-ow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgjf\n\nPythonWeb开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WN4hg9V1Gb8678ni6ZHb8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqad\n\nPython编程：从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rxHSlRYDeRzER86Iat3bBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qpew\n\nPython编程初学者指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QigptG5G3bUT3LBR5bGh4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfba\n\nPython编程导论第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DIW_V74AqzmbkSHqFM3VgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rymv\n\nPython编程快速上手-让繁琐工作自动化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cXMjJxqrgvE7mRfeo_YOqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfcg\n\nPython编程入门经典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bnwDSA2FtSOKU3OfSA4oHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvur\n\nPython编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Mxu0wcIplfr50h3uaFgINQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfbk\n\nPython标准库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14Sb6PDlIfE9Q6j-NwWpfSQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vyfw\n\nPython参考手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YnYbkhEfeyrFqK0bOHkx-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfmd\n\nPython程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UgzN9KU0ohONquoSp0fUQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：axgj\n\nPython地理空间分析指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YgFdxCGCD88mDbv-N5UPsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ibeq\n\nPython高级编程（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qlPvBIfqav2NOaXdRGyQEQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbpf\n\nPython高级编程（清华）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-2WqO3Vr6KIGPhhJ3VuZxg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtgk\n\nPython高性能编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AfkFyRnsHeCcrdnzTBmDbw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxee\n\nPython核心编程第三版中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1npiohmcnxEfOBYDz8xgl7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：djfv\n\nPython核心编程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q__Bab9vh6rrQTNcXs89OA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：evtr\n\nPython灰帽子-黑客与逆向工程师的Python编程之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VauUNGVKpDVcjP0nwHXxWg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhcc\n\nPython机器学习基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u7mQNMYqGHGa0z-JFpZzXw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgvu\n\nPython机器学习及实践－从零开始通往KAGGLE竞赛之路.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QL4Q-ZRSEN8Nw0FiGjQYNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apjt\n\nPython机器学习预测分析核心算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pl9gvj4Aa3UvUWH606gghA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btgd\n\nPython基础教程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P1CTx-pZVqmnjhgmabTtYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxtx\n\nPython技术参考大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16AorSuzzprwITIH5pQnLDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryv\n\nPython简明教程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RWVAaXsTN8UZVT93qYGAow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qqfd\n\nPython金融大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hPZGpgcJ4mrD-hPUHi6v-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkde\n\nPython金融实战###.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT6jWL6evmLno-DqxOwztQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdtd\n\nPython进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MgdTNPvZmL4wCO30fD1PYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpge\n\nPython开发技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cBUeX7g9FO-YmQfm4tjqew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fsen\n\nPython开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSoagU8uWVrd06PEV3M8cg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akms\n\nPython科学计算.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_QM1-pKyOX6igigD68dubA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnf\n\nPython科学计算张若愚.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BKh190iPHJ6YuV8dF4u-SA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqkk\n\nPython快速入门.（英文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iueknRUbscCwbuVJqnVAYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpmf\n\nPython面向对象编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VDoUBcjeJE3E4PvpHTDnkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfqt\n\nPython爬虫开发与项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19HvOnwlddYVTu1J_A3Ar_w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bppw\n\nPython入门经典-图灵图书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ADZTfo8d-BhWRVMTuc9vbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnys\n\nPython入门经典_以解决计算问题为导向的Python编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AtmPablSgCYCEGlzVt0nsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qwcc\n\nPython实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zuj5_Pf6hlBWRDcttgs1Hw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmkk\n\nPython数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oV8MkV9MeIEJd5vvKykSTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nuyd\n\nPython数据分析基础教程：NumPy学习指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n_3DdmFSJIr2hvrQVdYR_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtfw\n\nPython数据分析实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1etCRbwO9pnh92ZfDmk_Thw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpl0\n\nPython数据科学手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y0YDhW1j2c-7y3JYa5XcRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdpm\n\nPython数据可视化编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1t1M1cPbVc3Q4GY8KJzu3zQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wbbj\n\nPython网络编程基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LiKopPZbm-cl3EZSsQNvaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxmc\n\nPython网络数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_WYX4OuYfLZejHffPyxElw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avqp\n\nPython文本处理指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_2WB8aYQIsN_N_ejDHkqng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xsbp\n\nPython学习手册（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/112mWtJksF52XuuTbhAZDDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbkb\n\nPython学习手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yf-Kx3QUi4FxRA4EeMSKgg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newx\n\nPython语言及其应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M7vxF3rWfBkaEkMx1e1jfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jper\n\nPython语言入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ag-d9IZhcJJlq0EtjCGbRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjvg\n\nPython源码剖析-深度探索动态语言核心技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KOpCn8WpfD-u1TFDo2S1vQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrdk\n\nSelenium2自动化测试实战基于Python语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JHkKIFuYyOneIRIuZ5CWng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sned\n\n贝叶斯思维统计建模的PYTHON学习法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jgwOa7pAxWizS74wZgPsaA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvh\n\n笨办法学Python（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1j3X9eHXyyiEx6Qt_5NG-hA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrwu\n\n编程小白的第一本Python入门书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1779Scda492B6cV_JDtYVKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gawm\n\n编写高质量代码改善Python程序的91个建议.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RbeRjcOyoED4XssfehWCrQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fdqf\n\n常用数据挖掘算法总结及Python实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17bCvudE58piFmzXuqPxyLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crhc\n\n从Excel到Python数据分析进阶指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wGm22yDbNZb3-fMxg9U1xw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sjej\n\n从Python开始学编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xbTixG5vp46jF978gzhjSA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jpcd\n\n基于Python实现的微信好友数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lUNyfgLjJQ7a3wYTJohSUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkxh\n\n简明Python教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yAKe7FKdjykrPw1VCf0dyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjpe\n\n精通Python爬虫框架Scrapy.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SsXFFATYsFuGpOIB4Wu0tA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agdt\n\n精通Python设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15mPbGSDAge1rerPKlPNzOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cstd\n\n可爱的Python脚本语言入门精品文章.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xa_FLvZY1HALR1DCQxgXkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcss\n\n利用Python进行数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_UV9ksV1nB-74Y6jUPGgBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqcg\n\n量化投资以Python为工具.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UY9A2psHqVvwBLFctFGhfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hqng\n\n流畅的Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tMriduk7AKgjhbso8PoYkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhra\n\n深度学习入门：基于Python的理论与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wHkyJ49Jd0-tWN2HnyseAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uptu\n\n深入Python3中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Om4fYBrWWQRsdubmQZOnQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fscr\n\n数据结构与算法-Python语言描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_26rHItQjriX-uoAnfDDIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srqh\n\n网络爬虫－Python和数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MbwZbJ4iCa3d--QGY_gvvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yngd\n\n用Python进行自然语言处理（中文翻译NLTK）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15g8eTQEUTNC4XfGFAXlqSg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yunh\n\n用Python写网络爬虫.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yTWnUNcViJoXTPH07sRjyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nhas\n\n征服Python语言基础与典型应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11dPvt3a-TK_DZafOLWHXyw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfpc\n\n## RabbitMQ\n\nLearningRabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11OLPEtgvamlehbM-kaJPCQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjef\n\nManning.RabbitMQ.in.Depth.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/141oa5XeaJoYbImQ1J1AVpg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmvx\n\nRabbitMQinAction.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Z-PX_oQvCrm8ZkfqZRFsA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kqnj\n\nRabbitMQ安装与使用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mCd1AXHWZ_SNoLe05y53dw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ryge\n\nRabbitMQ实战+高效部署分布式消息队列.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AW-9Ld_h0oNBo8MBNWmlIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnvq\n\nRabbitMQ实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16KUEfZ7E0LQ9EtWVZZoq1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfa\n\nRabbitMQ学习整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dqd2kKDrRyF8BFfhIM3_3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quhr\n\nRabbitMQ研究v1.1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tZtvd8venJ-OH2dgpz3MyQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvhh\n\nRocketMQ实战与原理解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YFSlSY9fssmzGNl4pAGTjA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhc\n\n深入RabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u1zZr6sYHgCk_ombXpwgVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jwns\n\n## Redis\n\nRedis4.xCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT5vxTrQ6GkplG7oC_njig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyje\n\nRedis开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HrA_VRs6-eTS1eV1a3QX7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qehg\n\nRedis开发运维实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LV8ltQSf9eZIxITQUftoDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txvx\n\nRedis开发运维指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y5toFOh6L78MBmm8NgsoGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kegb\n\nRedis命令参考.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QE2WAnsasYtoVLzDcyvd5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：haps\n\nredis命令参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VZOS8sNEt1VrdhGJWUsH6Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxpf\n\nRedis入门手册（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TLR49uLo-QKh6rkDmK2UIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnmw\n\nRedis入门指南+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13ouDpjbckPseqR9unl8Qlg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwrx\n\nRedis入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KHQ1IRHFwM7QR7MQVDLIQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：setg\n\nRedis入门指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VaYgcB11STHoRbY0v5Cbjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyry\n\nRedis设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1x485r6hUdA6ReGS_Qs-8ug)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgja\n\nRedis设计与实现（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iBfqH71XF21v7UC8hp4gVA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvhp\n\nRedis深度历险：核心原理和应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dv-L9npNpGst2NB9QnF-9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmjs\n\nRedis实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TC2fhntA5c3-AGQeLxWN8Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bayn\n\nRedis实战JosiahL.Carlson.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JU2GEnIx4Z3dY_GjmpZ_ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcea\n\nRedis实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fJklWMC9wxvbS4WJSYLAfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sdkm\n\nRedis小白入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LQG-Tens7eeKk2gTGlacQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqmt\n\nRedis学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NkE18t6odi2HXv9Oo52LOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbc\n\n左手MongoDB，右手Redis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mqaPNHWzR2mAQOR9MtQYYA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：usvk\n\n## Scala\n\nScala伴生对象.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AjvtMiN_yNmkjHBWwIz1wA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtbr\n\nScala编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15pq_oc-8ekzfPFfri415hQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swak\n\nScala编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pyEdgq_T0VBoguk4zSIDHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wudx\n\nScala编程思想-原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1niHLNXLzzskDEGNprsZSyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqbb\n\nScala并发编程程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mj_9nxhpaUr9i3Do8WhyNg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgpa\n\nScala程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hAYn_whVc1uJ2wyk3qdlzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kmwv\n\nScala基础语法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RDSS-Eo0SPgW_uyfKwBCCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wqet\n\nScala集合.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AER6yVefvsjBdx0qfX4Afg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gyyf\n\nScala学习手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1XePbusG3vktRYwoQyM6eqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhdt\n\nScala语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eE7s7mSKmEbyE0UEhEKTtQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhwu\n\n快学Scala.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MubjIXRpV00O4iuk8BHN2w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfdv\n\n## Solr\n\nApacheSolrEssentials.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Yf5ACO-f2CwWllCB90Va6Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngks\n\nApacheSolr参考指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PveHHBLEa0UxlUM38_h9ng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvtx\n\ncookbooksolr4.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1G0AKrEIwS9sPhnXgSmF-1w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucyq\n\nJava搜索服务Solr操作指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SHLK-B5km75SvV8Vlhv9XA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frjr\n\nSolr+In+Action.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1n2Ru2eEVAJhep6s9UfHFog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhpj\n\nSolrJ教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AF7OMIaxKH24WBSn0Sz0MA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ttnn\n\nSolr的应用教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i6P1YWKu2P1hdOKxhWiV4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydqr\n\nSolr权威指南上卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZLt1IPqpib1shVCwXH_wuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdeh\n\nSolr权威指南下卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1M5IyLBOevsCppdmcKiPr0A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqbv\n\nSolr实战中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xAOp9m5nTedRTWQoWN0CBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqbm\n\n搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14dPfzeUfz_VOiGIAyUsAWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mevj\n\n用Solr构建垂直搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fztu32bV-8gzlLA63YOtDg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utgg\n\n## Spark\n\nLearningSpark.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a3pZe9TldXUHp_Cc0e_hMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpbb\n\nSparkContext.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BmslNv9yFOOHAm1v0zNU9g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahwk\n\nSparkCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SbU88xeawgY43To6x0lqIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjnw\n\nspark编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oBgXPSls4C2teTD4l1KljA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryq\n\nSpark初识.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PSgvOmfNshU_MLtyI09WVQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecua\n\nSpark大数据处理：技术应用与性能优化（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rX0IMFa9mGOhkalQ3DBGAQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffyf\n\nSpark大数据分析实战（大数据技术丛书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NgQ9bG27C0Y10HPe_s5pxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sccm\n\nSpark高级数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrcXrbyKGFdXJaK3EPY3KQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mntr\n\nSpark机器学习-NickPentreath.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dnYnxh0Wpej4O78lZmBFdA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uubr\n\nSpark机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f1cgmkbyfAmXnQzp3RfXXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkwp\n\nSpark快速大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18rEWffYn03R9MMPXZyXt4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rqdp\n\nSpark快速数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/125J1v1mT5sjpho1RALszGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhvq\n\nSpark内核.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GrAjbQwrIZoGeqiuWZgXWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvj\n\nSpark之SQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UmzDoY2i4Rv6RP_x2a5Dyg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yamy\n\nSpark总结.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oS-ORk8JmuyD2Rvhlswngw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：htvg\n\n大数据Spark企业级实战版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1E5t7vvCg-lL4pcHPBuQvOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vsye\n\n深入理解Spark：核心思想与源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ui-OYpKb0PrZfKS-SR5cUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvbc\n\n数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QjxarlwM3jR53fBd8h3vJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：scym\n\n## Spring\n\nJavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13t5wcfnzzSI8MaSoDs-f6A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuqh\n\nJavaEE设计模式：Spring企业级开发最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nwMCWnj6AbBVTjzv27Spsg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rber\n\nSpring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mA9IBQAXMFHSuxMYb0dwOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuau\n\nSpring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10cNgpDROfBl8Y9YaiYOKXQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uugy\n\nSpring+Security3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bSbTHCM5sdyK4vzcmsRxsw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cecb\n\nSpring.in.Action_4th.Edition-Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JeGK6-fJM5JA2ob0LGEp5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbna\n\nSpring3.0就这么简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vcGkxbdbPeJr8ZFpbasiUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgfh\n\nSpringBatch批处理框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14J6GWb8yloJobdjTn6Yo8A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhaq\n\nSpringDataJPA从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mb60lfExZerVL74IMMcB-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhfd\n\nSpringData实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YFgOkiOdgpI-YxS2snxDVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ymgf\n\nSpringframeworkreference.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jeZ1XWcSTTLqKovtq07BLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gghe\n\nSpringinaction中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19hVshSMI9dKPbxj8mgufSg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvpv\n\nSpringMvc教学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yBGQhQrMuDD2yW2Yo1Kurg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxym\n\nSpring技术内幕：深入解析Spring架构与设计原理-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14O9Be78yllAL42XgwyD6Xw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvwg\n\nSpring揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12lJjIJQBpUFJEe6SHReEFA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bmtb\n\nSpring揭秘（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y3ra1sLoZgRMLw5NwPnkfQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqqa\n\nSpring实战（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ym5f1CjAaYTp2UC7q6PSLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtsa\n\nSpring实战（第三版）.（Spring.in.Action.3rd.Edition）.Craig.Walls.文字版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JWMfgnsNN3CiN4kKnhAedQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xuaq\n\nSpring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AxldKhH5nE457d_z7xQ0fw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uwey\n\nSpring微服务.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CNk_cfmr2NkT_wLdGB_I9g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dycv\n\nSpring微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MfsYnFhcS8prjR0MgidsFA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wtqy\n\nSpring源码深度解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yUdNGv7JwkimJ-D8ELk4_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnam\n\nSpring源码深度解析[郝佳编著]sample.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1N55_R0jemO6OYrKDeTMtvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：caha\n\nSpring中文开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1trSR0TnHIwXlwxhHaT1BOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utnd\n\n精通Spring+4.x++企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sboKbsdGcoJ_9C-ghJ-EzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uyhq\n\n精通Spring4.X企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oGAa4XQHyqZwn5fEmDLyLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjms\n\n精通SpringMVC4.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UPTbM8hzQXmuzHRzYnvavA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svmc\n\n精通Spring（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TjoTtbfCUpY9vjkEXfj3-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdb\n\n开源电子书：SpringMVC开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nvqA3ZUsmt4nHlNo6KtFnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbwt\n\n看透SpringMVC源代码分析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Axx-brgEQPAyceeduOC4EA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qgbs\n\n\n## SpringBoot\n\nJavaEE开发的颠覆者SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18_ChlhYC5WPR0z2em0XEJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skhv\n\nSpringBoot2参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L9ybprmzbVKVO7dM9N_dZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wcqd\n\nSpringBoot2精髓.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17z6b52RndqkYMy3XogSd8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmyr\n\nSpringBootCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r4_0rJJoAcOS8BHLlMsmvw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjq\n\nSpringBootreference-guide-zh.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ueA9qfWcEgmIo-KFuY4WYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvck\n\nSpringBoot揭秘：快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1I3kIasza2KLVGalih1jueA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wp25\n\nSpringBoot揭秘快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YYCf7Nt4fIWshEDqOOHCxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfp\n\nSpringBoot企业级应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10oNwJpuoxIIeLJo_1L--WQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytyn\n\nSpringBoot实战,丁雪丰（译者）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kH2XcrxHu9blC-VpWIOT6g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：erre\n\nSpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yLfvcBg6kialAeCK8UtA3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mcxf\n\nSpringBoot实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bJXfMZbKc7BRW4Os_e0ZQw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：iqh5\n\n从零开始学SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wvveBEUlFd39oIE13CeMjg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nffk\n\n开源电子书：SpringBoot开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zK-xruUmxZcMl_PBu537eg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnca\n\n深入浅出SpringBoot2.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a0KXvVa0DxgijdD2iFi3nA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cvrv\n\n深入实践SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1o28NYp6qS0GwErBZkQQEHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fhce\n\n微服务架构基础SpringBoot+SpringCloud+Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DKC_sCenraRpiSrWUiTrXw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrac\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qSMW_4LOLB5u3wggmpNgSQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkws\n\n一步一步学SpringBoot2微服务项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m0hb9sIdkp3L_uvQEVof4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etuc\n\n## SpringCloud\n\nSpringCloudDalston中文文档+参考手册+中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17OOwAEwU9m1xH9peLYwNuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gepu\n\nSpringCloudFinchley.RELEASE参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UYPHxpKS4ApQ5HPIjDg14A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbcb\n\nSpringCloud_Data_Flow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zg2AZwiLBCsUkBHEpv-_zQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqsb\n\nSpringCloud微服务架构进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CvIBWtGQkM30gb6vIuB_TA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrpg\n\nSpringCloud微服务架构开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hb5Ha9Df7DGhgysizIKG1A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaje\n\nSpringCloud微服务实战-翟永超-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jzzH6aZMuplJn2f55dIreg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svry\n\nSpringCloud微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17fBvrg0dS3jShZCtVextKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkf\n\nSpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RZNBY5GtJEUWnSvUNOfl2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytxu\n\nSpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tVqVWKNM2aAxM-CfDqL6bw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eygt\n\nSpringCloud中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AsaM1V-xAWB1N1HE0ygf1Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjde\n\n疯狂SpringCloud微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17m-C1i1m4UZQ1fBU_7AKjQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：m75a\n\n深入理解SpringCloud与微服务构建-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UvDP10G8oFquvLkkou9vKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpaf\n\n深入理解SpringCloud与微服务构建.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dvcYUenti_PGA3IFDjDPog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gpvu\n\n微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SJH1l-B_NS0SvrSn9MvCcQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyde\n\n重新定义SpringCloud实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1toi6LIOPhm7uIcBshhBtJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr\n\n## TCPIP\n\nHTTP权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V-E7qA1chayHptjMqWD4jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfxn\n\nTCPIP网络编程技术基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1A0tNLreWUnfnC0OZNRzYzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egcj\n\nTCPIP详解卷1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18-1DGhzaiIGFCqnrDwuRcw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhqk\n\nTCPIP详解卷2.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TxZ6eXOKXMLtuwUQ11b-ZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hckb\n\nTCPIP详解卷3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1U-Bu8UCYxbo82T9WPIkILQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbbs\n\n图解HTTP.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iBy_vgZybISzYQ-pcHGXlQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uybd\n\n图解TCPIP（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4WusvoRv5JUT5N136KbPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eaeg\n\n## Tomcat\n\nHowTomcatWorks中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bUzW18tucUfnpZplko1QuA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqpn\n\nJava+Web开发与实战--Eclipse+Tomcat+Servlet+JSP整合应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kIkW5Dy4MG19TST7MWsBlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnje\n\nTomcat架构解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1e_gKL2PnAratdONt3ktbvQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtph\n\nTomcat内核设计剖析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R1zlCwMWNOeuNHTmvbw00g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aycy\n\nTomcat权威指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvlZIh42lE9jt2oZdYntDw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcpx\n\nTomcat源码研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PR52YaEr_IISdx0VAXVoTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：teru\n\n基于Tomcat5.0和_Axis2开发Web_Service应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zFz490uTpZ5XfpVV9m3UVw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhkw\n\n深入剖析Tomcat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bIQQtU5IDwgqMufy6qRtRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkmw\n\n## Zookeeper\n\nNetty_Redis_Zookeeper高并发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HglGmsYXMxLn5vme3-qtdQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfje\n\nZookeeper_3.3.5源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xIWKqaK8QQSjRd0qzMqwVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdjy\n\nZooKeeper分布式过程协同技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V0yMLS7N_zl5FBgOLRq67w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwqs\n\nZooKeeper原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1T1I8mrhHn16-4MZGi_e8LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdv\n\n从Paxos到Zookeeper分布式一致性原理与实践（书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hIQ0y498zyjOPsK09-8wEw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xamx\n\n## 并发编程\n\nJava并发编程的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12noqXaPB5jQqf-dZq_mVRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vvqk\n\nJava并发编程核心方法与框架,高洪岩著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AbDG2WWDfEZDNPsmmc3cpA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkx\n\nJava并发编程实践（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Fp2XewwqOPQ4DDS0CP26Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udhx\n\nJava并发编程实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Z31bV_2pKLb8QYGeqIaYTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pygh\n\nJava并发编程学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DiWDJysVBMcC3BU2-77E2Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmat\n\nJava程序性能优化让你的Java程序更快、更稳定.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Zu7PDffnvK-jQJ-2pTS_xg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dysx\n\nJava多线程编程核心技术-迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/194HtZ2V0Fo2qPjNKmCo3ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cwnt\n\nJava多线程编程核心技术_.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IWYc0eB7T6cB1IMbW4bb9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxqn\n\nJava多线程编程深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jiOK9QuIwkLkR53Qu8SEbQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsrq\n\nJava线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BhqzszXZMCvxPNyUO0l6OQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grjv\n\nJava性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YsLDmlDmpf2D1ID1K0uCRA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrcr\n\nUNIX网络编程卷1(第3版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_tLFKEMmZeCbHEttWn-9hQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fyhq\n\nUNIX网络编程卷1(第3版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cNyPJY6Pgf1erI5tPqwGkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjph\n\nUNIX网络编程卷2(第2版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16iP-wOr-97AAnmhkfTN8_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wujv\n\nUNIX网络编程卷2(第2版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12TQGM2WSWTCO6_YmuEhj-A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvme\n\n高并发环境下的数据产品架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14P_iYOF9iTNv4swqv9H3tA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngnp\n\n七周七并发模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NQlbnSS9aL5cjpVWhqzFAA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hhvn\n\n深入浅出 Java 多线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wLJPyMZK01aQQj4xE6VsBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvec\n\n实战Java高并发程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O9ITt7hdt5i1sDSLIeTFUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajhj\n\n搜索引擎优化魔法书+SEO+Magic+Book.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ulpf4W7o-MM7kLSk_3jopg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dejw\n\n## 大数据类\n\nDruid实时大数据分析原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/143Fl3BExT295-apzDYERmQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvwt\n\n白话大数据与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H3UPxGOLyboxe-WT8rRxiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfsk\n\n百度2015大数据云计算研发笔试卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ANm9rUkfPaLE2v30cWfdXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjan\n\n大话数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ExZMQaZVhcwgbGOcjgD9kA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udnq\n\n大数据：互联网大规模数据挖掘与分布式处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UdsXXk-o1Ay1w1HM46l5Uw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytah\n\n大数据处理hive深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/14ohVpdzzq-kybnX_AQAKqw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cchf\n\n大数据时代：生活、工作与思维的大变革》.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qheslcB63Wl1RgyroXXU-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fmhd\n\n大数据之路：阿里巴巴大数据实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yB0FYU0selFFaW9hHqUBeA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utjg\n\n分布式文件系统HDFS，大数据存储实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1V_e-unVW9enh39FX8F60kQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvvf\n\n傅强-当当在大数据挖掘分析与管理—个性化精准营销方面的探索.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mZP6vdBzErKVVmIY6VFz4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgac\n\n用户网络行为画像大数据中的用户网络行为画像分析与内容推荐应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NomTFjPQGsBqubmmNqWhIA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdsy\n\n云计算大数据10.9日课腾讯邮箱垃圾邮箱解密-机器学习之贝叶斯分类.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EEdMdCYi6f-pdz_w57IaWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cadp\n\n云计算和大数据时代网络技术揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1q9iVEL2eHolQPrGbq2yYjw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfeu\n\n自己动手做大数据系统.张魁（带书签文字版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oef-psBj1qyYh3A7b5Y2lQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xugy\n\n## 计算机类\n\n编码：隐匿在计算机软硬件背后的语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ub9V4Kyo-Uqk8_nGJlFXhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wxsc\n\n程序是怎样跑起来的.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FvoZx3Izkc8-4PrlS1qrAQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtdf\n\n程序员的数学3+线性代数.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OTxVO8d_xx08Fy86s6IZmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynfv\n\n计算机操作系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AHemuAa0ylbcaOrAqXNkdQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uudw\n\n计算机操作系统（第3版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i3aCX4UPEWRmbaPN1j_cpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdpc\n\n计算机系统要素：从零开始构建现代计算机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-rZX-unw9HhH7Z-vqosJJg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vary\n\n计算机组成：结构化方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YT8u3GT5jdmpWSMc3tSAoA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avgg\n\n计算机组成及汇编语言原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Me5ih2DjRku7m_32bbvvUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkme\n\n计算机组成与嵌入式系统原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sGkzfLXCIfZHoAatt4dApA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aknv\n\n计算机组成与设计硬件软件接口原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yVvP4VmAKcVUgxjOwEjy-g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyxu\n\n计算机组成与体系结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12wuTAlW0Wx0eZ-FGHvje5w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qcvk\n\n计算机组成与体系结构：性能设计第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19MY0qTxeJTTlu2cD7TtOTw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mjqd\n\n计算机组成原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qKi0pi85y4DhJ3tiG4I3HA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkdx\n\n计算理论导引原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bUKiyTvLBwn2-UuZJ0-FcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wpqp\n\n深入理解计算机系统（原书第三版3）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16hvccmhx4k6IMGcE89_1KA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xyyu\n\n实时系统与编程语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oqAaL8_vHDgOychXpKXdPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sbuy\n\n网络科学原理与应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Ywhevg1Yryj9jWI8kGOnKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnty\n\n## 架构设计\n\nMicrosoft.NET.框架程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kQrL65G9MvFJHVWTYCIF4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgtb\n\n阿里双11系统管控调度架构与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SPIZK_zzFobxhHmTSBDTGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：acmb\n\n程序员必读之软件架构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WSIqyXJ9hxZTrucSXbzn7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ysdp\n\n大规模分布式存储系统：原理解析与架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lSqIq8U6gyFDP0uVpqbLTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dckf\n\n大规模分布式系统架构与设计实战..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VzZ7rPaTYt6CXCirDrdJ3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：embe\n\n大数据架构师指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m_fOWgcxs1KB0g6ZSQkcrw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqgx\n\n大数据架构详解：从数据获取到深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BOxy1UYgpQnwZQOjsHaUhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdtk\n\n大型电商分布式系统实践 - 第三课.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c_DDSlFcVvCGVcRhTkDL3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gafm\n\n大型分布式网站架构设计与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H2d-yqMcNoK1nss04B8auA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nbuw\n\n大型分布式网站架构设计与实践.带目录书签..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/167Glqiy01WM5O6dlzwhk4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdtt\n\n大型网站服务器容量规划（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PcYP-GWVaNo0w4scEzdAhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejjn\n\n大型网站技术架构：核心原理与案例分析+李智慧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OVmhvHeEPzgwPEbPplcgGg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmem\n\n大型网站技术架构：核心原理与案例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1R8ItDeKjXdZChQmYjNDTdw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmxj\n\n分布式系统原理 介绍.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O_EMeQ8ZnhUpQurCME8dJQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trrb\n\n计算机程序设计艺术（第二卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fbtY-Zd6qylgpnWJ1EnsgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbb\n\n计算机程序设计艺术（第三卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1aASj5P2lPohVGBb0HRif3w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhnd\n\n计算机程序设计艺术（第一卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KiP1N-KmCWkFptqVQC5Qfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pfrk\n\n计算机网络与因特网原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IcaX8b29y_qULbcUKSR6dg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdfh\n\n计算机系统概论（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15dGDm5XHjSL_qjmWmsyFpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dgpe\n\n计算机系统结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16__4vm_xk9QV4Jt35klVZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfca\n\n架构即未来现代企业可扩展的Web架构流程和组织原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1uErhVIjSuczf1jm6YxZs1Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwuy\n\n架构探险：从零开始写分布式服务框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pmU3H0sEYfolwuy02P3yew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arfq\n\n架构探险从零开始写Javaweb框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VO93QIrOWu800GzwVKIhTQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwws\n\n架构演进：滴滴打车架构演变及应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PCW2Y8psLPI-Hb3pXaelfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgyn\n\n架构演进：豆瓣架构演进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gG8fgFQoPGypigCzgtoZrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuhm\n\n架构演进：京东服务框架实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Zw3MG4k6K5G5Ao4PXU3wg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：psqv\n\n架构演进：京东应用架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/16ZUuKJgy6NaPpP-kMG1yzw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbmq\n\n架构演进：汽车之家架构分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wHHeiii23aui5-g6yBluZw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wber\n\n架构演进：人寿系统架构演变.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OA56l9dM8ho7qA7D28jOUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmms\n\n架构演进：网易开源.pptx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AGn0Og5v3QyTrwwmMAI8Ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykgy\n\n架构演进：微信之道－至简.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qRy8pJly-tN3JMUg4cpspA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yapu\n\n架构演进：小米的经验分享.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1d_zYN8SExBJZz5ezXX2BKA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmqn\n\n架构演进：一亿用户增长背后的架构秘密（全文PPT）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eGKa-TAw8rRDK7vrM20oIg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augf\n\n架构演进：知乎架构变迁史.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CZr31zOQfdWXDSg6dEN4nw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eknk\n\n面向对象程序设计图形应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h0C6BVqLeJWC7t1F6dGshQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxnq\n\n面向对象软件工程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_SeVnUc1Hu413KhzDcAFgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkhm\n\n面向对象与传统软件工程统一过程的理论与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tkej8trl4c36HwnzgcioaQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxd\n\n敏捷软件开发：原则、模式与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HujV9N_tIm2Ue-M_F_9eNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rspa\n\n轻量级微服务架构（上册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18qfvhPp649heoFmXktvFOg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xftj\n\n轻量级微服务架构（下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zoX-AJLBxN5yUa5VYTgBoQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcmb\n\n人人都是架构师+分布式系统架构落地与瓶颈突破.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c4sMiCOdT06pxd-e4-dbcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dirl\n\n软件安全从源头开始.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KFw4y1VXHsOmqwOfb8oVew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdsr\n\n软件工程架构驱动的软件开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mntiX1Sznsl8yqS98zSHxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjtd\n\n软件工程面向对象和传统的方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fG3_AqJu-tLX2QHUOw-Q7A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ews3\n\n软件工程原书第9版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1o8Ymui9KxyEdLy3A8E-mXA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdgn\n\n软件构架实践_第二版_林_巴斯等著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fzHMMsD2wK7b4Xp-CugCeQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhfx\n\n软件架构师的12项修炼.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QLZMF249JTHhcY6bDENNWg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxyr\n\n软件可靠性方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IPzTU6DIrv31Gi1ZCMHdOA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahss\n\n深入理解Nginx模块开发与架构解析第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ldqoJcfcSIeBSWByqPBOVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sknj\n\n数据密集型应用系统设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vo1nEA1gj-1NF_t5lVh-KA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgkx\n\n数据通信、计算机网络与开放系统（原书第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13Fv9GeGueBOHOxcnH5o53Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjst\n\n数据通信基础设施、联网和安全原书第七版T.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nWlpGl3m87mzVw5e-lNS4w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njdc\n\n数据通信与网络-原书第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zgd8JZF8OXG8f3O76ob0JA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjkb\n\n数字设计和计算机体系结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mokVM4hllmfU1_dSR0Q3RQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdxx\n\n数字图像处理疑难解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/154jpOVPO8CNRtgg8s2UtgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：spdu\n\n推荐系统整体架构和mycat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CuZ8VUbbJMlqZ3iNHyvPng)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfrm\n\n微服设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eXxSXr_At-Dm_fk_jQCOBQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atfj\n\n微服务分布式构架开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QUMfzz7sEnA6dvaTWhsJfA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：abgn\n\n微服务架构与实践（王磊著）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1LFeA-0pDUbDjxqpJ8KB3xg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntaw\n\n系统分析与设计导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L_9aH3VmLpi8slWRGI8dZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pncy\n\n系统分析与设计教程原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11D62FySweDeHetxiSgaBhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wnuk\n\n系统分析与设计敏捷迭代方法原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1slWRoJVVfHzOOYRsM2y8iw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ycyd\n\n系统分析与设计原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1AWfWNGlOUQ1MwMXuUkOfvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgsr\n\n系统架构：复杂系统的产品设计与开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L5aTNNiasKgr5zEKG2kXNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xstp\n\n现代操作系统第三版英文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1cqO-1t5ktFyaLGoSFYrFmA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rebf\n\n阎宏-Java与模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mZ3euwfuuZYZz0dWD2ETeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdn\n\n一线架构师实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1f_6dngfklUJLM7hOhD83lQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ktet\n\n亿级流量网站架构核心技术+跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MoSsDMzUzGc513NCrGZqzg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rgww\n\n亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1hLOp66q0bIlJ3XRTFNZTgg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upfs\n\n云计算架构技术与实践+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pi4i2YntSaPYdoSHvsonVg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newj\n\n重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17TwdU1c0BZAbGAOD-PAQ7Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fceb\n\n自动机理论、语言和计算导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zlg_0XChqqcCO5oQAqNQ8g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsyr\n\n## 人工智能\n\n白话深度学习与TensorFlow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZLw__yjBUaZlWksJp7v7FA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ddjm\n\n机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1D5Ev9mTVN7js9OhjpKH2yA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t44o\n\n机器学习numpy和pandas基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kk9_TAsA_R6Yb_VJKx2duw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhys\n\n机器学习实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pTrPGVbmLQMrIcSwMCSbLw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecgp\n\n人工智能复杂问题求解的结构和策略原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SDsUMKH04iyaCT9NMlapbg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ermp\n\n人工智能智能系统指南（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wvu4z-_LSzofglfox1e4ig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnxh\n\n深度学习-无水印-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FY_754yfqikeY5qc1rKEmw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfnn\n\n神经网络和深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1CJbzqyobhwqchZksZN7yCg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfax\n\n神经网络与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L3IqJJXj8IEw5DYhu17YWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mgtu\n\n神经网络原理.原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Btx6EMx-zgP1wFT1_nKrZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhc5\n\n## 软件测试\n\n软件测试基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10s7yvEvwMy1caKWAwcFUPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdbt\n\n软件测试基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oRJNseVIFgDs6SLBL3XFZA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qaav\n\n软件测试原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1aTkoMSzGdkAa1wXxmOLMbw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krgp\n\n软件测试原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10vW1n9E_7_O4bwdlOMX0EA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcwd\n\n## 设计模式\n\n23种Java设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eh5oqb8vbdq5RAlSL79D8Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yfja\n\n23种设计模式知识要点.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QAL-yAVeqjRcwfsD2JGcvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pynv\n\n24个Java代码（Java经典模式设计）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OoosrBfBWK9QAK0TQIE4ew)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdkn\n\nHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1a9C2j3RckNZZwCWOzZagzQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnws\n\nJavaHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSFgFkhK6lOlIGog2r8teA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfhj\n\nJavaWeb模式设计之道（jb51.net）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ViNmcCBVrjbhzC4YlGtVOw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egag\n\nJava并发编程：设计原则与模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MLgSHc7_gYUF2p3IP6vjUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxvt\n\nJava多线程编程实战指南设计模式篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OakxWURtDF1MhnB5ChmvSw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awws\n\nJava设计模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1IktvcAQWoBjbOVq_LXe7Ww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dasf\n\n大话设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b1nQRPcA5hNyxqQas2SWEg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afcx\n\n设计模式-可复用面向对象软件的基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1odKYhYMr4oHMhKtkQHXmog)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewss\n\n设计模式之禅.秦小波.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WWXQJ_kXE7bFNL6YGg2Uww)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rsun\n\n设计模式之禅（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KWoz-LdblGericVV-ydvqg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ehkb\n\n图解Java多线程设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GZsmyslADdDiG9ubWqQ1RQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dsvh\n\n图解设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1teydg8GdbD2e-dmiNbJ1NQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wubt\n\n研磨设计模式-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_Eh7vreNW5U69pSVz9UZgQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvud\n\n研磨设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Hdjlf0Go3N6vzQIBqGfqvg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhpx\n\n## 数据库类\n\nJava网站数据库设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_J34VM8FGV5GvIpcnmNEMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrmj\n\nPostgreSQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kMwCMbF-HPnwHN3Eub5dhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjar\n\nPostgreSQL详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Zlr13EcrCVviOqi5uMZy2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpbb\n\nPowerDesigner16系统分析与建模实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19uRhLZ-y-wSeJLwtDHg1LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpc\n\nPowerDesigner_15.1教程（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eOffPVGYRVnuUxKZFz0C5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvag\n\nPowerDesigner教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1oPirlfDkZ8KPbBZ05cJdQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjau\n\nSQLCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1BNG6VD7RGH5gIRX63xcwtA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbgc\n\nSQLite权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b4ou4nLGMtDOzuW0UwmTIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbpu\n\nSQL查询的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EvRbBfMRjBeKhSrCe36DHg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxxm\n\nSQL经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/192IgNkJiN_jCWn4uM5Yr0w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrmj\n\nSQL语句大全大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xT7Pp57YlCrBk41z_eIyUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkvr\n\nSQL语言艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11Dte6piqSqH5Pu6kJ-aY3Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vuvg\n\nSQL注入攻击与防御第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1-8dOeTUpDLDrvVJ-Cvc7Lg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyux\n\nSQL注入攻击与防御原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1joJZS9_QK4Pzc1rzXlKxlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efms\n\nVisualC#数据库高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1yMlj5LyHy9Wz4camNrLeGw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：l0lz\n\n设计有效的数据库系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kt5mzpLMsvN51RDIszTaaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnbx\n\n数据库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19eNfc0qaI5nZn4nSS0wKgA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqxw\n\n数据库查询优化器的艺术：原理解析与SQL性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fr11ipECSDb-svyemX4zDQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxcv\n\n数据库管理基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1edShCJlIVc1tDRqiJmNgJw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saky\n\n数据库管理系统第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VgjYq5wkzPa5c0GpbTnTYg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hwek\n\n数据库设计教程第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1llPfN3VXo6Mw5YPaycYRiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bkww\n\n数据库系统导论-原书第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RK6fCpXZX3fEkvM5SBU2_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dhge\n\n数据库系统概念-原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1DkVWc-iGeBWWxZuOtxYwxw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sakx\n\n数据库系统基础教程-原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w33HafOgk7h3GLJ-Ut5Zzg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftbp\n\n数据库系统全书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1z54u7ZLvyHMEVO-aP2iwcA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhvb\n\n数据库系统设计实现与管理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Up8b6C498s7M1lLlC0ReXQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xddg\n\n数据库系统实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FWzyeTSTOGoCnDNTpUOSfg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxqx\n\n数据库与事务处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PsJ45MHV0PCsgyrj8pDTzA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yspv\n\n## 数据挖掘\n\n社交网站的数据挖掘与分析_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pu9o4QYGXmBsgvJ0sGqjaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vywe\n\n数据挖掘：实用机器学习技术（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1NroTWqpcLB19cl1IyWyOpQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjmb\n\n数据挖掘概念与技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pumcjYmKfFZ8VaUcZgCEYw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykup\n\n数据挖掘基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1EREYruDyMCPmq9kqR7Uq8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yckk\n\n数据挖掘实用机器学习工具与技术原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Li7Xjrwmipc0U9ijr5WwUQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwgt\n\n数据挖掘原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gu8oHS2XtuPv5Jxu77DlLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vkmp\n\n## 算法系列\n\nC数据结构和算法分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/119TlKdgXWYj5QdrGwCyicA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ckwh\n\nC数值算法程序大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zHEV2a4YA4MN0_jN4iZLPw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgw\n\nJava常用算法手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HWvLLZPJE61zXIm8yaoapg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skcw\n\nJava常用算法手册第三版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vm36ZPfncut62oZ2jJ5-3g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjk\n\nJava数据结构和算法.第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_EKJ5IgHjZFYdLk1o4Mu2w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：csad\n\n啊哈！算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1c8pUakJY6xfOYUaVJKvnqQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：npxg\n\n大数据算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1b9H66pNc8Z0LzMvLlgizMA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvuc\n\n高级数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VdHbHaxefL7CA0yoniZGIQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grrm\n\n和小浩学算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jOHwgH8FY5QKpZnJRhzRvA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtke\n\n计算机算法分析与设计课件.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1PFCrqYhrgJUDtXFti-P1LA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kctg\n\n经典算法大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1rZ6xTTlHOVtqoAImgJcakw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfj\n\n离散数学导学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1SzLiz4kVKQfgAdmdK3yrbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srjf\n\n离散数学及其应用原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w4iebO1bfNocgMfPa8XuQQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjck\n\n漫画算法：小灰的算法之旅 - 魏梦舒.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tFgroWnaYQr-X2ci5OtPRQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjms\n\n密码学导引.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h099raG_ivawHCZ4tWk31w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twdc\n\n密码学基础教程秘密与承诺.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1pY7nr8w6Uhh4WjhY4PYrjg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tysf\n\n密码学算法协议c实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m2Hy-VfgwD5fx6MK273kJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twqg\n\n深入理解机器学习从原理到算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1szpU-intfQFlzxkxX1WEHw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwgp\n\n数据结构（C#语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mcQEiZMNZsODci_n0QUbZQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uavm\n\n数据结构（Java版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Tjp1nRZuhWhvC_HKwxYbuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mckf\n\n数据结构讲义（严蔚敏版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1eFHuo2TmZhl6RH7FwwgR_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwyg\n\n数据结构实例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JNYwq4XX8Mp4a7SYK_jcQg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtwf\n\n数据结构与STL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Pg8gyoFANjlCYyc4CNq_vw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccgm\n\n数据结构与算法-JAVA语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ofptqxxZgfGglBuB9B9T9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgpj\n\n数据结构与算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1K3DmV6P7m2uWLeNsfNg2cA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fegs\n\n数据结构与算法Java版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10BI3NCMafNx8niBYV2PYrg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wftu\n\n数据结构与算法（JAVA语言版解密）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19sIVT9nm2ZbIxLMfcEEtWw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbwv\n\n数据科学入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/18W_8MN5Uu4H-zsSRmr4AhA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkab\n\n算法导论（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1P9lqf2fUYuJ-laoTS4JJtQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhaf\n\n算法导论（原书第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1RZkZH5Tb4lE38kmieurRRg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpr\n\n算法导论第三版中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tjZd9odmAiJCJ4VvvaMMuw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dute\n\n算法第四版-谢路云译.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YVRjo6YXQrb8DBU9phOB8w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgtg\n\n算法第四版-谢路云译Java描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19B3NF1NqUMi_MnDGtZPEKQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqpr\n\n算法分析导论_11562998.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Wqvb7mEF67Qeybyet8IXhQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrgq\n\n算法概论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1u6NJjJpocFe_1gKlfAY4rw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gebr\n\n算法基础.打开算法之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L8Zqr4LLlEqA0oKbDps5aQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yssa\n\n算法设计手册-第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dDxKZVxq2_TplFro3cmElA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpet\n\n算法设计与分析导论_11888784.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i2mSmNW72raCBbmsc2BxAg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjsr\n\n算法设计与分析基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1umRr7JTLfp6tgWvKBGzcuQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfgv\n\n算法图解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1KaUCkSW_Nt1yZTfDwqTEYQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdkb\n\n算法与数据结构-实用算法基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1h61A39ID5ZYVdAs_Fp1vmg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvbu\n\n图解数据结构-使用Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1w_dYMOWZLxGBtUYmADog5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpvd\n\n## 新面试题\n\nDubbo面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1i-2HU_podnONkXCIVITXBw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dewh\n\nElasticsearch面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1JfNokxTzcoTGwXof-hA6vQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fryw\n\nJava程序员面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mchSdZg81Nz0fjoDp8E2Dg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wdcc\n\nJava程序员面试宝典（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1asqIE61lGXposZ-p0AlyZg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vunv\n\nJava程序员面试笔试宝典-何昊.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1qLnsU39IHDSKkog5aLS8FA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ukgj\n\nJava程序员面试笔试真题库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xSBYutVnwVHvj6z_lv5OJg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swsf\n\nJava程序员面试笔试真题与解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19i4svUmbEDBi-_KZYtB1Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gybx\n\nJava核心知识点面试题整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/143GVY2tfMh_d_xM0oaxyLQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rcdm\n\nJava面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Kbdx5etJnN7esz01lc8gnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vawb\n\nJVM面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QvsniJFbncUrylWV47u6rA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcgr\n\nKafka面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZI_f14B-UbRYVl6c3naCtw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyyw\n\nLinux面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10mthqPHRgqu9cSGdhAWitA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxyv\n\nMemcached面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12FgrF54YqbQi_JES2Ug8AA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tvew\n\nMongoDB面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FIxAbXaSHzD5sLf8Q4HT5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxhn\n\nMyBatis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1v0Llj_7wVPMKPHWGozAl_A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aewm\n\nMysql面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VUZM3sqXp5O6vfJEfylMsg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyae\n\nRabbitMQ面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1VOPFZGNxv4v8EK4I-f4GlA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txtf\n\nRedis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mrY2VfeqTdPQZ-wu1Qn3Jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xnaj\n\nSpringBoot面试题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1W1SVyA5URstE2vYYZRhs6g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：area\n\nSpringCloud面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mc8P9o2FwXslX1HZtY3O0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqdn\n\nString面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UKTA4SBUI7ySilvKDUT0og)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpny\n\nZooKeeper面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/11xLMllJ1O8J22Fs2q4AmmA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqbn\n\n剑指offer第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GnoqSMTaakGcA4HJi4fPiA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxyb\n\n\n\n## 重构优化\n\nJava虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MBwYNHEVuOq-V1FpPq7tfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：texj\n\n编程之美-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1trz5QH73sRboEDtQjPtEJQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mawq\n\n大神手把手教你Java性能优化-江南白衣（加强版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1lSGEI4vD4moEV3Uzcg_rkw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucrd\n\n代码大全2中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1_GEyjV0Y4w3XpkRDj6iHrA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aych\n\n代码整洁之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Xxiz8LzT7u1wazR0o-nEJA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tymx\n\n江南白衣优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1jGcfNaiT1k1V8tX6uabb8g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mvpa\n\n重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1UGnVQwvguIMuFMf6yy8l4g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bssy\n\n\n## 新增，第二版：面试题\n\n第二版：面试题 Android 100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1iKSwXFJ6QYnSvpDITa0rwg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewdu\n\n第二版：面试题 Android 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1O4GgpzQg5S_22XHmhzegeg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bspw\n\n第二版：面试题 CSS 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mrrBhTMgAM8ENTs1AukWaA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksge\n\n第二版：面试题 CSS 50  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1fjpSyKzZwASii8wCPb7S0Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prfb\n\n第二版：面试题 Dubbo  19 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TPsIFslNRspYSm9U8FNBkA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ppmv\n\n第二版：面试题 Dubbo 30 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17Wkqpp5DhXKGQxQbu_00kg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etff\n\n第二版：面试题 Dubbo 58 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r3K652QB2msrF8ph_MkQLA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sayu\n\n第二版：面试题 Elasticsearch 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1r0zJ19iQhpHMa9j-fsDDIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxak\n\n第二版：面试题 HTML 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zdFSUdU2eCZo6s6tcy0E_g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmab\n\n第二版：面试题 Java  100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wDv-YWEyWXGzuJjHJ1UcGA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：junt\n\n第二版：面试题 Java  17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L__c7fExhoH3KbyILzFalg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyxy\n\n第二版：面试题 Java  算法 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1s3NQewKgT3Ly93K5U7BPUA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：affq\n\n第二版：面试题 Java 133 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mxmXTNaMzru3RyRpZOME2A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykde\n\n第二版：面试题 Java 47  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kGwAhK36voheuvYNOUpA5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfym\n\n第二版：面试题 Java 95 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mvPwDa9vBaUpBX_SGybp4A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtxu\n\n第二版：面试题 Java 集合 72 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1vuEueYxuKJwN3IF7otPp9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swqr\n\n第二版：面试题 Java 综合 84 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/17OaURL3iWKAEjtBSfKWMnw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btry\n\n第二版：面试题 JavaScript 43 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1YA_0XYBPqBTeY7ngpSxixA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xmys\n\n第二版：面试题 JavaScript 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1p9s7pCEDDl-tOHXwZ2v4Jg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kytg\n\n第二版：面试题 JavaScript 96 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1WRfTrjEMEZAdrGrTk9_Waw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfrb\n\n第二版：面试题 JVM 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1y4Mxc9JhyHjZQgpuH0qC2g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfwx\n\n第二版：面试题 Kafka 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H64nJGtvYwxQK2KVD1h3jw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdq\n\n第二版：面试题 kafka 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1ZXyeUUAivxuy5GskxEd2LQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efuf\n\n第二版：面试题 Kafka 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H8kXIFfxCsGno25_y6bS5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuye\n\n第二版：面试题 Linux 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1sOqNqcc4PpScq858S93zbA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qadp\n\n第二版：面试题 Linux 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1968KSi1QiqC9rPauU95p5g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etun\n\n第二版：面试题 Memcached 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/189Q1AZmcQVXDyQC5eT1knA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpuf\n\n第二版：面试题 MongoDB 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1L3ukE4vqeDQdLcb_b4TNUw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jhmr\n\n第二版：面试题 MyBatis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1D8ICwwMg5gMdMKFn2LF2Mg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfsd\n\n第二版：面试题 MyBatis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1xuruCkfd_zLpjYndFf-uIw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucst\n\n第二版：面试题 MySQL 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1nAHFJHPRvS22aWxbc1i4WQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqnk\n\n第二版：面试题 MySql 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1QeaKsRriqbxmGvMgugAHkQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbjr\n\n第二版：面试题 MySQL索引 6 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1H5qdmoCP3yMLvr_7gWVGMQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqgg\n\n第二版：面试题 Netty 11 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bXgemm4jllpH73l7TA3-Vw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jamh\n\n第二版：面试题 Nginx 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1329KFq2Wfg9IqZnUMe3fBA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqet\n\n第二版：面试题 Python  36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1kRyX4jAuQ41yR_euJk4nTg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：unjj\n\n第二版：面试题 Python 292 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OTrxw-3JxKDgKQspoqs_pw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kydp\n\n第二版：面试题 RabbitMQ 12 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1zMkeMXa6e9A4jvmJWOuEBg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntsu\n\n第二版：面试题 RabbitMQ 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1mk6rfXq6ronvvQmv-tRr5A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkd\n\n第二版：面试题 React 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bI6NHgk8Qgk9W433Jt2Xig)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksdw\n\n第二版：面试题 Redis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1OUNs5_ZZA4ug2S1rTTJFEw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejyc\n\n第二版：面试题 Redis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/13ns5YkrurQzGBvH5XbswPA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cnsj\n\n第二版：面试题 Spring 55 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tT4RIqUishJS605rNJDaBA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pswp\n\n第二版：面试题 Spring 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/10c5Pfv9BZnsjsrLR0A3iow)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxfv\n\n第二版：面试题 SpringBoot 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1idLAz8DDuSURBXYO2PJzUg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfxs\n\n第二版：面试题 SpringBoot 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dFnZIePqMFeEINB51QaA-Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t25p\n\n第二版：面试题 SpringCloud 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1naqYsW4UzMfiLHq3NrSrKg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxb\n\n第二版：面试题 SpringCloud 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1tzoUY3TZg8dwAAljnDNfaw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmgd\n\n第二版：面试题 SpringCloud 29 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1seZo1XloSEc0fNBncSW4vg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxda\n\n第二版：面试题 SpringCloud 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1v36uJU32IXNkvqZZK9EAdg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbvn\n\n第二版：面试题 SpringCloud 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1GG9X8Av_HZKh56ZWNRWEiw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhbr\n\n第二版：面试题 SpringCloud 8 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1gXQq18Zu0SEfC7hH6Oping)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfwf\n\n第二版：面试题 SpringMVC 35 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/15QaXlVGXUPh4FHGAF0y3JQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：canh\n\n第二版：面试题 Tomcat 16 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1HkloT28H8Jb8Z1Cslaj22Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmqb\n\n第二版：面试题 Vue 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1bE36aDEoRFLlv9vP33WMNw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcmg\n\n第二版：面试题 Vue 39 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1dwPL_XHNnOMYDETFQ4Xs4Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vapx\n\n第二版：面试题 ZooKeeper 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/12_kkYMkwPuhts8RnoQWm9w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ufqw\n\n第二版：面试题 ZooKeeper 28 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1Q-sxq0vpzInt-9HKTRqZ_Q)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkjh\n\n第二版：面试题 ZooKeeper 36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1B5T6Hmeb_uIvAV2wQHNVwA)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dkwd\n\n第二版：面试题 并发编程 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1FYsA869oaPcv1LJF9mdJnQ)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwek\n\n第二版：面试题 并发编程 48 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1m5ThtAWHp4k2FGxQ72LHXg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njgu\n\n第二版：面试题 多线程 75 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1wiw1kA_iWQCjyFBTbndjtg)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxty\n\n第二版：面试题 精选设计模式 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1TijTPNvjqFAOBosM78ax7w)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sxnn\n\n第二版：面试题 前端汇总 100  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/19XbZKt8QDrbDtTkBXOjy9A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtfq\n\n第二版：面试题 前端综合 45  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[百度云下载链接](https://pan.baidu.com/s/1MiXOm2pkWFBvQL3-qrocfw)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybev\n\n## 免责声明\n\n书籍全部来源于网络其他人的整理，我这里只是收集整理了他们的链接，如有侵权，马上联系我，我立马删除对应链接。我的邮箱：75997533@qq.com\n","slug":"互联网图书合集","published":1,"updated":"2024-12-16T12:11:11.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyod000xj0kravj3frif","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021654217.jpg\" alt=\"desert-gee44587c8_1280\"></p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>　　转载：<a href=\"https://github.com/itdevbooks\">https://github.com/itdevbooks</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>计算机类的书籍非常贵，天天买纸质书是不可能的了，所以对电子书的需求量还是挺多的。同时很多小伙伴不知道哪些书是经典，哪些是辣鸡，作为一个互联网从业12年的职场老鸟，我深知看书，看好书再加上实践才能高速成长。</p>\n<p>计算机类电子书下载，编程电子书整理下载，包括 <a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80\">C</a>，<a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80-1\">C#</a>，<a href=\"https://github.com/itdevbooks/pdf#docker\"><strong>Docker</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#elasticsearch\"><strong>Elasticsearch</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#git\">Git</a>，<a href=\"https://github.com/itdevbooks/pdf#hadoop\">Hadoop</a>，<a href=\"https://github.com/itdevbooks/pdf#headFirst\">HeadFirst</a>，<a href=\"https://github.com/itdevbooks/pdf#java\">Java</a>，<a href=\"https://github.com/itdevbooks/pdf#javascript\">Javascript</a>，<a href=\"https://github.com/itdevbooks/pdf#jvm\">jvm</a>，<a href=\"https://github.com/itdevbooks/pdf#kafka\">Kafka</a>，<a href=\"https://github.com/itdevbooks/pdf#linux\"><strong>Linux</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#maven\">Maven</a>，<a href=\"https://github.com/itdevbooks/pdf#mongodb\">MongoDB</a>，<a href=\"https://github.com/itdevbooks/pdf#mybatis\">MyBatis</a>，<a href=\"https://github.com/itdevbooks/pdf#mysql\">MySQL</a>，<a href=\"https://github.com/itdevbooks/pdf#netty\"><strong>Netty</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#nginx\">Nginx</a>，<a href=\"https://github.com/itdevbooks/pdf#python\">Python</a>，<a href=\"https://github.com/itdevbooks/pdf#rabbitmq\"><strong>RabbitMQ</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#redis\">Redis</a>，<a href=\"https://github.com/itdevbooks/pdf#scala\">Scala</a>，<a href=\"https://github.com/itdevbooks/pdf#solr\">Solr</a>，<a href=\"https://github.com/itdevbooks/pdf#spark\">Spark</a>，<a href=\"https://github.com/itdevbooks/pdf#spring\"><strong>Spring</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#springboot\"><strong>SpringBoot</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#springcloud\"><strong>SpringCloud</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#tcpip\">TCPIP</a>，<a href=\"https://github.com/itdevbooks/pdf#tomcat\">Tomcat</a>，<a href=\"https://github.com/itdevbooks/pdf#zookeeper\">Zookeeper</a>，<a href=\"https://github.com/itdevbooks/pdf#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a>，<a href=\"https://github.com/itdevbooks/pdf#%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB\"><strong>大数据类</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\"><strong>并发编程</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB\">数据库类</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98\">数据挖掘</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98\">新面试题</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1\"><strong>架构设计</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97\"><strong>算法系列</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB\">计算机类</a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><strong>设计模式</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95\">软件测试</a>，<a href=\"https://github.com/itdevbooks/pdf#%E9%87%8D%E6%9E%84%E4%BC%98%E5%8C%96\">重构优化</a>，等更多分类</p>\n<p>重要说明：这些书涵盖入门和进阶所需，请大家各取所需，另外还会原创大厂面试题，陆续会提交上来，请大家持续关注这个项目。</p>\n<h2 id=\"新增：文末有-3625-页互联网大厂面试题\"><a href=\"#新增：文末有-3625-页互联网大厂面试题\" class=\"headerlink\" title=\"新增：文末有 3625 页互联网大厂面试题\"></a><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E5%A2%9E%E7%AC%AC%E4%BA%8C%E7%89%88%E9%9D%A2%E8%AF%95%E9%A2%98\">新增：文末有 3625 页互联网大厂面试题</a></h2><h1 id=\"书籍分40多个技术大类\"><a href=\"#书籍分40多个技术大类\" class=\"headerlink\" title=\"书籍分40多个技术大类\"></a>书籍分40多个技术大类</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80\">C</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80-1\">C#</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#docker\">Docker</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#elasticsearch\">Elasticsearch</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#git\">Git</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#hadoop\">Hadoop</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#headfirst\">HeadFirst</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#java\">Java</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#javascript\">Javascript</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#jvm\">JVM</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#kafka\">Kafka</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#linux\">Linux</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#naven\">Maven</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#mongodb\">MongoDB</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#mybatis\">MyBatis</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#mysql\">MySQL</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#netty\">Netty</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#nginx\">Nginx</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#python\">Python</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#rabbitmq\">RabbitMQ</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#redis\">Redis</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#scala\">Scala</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#solr\">Solr</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#spark\">Spark</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#spring\">Spring</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#springboot\">SpringBoot</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#springcloud\">SpringCloud</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#tcpip\">TCPIP</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#tomcat\">Tomcat</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#zookeeper\">Zookeeper</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB\">大数据类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\">并发编程</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB\">数据库类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98\">数据挖掘</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98\">面试题</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1\">架构设计</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97\">算法系列</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB\">计算机类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">设计模式</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95\">软件测试</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E9%87%8D%E6%9E%84%E4%BC%98%E5%8C%96\">重构优化</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E5%A2%9E%E7%AC%AC%E4%BA%8C%E7%89%88%E9%9D%A2%E8%AF%95%E9%A2%98\">第二版-面试题</a></td>\n<td>每天都有更新</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h2><p>21天学通c++_第7版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFtWjkx8awd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pv45msRWe0sCurOM9RR9uQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvdj</p>\n<p>C++ Primer Plus（第6版）_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMRGakxl2lc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EVlg9WH-6kJjmjjTjaty0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wsfu</p>\n<p>C++ Primer第5版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFmCLkx8e4j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oxGcN9OoQs2tRXs3sas_XA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qeke</p>\n<p>COBOL语言（上）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ix653kx8ebg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IZq6yXLmUB22rZKkfxSbjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stqa</p>\n<p>COBOL语言（下）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOFeMkx842h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10FlZxU52Vrsy8kUo-MnSoA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：drsv</p>\n<p>C程序设计语言（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iscm1kx84di\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nTISepdSatvOMRcMu6Zw_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kuhe</p>\n<p>C程序设计语言（第二版）习题解答.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2SkIkx84ej\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MZDmM5AqyKsDQ1k3reeZ0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphb</p>\n<p>C程序设计语言（第二版）新版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iRieOkx84hc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Lb6J7LM0kVy_ZSOp7Ubtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjcf</p>\n<p>C程序设计语言（第二版）中文译版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4Mqvkxl7ri\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W7Xb8ubRnLDLWUATMxblxQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdvu</p>\n<p>C程序设计语言（英文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5DhSkx84oj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E_hMl1VLVlDn44ew_mrHrw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfne</p>\n<p>C大纲.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iX8jpkx84te\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13zvfjFYaY6Pl8VutieLNHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtf</p>\n<p>C大全语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXei8kx852d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Rd6trlbNhigXbMsg4uMYnA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfwp</p>\n<p>C和指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGENEkx85ta\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R1hZBoyKkKLj9EBC2ZUPtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcdg</p>\n<p>C基础班范例代码训练.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAxOEkx85xe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167--PYVLr5Uc-Fa4_pCXzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mrah</p>\n<p>C与指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9IGjkx866d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x9JB86DDKi6s9dldrJsa-w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxcg</p>\n<p>C语言编程精粹.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igjXpkx86he\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W8aWffFDOvubzfNHEC7-Cg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgds</p>\n<p>C语言参考手册第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iL8Jfkx86pc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z2ErBjh1ERW5-lbqR9R4Uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twgf</p>\n<p>C语言程序设计现代方法（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1X6bkx8y1g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oaxzlxeaCkYGXAEn-mCSgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dfey</p>\n<p>C语言大全第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ihGbpkx8yid\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xVIHCdekVp3iRibektJ7bg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skvj</p>\n<p>C语言函数大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYowkkx8ylg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kDqsE3BP2UC7XupD2FzRXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkk</p>\n<p>C语言解析教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYmUXkx8yvg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TYbhCfo1t3dIm0gAjLeOYw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：brmp</p>\n<p>C语言深度解剖.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQR1zkx8yyj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wc0IeIWQR28jG0uOtqKz_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjxw</p>\n<p>C语言实现病毒源码演示.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iO1Q5kx8yza\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LZ1VEwZXoYuVJlN6nxAi8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：60dt</p>\n<p>C专家编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i12vOkxll0f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12jZ8IHA1Cb__KMsFDa4eqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gkup</p>\n<p>Linux操作系统下C语言编程入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8JH3kx8zde\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Nx2y1lTvdEpBuf4QhV0fyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtj</p>\n<p>华为C语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ivg6Gkx8zgh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yC1zRs37Sy-6trq4zV8kQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awkd</p>\n<p>可变目标C编译器设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ixH3vkx914h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L9NuvV6SdF-8Bi-zreB4Ag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vjdh</p>\n<p>数据结构-教程c语言版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iocoikx91pi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TEjTJ05RRfnygjQlSkXKiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccwm</p>\n<p>数据结构（C_语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iq3rekx917a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_787HiYRbxx5U-9W6t779w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：medm</p>\n<p>数据结构（C语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioouykx91ng\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E--h4WLOoeNH8wpHZ7zajA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sscd</p>\n<p>数据结构、算法与应用C++语言描述原书和引2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8E2Zkxlsgd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V7QAFKLY_S9eYeoeRzCgvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjgt</p>\n<p>算法：C语言实现第1-4部分基础知识、数据结构、排序及搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwTadkx92sh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h4e4RBl8jgj2netJV1nYfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykat</p>\n<p>网络环境下的C语言编程技巧及实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaQELkx92yd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d7iJN5JVJL_UrzpubO1k9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjht</p>\n<p>自制编程语言基于C语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i3JC8kxlzti\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vk5rAD2pAscURdISdhR2ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybqh</p>\n<h2 id=\"C-语言-1\"><a href=\"#C-语言-1\" class=\"headerlink\" title=\"C# 语言\"></a>C# 语言</h2><p>ASP.NET.2.0.XML.高级编程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iykcDkx9wxc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1I7oyBgWo1wrlQ5iIIE1m8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngna</p>\n<p>ASP.NET.2.0.高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iUm0ekx9p1i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yQaRuIvML31ealbl_EZHqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsts</p>\n<p>ASP.NET.2.0.入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVn3Nkx9s3i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jogs5FFdaRTibdhw9KjlDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqjp</p>\n<p>ASP.NET.2.0.数据库入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyVSAkx9smh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1C5dfWMcQCJZak0VQqWtw1g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaqh</p>\n<p>ASP.NET.基础教程-C#案例版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0I0pkx9sxi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mIxJUSHRJ0fNIyOaGUo8xA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnaw</p>\n<p>ASP.NET技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9p1nkx9tyf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SJ_DX1wVXY1u4MdZmurpZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gryv</p>\n<p>C#.4.0完全参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i44Sskxa01e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eCg6Th8Ouc8Q_mlQFScblg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqkr</p>\n<p>C#.COM..编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i7sh4kx9u2j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oQwLHhblmo3EprJKAlq-1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncbr</p>\n<p>C#3.0完全自学宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iODgKkx9veh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DTLQFDSfuMsivoo8XLHi2g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fejw</p>\n<p>C#编程宝典十年典藏版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOQOUkxa6sh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pLtxx5w0ccPNsTKk_0d9yw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cyjp</p>\n<p>C#编程参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/itzFDkxa4eb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18XKKpwlV9R8vUX4TPdYmRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tckx</p>\n<p>C#编程思想.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2AiQkxa29e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sESNaACnZyNwtEOXnbZtbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augj</p>\n<p>C#编程语言详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ij48tkxa1mb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1USE8I8Ig_lJrWrBsBss7hw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqkw</p>\n<p>C#程序开发范例宝典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CY60VTs0FdlJJbKN-RciWA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eyhe</p>\n<p>C#程序员参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iKmc8kxaa1e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fMjV4BVdfxHpbTbeMipHxg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hbbp</p>\n<p>C#技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwvIJkxad8j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VA3R90-5tHSyh2Ak7dTm3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wywp</p>\n<p>C#入门经典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iet3jkxahyj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qBKgqHgs4dAJsHvopasEjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xafy</p>\n<p>C#软件项目开发全程剖析-全面透视SharpDevelop软件的开发内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOhl0kxai6h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10Up6eUcpL-JuRL9RuaqjqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnv</p>\n<p>C#设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5kBOkxaibc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fUn2p0sSb-dPdIrfg9KmKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnns</p>\n<p>C#网络编程技术教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCoHMkxaj7e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Xskb_NvWezmdabyzRh8fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cerg</p>\n<p>C#项目开发案例全程实录（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ivNoskxakzi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QEa2INDhZhvbGSlAh_LT9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agjn</p>\n<p>C#学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuDRekxrw6d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hYrT0cLyF5uUMIoUNElXBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：veex</p>\n<p>C#应用程序开发全程演练-从灵感到实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuA6Dkxrzte\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yi9CiqleBP6BfR4Xf9NPlw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbew</p>\n<p>C#与.NET4高级程序设计-第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iL0D9kxs7qj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mGs2xNNvmPJ54AHsbmhShA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyby</p>\n<p>C#与.NET技术平台实战演练.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0UaPkxscsb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z1Oar2-0wm53BCA-f6zElw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebvx</p>\n<p>C#字符串和正则表达式参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iENCCkxal8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jZxa5iTBvVN8iUHi9Q8yjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cmth</p>\n<p>C＃高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iY8hHkxacni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vQTjdPk4hyF-efpbdYj_fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mtpu</p>\n<p>Microsoft.C#.Windows.程序设计（上下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i77A1kxamni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UQSZpztOy3ITdZurmfV1ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqnq</p>\n<p>Programming.ASP.NET.中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9GvLkxanub\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19A0krBK5AsbjC2MJIfPfWA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jssu</p>\n<p>Programming.C#.中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/itoRZkxaq1a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JDZNMzG8WuvaYnizfuTidA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmtx</p>\n<p>Visual.C#.NET.网络核心编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYlxmkxaqaj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1eatMs_xYJffB0LJLTC5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jsrq</p>\n<p>VisualC#.NET案例开发集锦.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ibtTTkxatwj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dW2LSBwkGlKUSDhBbIfFMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfcp</p>\n<p>VisualC#.NET网络编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQ1d8kxaumf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x1FLbBHDRzHRLDFJHSljSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kxgn</p>\n<p>Windows应用高级编程-C#编程篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWj4Nkxav0j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/192y69NahClrpiI2hkF80gA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbpp</p>\n<p>程序员突击Visual.C#.2008原理与系统开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igcpSkxax4f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OWf7AK5ezToNiQMo0AZyQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：murm</p>\n<p>叩响C#之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaV7Xkxaxpg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lHUal4JysWeqwmBXYiHuuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atej</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker-从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMYo7kxbaaj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ccTG4htfo-jZ1Nb8nnKeNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：enbt</p>\n<p>Docker_practice.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOELrkxba8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V8vGD2R9OG2a88HpDxG_rg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fraf</p>\n<p>Docker经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/imwLzkxbacb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sJWlwtTSnHZhLneX2dBfaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej</p>\n<p>Docker容器与容器云（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMsrNkxbb3i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R5PqIB_G9pIKi3b2Rzlaeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfnw</p>\n<p>Docker入门白皮书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGMwKkxbb5a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16HDLIsj_Rd0tgfKpbTCEgw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kskk</p>\n<p>Go语言实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ilZK4kxbb7c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZdtpkG6DMd3t7-ywJOWRCQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sedj</p>\n<p>Kubernetes实战（套装共2册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOexQkxbblg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15K6r6JEsdGVuQTVIydruxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xueu</p>\n<p>SpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXnsOkxbdhe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c6dNs1T6klinsbNtHl32GQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrdb</p>\n<p>SpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4H8xkxbe4h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1t0r0CuIyV1fcR4l5M83ttw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crbf</p>\n<p>第一本Docker书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioCPhkxbe5i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12US2-reChfZgwy3eqpJpGA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uvmt</p>\n<p>深入浅出Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCKMWkxbf8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13-Ov2ZrCVAmHz13Ah8Xmpg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfkw</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/im4CZkxbieb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KekRLkLCvLTbq24J3TNWiQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrse</p>\n<p>微服务架构下Docker实践，以及Docker在测试环境的应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVmIXkxbigd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ngvZs7yWfuRxUxxST43LzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmj</p>\n<h2 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h2><p>BetterELK,新浪实时日志分析服务进化.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iP88Ukxd2wf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uUxY9AtKQEy-if3fKkhK4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfgc</p>\n<p>Elasticsearch-guide-chinese.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/isNeDkxd30j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Df0xspbMMVJn20-C522niw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：baxm</p>\n<p>Elasticsearch-the-definitive-guide-cn.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuT60kxd38h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Td3Y7k0gQpL4jpQfmc05uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrfs</p>\n<p>Elasticsearch6.1官方入门教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iu6Jokxd2yh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MXfjtz5ynkY_u08UDOCaLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：knfe</p>\n<p>Elasticsearch大数据搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCJ3Dkxd8mb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j4K2lZpt7ywpjo-cyodlyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxuu</p>\n<p>Elasticsearch分布式大数据搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOGbbkxdade\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AHxsGuZJFXDxZoGjOcBXmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bytq</p>\n<p>Elasticsearch服务器开发（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCU5Ykxdb7e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LcjmOWCBbLfEPT_woN1GuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xatu</p>\n<p>Elasticsearch集成Hadoop最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iG4M4kxdcha\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bOwD5PBqfD31NJfWFXso3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfcp</p>\n<p>Elasticsearch技术解析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ija6Bkxdckd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x5QOR_wrxC5BV9JorAmxtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jews</p>\n<p>Elasticsearch技术解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iunVckxdgkh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HdKY0kVDVzc6KKkvU8fK5Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afay</p>\n<p>ElasticSearch可扩展的开源弹性搜索解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1APTkxdhgj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12mH096foYT5y4YWsHFlSeA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxjr</p>\n<p>Elasticsearch权威指南（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iScNMkxdhtc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VV9O_660sDBo_YB62QYx-w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwtf</p>\n<p>ElasticSearch入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTWCxkxdi4d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BzO1GTBbHSmwca68Vdlbmw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hukk</p>\n<p>Elasticsearch实战inaction中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ipDJIkxx1re\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BpK6r6MW29zb46lH_wG0yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pveu</p>\n<p>SpringBoot集成Elasticsearch7.4实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ip2uYkxdidc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16GhqhpmVUfKHLll3z_dnlQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tewy</p>\n<p>大数据搜索与日志挖掘及可视化方案++ELK+Stack++Elasticsearch+Logstash+Kibana++第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i3E26kxxjqb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q1DrL8kopQDJPvTESqy9Sw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vudd</p>\n<p>深入理解ElasticSearch.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/izKODkxdrwf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A8_KVHXsuFe6u--XZgL6eA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxpf</p>\n<p>实战Elasticsearch、Logstash、Kibana++分布式大数据搜索与日志挖掘及可视化解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAwXbkxdpyf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xnY8s6i7hI8bzRmy38s-sQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncce</p>\n<p>数据分析与决策技术丛书ELKstack权威指南,饶琛琳编著,P394.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4AjAkxdila\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Rugsxq8mfnK_tEtFB80Q4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pgab</p>\n<p>搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2KLFkxdinc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y4THdUHLG8WTa5ipYTovKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffjd</p>\n<p>最新版Elasticsearch调优搜索速度.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iNXvZkxdjrc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ewPAjJ6zWPeBHLPQx66QVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trqt</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>GitBook（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLUKFkxe29i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xhG-q_BEFY-U4uuY9oybDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kvak</p>\n<p>GitCheatSheet中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/il9lkkxe2ed\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M_aVeiwUR0Hwf9l7SjziFg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvwp</p>\n<p>GitforTeams.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ibym9kxe2la\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LY1Ie9FN78aUybcNxM4BcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qrrp</p>\n<p>GitHub入门与实践（日）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyqIekxe2ti\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Db3YzGgVjQt9kSMg8HfcUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahjm</p>\n<p>Git版本控制管理（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioRcDkxe31g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eJTo4qBAsiGvCSVLuU7SPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：adrk</p>\n<p>Git版本控制管理（第二版）迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLkpMkxe3ni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oimhw2LAiuVkD_8gnV_NrA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyct</p>\n<p>Git官方手册中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9bekkxe3za\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NC6Oi4HdJ5b72VKaIdJR7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saqd</p>\n<p>Git讲义-深度讲解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLMXTkxe4de\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hRGXi6L31eOj6YhTPaEUnA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swyh</p>\n<p>Git教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioXiZkxe4ja\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kOBBwQi_cC6j3QvgRr6RuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrp</p>\n<p>Git权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaye2kxe62f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13bGqDQ35cJgVfp0ht9SkqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkak</p>\n<p>Git中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iR2Swkxe8pa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Hlh9b3NX6roVOruQ8-RcuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmux</p>\n<p>Git中文手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEl0ikxeana\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gNKclKvcNITBXDniY0dadA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtpb</p>\n<p>ProGit中文版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHn3pkxeawj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OkqTAyfUoCFOzgnYmImMDA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkry</p>\n<p>ProGit中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMrizkxebib\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l98hVaPhqHkYq3nSkETZUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwgk</p>\n<p>版本控制之道使用Git.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iW6o3kxec3c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GpOXPOBpfB8Yi15VGnIgKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfth</p>\n<p>常用Git命令清单.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ifScYkxec7g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yx5lwu0gskwfmHvn7D7M1g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajkn</p>\n<p>从+0+开始学习+GitHub+系列.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ifHzvkxecla\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dakSbdxFubYb_lNoApeaqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbqg</p>\n<p>完全学会GITGITHUBGITSERVER的24堂课.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ij3V8kxedhc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12Hk4dMkfkE1L0WERrEa-qg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbpj</p>\n<h2 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h2><p>Hadoop搭建与Eclipse开发环境设置.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQTivkxehba\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-yw-COXzqlIlOl95h8I74w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvda</p>\n<p>Hadoop大数据分析与挖掘实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAlA8kxei4j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_ndlcCJjmYnPk7s914U__w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwvr</p>\n<p>Hadoop高级编程-构建与实现大数据解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4JMrkxeich\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ISRomZnhzO3pTSE33HLvYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xubc</p>\n<p>Hadoop公平调度器指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia2mkkxel5i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Be1AoEQZyIRVlRf261bbOQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwyq</p>\n<p>Hadoop技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHJbDkxemed\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Nxfu7ytEhdfTDv6_G6TyNA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvvg</p>\n<p>hadoop简介.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLHp3kxemwb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HjPoXCY4-aQ9OJiXNGvdfA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebfm</p>\n<p>hadoop开发者第三期.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/imUQnkxenfa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qnnDciMx68FIYpGqj0ZrnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhs</p>\n<p>Hadoop开发者第四期.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iPUH6kxenoj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pfi3AUbMfcCKz-jG85orUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgx</p>\n<p>Hadoop开发者入门专刊.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGk6wkxente\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/107Z2PCG-Q_Njiyg7bV0ibQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kejg</p>\n<p>Hadoop权威指南（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1S3lkxeo7i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CFuFsngiC9nmKwc2J4_zCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvab</p>\n<p>Hadoop权威指南（中文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/irntIkxepxa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1e1oWfYr8atVYQA3Swhb71w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tqar</p>\n<p>基于Hadoop平台的亿贝用户邮件数据分析（苏立）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHLQekxeqad\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1obIfdffIOX8w348MC9njVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr</p>\n<p>实战Hadoop：开启通向云计算的捷径（刘鹏）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTT9Hkxered\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l-HrGhtJ3fZ6nJou4gnC7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsbw</p>\n<p>数据算法HadoopSpark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTxcMkxetbc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OWxadCpz_iqE1Fq4cVR9JA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxf</p>\n<p>数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTxcMkxetbc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CL8-WG7XQOxbWLisgb7TZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdey</p>\n<p>在Windows上安装Hadoop教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8EVmkxetcd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w1JBUHP9K4E5QwYje-UM3A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmkv</p>\n<h2 id=\"HeadFirst\"><a href=\"#HeadFirst\" class=\"headerlink\" title=\"HeadFirst\"></a>HeadFirst</h2><p>Head First Ajax（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXpYUkxeuhe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-RyMwcVfgc2PplMHm0UKww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyuq</p>\n<p>Head First C# 第二版-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iAQ0rcy9gH2yO1DEgv7Y_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mhtd</p>\n<p>Head First HTML5 Programming 中文版 .pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioWjikxev2f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-uMMg_GjFQedOAJQQ3UrgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjyy</p>\n<p>Head First HTML与CSS、XHTML.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iH1LQkxeypg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167awhMP91mzcBGFPoIcLDA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hspd</p>\n<p>Head First Java 中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEwj9kxf18h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/155P-tL24jowuGMtNdY2wSA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvpy</p>\n<p>Head First JavaScript 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iERoWkxf5zi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cRLHU-NKIA0nQ2XMzHp2sA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fkby</p>\n<p>Head First Java第二版涵盖java5.0.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXHoSkxf8md\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NM7eb06vGK2iBMOF_6uEYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cebe</p>\n<p>Head First Networking 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iZ0Pwkxf9if\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dD968W_tr-SUq1i_HdubVA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upkx</p>\n<p>Head First PMP 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ijZbskxf9tg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DeZdj4zh7hxDnpINLdq0RA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxau</p>\n<p>Head First Python 重视大脑的学习指南  中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0A5nkxfa9c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hLAU9HqUbpgh1PQ7DVn3gQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avey</p>\n<p>Head First Servlet JSP.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i7J8Zkxfcsd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mlSoZJ42ukvB7Rl0YBRGdw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkv</p>\n<p>Head First Servlets and JSP 第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i83VIkxfhni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/139L7zhrwsgNhgIGmf1jRZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pysa</p>\n<p>Head First 设计模式（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i6b7Wkxfj6d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GX8ZZT2_ISqJv47sBwFvgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafw</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>21天学通Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwPMNkxfsde\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KcnqkVnoSiiOkZmkzYNGfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jeyg</p>\n<p>Effective+Java+中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4R1ikxfsub\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13qz0iXAQdfv-7FiXiodIww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqgg</p>\n<p>EffectiveJava（中文版第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEXrIkxgepi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JCdDt9dMSxIT01jBSBRDIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cpen</p>\n<p>Java8函数式编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igZEhkxgc2d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_-85Wx3LYJHSktFYCH_hUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjan</p>\n<p>Java8中的炫酷特性和Java9中的新特性-杨晓峰.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iDzpOkxgfkj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O6euAamgF3Y7v1JnfGyjjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkwc</p>\n<p>JavaNIO（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWsplkxgfnc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/139eXkJl2jtagTZm-ROxL7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpaq</p>\n<p>JavaOOP-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iRe3ekxgg7c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vubz7vJybbosl3iLFWPhCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmp</p>\n<p>JavaRESTfulWebService实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1xFVkxghvc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O7km01HayjzW_yYRCyR3gw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfju</p>\n<p>JavaServlet和jsp学习指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia4bkkxgkqf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1muJPmcUcjV4k4wBQqPT8yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：daqb</p>\n<p>JavaTCPIPSocket编程（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFwCJkxgnna\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/197jWtCamqIFQdqiPcrQCew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vynk</p>\n<p>JavaWEB服务.构建与运行.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2MGbkxgo0d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z1XCRAtblPvbgt9qN8CMVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrr</p>\n<p>JavaWeb企业项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iNjuGkyordi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iZGKcMOmQmMYuxUfAkJEbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aumu</p>\n<p>JavaWeb整合开发王者归来.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1U2pDBLUyYqvIjo7w7gRQZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fprs</p>\n<p>Java编程的逻辑.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ijGyakxgtwf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PiN48omo9JLLzb63sP0Bkw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xtxs</p>\n<p>Java编程思想第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJiGqkxhdeh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1p_E22a4VUpWVYgzqMmfDIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mnpq</p>\n<p>Java编辑思想（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGM8Fkxhdjc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eLEyRlUpxZqp5_ISdZu86w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfaj</p>\n<p>Java程序员修炼之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHblakxhfmh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zhIZCnmLFzbBCxtwtxKltg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpea</p>\n<p>Java从小白到大牛精简版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iapU1kxhfqb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Kd7gdxnNtOzHDLpLYxk7vA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kaqv</p>\n<p>Java典型模块与项目实战大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ie7Xvkxhjsh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x_SsiWi2OLw3HF1CRWOJSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：assw</p>\n<p>Java关键技术JSP与JDBC应用详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWXqykxhlri\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RImaM6qZcRlN_ueUN2MaEQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tscq</p>\n<p>Java核心技术卷一基础知识第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJTXAkxhngj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1urz-kz246b7KJEMREYIJyA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjmy</p>\n<p>Java核心技术卷二高级特性原书第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVCbnkyoaha\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1biNDg0wY9NhzPEbYYFqKhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjzp</p>\n<p>Java基础概念.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaqL3kxhnib\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l8iKRzjGPYBXwrTm281LPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfu</p>\n<p>Java基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqFPekxhnmf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wrCF3ttjvPTmMavEx27UMg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rrma</p>\n<p>Java开发之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2vEZkxhs6j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wgivWU-eJuvzXC3DILpEzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvpq</p>\n<p>Java数据库应用基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEJ8Ckxht7g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17DQzOJFnaXQ2M6RWNvzo8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fawd</p>\n<p>Java特种兵上.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJTuVkxhwqd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iGdCv9y6HCfMwA8QKbsmTA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmgf</p>\n<p>Java图形与网络游戏开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iayknkxhx6j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1B0XNM5dr7tijN-CMMKNOUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjjb</p>\n<p>Java网络应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia9AHkxi1jg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OS8fQKKsjgcHd23oRIJ0Jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bdxn</p>\n<p>Java与模式（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ik4Aqkxi1zc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qbwz2PMClWo11Eb1zrl1EQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：asfv</p>\n<p>Java语言程序设计-进阶篇（原书第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyQI3kxi2fi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GdX636VmycTU9t-4OgbgIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqnn</p>\n<p>Web安全开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOSPgkxi2jc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h5fZHvtNbodM7hZbrpRLCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhsj</p>\n<p>Web性能测试实战详解+Web开发典藏大系.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTd6Akxi4kf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zC2VwRjNr8mT69ENmNUJ0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bsct</p>\n<p>Web应用安全权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEc6nkxi5of\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17YmTumIWjckrqBcP6Gu4RA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydkm</p>\n<p>Web应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i72VPkxi7mf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n4pmkCkYbk9cDFGvMLW1HQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfqe</p>\n<p>编写高效优雅Java程序.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqkHBkxi7oh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/111RMs5dIwOt9I09aE4iMhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nskv</p>\n<p>菜鸟成长之路—Java程序员职场全攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAbu0kxi9di\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bcnbsfSP-agoIFKUUPwgzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vxjx</p>\n<p>大型网站系统与JAVA中间件实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqHZdkxig4b\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MliFXVP-mjZoMWs_RpANXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdbx</p>\n<p>分布式Java应用基础与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5ci2kxihcf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1X2x4RA1D2-Ig8vcr1KOrqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dbeu</p>\n<p>疯狂Java讲义.pdf&nbsp;&nbsp;&nbsp;&nbsp;nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fYIQdDNdncR3JyxAr_x-dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hejg</p>\n<p>高性能响应式Web开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9wUOkxiife\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EcPNoFTVUtHePBWePLm7tw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafb</p>\n<p>构建高性能Web站点.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/icEMlkxijkf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13gYFTc0bRJvR87nY51slqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndfc</p>\n<p>解密搜索引擎技术实战Java精华版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iX3Z8kxikne\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wjiwni7ABH2R1jUIfvrHUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：susc</p>\n<p>了不起的Nodejs将JavaScript进行到底.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXFJkkxilyb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O8Aaw8iyWNwVrD6VN6mtQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xbbx</p>\n<p>零成本实现Web性能测试.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iUq4xkximsb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XS1Jy7fHc5koAkh9xbqcDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：varj</p>\n<p>码出高效：Java开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i34i6kxirqj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hlLIkAJYIkmeFZuUFkmrOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqxs</p>\n<p>深入分析JavaWeb技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuhbakxitgb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14QwWsW4jClVyL6SepaZrNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbqt</p>\n<p>使用Java.Web服务构建SOA.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyx8mkxiuab\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BsDNPiQs6Lml_UkPP6aUNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：lof7</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><p>JavaScript基础教程（中文第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KrBmT24VTDJblH9pfGTzOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxer</p>\n<p>JavaScript框架高级编程应用Prototype、YUI、ExtJS、Dojo、MooTools.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dCyMSxlsdX_szCA05PB63A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfb</p>\n<p>JavaScript框架设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x226ttlJYfSYquDEojIRMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akbn</p>\n<p>JavaScript面向对象精要.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GXRA3uhy_-tgksrw1Sl9Pg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jvrm</p>\n<p>JavaScript权威指南（第六版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AhnItsQRwZN5OKH_o_amxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxuf</p>\n<p>JavaScript权威指南（第五版）中文版（上）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ya6dqxo2zKB-oOolJf_oZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vpmn</p>\n<p>JavaScript权威指南（第五版）中文版（下）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4ATUyl12uM7xL1xqUGtAg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdar</p>\n<p>JavaScript入门经典（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jmmwbpkUaEnn8TD4Kv0x_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wawc</p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><p>glibc内存管理ptmalloc源代码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zrCQ4sOaDKl17P8KfD6pxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnbu</p>\n<p>HotSpot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xpa-yfb221Kdq-FIwWbmug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aqee</p>\n<p>Java+JVM.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A93OKyY11xjyGu8Y4T4wwQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dwyb</p>\n<p>Java性能权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sXEQx5eXIhLAq_hi70_1YA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfan</p>\n<p>Java性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gBnhP28-YJjzojiRlKEakQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aapq</p>\n<p>Java虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vTwsR8WgRpq--yKoBzR40A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yabq</p>\n<p>Java虚拟机规范-JavaSE7.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RitXq-hZRH-tZiVK--NYtA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnab</p>\n<p>Java虚拟机规范-JavaSE8版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uOmGGM4SdWvtZsOlGIVIww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yadt</p>\n<p>Java虚拟机解释执行机制研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/146F4WskyY_6WmbBjhK_olQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hffn</p>\n<p>JVM.Spec.v9.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1crTDBQ48j8pBSmJ41eY7Ag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjpk</p>\n<p>JVM定制改进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CFcHX0HasDNgOBl7tRLRZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkj</p>\n<p>Twitter的JVM性能调优经验.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uWIvg9guDm4JZKnAhb0Gtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swpn</p>\n<p>揭秘Java虚拟机-JVM设计原理与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrNNvxFlqJsiNnONbRiXTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uprt</p>\n<p>垃圾回收的算法与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Iiwe_Aw2MwdqbufDzJtcBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynpk</p>\n<p>垃圾回收算法手册++自动内存管理的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iKLOyw9YS2CT_1qTcHN-LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcpg</p>\n<p>深入Java内存模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NOyDh5_zyeI_J1MGmeQfjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmkk</p>\n<p>深入Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lOU9AMAviJLzQ_bEt6zw5Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghds</p>\n<p>深入理解Java虚拟机：JVM高级特性与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1T0bTPTLwwOPXKXdEhKDKDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxe</p>\n<p>深入理解Java虚拟机：JVM高级特性与最佳实践（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UdIG3CvNYE4sT75YgUYong\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrng</p>\n<p>实战Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/151o-bzu51xsRNQwfDH-v0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxkn</p>\n<p>实战JAVA虚拟机JVM故障诊断与性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LxC19YKuOhbTaTk3oRUVOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfrp</p>\n<p>虚拟机系统与进程的通用平台.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n1g5gbqHqbnVKeScHKDIvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjxg</p>\n<p>自己动手写Java虚拟机（Java核心技术系列）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18tOPFGWfkHt8wHec6gHjuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdcw</p>\n<h2 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h2><p>Apache Kafka实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1F2gu3LgHSz7-mCu1grPE0A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjcw</p>\n<p>kafka-高性能揭秘及优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V-y3nnC2W43ICl4KtvUd0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbey</p>\n<p>Kafka并不难学！入门、进阶、商业实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SEWr4qFnK_Xo7TAWbrtBCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tyyy</p>\n<p>Kafka技术内幕-图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ws1V7-zlfwlN412zLQuEtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbgr</p>\n<p>Kafka技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SMnb-k18Oe0tGfrCo9OeHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftsy</p>\n<p>Kafka权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WzjA7J2eSK-1AyJNJYfPjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prjv</p>\n<p>Kafka源码解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jnaMi49J-2ssZ2VI-0IOjA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eymk</p>\n<p>深入理解Kafka核心设计与实践原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sHmX9x4QrYEmo8CVDO05Og\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jubt</p>\n<p>图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fs_pLDYhO-X3Gw0VGX__GA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhjd</p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p>Linux C编程一站式学习(最新版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nSM92Y0ACgKCnW5c_MBOQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wchx</p>\n<p>LinuxC函数库参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10g6n3vUw3WjWHCleKCeO3A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edaw</p>\n<p>LinuxShell脚本攻略（中文版带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Y1Ur18yR7WhLADdf0X2YQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcnn</p>\n<p>Linux宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YtnnSKHEdHoDupKYHK694w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvbj</p>\n<p>Linux程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10lItD3ThyEvIcys7viEMqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mwxb</p>\n<p>Linux初学者入门优秀教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i6xgfH_rbCWVQpbn0T5wag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jmpr</p>\n<p>Linux防火墙（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fo3ZVIPIDTx66H6AXIDSLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tudk</p>\n<p>Linux命令详解词典].施威铭研究室..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1psZy9LInYtBYtRKwNVqo2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpqc</p>\n<p>Linux内核IO性能优化及块BIO处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NBSUxyHYkRD7gNrfcvuAKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphr</p>\n<p>Linux内核设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sCG7F3X8pRuRrKf-rWL7bw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dyas</p>\n<p>Linux企业运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RH87jSJ-bM8zR7GRUCuL5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gffg</p>\n<p>Linux系统常用命令快速入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oXW-YdsQS9FWX7FE_-ngrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxmn</p>\n<p>Unix与Linux.Shell编程.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kV_srGnJaXKXbFsQnySR0w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfk</p>\n<p>鸟哥的Linux私房菜-基础篇-第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fQOp0ay4V6BrXxOyg-L5CQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnuy</p>\n<p>鸟哥的Linux私房菜-基础篇第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MRfO9rnOs4I9PFmL0yYdpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ptnk</p>\n<p>鸟哥的Linux私房菜-基础学习篇%28第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d_fU9jnwFOzWBM09zZzY1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgcm</p>\n<p>鸟哥的Linux私房菜-基础学习篇（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BO2mAcbpmWeHpMwk8zJ_tQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jesv</p>\n<p>鸟哥的Linux私房菜.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L2cDjyajadQLfnq8KEKvVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：syue</p>\n<p>鸟哥的LINUX私房菜_基础学习篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mFe83qmAJFxPpUitkHoHsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vhdp</p>\n<p>鸟哥的Linux私房菜：服务器架设篇（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1K4TM42FaxqvwI8Z40XronQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvpc</p>\n<p>鸟哥的Linux私房菜：服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gZqiZz4kXz0QLBlculqXZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghbv</p>\n<p>鸟哥的Linux私房菜服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lGXi89r_HYVKJmEaT4gn3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxjm</p>\n<p>鸟哥私房菜（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f5_hfVlNO1hksn_CO-cb4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byyb</p>\n<p>循序渐进Linux第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZK5-N-9aVPy9INC5XBDf1w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykch</p>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>Maven权威指南_中文清晰.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bdYjpFbdTgO1jdirwXUaKw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwqy</p>\n<p>Maven权威指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jCxc7DsQYI9sM9jB99DZ-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrhe</p>\n<p>Maven实战（完整带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lfCCDoH1oMF950slGA5yNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dncc</p>\n<p>Maven应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1siK3mklE4FNgoN-DyA-sFQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cysv</p>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><p>50TipsandTricksforMongoDBDevelopers.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wDIEHzT8fyDQq_-nx-Vc_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcrm</p>\n<p>MongoDBTheDefinitiveGuide.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SgRaWvocG9J24OFD4ctZiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uruj</p>\n<p>MongoDB大数据处理权威指南-第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1viqo7Xf5u1RY_RrZxgoxvw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhdj</p>\n<p>mongodb分片教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XKCPsKYozxR2w1KUvGUdbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqsj</p>\n<p>MongoDB权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XFgtsaN2vh5XqhwNRpuH7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvkj</p>\n<p>MongoDB实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z81kDxzBUphuvmC-bOleZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ggmy</p>\n<p>MongoDB游记之轻松入门到进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pcBGRm__NQ0bWb5dJ7v9-Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrnr</p>\n<p>MongoDB运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1er045VTi4TRIVueLv4fZFQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quyw</p>\n<p>ScalingMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SsTNYOMU_WXrC8MVB2TKqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byxj</p>\n<p>TheDefinitiveGuidetoMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uuCMIGBDkPXsHiqEh4g7Tg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fafw</p>\n<p>大数据存储MongoDB实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FCRYw9GGSrKFZwAaBCK7lg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qnrp</p>\n<p>深入学习MongoDb.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19x0Yi3xyzohl6Akqr6YKUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkva</p>\n<h2 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h2><p>JavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f_o0B3_zvlHVaOL2AXbAQA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpvv</p>\n<p>MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19SxKgiAEyf6p3c8Nn9gFWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndvu</p>\n<p>MyBatis3用户指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AE0PgRl_89WoIuOR2yeOog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykkm</p>\n<p>MyBatis3中文用户指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j1TMakPzclyy4q6hJXoxNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwqq</p>\n<p>MyBatis从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bgAr1YxXLUF--3gIzXvGGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykne</p>\n<p>MyBatis技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11Bb7EqCMrOZk9qdZeT9Yqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rytk</p>\n<p>Spring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nFPpcI__63rusGRnaAPtIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxst</p>\n<p>Spring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fantirermH4IZ_Bg1q9R0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arxs</p>\n<p>深入浅出MyBatis技术原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AR7-WWcbSlfBbMPvAVKH3w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqaq</p>\n<p>一本小小的MyBatis源码分析书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-ci1QjI-Pgqr92J9sAWYcg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cejt</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL5.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P2rN3s0e3PC_U7WXXyozGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjvd</p>\n<p>MySQL5权威指南中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dm7uzjGkoQZuN6uwb20HnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edfs</p>\n<p>MySQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kOo5TpfRepC2YkHkALX-AQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvmx</p>\n<p>MySQL高性能书籍_第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19kYPQ_Y-1QPWRPxtUrqVzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvkk</p>\n<p>MySQL管理之道，性能调优，高可用与监控（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q6ZeXnTTbsqZAk7hb1uxUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kwpb</p>\n<p>MySQL技术内幕.第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Edkesp8UWAvg3zsP7ASAVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bajp</p>\n<p>MySQL技术内幕：InnoDB存储引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Bzxj4jlK9WbyC5FmlEHaAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvnp</p>\n<p>MySQL技术内幕：InnoDB存储引擎（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19IgB4YxDaLWM4QyHPaPPhw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gtet</p>\n<p>MySQL技术内幕：SQL编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12o1A5-9YWVXlZ_8y9mnnsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tapk</p>\n<p>MySQL开发者SQL权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16WtukI0dylCyRe4mx9XZ2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nsvv</p>\n<p>MySQL权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uGow9RNUz5ZpzpOKcJHcqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qndv</p>\n<p>MySQL入门很简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Js1-s-YAPfTANBdEQVb7Tg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：huhm</p>\n<p>MySQL入门很简单－学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BXgczzido8DYWAw_5I0GUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nwgq</p>\n<p>MySQL数据库开发的三十六条规定-石展.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/183DOyuMxnPKTP9k_7mmpNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfxf</p>\n<p>MySQL性能调优与架构设计–全册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xy-7uSydvbty3O3V9FDdrQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aket</p>\n<p>MySQL性能调优与架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1njPg4JsO0lRpzuHKR2CLlw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjxv</p>\n<p>Mysql性能优化教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LvCrKzNTHmjfK_nUMakXhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etch</p>\n<p>MySQL运维内参：MySQL、Galera、Inception核心原理与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KvaTodjLvF0Gn0eqt2DWoQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtmy</p>\n<p>MySQL最佳优化完美攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ul9g5e44BABbScNeWM50wA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chts</p>\n<p>高可用MySQL_构建健壮的数据中心.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LTcu5PFGvqSK15wsa44gbQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：envf</p>\n<p>高性能MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/101-v3r_-PHZtsXbJcDHAxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtwy</p>\n<p>高性能MySQL（第二版）中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1Z0tgOxm1TWWIEyTt-TNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akcb</p>\n<p>高性能MySQL（第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mzhuEvZ0n7Kwb6y4oqlUfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwns</p>\n<p>高性能MySQL第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YuxX2mrJmRKKRqdD0SIU4A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjps</p>\n<p>深入浅出MySQL++数据库开发、优化与管理维护（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-691pY2chOJp8pk6cZ2uTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wast</p>\n<p>深入浅出MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f2043vmGRx_dusNiANPNPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rjhc</p>\n<p>深入浅出MySQL数据库开发优化与管理维护.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PgWkcukmRUi1qXxD19381g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：absj</p>\n<h2 id=\"Netty\"><a href=\"#Netty\" class=\"headerlink\" title=\"Netty\"></a>Netty</h2><p>Netty5.0架构剖析和源码解读.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DwH83VFmXv7Dtl4CaNUMGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqwx</p>\n<p>NettyinAction第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lehtQaEjHXGAJ19W8Wr7Ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecpc</p>\n<p>Netty权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1se8QSu4Fuypt1aBDO_U0ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbvj</p>\n<p>Netty实战（精髓）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12dcJfI17WxLBtk3lhuU5Gw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwxe</p>\n<p>Netty实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TVs1rydRUcrru8N030L2qg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wasw</p>\n<p>开源电子书：Netty4开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ft4211OqluHHlZazaqf0Dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpfw</p>\n<p>开源电子书：Netty手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qe6Yjw71LpHmA0PAVIGXbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mkpj</p>\n<p>Netty 入门与实战：仿写微信 IM 即时通讯系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h8E7ozV2kuGi1Eb-bsuVVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhct</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>Nginx高性能Web服务器详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1amY8cgIv7Zxci8YFupIxCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjwk</p>\n<p>Nginx开发从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lfiRc9A6xfE5NiZu6bPTQA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnja</p>\n<p>精通Nginx第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HPKEC-RBXQ0jX01jn8Rh_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgxu</p>\n<p>决战Nginx技术卷：高性能Web服务器部署与运维.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvIYX-QesMmay96QfUlNCA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccdy</p>\n<p>开源电子书：Nginx开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yEHGKaIIWmU0-yHGEx2Vkg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：guaa</p>\n<p>深入理解Nginx：模块开发与架构解析（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A01qpz8rTz7Gt4C0SQS8Cw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：umpm</p>\n<p>深入剖析Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12cb86rd92hMjsiean_Fzug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chpu</p>\n<p>实战Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VPXRFg_9TyChY18lwDXnyA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dexy</p>\n<p>实战Nginx：取代Apache的高性能Web服务器.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IVpgtls7W8x5IC0PWJ26IQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkej</p>\n<p>学习NginxHTTPServer中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12oMND71vtg94ZCxOhk1vVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjhj</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Head_First_Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VFiGTiEH1UZ-O1Q7ESxWMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxjd</p>\n<p>Intermediate_Python中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JKffHxAIWXf9AT8uzJhePA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxhk</p>\n<p>NumPy攻略-Python科学计算与数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12sy-W34olu2FxJhuF-QO7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：urga</p>\n<p>Python100经典练习题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qEG1lr_-q4Sdjs0_GC_NRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvxx</p>\n<p>Python3.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fb_hFaz3j5DGN58IkrnS6w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgdk</p>\n<p>Python3程序开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NMNOw8CoRuYayX6pAlLAXg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfgn</p>\n<p>Python3高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QUanOjYMbvelhTJ0c-WfDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stdr</p>\n<p>Python3萌新入门笔记及练习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Y1R7C1Vbe9MyqpEatCoSaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tjrm</p>\n<p>Python3网络爬虫数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DonjcwYxRwtK2-UlWK102g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej</p>\n<p>PythonbyLiao.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lX2Ww1oH1rlNRsNiSUyRKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmkt</p>\n<p>PythonCookbook（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tCuQxQkdz3TWI6By6o8lhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ypqq</p>\n<p>PythonQtGUI快速编程PYQT编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qyY6q48Uaf5q18Hy-KlmJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rptg</p>\n<p>PythonWeb开发：测试驱动方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OwkXe4OiEZqnGxPiTSb-ow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgjf</p>\n<p>PythonWeb开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WN4hg9V1Gb8678ni6ZHb8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqad</p>\n<p>Python编程：从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rxHSlRYDeRzER86Iat3bBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qpew</p>\n<p>Python编程初学者指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QigptG5G3bUT3LBR5bGh4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfba</p>\n<p>Python编程导论第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DIW_V74AqzmbkSHqFM3VgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rymv</p>\n<p>Python编程快速上手-让繁琐工作自动化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cXMjJxqrgvE7mRfeo_YOqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfcg</p>\n<p>Python编程入门经典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bnwDSA2FtSOKU3OfSA4oHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvur</p>\n<p>Python编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Mxu0wcIplfr50h3uaFgINQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfbk</p>\n<p>Python标准库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14Sb6PDlIfE9Q6j-NwWpfSQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vyfw</p>\n<p>Python参考手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YnYbkhEfeyrFqK0bOHkx-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfmd</p>\n<p>Python程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UgzN9KU0ohONquoSp0fUQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：axgj</p>\n<p>Python地理空间分析指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YgFdxCGCD88mDbv-N5UPsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ibeq</p>\n<p>Python高级编程（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qlPvBIfqav2NOaXdRGyQEQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbpf</p>\n<p>Python高级编程（清华）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-2WqO3Vr6KIGPhhJ3VuZxg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtgk</p>\n<p>Python高性能编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AfkFyRnsHeCcrdnzTBmDbw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxee</p>\n<p>Python核心编程第三版中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1npiohmcnxEfOBYDz8xgl7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：djfv</p>\n<p>Python核心编程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q__Bab9vh6rrQTNcXs89OA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：evtr</p>\n<p>Python灰帽子-黑客与逆向工程师的Python编程之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VauUNGVKpDVcjP0nwHXxWg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhcc</p>\n<p>Python机器学习基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u7mQNMYqGHGa0z-JFpZzXw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgvu</p>\n<p>Python机器学习及实践－从零开始通往KAGGLE竞赛之路.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QL4Q-ZRSEN8Nw0FiGjQYNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apjt</p>\n<p>Python机器学习预测分析核心算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pl9gvj4Aa3UvUWH606gghA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btgd</p>\n<p>Python基础教程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P1CTx-pZVqmnjhgmabTtYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxtx</p>\n<p>Python技术参考大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16AorSuzzprwITIH5pQnLDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryv</p>\n<p>Python简明教程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RWVAaXsTN8UZVT93qYGAow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qqfd</p>\n<p>Python金融大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hPZGpgcJ4mrD-hPUHi6v-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkde</p>\n<p>Python金融实战###.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT6jWL6evmLno-DqxOwztQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdtd</p>\n<p>Python进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MgdTNPvZmL4wCO30fD1PYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpge</p>\n<p>Python开发技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cBUeX7g9FO-YmQfm4tjqew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fsen</p>\n<p>Python开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSoagU8uWVrd06PEV3M8cg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akms</p>\n<p>Python科学计算.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_QM1-pKyOX6igigD68dubA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnf</p>\n<p>Python科学计算张若愚.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BKh190iPHJ6YuV8dF4u-SA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqkk</p>\n<p>Python快速入门.（英文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iueknRUbscCwbuVJqnVAYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpmf</p>\n<p>Python面向对象编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VDoUBcjeJE3E4PvpHTDnkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfqt</p>\n<p>Python爬虫开发与项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19HvOnwlddYVTu1J_A3Ar_w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bppw</p>\n<p>Python入门经典-图灵图书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ADZTfo8d-BhWRVMTuc9vbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnys</p>\n<p>Python入门经典_以解决计算问题为导向的Python编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AtmPablSgCYCEGlzVt0nsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qwcc</p>\n<p>Python实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zuj5_Pf6hlBWRDcttgs1Hw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmkk</p>\n<p>Python数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oV8MkV9MeIEJd5vvKykSTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nuyd</p>\n<p>Python数据分析基础教程：NumPy学习指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n_3DdmFSJIr2hvrQVdYR_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtfw</p>\n<p>Python数据分析实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1etCRbwO9pnh92ZfDmk_Thw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpl0</p>\n<p>Python数据科学手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y0YDhW1j2c-7y3JYa5XcRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdpm</p>\n<p>Python数据可视化编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1t1M1cPbVc3Q4GY8KJzu3zQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wbbj</p>\n<p>Python网络编程基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LiKopPZbm-cl3EZSsQNvaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxmc</p>\n<p>Python网络数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_WYX4OuYfLZejHffPyxElw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avqp</p>\n<p>Python文本处理指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_2WB8aYQIsN_N_ejDHkqng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xsbp</p>\n<p>Python学习手册（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/112mWtJksF52XuuTbhAZDDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbkb</p>\n<p>Python学习手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yf-Kx3QUi4FxRA4EeMSKgg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newx</p>\n<p>Python语言及其应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M7vxF3rWfBkaEkMx1e1jfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jper</p>\n<p>Python语言入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ag-d9IZhcJJlq0EtjCGbRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjvg</p>\n<p>Python源码剖析-深度探索动态语言核心技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KOpCn8WpfD-u1TFDo2S1vQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrdk</p>\n<p>Selenium2自动化测试实战基于Python语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JHkKIFuYyOneIRIuZ5CWng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sned</p>\n<p>贝叶斯思维统计建模的PYTHON学习法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jgwOa7pAxWizS74wZgPsaA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvh</p>\n<p>笨办法学Python（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j3X9eHXyyiEx6Qt_5NG-hA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrwu</p>\n<p>编程小白的第一本Python入门书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1779Scda492B6cV_JDtYVKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gawm</p>\n<p>编写高质量代码改善Python程序的91个建议.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RbeRjcOyoED4XssfehWCrQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fdqf</p>\n<p>常用数据挖掘算法总结及Python实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17bCvudE58piFmzXuqPxyLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crhc</p>\n<p>从Excel到Python数据分析进阶指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wGm22yDbNZb3-fMxg9U1xw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sjej</p>\n<p>从Python开始学编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xbTixG5vp46jF978gzhjSA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jpcd</p>\n<p>基于Python实现的微信好友数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lUNyfgLjJQ7a3wYTJohSUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkxh</p>\n<p>简明Python教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yAKe7FKdjykrPw1VCf0dyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjpe</p>\n<p>精通Python爬虫框架Scrapy.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SsXFFATYsFuGpOIB4Wu0tA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agdt</p>\n<p>精通Python设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15mPbGSDAge1rerPKlPNzOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cstd</p>\n<p>可爱的Python脚本语言入门精品文章.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xa_FLvZY1HALR1DCQxgXkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcss</p>\n<p>利用Python进行数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_UV9ksV1nB-74Y6jUPGgBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqcg</p>\n<p>量化投资以Python为工具.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UY9A2psHqVvwBLFctFGhfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hqng</p>\n<p>流畅的Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tMriduk7AKgjhbso8PoYkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhra</p>\n<p>深度学习入门：基于Python的理论与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wHkyJ49Jd0-tWN2HnyseAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uptu</p>\n<p>深入Python3中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Om4fYBrWWQRsdubmQZOnQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fscr</p>\n<p>数据结构与算法-Python语言描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_26rHItQjriX-uoAnfDDIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srqh</p>\n<p>网络爬虫－Python和数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MbwZbJ4iCa3d--QGY_gvvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yngd</p>\n<p>用Python进行自然语言处理（中文翻译NLTK）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15g8eTQEUTNC4XfGFAXlqSg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yunh</p>\n<p>用Python写网络爬虫.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yTWnUNcViJoXTPH07sRjyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nhas</p>\n<p>征服Python语言基础与典型应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11dPvt3a-TK_DZafOLWHXyw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfpc</p>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>LearningRabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11OLPEtgvamlehbM-kaJPCQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjef</p>\n<p>Manning.RabbitMQ.in.Depth.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/141oa5XeaJoYbImQ1J1AVpg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmvx</p>\n<p>RabbitMQinAction.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Z-PX_oQvCrm8ZkfqZRFsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kqnj</p>\n<p>RabbitMQ安装与使用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mCd1AXHWZ_SNoLe05y53dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ryge</p>\n<p>RabbitMQ实战+高效部署分布式消息队列.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AW-9Ld_h0oNBo8MBNWmlIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnvq</p>\n<p>RabbitMQ实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16KUEfZ7E0LQ9EtWVZZoq1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfa</p>\n<p>RabbitMQ学习整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dqd2kKDrRyF8BFfhIM3_3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quhr</p>\n<p>RabbitMQ研究v1.1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tZtvd8venJ-OH2dgpz3MyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvhh</p>\n<p>RocketMQ实战与原理解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YFSlSY9fssmzGNl4pAGTjA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhc</p>\n<p>深入RabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u1zZr6sYHgCk_ombXpwgVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jwns</p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><p>Redis4.xCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT5vxTrQ6GkplG7oC_njig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyje</p>\n<p>Redis开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HrA_VRs6-eTS1eV1a3QX7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qehg</p>\n<p>Redis开发运维实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LV8ltQSf9eZIxITQUftoDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txvx</p>\n<p>Redis开发运维指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y5toFOh6L78MBmm8NgsoGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kegb</p>\n<p>Redis命令参考.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QE2WAnsasYtoVLzDcyvd5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：haps</p>\n<p>redis命令参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VZOS8sNEt1VrdhGJWUsH6Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxpf</p>\n<p>Redis入门手册（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TLR49uLo-QKh6rkDmK2UIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnmw</p>\n<p>Redis入门指南+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13ouDpjbckPseqR9unl8Qlg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwrx</p>\n<p>Redis入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KHQ1IRHFwM7QR7MQVDLIQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：setg</p>\n<p>Redis入门指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VaYgcB11STHoRbY0v5Cbjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyry</p>\n<p>Redis设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x485r6hUdA6ReGS_Qs-8ug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgja</p>\n<p>Redis设计与实现（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iBfqH71XF21v7UC8hp4gVA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvhp</p>\n<p>Redis深度历险：核心原理和应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dv-L9npNpGst2NB9QnF-9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmjs</p>\n<p>Redis实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TC2fhntA5c3-AGQeLxWN8Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bayn</p>\n<p>Redis实战JosiahL.Carlson.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JU2GEnIx4Z3dY_GjmpZ_ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcea</p>\n<p>Redis实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fJklWMC9wxvbS4WJSYLAfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sdkm</p>\n<p>Redis小白入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LQG-Tens7eeKk2gTGlacQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqmt</p>\n<p>Redis学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NkE18t6odi2HXv9Oo52LOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbc</p>\n<p>左手MongoDB，右手Redis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mqaPNHWzR2mAQOR9MtQYYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：usvk</p>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala\"></a>Scala</h2><p>Scala伴生对象.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AjvtMiN_yNmkjHBWwIz1wA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtbr</p>\n<p>Scala编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15pq_oc-8ekzfPFfri415hQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swak</p>\n<p>Scala编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pyEdgq_T0VBoguk4zSIDHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wudx</p>\n<p>Scala编程思想-原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1niHLNXLzzskDEGNprsZSyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqbb</p>\n<p>Scala并发编程程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mj_9nxhpaUr9i3Do8WhyNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgpa</p>\n<p>Scala程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hAYn_whVc1uJ2wyk3qdlzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kmwv</p>\n<p>Scala基础语法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RDSS-Eo0SPgW_uyfKwBCCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wqet</p>\n<p>Scala集合.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AER6yVefvsjBdx0qfX4Afg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gyyf</p>\n<p>Scala学习手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XePbusG3vktRYwoQyM6eqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhdt</p>\n<p>Scala语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eE7s7mSKmEbyE0UEhEKTtQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhwu</p>\n<p>快学Scala.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MubjIXRpV00O4iuk8BHN2w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfdv</p>\n<h2 id=\"Solr\"><a href=\"#Solr\" class=\"headerlink\" title=\"Solr\"></a>Solr</h2><p>ApacheSolrEssentials.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Yf5ACO-f2CwWllCB90Va6Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngks</p>\n<p>ApacheSolr参考指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PveHHBLEa0UxlUM38_h9ng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvtx</p>\n<p>cookbooksolr4.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1G0AKrEIwS9sPhnXgSmF-1w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucyq</p>\n<p>Java搜索服务Solr操作指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SHLK-B5km75SvV8Vlhv9XA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frjr</p>\n<p>Solr+In+Action.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n2Ru2eEVAJhep6s9UfHFog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhpj</p>\n<p>SolrJ教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AF7OMIaxKH24WBSn0Sz0MA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ttnn</p>\n<p>Solr的应用教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i6P1YWKu2P1hdOKxhWiV4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydqr</p>\n<p>Solr权威指南上卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZLt1IPqpib1shVCwXH_wuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdeh</p>\n<p>Solr权威指南下卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M5IyLBOevsCppdmcKiPr0A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqbv</p>\n<p>Solr实战中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xAOp9m5nTedRTWQoWN0CBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqbm</p>\n<p>搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14dPfzeUfz_VOiGIAyUsAWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mevj</p>\n<p>用Solr构建垂直搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fztu32bV-8gzlLA63YOtDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utgg</p>\n<h2 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h2><p>LearningSpark.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a3pZe9TldXUHp_Cc0e_hMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpbb</p>\n<p>SparkContext.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BmslNv9yFOOHAm1v0zNU9g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahwk</p>\n<p>SparkCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SbU88xeawgY43To6x0lqIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjnw</p>\n<p>spark编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oBgXPSls4C2teTD4l1KljA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryq</p>\n<p>Spark初识.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PSgvOmfNshU_MLtyI09WVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecua</p>\n<p>Spark大数据处理：技术应用与性能优化（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rX0IMFa9mGOhkalQ3DBGAQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffyf</p>\n<p>Spark大数据分析实战（大数据技术丛书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NgQ9bG27C0Y10HPe_s5pxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sccm</p>\n<p>Spark高级数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrcXrbyKGFdXJaK3EPY3KQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mntr</p>\n<p>Spark机器学习-NickPentreath.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dnYnxh0Wpej4O78lZmBFdA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uubr</p>\n<p>Spark机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f1cgmkbyfAmXnQzp3RfXXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkwp</p>\n<p>Spark快速大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18rEWffYn03R9MMPXZyXt4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rqdp</p>\n<p>Spark快速数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/125J1v1mT5sjpho1RALszGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhvq</p>\n<p>Spark内核.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrAjbQwrIZoGeqiuWZgXWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvj</p>\n<p>Spark之SQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UmzDoY2i4Rv6RP_x2a5Dyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yamy</p>\n<p>Spark总结.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oS-ORk8JmuyD2Rvhlswngw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：htvg</p>\n<p>大数据Spark企业级实战版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E5t7vvCg-lL4pcHPBuQvOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vsye</p>\n<p>深入理解Spark：核心思想与源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ui-OYpKb0PrZfKS-SR5cUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvbc</p>\n<p>数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QjxarlwM3jR53fBd8h3vJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：scym</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>JavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13t5wcfnzzSI8MaSoDs-f6A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuqh</p>\n<p>JavaEE设计模式：Spring企业级开发最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nwMCWnj6AbBVTjzv27Spsg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rber</p>\n<p>Spring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mA9IBQAXMFHSuxMYb0dwOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuau</p>\n<p>Spring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10cNgpDROfBl8Y9YaiYOKXQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uugy</p>\n<p>Spring+Security3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bSbTHCM5sdyK4vzcmsRxsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cecb</p>\n<p>Spring.in.Action_4th.Edition-Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JeGK6-fJM5JA2ob0LGEp5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbna</p>\n<p>Spring3.0就这么简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vcGkxbdbPeJr8ZFpbasiUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgfh</p>\n<p>SpringBatch批处理框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14J6GWb8yloJobdjTn6Yo8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhaq</p>\n<p>SpringDataJPA从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mb60lfExZerVL74IMMcB-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhfd</p>\n<p>SpringData实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YFgOkiOdgpI-YxS2snxDVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ymgf</p>\n<p>Springframeworkreference.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jeZ1XWcSTTLqKovtq07BLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gghe</p>\n<p>Springinaction中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19hVshSMI9dKPbxj8mgufSg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvpv</p>\n<p>SpringMvc教学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yBGQhQrMuDD2yW2Yo1Kurg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxym</p>\n<p>Spring技术内幕：深入解析Spring架构与设计原理-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14O9Be78yllAL42XgwyD6Xw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvwg</p>\n<p>Spring揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12lJjIJQBpUFJEe6SHReEFA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bmtb</p>\n<p>Spring揭秘（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y3ra1sLoZgRMLw5NwPnkfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqqa</p>\n<p>Spring实战（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ym5f1CjAaYTp2UC7q6PSLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtsa</p>\n<p>Spring实战（第三版）.（Spring.in.Action.3rd.Edition）.Craig.Walls.文字版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JWMfgnsNN3CiN4kKnhAedQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xuaq</p>\n<p>Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AxldKhH5nE457d_z7xQ0fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uwey</p>\n<p>Spring微服务.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CNk_cfmr2NkT_wLdGB_I9g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dycv</p>\n<p>Spring微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MfsYnFhcS8prjR0MgidsFA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wtqy</p>\n<p>Spring源码深度解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yUdNGv7JwkimJ-D8ELk4_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnam</p>\n<p>Spring源码深度解析[郝佳编著]sample.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1N55_R0jemO6OYrKDeTMtvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：caha</p>\n<p>Spring中文开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1trSR0TnHIwXlwxhHaT1BOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utnd</p>\n<p>精通Spring+4.x++企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sboKbsdGcoJ_9C-ghJ-EzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uyhq</p>\n<p>精通Spring4.X企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oGAa4XQHyqZwn5fEmDLyLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjms</p>\n<p>精通SpringMVC4.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UPTbM8hzQXmuzHRzYnvavA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svmc</p>\n<p>精通Spring（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TjoTtbfCUpY9vjkEXfj3-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdb</p>\n<p>开源电子书：SpringMVC开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nvqA3ZUsmt4nHlNo6KtFnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbwt</p>\n<p>看透SpringMVC源代码分析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Axx-brgEQPAyceeduOC4EA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qgbs</p>\n<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><p>JavaEE开发的颠覆者SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18_ChlhYC5WPR0z2em0XEJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skhv</p>\n<p>SpringBoot2参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L9ybprmzbVKVO7dM9N_dZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wcqd</p>\n<p>SpringBoot2精髓.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17z6b52RndqkYMy3XogSd8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmyr</p>\n<p>SpringBootCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r4_0rJJoAcOS8BHLlMsmvw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjq</p>\n<p>SpringBootreference-guide-zh.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ueA9qfWcEgmIo-KFuY4WYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvck</p>\n<p>SpringBoot揭秘：快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1I3kIasza2KLVGalih1jueA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wp25</p>\n<p>SpringBoot揭秘快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YYCf7Nt4fIWshEDqOOHCxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfp</p>\n<p>SpringBoot企业级应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10oNwJpuoxIIeLJo_1L--WQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytyn</p>\n<p>SpringBoot实战,丁雪丰（译者）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kH2XcrxHu9blC-VpWIOT6g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：erre</p>\n<p>SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yLfvcBg6kialAeCK8UtA3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mcxf</p>\n<p>SpringBoot实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bJXfMZbKc7BRW4Os_e0ZQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：iqh5</p>\n<p>从零开始学SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wvveBEUlFd39oIE13CeMjg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nffk</p>\n<p>开源电子书：SpringBoot开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zK-xruUmxZcMl_PBu537eg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnca</p>\n<p>深入浅出SpringBoot2.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a0KXvVa0DxgijdD2iFi3nA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cvrv</p>\n<p>深入实践SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1o28NYp6qS0GwErBZkQQEHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fhce</p>\n<p>微服务架构基础SpringBoot+SpringCloud+Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DKC_sCenraRpiSrWUiTrXw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrac</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qSMW_4LOLB5u3wggmpNgSQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkws</p>\n<p>一步一步学SpringBoot2微服务项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m0hb9sIdkp3L_uvQEVof4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etuc</p>\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><p>SpringCloudDalston中文文档+参考手册+中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17OOwAEwU9m1xH9peLYwNuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gepu</p>\n<p>SpringCloudFinchley.RELEASE参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UYPHxpKS4ApQ5HPIjDg14A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbcb</p>\n<p>SpringCloud_Data_Flow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zg2AZwiLBCsUkBHEpv-_zQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqsb</p>\n<p>SpringCloud微服务架构进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CvIBWtGQkM30gb6vIuB_TA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrpg</p>\n<p>SpringCloud微服务架构开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hb5Ha9Df7DGhgysizIKG1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaje</p>\n<p>SpringCloud微服务实战-翟永超-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jzzH6aZMuplJn2f55dIreg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svry</p>\n<p>SpringCloud微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17fBvrg0dS3jShZCtVextKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkf</p>\n<p>SpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RZNBY5GtJEUWnSvUNOfl2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytxu</p>\n<p>SpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tVqVWKNM2aAxM-CfDqL6bw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eygt</p>\n<p>SpringCloud中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AsaM1V-xAWB1N1HE0ygf1Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjde</p>\n<p>疯狂SpringCloud微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17m-C1i1m4UZQ1fBU_7AKjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：m75a</p>\n<p>深入理解SpringCloud与微服务构建-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UvDP10G8oFquvLkkou9vKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpaf</p>\n<p>深入理解SpringCloud与微服务构建.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dvcYUenti_PGA3IFDjDPog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gpvu</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SJH1l-B_NS0SvrSn9MvCcQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyde</p>\n<p>重新定义SpringCloud实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1toi6LIOPhm7uIcBshhBtJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr</p>\n<h2 id=\"TCPIP\"><a href=\"#TCPIP\" class=\"headerlink\" title=\"TCPIP\"></a>TCPIP</h2><p>HTTP权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V-E7qA1chayHptjMqWD4jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfxn</p>\n<p>TCPIP网络编程技术基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A0tNLreWUnfnC0OZNRzYzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egcj</p>\n<p>TCPIP详解卷1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18-1DGhzaiIGFCqnrDwuRcw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhqk</p>\n<p>TCPIP详解卷2.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TxZ6eXOKXMLtuwUQ11b-ZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hckb</p>\n<p>TCPIP详解卷3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1U-Bu8UCYxbo82T9WPIkILQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbbs</p>\n<p>图解HTTP.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iBy_vgZybISzYQ-pcHGXlQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uybd</p>\n<p>图解TCPIP（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4WusvoRv5JUT5N136KbPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eaeg</p>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><p>HowTomcatWorks中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bUzW18tucUfnpZplko1QuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqpn</p>\n<p>Java+Web开发与实战–Eclipse+Tomcat+Servlet+JSP整合应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kIkW5Dy4MG19TST7MWsBlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnje</p>\n<p>Tomcat架构解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1e_gKL2PnAratdONt3ktbvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtph</p>\n<p>Tomcat内核设计剖析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R1zlCwMWNOeuNHTmvbw00g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aycy</p>\n<p>Tomcat权威指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvlZIh42lE9jt2oZdYntDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcpx</p>\n<p>Tomcat源码研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PR52YaEr_IISdx0VAXVoTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：teru</p>\n<p>基于Tomcat5.0和_Axis2开发Web_Service应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zFz490uTpZ5XfpVV9m3UVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhkw</p>\n<p>深入剖析Tomcat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bIQQtU5IDwgqMufy6qRtRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkmw</p>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h2><p>Netty_Redis_Zookeeper高并发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HglGmsYXMxLn5vme3-qtdQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfje</p>\n<p>Zookeeper_3.3.5源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xIWKqaK8QQSjRd0qzMqwVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdjy</p>\n<p>ZooKeeper分布式过程协同技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V0yMLS7N_zl5FBgOLRq67w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwqs</p>\n<p>ZooKeeper原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1T1I8mrhHn16-4MZGi_e8LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdv</p>\n<p>从Paxos到Zookeeper分布式一致性原理与实践（书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hIQ0y498zyjOPsK09-8wEw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xamx</p>\n<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>Java并发编程的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12noqXaPB5jQqf-dZq_mVRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vvqk</p>\n<p>Java并发编程核心方法与框架,高洪岩著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AbDG2WWDfEZDNPsmmc3cpA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkx</p>\n<p>Java并发编程实践（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Fp2XewwqOPQ4DDS0CP26Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udhx</p>\n<p>Java并发编程实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z31bV_2pKLb8QYGeqIaYTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pygh</p>\n<p>Java并发编程学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DiWDJysVBMcC3BU2-77E2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmat</p>\n<p>Java程序性能优化让你的Java程序更快、更稳定.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Zu7PDffnvK-jQJ-2pTS_xg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dysx</p>\n<p>Java多线程编程核心技术-迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/194HtZ2V0Fo2qPjNKmCo3ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cwnt</p>\n<p>Java多线程编程核心技术_.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IWYc0eB7T6cB1IMbW4bb9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxqn</p>\n<p>Java多线程编程深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jiOK9QuIwkLkR53Qu8SEbQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsrq</p>\n<p>Java线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BhqzszXZMCvxPNyUO0l6OQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grjv</p>\n<p>Java性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YsLDmlDmpf2D1ID1K0uCRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrcr</p>\n<p>UNIX网络编程卷1(第3版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_tLFKEMmZeCbHEttWn-9hQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fyhq</p>\n<p>UNIX网络编程卷1(第3版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cNyPJY6Pgf1erI5tPqwGkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjph</p>\n<p>UNIX网络编程卷2(第2版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16iP-wOr-97AAnmhkfTN8_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wujv</p>\n<p>UNIX网络编程卷2(第2版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12TQGM2WSWTCO6_YmuEhj-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvme</p>\n<p>高并发环境下的数据产品架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14P_iYOF9iTNv4swqv9H3tA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngnp</p>\n<p>七周七并发模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NQlbnSS9aL5cjpVWhqzFAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hhvn</p>\n<p>深入浅出 Java 多线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wLJPyMZK01aQQj4xE6VsBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvec</p>\n<p>实战Java高并发程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O9ITt7hdt5i1sDSLIeTFUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajhj</p>\n<p>搜索引擎优化魔法书+SEO+Magic+Book.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ulpf4W7o-MM7kLSk_3jopg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dejw</p>\n<h2 id=\"大数据类\"><a href=\"#大数据类\" class=\"headerlink\" title=\"大数据类\"></a>大数据类</h2><p>Druid实时大数据分析原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/143Fl3BExT295-apzDYERmQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvwt</p>\n<p>白话大数据与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H3UPxGOLyboxe-WT8rRxiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfsk</p>\n<p>百度2015大数据云计算研发笔试卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ANm9rUkfPaLE2v30cWfdXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjan</p>\n<p>大话数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ExZMQaZVhcwgbGOcjgD9kA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udnq</p>\n<p>大数据：互联网大规模数据挖掘与分布式处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UdsXXk-o1Ay1w1HM46l5Uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytah</p>\n<p>大数据处理hive深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14ohVpdzzq-kybnX_AQAKqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cchf</p>\n<p>大数据时代：生活、工作与思维的大变革》.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qheslcB63Wl1RgyroXXU-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fmhd</p>\n<p>大数据之路：阿里巴巴大数据实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yB0FYU0selFFaW9hHqUBeA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utjg</p>\n<p>分布式文件系统HDFS，大数据存储实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V_e-unVW9enh39FX8F60kQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvvf</p>\n<p>傅强-当当在大数据挖掘分析与管理—个性化精准营销方面的探索.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mZP6vdBzErKVVmIY6VFz4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgac</p>\n<p>用户网络行为画像大数据中的用户网络行为画像分析与内容推荐应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NomTFjPQGsBqubmmNqWhIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdsy</p>\n<p>云计算大数据10.9日课腾讯邮箱垃圾邮箱解密-机器学习之贝叶斯分类.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EEdMdCYi6f-pdz_w57IaWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cadp</p>\n<p>云计算和大数据时代网络技术揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1q9iVEL2eHolQPrGbq2yYjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfeu</p>\n<p>自己动手做大数据系统.张魁（带书签文字版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oef-psBj1qyYh3A7b5Y2lQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xugy</p>\n<h2 id=\"计算机类\"><a href=\"#计算机类\" class=\"headerlink\" title=\"计算机类\"></a>计算机类</h2><p>编码：隐匿在计算机软硬件背后的语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ub9V4Kyo-Uqk8_nGJlFXhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wxsc</p>\n<p>程序是怎样跑起来的.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FvoZx3Izkc8-4PrlS1qrAQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtdf</p>\n<p>程序员的数学3+线性代数.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OTxVO8d_xx08Fy86s6IZmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynfv</p>\n<p>计算机操作系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AHemuAa0ylbcaOrAqXNkdQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uudw</p>\n<p>计算机操作系统（第3版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i3aCX4UPEWRmbaPN1j_cpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdpc</p>\n<p>计算机系统要素：从零开始构建现代计算机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-rZX-unw9HhH7Z-vqosJJg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vary</p>\n<p>计算机组成：结构化方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YT8u3GT5jdmpWSMc3tSAoA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avgg</p>\n<p>计算机组成及汇编语言原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Me5ih2DjRku7m_32bbvvUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkme</p>\n<p>计算机组成与嵌入式系统原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sGkzfLXCIfZHoAatt4dApA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aknv</p>\n<p>计算机组成与设计硬件软件接口原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yVvP4VmAKcVUgxjOwEjy-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyxu</p>\n<p>计算机组成与体系结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12wuTAlW0Wx0eZ-FGHvje5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qcvk</p>\n<p>计算机组成与体系结构：性能设计第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19MY0qTxeJTTlu2cD7TtOTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mjqd</p>\n<p>计算机组成原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qKi0pi85y4DhJ3tiG4I3HA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkdx</p>\n<p>计算理论导引原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bUKiyTvLBwn2-UuZJ0-FcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wpqp</p>\n<p>深入理解计算机系统（原书第三版3）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16hvccmhx4k6IMGcE89_1KA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xyyu</p>\n<p>实时系统与编程语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oqAaL8_vHDgOychXpKXdPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sbuy</p>\n<p>网络科学原理与应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ywhevg1Yryj9jWI8kGOnKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnty</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>Microsoft.NET.框架程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kQrL65G9MvFJHVWTYCIF4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgtb</p>\n<p>阿里双11系统管控调度架构与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SPIZK_zzFobxhHmTSBDTGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：acmb</p>\n<p>程序员必读之软件架构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WSIqyXJ9hxZTrucSXbzn7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ysdp</p>\n<p>大规模分布式存储系统：原理解析与架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lSqIq8U6gyFDP0uVpqbLTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dckf</p>\n<p>大规模分布式系统架构与设计实战..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VzZ7rPaTYt6CXCirDrdJ3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：embe</p>\n<p>大数据架构师指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m_fOWgcxs1KB0g6ZSQkcrw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqgx</p>\n<p>大数据架构详解：从数据获取到深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BOxy1UYgpQnwZQOjsHaUhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdtk</p>\n<p>大型电商分布式系统实践 - 第三课.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c_DDSlFcVvCGVcRhTkDL3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gafm</p>\n<p>大型分布式网站架构设计与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H2d-yqMcNoK1nss04B8auA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nbuw</p>\n<p>大型分布式网站架构设计与实践.带目录书签..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167Glqiy01WM5O6dlzwhk4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdtt</p>\n<p>大型网站服务器容量规划（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PcYP-GWVaNo0w4scEzdAhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejjn</p>\n<p>大型网站技术架构：核心原理与案例分析+李智慧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OVmhvHeEPzgwPEbPplcgGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmem</p>\n<p>大型网站技术架构：核心原理与案例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R8ItDeKjXdZChQmYjNDTdw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmxj</p>\n<p>分布式系统原理 介绍.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O_EMeQ8ZnhUpQurCME8dJQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trrb</p>\n<p>计算机程序设计艺术（第二卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fbtY-Zd6qylgpnWJ1EnsgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbb</p>\n<p>计算机程序设计艺术（第三卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1aASj5P2lPohVGBb0HRif3w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhnd</p>\n<p>计算机程序设计艺术（第一卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KiP1N-KmCWkFptqVQC5Qfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pfrk</p>\n<p>计算机网络与因特网原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IcaX8b29y_qULbcUKSR6dg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdfh</p>\n<p>计算机系统概论（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15dGDm5XHjSL_qjmWmsyFpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dgpe</p>\n<p>计算机系统结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16__4vm_xk9QV4Jt35klVZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfca</p>\n<p>架构即未来现代企业可扩展的Web架构流程和组织原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uErhVIjSuczf1jm6YxZs1Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwuy</p>\n<p>架构探险：从零开始写分布式服务框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pmU3H0sEYfolwuy02P3yew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arfq</p>\n<p>架构探险从零开始写Javaweb框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VO93QIrOWu800GzwVKIhTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwws</p>\n<p>架构演进：滴滴打车架构演变及应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PCW2Y8psLPI-Hb3pXaelfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgyn</p>\n<p>架构演进：豆瓣架构演进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gG8fgFQoPGypigCzgtoZrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuhm</p>\n<p>架构演进：京东服务框架实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Zw3MG4k6K5G5Ao4PXU3wg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：psqv</p>\n<p>架构演进：京东应用架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16ZUuKJgy6NaPpP-kMG1yzw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbmq</p>\n<p>架构演进：汽车之家架构分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wHHeiii23aui5-g6yBluZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wber</p>\n<p>架构演进：人寿系统架构演变.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OA56l9dM8ho7qA7D28jOUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmms</p>\n<p>架构演进：网易开源.pptx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AGn0Og5v3QyTrwwmMAI8Ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykgy</p>\n<p>架构演进：微信之道－至简.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qRy8pJly-tN3JMUg4cpspA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yapu</p>\n<p>架构演进：小米的经验分享.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d_zYN8SExBJZz5ezXX2BKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmqn</p>\n<p>架构演进：一亿用户增长背后的架构秘密（全文PPT）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eGKa-TAw8rRDK7vrM20oIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augf</p>\n<p>架构演进：知乎架构变迁史.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CZr31zOQfdWXDSg6dEN4nw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eknk</p>\n<p>面向对象程序设计图形应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h0C6BVqLeJWC7t1F6dGshQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxnq</p>\n<p>面向对象软件工程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_SeVnUc1Hu413KhzDcAFgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkhm</p>\n<p>面向对象与传统软件工程统一过程的理论与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tkej8trl4c36HwnzgcioaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxd</p>\n<p>敏捷软件开发：原则、模式与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HujV9N_tIm2Ue-M_F_9eNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rspa</p>\n<p>轻量级微服务架构（上册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18qfvhPp649heoFmXktvFOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xftj</p>\n<p>轻量级微服务架构（下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zoX-AJLBxN5yUa5VYTgBoQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcmb</p>\n<p>人人都是架构师+分布式系统架构落地与瓶颈突破.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4sMiCOdT06pxd-e4-dbcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dirl</p>\n<p>软件安全从源头开始.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KFw4y1VXHsOmqwOfb8oVew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdsr</p>\n<p>软件工程架构驱动的软件开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mntiX1Sznsl8yqS98zSHxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjtd</p>\n<p>软件工程面向对象和传统的方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fG3_AqJu-tLX2QHUOw-Q7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ews3</p>\n<p>软件工程原书第9版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1o8Ymui9KxyEdLy3A8E-mXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdgn</p>\n<p>软件构架实践_第二版_林_巴斯等著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fzHMMsD2wK7b4Xp-CugCeQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhfx</p>\n<p>软件架构师的12项修炼.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QLZMF249JTHhcY6bDENNWg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxyr</p>\n<p>软件可靠性方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IPzTU6DIrv31Gi1ZCMHdOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahss</p>\n<p>深入理解Nginx模块开发与架构解析第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ldqoJcfcSIeBSWByqPBOVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sknj</p>\n<p>数据密集型应用系统设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vo1nEA1gj-1NF_t5lVh-KA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgkx</p>\n<p>数据通信、计算机网络与开放系统（原书第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Fv9GeGueBOHOxcnH5o53Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjst</p>\n<p>数据通信基础设施、联网和安全原书第七版T.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nWlpGl3m87mzVw5e-lNS4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njdc</p>\n<p>数据通信与网络-原书第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zgd8JZF8OXG8f3O76ob0JA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjkb</p>\n<p>数字设计和计算机体系结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mokVM4hllmfU1_dSR0Q3RQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdxx</p>\n<p>数字图像处理疑难解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/154jpOVPO8CNRtgg8s2UtgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：spdu</p>\n<p>推荐系统整体架构和mycat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CuZ8VUbbJMlqZ3iNHyvPng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfrm</p>\n<p>微服设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eXxSXr_At-Dm_fk_jQCOBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atfj</p>\n<p>微服务分布式构架开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QUMfzz7sEnA6dvaTWhsJfA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：abgn</p>\n<p>微服务架构与实践（王磊著）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LFeA-0pDUbDjxqpJ8KB3xg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntaw</p>\n<p>系统分析与设计导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L_9aH3VmLpi8slWRGI8dZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pncy</p>\n<p>系统分析与设计教程原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11D62FySweDeHetxiSgaBhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wnuk</p>\n<p>系统分析与设计敏捷迭代方法原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1slWRoJVVfHzOOYRsM2y8iw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ycyd</p>\n<p>系统分析与设计原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AWfWNGlOUQ1MwMXuUkOfvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgsr</p>\n<p>系统架构：复杂系统的产品设计与开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L5aTNNiasKgr5zEKG2kXNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xstp</p>\n<p>现代操作系统第三版英文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cqO-1t5ktFyaLGoSFYrFmA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rebf</p>\n<p>阎宏-Java与模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mZ3euwfuuZYZz0dWD2ETeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdn</p>\n<p>一线架构师实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f_6dngfklUJLM7hOhD83lQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ktet</p>\n<p>亿级流量网站架构核心技术+跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MoSsDMzUzGc513NCrGZqzg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rgww</p>\n<p>亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hLOp66q0bIlJ3XRTFNZTgg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upfs</p>\n<p>云计算架构技术与实践+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pi4i2YntSaPYdoSHvsonVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newj</p>\n<p>重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17TwdU1c0BZAbGAOD-PAQ7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fceb</p>\n<p>自动机理论、语言和计算导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zlg_0XChqqcCO5oQAqNQ8g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsyr</p>\n<h2 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h2><p>白话深度学习与TensorFlow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZLw__yjBUaZlWksJp7v7FA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ddjm</p>\n<p>机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1D5Ev9mTVN7js9OhjpKH2yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t44o</p>\n<p>机器学习numpy和pandas基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kk9_TAsA_R6Yb_VJKx2duw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhys</p>\n<p>机器学习实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pTrPGVbmLQMrIcSwMCSbLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecgp</p>\n<p>人工智能复杂问题求解的结构和策略原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SDsUMKH04iyaCT9NMlapbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ermp</p>\n<p>人工智能智能系统指南（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wvu4z-_LSzofglfox1e4ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnxh</p>\n<p>深度学习-无水印-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FY_754yfqikeY5qc1rKEmw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfnn</p>\n<p>神经网络和深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CJbzqyobhwqchZksZN7yCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfax</p>\n<p>神经网络与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L3IqJJXj8IEw5DYhu17YWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mgtu</p>\n<p>神经网络原理.原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Btx6EMx-zgP1wFT1_nKrZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhc5</p>\n<h2 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h2><p>软件测试基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10s7yvEvwMy1caKWAwcFUPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdbt</p>\n<p>软件测试基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oRJNseVIFgDs6SLBL3XFZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qaav</p>\n<p>软件测试原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1aTkoMSzGdkAa1wXxmOLMbw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krgp</p>\n<p>软件测试原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10vW1n9E_7_O4bwdlOMX0EA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcwd</p>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>23种Java设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eh5oqb8vbdq5RAlSL79D8Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yfja</p>\n<p>23种设计模式知识要点.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QAL-yAVeqjRcwfsD2JGcvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pynv</p>\n<p>24个Java代码（Java经典模式设计）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OoosrBfBWK9QAK0TQIE4ew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdkn</p>\n<p>HeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a9C2j3RckNZZwCWOzZagzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnws</p>\n<p>JavaHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSFgFkhK6lOlIGog2r8teA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfhj</p>\n<p>JavaWeb模式设计之道（jb51.net）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ViNmcCBVrjbhzC4YlGtVOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egag</p>\n<p>Java并发编程：设计原则与模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MLgSHc7_gYUF2p3IP6vjUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxvt</p>\n<p>Java多线程编程实战指南设计模式篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OakxWURtDF1MhnB5ChmvSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awws</p>\n<p>Java设计模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IktvcAQWoBjbOVq_LXe7Ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dasf</p>\n<p>大话设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1nQRPcA5hNyxqQas2SWEg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afcx</p>\n<p>设计模式-可复用面向对象软件的基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1odKYhYMr4oHMhKtkQHXmog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewss</p>\n<p>设计模式之禅.秦小波.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WWXQJ_kXE7bFNL6YGg2Uww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rsun</p>\n<p>设计模式之禅（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KWoz-LdblGericVV-ydvqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ehkb</p>\n<p>图解Java多线程设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GZsmyslADdDiG9ubWqQ1RQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dsvh</p>\n<p>图解设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1teydg8GdbD2e-dmiNbJ1NQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wubt</p>\n<p>研磨设计模式-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_Eh7vreNW5U69pSVz9UZgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvud</p>\n<p>研磨设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Hdjlf0Go3N6vzQIBqGfqvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhpx</p>\n<h2 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h2><p>Java网站数据库设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_J34VM8FGV5GvIpcnmNEMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrmj</p>\n<p>PostgreSQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kMwCMbF-HPnwHN3Eub5dhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjar</p>\n<p>PostgreSQL详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Zlr13EcrCVviOqi5uMZy2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpbb</p>\n<p>PowerDesigner16系统分析与建模实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19uRhLZ-y-wSeJLwtDHg1LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpc</p>\n<p>PowerDesigner_15.1教程（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eOffPVGYRVnuUxKZFz0C5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvag</p>\n<p>PowerDesigner教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oPirlfDkZ8KPbBZ05cJdQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjau</p>\n<p>SQLCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BNG6VD7RGH5gIRX63xcwtA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbgc</p>\n<p>SQLite权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b4ou4nLGMtDOzuW0UwmTIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbpu</p>\n<p>SQL查询的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EvRbBfMRjBeKhSrCe36DHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxxm</p>\n<p>SQL经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/192IgNkJiN_jCWn4uM5Yr0w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrmj</p>\n<p>SQL语句大全大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT7Pp57YlCrBk41z_eIyUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkvr</p>\n<p>SQL语言艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11Dte6piqSqH5Pu6kJ-aY3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vuvg</p>\n<p>SQL注入攻击与防御第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-8dOeTUpDLDrvVJ-Cvc7Lg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyux</p>\n<p>SQL注入攻击与防御原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1joJZS9_QK4Pzc1rzXlKxlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efms</p>\n<p>VisualC#数据库高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yMlj5LyHy9Wz4camNrLeGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：l0lz</p>\n<p>设计有效的数据库系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kt5mzpLMsvN51RDIszTaaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnbx</p>\n<p>数据库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19eNfc0qaI5nZn4nSS0wKgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqxw</p>\n<p>数据库查询优化器的艺术：原理解析与SQL性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fr11ipECSDb-svyemX4zDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxcv</p>\n<p>数据库管理基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1edShCJlIVc1tDRqiJmNgJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saky</p>\n<p>数据库管理系统第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VgjYq5wkzPa5c0GpbTnTYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hwek</p>\n<p>数据库设计教程第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1llPfN3VXo6Mw5YPaycYRiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bkww</p>\n<p>数据库系统导论-原书第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RK6fCpXZX3fEkvM5SBU2_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dhge</p>\n<p>数据库系统概念-原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DkVWc-iGeBWWxZuOtxYwxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sakx</p>\n<p>数据库系统基础教程-原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w33HafOgk7h3GLJ-Ut5Zzg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftbp</p>\n<p>数据库系统全书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z54u7ZLvyHMEVO-aP2iwcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhvb</p>\n<p>数据库系统设计实现与管理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Up8b6C498s7M1lLlC0ReXQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xddg</p>\n<p>数据库系统实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FWzyeTSTOGoCnDNTpUOSfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxqx</p>\n<p>数据库与事务处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PsJ45MHV0PCsgyrj8pDTzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yspv</p>\n<h2 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h2><p>社交网站的数据挖掘与分析_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pu9o4QYGXmBsgvJ0sGqjaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vywe</p>\n<p>数据挖掘：实用机器学习技术（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NroTWqpcLB19cl1IyWyOpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjmb</p>\n<p>数据挖掘概念与技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pumcjYmKfFZ8VaUcZgCEYw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykup</p>\n<p>数据挖掘基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EREYruDyMCPmq9kqR7Uq8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yckk</p>\n<p>数据挖掘实用机器学习工具与技术原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Li7Xjrwmipc0U9ijr5WwUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwgt</p>\n<p>数据挖掘原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gu8oHS2XtuPv5Jxu77DlLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vkmp</p>\n<h2 id=\"算法系列\"><a href=\"#算法系列\" class=\"headerlink\" title=\"算法系列\"></a>算法系列</h2><p>C数据结构和算法分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/119TlKdgXWYj5QdrGwCyicA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ckwh</p>\n<p>C数值算法程序大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zHEV2a4YA4MN0_jN4iZLPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgw</p>\n<p>Java常用算法手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HWvLLZPJE61zXIm8yaoapg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skcw</p>\n<p>Java常用算法手册第三版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vm36ZPfncut62oZ2jJ5-3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjk</p>\n<p>Java数据结构和算法.第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_EKJ5IgHjZFYdLk1o4Mu2w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：csad</p>\n<p>啊哈！算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c8pUakJY6xfOYUaVJKvnqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：npxg</p>\n<p>大数据算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b9H66pNc8Z0LzMvLlgizMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvuc</p>\n<p>高级数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VdHbHaxefL7CA0yoniZGIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grrm</p>\n<p>和小浩学算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jOHwgH8FY5QKpZnJRhzRvA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtke</p>\n<p>计算机算法分析与设计课件.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PFCrqYhrgJUDtXFti-P1LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kctg</p>\n<p>经典算法大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rZ6xTTlHOVtqoAImgJcakw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfj</p>\n<p>离散数学导学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SzLiz4kVKQfgAdmdK3yrbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srjf</p>\n<p>离散数学及其应用原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w4iebO1bfNocgMfPa8XuQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjck</p>\n<p>漫画算法：小灰的算法之旅 - 魏梦舒.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tFgroWnaYQr-X2ci5OtPRQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjms</p>\n<p>密码学导引.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h099raG_ivawHCZ4tWk31w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twdc</p>\n<p>密码学基础教程秘密与承诺.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pY7nr8w6Uhh4WjhY4PYrjg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tysf</p>\n<p>密码学算法协议c实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m2Hy-VfgwD5fx6MK273kJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twqg</p>\n<p>深入理解机器学习从原理到算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1szpU-intfQFlzxkxX1WEHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwgp</p>\n<p>数据结构（C#语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mcQEiZMNZsODci_n0QUbZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uavm</p>\n<p>数据结构（Java版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Tjp1nRZuhWhvC_HKwxYbuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mckf</p>\n<p>数据结构讲义（严蔚敏版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eFHuo2TmZhl6RH7FwwgR_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwyg</p>\n<p>数据结构实例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JNYwq4XX8Mp4a7SYK_jcQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtwf</p>\n<p>数据结构与STL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pg8gyoFANjlCYyc4CNq_vw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccgm</p>\n<p>数据结构与算法-JAVA语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ofptqxxZgfGglBuB9B9T9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgpj</p>\n<p>数据结构与算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1K3DmV6P7m2uWLeNsfNg2cA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fegs</p>\n<p>数据结构与算法Java版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10BI3NCMafNx8niBYV2PYrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wftu</p>\n<p>数据结构与算法（JAVA语言版解密）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19sIVT9nm2ZbIxLMfcEEtWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbwv</p>\n<p>数据科学入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18W_8MN5Uu4H-zsSRmr4AhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkab</p>\n<p>算法导论（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P9lqf2fUYuJ-laoTS4JJtQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhaf</p>\n<p>算法导论（原书第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RZkZH5Tb4lE38kmieurRRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpr</p>\n<p>算法导论第三版中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tjZd9odmAiJCJ4VvvaMMuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dute</p>\n<p>算法第四版-谢路云译.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YVRjo6YXQrb8DBU9phOB8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgtg</p>\n<p>算法第四版-谢路云译Java描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19B3NF1NqUMi_MnDGtZPEKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqpr</p>\n<p>算法分析导论_11562998.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wqvb7mEF67Qeybyet8IXhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrgq</p>\n<p>算法概论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u6NJjJpocFe_1gKlfAY4rw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gebr</p>\n<p>算法基础.打开算法之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L8Zqr4LLlEqA0oKbDps5aQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yssa</p>\n<p>算法设计手册-第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dDxKZVxq2_TplFro3cmElA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpet</p>\n<p>算法设计与分析导论_11888784.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i2mSmNW72raCBbmsc2BxAg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjsr</p>\n<p>算法设计与分析基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1umRr7JTLfp6tgWvKBGzcuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfgv</p>\n<p>算法图解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KaUCkSW_Nt1yZTfDwqTEYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdkb</p>\n<p>算法与数据结构-实用算法基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h61A39ID5ZYVdAs_Fp1vmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvbu</p>\n<p>图解数据结构-使用Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w_dYMOWZLxGBtUYmADog5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpvd</p>\n<h2 id=\"新面试题\"><a href=\"#新面试题\" class=\"headerlink\" title=\"新面试题\"></a>新面试题</h2><p>Dubbo面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i-2HU_podnONkXCIVITXBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dewh</p>\n<p>Elasticsearch面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JfNokxTzcoTGwXof-hA6vQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fryw</p>\n<p>Java程序员面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mchSdZg81Nz0fjoDp8E2Dg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wdcc</p>\n<p>Java程序员面试宝典（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1asqIE61lGXposZ-p0AlyZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vunv</p>\n<p>Java程序员面试笔试宝典-何昊.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qLnsU39IHDSKkog5aLS8FA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ukgj</p>\n<p>Java程序员面试笔试真题库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSBYutVnwVHvj6z_lv5OJg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swsf</p>\n<p>Java程序员面试笔试真题与解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19i4svUmbEDBi-_KZYtB1Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gybx</p>\n<p>Java核心知识点面试题整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/143GVY2tfMh_d_xM0oaxyLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rcdm</p>\n<p>Java面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Kbdx5etJnN7esz01lc8gnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vawb</p>\n<p>JVM面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvsniJFbncUrylWV47u6rA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcgr</p>\n<p>Kafka面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZI_f14B-UbRYVl6c3naCtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyyw</p>\n<p>Linux面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10mthqPHRgqu9cSGdhAWitA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxyv</p>\n<p>Memcached面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12FgrF54YqbQi_JES2Ug8AA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tvew</p>\n<p>MongoDB面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FIxAbXaSHzD5sLf8Q4HT5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxhn</p>\n<p>MyBatis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1v0Llj_7wVPMKPHWGozAl_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aewm</p>\n<p>Mysql面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VUZM3sqXp5O6vfJEfylMsg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyae</p>\n<p>RabbitMQ面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VOPFZGNxv4v8EK4I-f4GlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txtf</p>\n<p>Redis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mrY2VfeqTdPQZ-wu1Qn3Jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xnaj</p>\n<p>SpringBoot面试题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W1SVyA5URstE2vYYZRhs6g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：area</p>\n<p>SpringCloud面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mc8P9o2FwXslX1HZtY3O0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqdn</p>\n<p>String面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UKTA4SBUI7ySilvKDUT0og\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpny</p>\n<p>ZooKeeper面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11xLMllJ1O8J22Fs2q4AmmA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqbn</p>\n<p>剑指offer第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GnoqSMTaakGcA4HJi4fPiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxyb</p>\n<h2 id=\"重构优化\"><a href=\"#重构优化\" class=\"headerlink\" title=\"重构优化\"></a>重构优化</h2><p>Java虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MBwYNHEVuOq-V1FpPq7tfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：texj</p>\n<p>编程之美-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1trz5QH73sRboEDtQjPtEJQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mawq</p>\n<p>大神手把手教你Java性能优化-江南白衣（加强版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lSGEI4vD4moEV3Uzcg_rkw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucrd</p>\n<p>代码大全2中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_GEyjV0Y4w3XpkRDj6iHrA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aych</p>\n<p>代码整洁之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xxiz8LzT7u1wazR0o-nEJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tymx</p>\n<p>江南白衣优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jGcfNaiT1k1V8tX6uabb8g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mvpa</p>\n<p>重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UGnVQwvguIMuFMf6yy8l4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bssy</p>\n<h2 id=\"新增，第二版：面试题\"><a href=\"#新增，第二版：面试题\" class=\"headerlink\" title=\"新增，第二版：面试题\"></a>新增，第二版：面试题</h2><p>第二版：面试题 Android 100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iKSwXFJ6QYnSvpDITa0rwg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewdu</p>\n<p>第二版：面试题 Android 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O4GgpzQg5S_22XHmhzegeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bspw</p>\n<p>第二版：面试题 CSS 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mrrBhTMgAM8ENTs1AukWaA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksge</p>\n<p>第二版：面试题 CSS 50  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fjpSyKzZwASii8wCPb7S0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prfb</p>\n<p>第二版：面试题 Dubbo  19 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TPsIFslNRspYSm9U8FNBkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ppmv</p>\n<p>第二版：面试题 Dubbo 30 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Wkqpp5DhXKGQxQbu_00kg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etff</p>\n<p>第二版：面试题 Dubbo 58 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r3K652QB2msrF8ph_MkQLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sayu</p>\n<p>第二版：面试题 Elasticsearch 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r0zJ19iQhpHMa9j-fsDDIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxak</p>\n<p>第二版：面试题 HTML 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zdFSUdU2eCZo6s6tcy0E_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmab</p>\n<p>第二版：面试题 Java  100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wDv-YWEyWXGzuJjHJ1UcGA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：junt</p>\n<p>第二版：面试题 Java  17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L__c7fExhoH3KbyILzFalg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyxy</p>\n<p>第二版：面试题 Java  算法 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1s3NQewKgT3Ly93K5U7BPUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：affq</p>\n<p>第二版：面试题 Java 133 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mxmXTNaMzru3RyRpZOME2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykde</p>\n<p>第二版：面试题 Java 47  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kGwAhK36voheuvYNOUpA5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfym</p>\n<p>第二版：面试题 Java 95 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mvPwDa9vBaUpBX_SGybp4A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtxu</p>\n<p>第二版：面试题 Java 集合 72 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vuEueYxuKJwN3IF7otPp9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swqr</p>\n<p>第二版：面试题 Java 综合 84 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17OaURL3iWKAEjtBSfKWMnw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btry</p>\n<p>第二版：面试题 JavaScript 43 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YA_0XYBPqBTeY7ngpSxixA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xmys</p>\n<p>第二版：面试题 JavaScript 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1p9s7pCEDDl-tOHXwZ2v4Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kytg</p>\n<p>第二版：面试题 JavaScript 96 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WRfTrjEMEZAdrGrTk9_Waw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfrb</p>\n<p>第二版：面试题 JVM 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y4Mxc9JhyHjZQgpuH0qC2g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfwx</p>\n<p>第二版：面试题 Kafka 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H64nJGtvYwxQK2KVD1h3jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdq</p>\n<p>第二版：面试题 kafka 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZXyeUUAivxuy5GskxEd2LQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efuf</p>\n<p>第二版：面试题 Kafka 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H8kXIFfxCsGno25_y6bS5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuye</p>\n<p>第二版：面试题 Linux 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sOqNqcc4PpScq858S93zbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qadp</p>\n<p>第二版：面试题 Linux 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1968KSi1QiqC9rPauU95p5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etun</p>\n<p>第二版：面试题 Memcached 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/189Q1AZmcQVXDyQC5eT1knA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpuf</p>\n<p>第二版：面试题 MongoDB 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L3ukE4vqeDQdLcb_b4TNUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jhmr</p>\n<p>第二版：面试题 MyBatis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1D8ICwwMg5gMdMKFn2LF2Mg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfsd</p>\n<p>第二版：面试题 MyBatis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xuruCkfd_zLpjYndFf-uIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucst</p>\n<p>第二版：面试题 MySQL 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nAHFJHPRvS22aWxbc1i4WQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqnk</p>\n<p>第二版：面试题 MySql 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QeaKsRriqbxmGvMgugAHkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbjr</p>\n<p>第二版：面试题 MySQL索引 6 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H5qdmoCP3yMLvr_7gWVGMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqgg</p>\n<p>第二版：面试题 Netty 11 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bXgemm4jllpH73l7TA3-Vw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jamh</p>\n<p>第二版：面试题 Nginx 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1329KFq2Wfg9IqZnUMe3fBA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqet</p>\n<p>第二版：面试题 Python  36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kRyX4jAuQ41yR_euJk4nTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：unjj</p>\n<p>第二版：面试题 Python 292 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OTrxw-3JxKDgKQspoqs_pw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kydp</p>\n<p>第二版：面试题 RabbitMQ 12 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zMkeMXa6e9A4jvmJWOuEBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntsu</p>\n<p>第二版：面试题 RabbitMQ 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mk6rfXq6ronvvQmv-tRr5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkd</p>\n<p>第二版：面试题 React 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bI6NHgk8Qgk9W433Jt2Xig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksdw</p>\n<p>第二版：面试题 Redis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OUNs5_ZZA4ug2S1rTTJFEw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejyc</p>\n<p>第二版：面试题 Redis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13ns5YkrurQzGBvH5XbswPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cnsj</p>\n<p>第二版：面试题 Spring 55 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tT4RIqUishJS605rNJDaBA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pswp</p>\n<p>第二版：面试题 Spring 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10c5Pfv9BZnsjsrLR0A3iow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxfv</p>\n<p>第二版：面试题 SpringBoot 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1idLAz8DDuSURBXYO2PJzUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfxs</p>\n<p>第二版：面试题 SpringBoot 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dFnZIePqMFeEINB51QaA-Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t25p</p>\n<p>第二版：面试题 SpringCloud 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1naqYsW4UzMfiLHq3NrSrKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxb</p>\n<p>第二版：面试题 SpringCloud 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tzoUY3TZg8dwAAljnDNfaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmgd</p>\n<p>第二版：面试题 SpringCloud 29 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1seZo1XloSEc0fNBncSW4vg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxda</p>\n<p>第二版：面试题 SpringCloud 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1v36uJU32IXNkvqZZK9EAdg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbvn</p>\n<p>第二版：面试题 SpringCloud 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GG9X8Av_HZKh56ZWNRWEiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhbr</p>\n<p>第二版：面试题 SpringCloud 8 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gXQq18Zu0SEfC7hH6Oping\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfwf</p>\n<p>第二版：面试题 SpringMVC 35 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15QaXlVGXUPh4FHGAF0y3JQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：canh</p>\n<p>第二版：面试题 Tomcat 16 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HkloT28H8Jb8Z1Cslaj22Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmqb</p>\n<p>第二版：面试题 Vue 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bE36aDEoRFLlv9vP33WMNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcmg</p>\n<p>第二版：面试题 Vue 39 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dwPL_XHNnOMYDETFQ4Xs4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vapx</p>\n<p>第二版：面试题 ZooKeeper 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12_kkYMkwPuhts8RnoQWm9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ufqw</p>\n<p>第二版：面试题 ZooKeeper 28 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q-sxq0vpzInt-9HKTRqZ_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkjh</p>\n<p>第二版：面试题 ZooKeeper 36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1B5T6Hmeb_uIvAV2wQHNVwA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dkwd</p>\n<p>第二版：面试题 并发编程 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FYsA869oaPcv1LJF9mdJnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwek</p>\n<p>第二版：面试题 并发编程 48 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m5ThtAWHp4k2FGxQ72LHXg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njgu</p>\n<p>第二版：面试题 多线程 75 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wiw1kA_iWQCjyFBTbndjtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxty</p>\n<p>第二版：面试题 精选设计模式 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TijTPNvjqFAOBosM78ax7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sxnn</p>\n<p>第二版：面试题 前端汇总 100  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19XbZKt8QDrbDtTkBXOjy9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtfq</p>\n<p>第二版：面试题 前端综合 45  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MiXOm2pkWFBvQL3-qrocfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybev</p>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>书籍全部来源于网络其他人的整理，我这里只是收集整理了他们的链接，如有侵权，马上联系我，我立马删除对应链接。我的邮箱：<a href=\"mailto:&#x37;&#x35;&#x39;&#x39;&#55;&#x35;&#51;&#x33;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x37;&#x35;&#x39;&#x39;&#55;&#x35;&#51;&#x33;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021654217.jpg\" alt=\"desert-gee44587c8_1280\"></p>","more":"<blockquote>\n<p>　　转载：<a href=\"https://github.com/itdevbooks\">https://github.com/itdevbooks</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>计算机类的书籍非常贵，天天买纸质书是不可能的了，所以对电子书的需求量还是挺多的。同时很多小伙伴不知道哪些书是经典，哪些是辣鸡，作为一个互联网从业12年的职场老鸟，我深知看书，看好书再加上实践才能高速成长。</p>\n<p>计算机类电子书下载，编程电子书整理下载，包括 <a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80\">C</a>，<a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80-1\">C#</a>，<a href=\"https://github.com/itdevbooks/pdf#docker\"><strong>Docker</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#elasticsearch\"><strong>Elasticsearch</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#git\">Git</a>，<a href=\"https://github.com/itdevbooks/pdf#hadoop\">Hadoop</a>，<a href=\"https://github.com/itdevbooks/pdf#headFirst\">HeadFirst</a>，<a href=\"https://github.com/itdevbooks/pdf#java\">Java</a>，<a href=\"https://github.com/itdevbooks/pdf#javascript\">Javascript</a>，<a href=\"https://github.com/itdevbooks/pdf#jvm\">jvm</a>，<a href=\"https://github.com/itdevbooks/pdf#kafka\">Kafka</a>，<a href=\"https://github.com/itdevbooks/pdf#linux\"><strong>Linux</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#maven\">Maven</a>，<a href=\"https://github.com/itdevbooks/pdf#mongodb\">MongoDB</a>，<a href=\"https://github.com/itdevbooks/pdf#mybatis\">MyBatis</a>，<a href=\"https://github.com/itdevbooks/pdf#mysql\">MySQL</a>，<a href=\"https://github.com/itdevbooks/pdf#netty\"><strong>Netty</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#nginx\">Nginx</a>，<a href=\"https://github.com/itdevbooks/pdf#python\">Python</a>，<a href=\"https://github.com/itdevbooks/pdf#rabbitmq\"><strong>RabbitMQ</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#redis\">Redis</a>，<a href=\"https://github.com/itdevbooks/pdf#scala\">Scala</a>，<a href=\"https://github.com/itdevbooks/pdf#solr\">Solr</a>，<a href=\"https://github.com/itdevbooks/pdf#spark\">Spark</a>，<a href=\"https://github.com/itdevbooks/pdf#spring\"><strong>Spring</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#springboot\"><strong>SpringBoot</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#springcloud\"><strong>SpringCloud</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#tcpip\">TCPIP</a>，<a href=\"https://github.com/itdevbooks/pdf#tomcat\">Tomcat</a>，<a href=\"https://github.com/itdevbooks/pdf#zookeeper\">Zookeeper</a>，<a href=\"https://github.com/itdevbooks/pdf#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a>，<a href=\"https://github.com/itdevbooks/pdf#%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB\"><strong>大数据类</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\"><strong>并发编程</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB\">数据库类</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98\">数据挖掘</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98\">新面试题</a>，<a href=\"https://github.com/itdevbooks/pdf#%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1\"><strong>架构设计</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97\"><strong>算法系列</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB\">计算机类</a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><strong>设计模式</strong></a>，<a href=\"https://github.com/itdevbooks/pdf#%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95\">软件测试</a>，<a href=\"https://github.com/itdevbooks/pdf#%E9%87%8D%E6%9E%84%E4%BC%98%E5%8C%96\">重构优化</a>，等更多分类</p>\n<p>重要说明：这些书涵盖入门和进阶所需，请大家各取所需，另外还会原创大厂面试题，陆续会提交上来，请大家持续关注这个项目。</p>\n<h2 id=\"新增：文末有-3625-页互联网大厂面试题\"><a href=\"#新增：文末有-3625-页互联网大厂面试题\" class=\"headerlink\" title=\"新增：文末有 3625 页互联网大厂面试题\"></a><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E5%A2%9E%E7%AC%AC%E4%BA%8C%E7%89%88%E9%9D%A2%E8%AF%95%E9%A2%98\">新增：文末有 3625 页互联网大厂面试题</a></h2><h1 id=\"书籍分40多个技术大类\"><a href=\"#书籍分40多个技术大类\" class=\"headerlink\" title=\"书籍分40多个技术大类\"></a>书籍分40多个技术大类</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80\">C</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#c-%E8%AF%AD%E8%A8%80-1\">C#</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#docker\">Docker</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#elasticsearch\">Elasticsearch</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#git\">Git</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#hadoop\">Hadoop</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#headfirst\">HeadFirst</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#java\">Java</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#javascript\">Javascript</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#jvm\">JVM</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#kafka\">Kafka</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#linux\">Linux</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#naven\">Maven</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#mongodb\">MongoDB</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#mybatis\">MyBatis</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#mysql\">MySQL</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#netty\">Netty</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#nginx\">Nginx</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#python\">Python</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#rabbitmq\">RabbitMQ</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#redis\">Redis</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#scala\">Scala</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#solr\">Solr</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#spark\">Spark</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#spring\">Spring</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#springboot\">SpringBoot</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#springcloud\">SpringCloud</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#tcpip\">TCPIP</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#tomcat\">Tomcat</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#zookeeper\">Zookeeper</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB\">大数据类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B\">并发编程</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB\">数据库类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98\">数据挖掘</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98\">面试题</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1\">架构设计</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97\">算法系列</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB\">计算机类</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">设计模式</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95\">软件测试</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E9%87%8D%E6%9E%84%E4%BC%98%E5%8C%96\">重构优化</a></td>\n<td><a href=\"https://github.com/itdevbooks/pdf#%E6%96%B0%E5%A2%9E%E7%AC%AC%E4%BA%8C%E7%89%88%E9%9D%A2%E8%AF%95%E9%A2%98\">第二版-面试题</a></td>\n<td>每天都有更新</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h2><p>21天学通c++_第7版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFtWjkx8awd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pv45msRWe0sCurOM9RR9uQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvdj</p>\n<p>C++ Primer Plus（第6版）_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMRGakxl2lc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EVlg9WH-6kJjmjjTjaty0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wsfu</p>\n<p>C++ Primer第5版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFmCLkx8e4j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oxGcN9OoQs2tRXs3sas_XA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qeke</p>\n<p>COBOL语言（上）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ix653kx8ebg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IZq6yXLmUB22rZKkfxSbjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stqa</p>\n<p>COBOL语言（下）谭浩强.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOFeMkx842h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10FlZxU52Vrsy8kUo-MnSoA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：drsv</p>\n<p>C程序设计语言（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iscm1kx84di\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nTISepdSatvOMRcMu6Zw_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kuhe</p>\n<p>C程序设计语言（第二版）习题解答.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2SkIkx84ej\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MZDmM5AqyKsDQ1k3reeZ0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphb</p>\n<p>C程序设计语言（第二版）新版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iRieOkx84hc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Lb6J7LM0kVy_ZSOp7Ubtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjcf</p>\n<p>C程序设计语言（第二版）中文译版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4Mqvkxl7ri\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W7Xb8ubRnLDLWUATMxblxQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdvu</p>\n<p>C程序设计语言（英文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5DhSkx84oj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E_hMl1VLVlDn44ew_mrHrw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfne</p>\n<p>C大纲.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iX8jpkx84te\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13zvfjFYaY6Pl8VutieLNHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtf</p>\n<p>C大全语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXei8kx852d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Rd6trlbNhigXbMsg4uMYnA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfwp</p>\n<p>C和指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGENEkx85ta\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R1hZBoyKkKLj9EBC2ZUPtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcdg</p>\n<p>C基础班范例代码训练.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAxOEkx85xe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167--PYVLr5Uc-Fa4_pCXzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mrah</p>\n<p>C与指针.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9IGjkx866d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x9JB86DDKi6s9dldrJsa-w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxcg</p>\n<p>C语言编程精粹.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igjXpkx86he\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W8aWffFDOvubzfNHEC7-Cg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgds</p>\n<p>C语言参考手册第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iL8Jfkx86pc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z2ErBjh1ERW5-lbqR9R4Uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twgf</p>\n<p>C语言程序设计现代方法（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1X6bkx8y1g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oaxzlxeaCkYGXAEn-mCSgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dfey</p>\n<p>C语言大全第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ihGbpkx8yid\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xVIHCdekVp3iRibektJ7bg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skvj</p>\n<p>C语言函数大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYowkkx8ylg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kDqsE3BP2UC7XupD2FzRXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkk</p>\n<p>C语言解析教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYmUXkx8yvg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TYbhCfo1t3dIm0gAjLeOYw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：brmp</p>\n<p>C语言深度解剖.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQR1zkx8yyj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wc0IeIWQR28jG0uOtqKz_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjxw</p>\n<p>C语言实现病毒源码演示.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iO1Q5kx8yza\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LZ1VEwZXoYuVJlN6nxAi8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：60dt</p>\n<p>C专家编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i12vOkxll0f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12jZ8IHA1Cb__KMsFDa4eqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gkup</p>\n<p>Linux操作系统下C语言编程入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8JH3kx8zde\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Nx2y1lTvdEpBuf4QhV0fyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrtj</p>\n<p>华为C语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ivg6Gkx8zgh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yC1zRs37Sy-6trq4zV8kQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awkd</p>\n<p>可变目标C编译器设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ixH3vkx914h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L9NuvV6SdF-8Bi-zreB4Ag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vjdh</p>\n<p>数据结构-教程c语言版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iocoikx91pi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TEjTJ05RRfnygjQlSkXKiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccwm</p>\n<p>数据结构（C_语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iq3rekx917a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_787HiYRbxx5U-9W6t779w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：medm</p>\n<p>数据结构（C语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioouykx91ng\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E--h4WLOoeNH8wpHZ7zajA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sscd</p>\n<p>数据结构、算法与应用C++语言描述原书和引2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8E2Zkxlsgd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V7QAFKLY_S9eYeoeRzCgvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjgt</p>\n<p>算法：C语言实现第1-4部分基础知识、数据结构、排序及搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwTadkx92sh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h4e4RBl8jgj2netJV1nYfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykat</p>\n<p>网络环境下的C语言编程技巧及实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaQELkx92yd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d7iJN5JVJL_UrzpubO1k9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjht</p>\n<p>自制编程语言基于C语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i3JC8kxlzti\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vk5rAD2pAscURdISdhR2ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybqh</p>\n<h2 id=\"C-语言-1\"><a href=\"#C-语言-1\" class=\"headerlink\" title=\"C# 语言\"></a>C# 语言</h2><p>ASP.NET.2.0.XML.高级编程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iykcDkx9wxc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1I7oyBgWo1wrlQ5iIIE1m8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngna</p>\n<p>ASP.NET.2.0.高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iUm0ekx9p1i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yQaRuIvML31ealbl_EZHqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsts</p>\n<p>ASP.NET.2.0.入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVn3Nkx9s3i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jogs5FFdaRTibdhw9KjlDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqjp</p>\n<p>ASP.NET.2.0.数据库入门经典（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyVSAkx9smh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1C5dfWMcQCJZak0VQqWtw1g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaqh</p>\n<p>ASP.NET.基础教程-C#案例版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0I0pkx9sxi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mIxJUSHRJ0fNIyOaGUo8xA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnaw</p>\n<p>ASP.NET技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9p1nkx9tyf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SJ_DX1wVXY1u4MdZmurpZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gryv</p>\n<p>C#.4.0完全参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i44Sskxa01e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eCg6Th8Ouc8Q_mlQFScblg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqkr</p>\n<p>C#.COM..编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i7sh4kx9u2j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oQwLHhblmo3EprJKAlq-1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncbr</p>\n<p>C#3.0完全自学宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iODgKkx9veh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DTLQFDSfuMsivoo8XLHi2g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fejw</p>\n<p>C#编程宝典十年典藏版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOQOUkxa6sh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pLtxx5w0ccPNsTKk_0d9yw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cyjp</p>\n<p>C#编程参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/itzFDkxa4eb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18XKKpwlV9R8vUX4TPdYmRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tckx</p>\n<p>C#编程思想.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2AiQkxa29e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sESNaACnZyNwtEOXnbZtbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augj</p>\n<p>C#编程语言详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ij48tkxa1mb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1USE8I8Ig_lJrWrBsBss7hw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqkw</p>\n<p>C#程序开发范例宝典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CY60VTs0FdlJJbKN-RciWA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eyhe</p>\n<p>C#程序员参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iKmc8kxaa1e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fMjV4BVdfxHpbTbeMipHxg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hbbp</p>\n<p>C#技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwvIJkxad8j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VA3R90-5tHSyh2Ak7dTm3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wywp</p>\n<p>C#入门经典（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iet3jkxahyj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qBKgqHgs4dAJsHvopasEjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xafy</p>\n<p>C#软件项目开发全程剖析-全面透视SharpDevelop软件的开发内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOhl0kxai6h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10Up6eUcpL-JuRL9RuaqjqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnv</p>\n<p>C#设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5kBOkxaibc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fUn2p0sSb-dPdIrfg9KmKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnns</p>\n<p>C#网络编程技术教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCoHMkxaj7e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Xskb_NvWezmdabyzRh8fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cerg</p>\n<p>C#项目开发案例全程实录（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ivNoskxakzi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QEa2INDhZhvbGSlAh_LT9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agjn</p>\n<p>C#学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuDRekxrw6d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hYrT0cLyF5uUMIoUNElXBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：veex</p>\n<p>C#应用程序开发全程演练-从灵感到实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuA6Dkxrzte\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yi9CiqleBP6BfR4Xf9NPlw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbew</p>\n<p>C#与.NET4高级程序设计-第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iL0D9kxs7qj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mGs2xNNvmPJ54AHsbmhShA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyby</p>\n<p>C#与.NET技术平台实战演练.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0UaPkxscsb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z1Oar2-0wm53BCA-f6zElw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebvx</p>\n<p>C#字符串和正则表达式参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iENCCkxal8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jZxa5iTBvVN8iUHi9Q8yjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cmth</p>\n<p>C＃高级编程（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iY8hHkxacni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vQTjdPk4hyF-efpbdYj_fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mtpu</p>\n<p>Microsoft.C#.Windows.程序设计（上下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i77A1kxamni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UQSZpztOy3ITdZurmfV1ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqnq</p>\n<p>Programming.ASP.NET.中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9GvLkxanub\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19A0krBK5AsbjC2MJIfPfWA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jssu</p>\n<p>Programming.C#.中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/itoRZkxaq1a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JDZNMzG8WuvaYnizfuTidA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmtx</p>\n<p>Visual.C#.NET.网络核心编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iYlxmkxaqaj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1eatMs_xYJffB0LJLTC5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jsrq</p>\n<p>VisualC#.NET案例开发集锦.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ibtTTkxatwj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dW2LSBwkGlKUSDhBbIfFMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfcp</p>\n<p>VisualC#.NET网络编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQ1d8kxaumf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x1FLbBHDRzHRLDFJHSljSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kxgn</p>\n<p>Windows应用高级编程-C#编程篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWj4Nkxav0j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/192y69NahClrpiI2hkF80gA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbpp</p>\n<p>程序员突击Visual.C#.2008原理与系统开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igcpSkxax4f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OWf7AK5ezToNiQMo0AZyQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：murm</p>\n<p>叩响C#之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaV7Xkxaxpg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lHUal4JysWeqwmBXYiHuuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atej</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker-从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMYo7kxbaaj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ccTG4htfo-jZ1Nb8nnKeNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：enbt</p>\n<p>Docker_practice.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOELrkxba8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V8vGD2R9OG2a88HpDxG_rg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fraf</p>\n<p>Docker经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/imwLzkxbacb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sJWlwtTSnHZhLneX2dBfaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej</p>\n<p>Docker容器与容器云（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMsrNkxbb3i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R5PqIB_G9pIKi3b2Rzlaeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfnw</p>\n<p>Docker入门白皮书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGMwKkxbb5a\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16HDLIsj_Rd0tgfKpbTCEgw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kskk</p>\n<p>Go语言实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ilZK4kxbb7c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZdtpkG6DMd3t7-ywJOWRCQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sedj</p>\n<p>Kubernetes实战（套装共2册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOexQkxbblg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15K6r6JEsdGVuQTVIydruxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xueu</p>\n<p>SpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXnsOkxbdhe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c6dNs1T6klinsbNtHl32GQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrdb</p>\n<p>SpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4H8xkxbe4h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1t0r0CuIyV1fcR4l5M83ttw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crbf</p>\n<p>第一本Docker书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioCPhkxbe5i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12US2-reChfZgwy3eqpJpGA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uvmt</p>\n<p>深入浅出Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCKMWkxbf8h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13-Ov2ZrCVAmHz13Ah8Xmpg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfkw</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/im4CZkxbieb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KekRLkLCvLTbq24J3TNWiQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrse</p>\n<p>微服务架构下Docker实践，以及Docker在测试环境的应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVmIXkxbigd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ngvZs7yWfuRxUxxST43LzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmj</p>\n<h2 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h2><p>BetterELK,新浪实时日志分析服务进化.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iP88Ukxd2wf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uUxY9AtKQEy-if3fKkhK4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfgc</p>\n<p>Elasticsearch-guide-chinese.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/isNeDkxd30j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Df0xspbMMVJn20-C522niw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：baxm</p>\n<p>Elasticsearch-the-definitive-guide-cn.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuT60kxd38h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Td3Y7k0gQpL4jpQfmc05uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrfs</p>\n<p>Elasticsearch6.1官方入门教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iu6Jokxd2yh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MXfjtz5ynkY_u08UDOCaLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：knfe</p>\n<p>Elasticsearch大数据搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCJ3Dkxd8mb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j4K2lZpt7ywpjo-cyodlyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxuu</p>\n<p>Elasticsearch分布式大数据搜索.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOGbbkxdade\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AHxsGuZJFXDxZoGjOcBXmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bytq</p>\n<p>Elasticsearch服务器开发（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iCU5Ykxdb7e\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LcjmOWCBbLfEPT_woN1GuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xatu</p>\n<p>Elasticsearch集成Hadoop最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iG4M4kxdcha\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bOwD5PBqfD31NJfWFXso3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfcp</p>\n<p>Elasticsearch技术解析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ija6Bkxdckd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x5QOR_wrxC5BV9JorAmxtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jews</p>\n<p>Elasticsearch技术解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iunVckxdgkh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HdKY0kVDVzc6KKkvU8fK5Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afay</p>\n<p>ElasticSearch可扩展的开源弹性搜索解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1APTkxdhgj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12mH096foYT5y4YWsHFlSeA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxjr</p>\n<p>Elasticsearch权威指南（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iScNMkxdhtc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VV9O_660sDBo_YB62QYx-w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwtf</p>\n<p>ElasticSearch入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTWCxkxdi4d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BzO1GTBbHSmwca68Vdlbmw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hukk</p>\n<p>Elasticsearch实战inaction中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ipDJIkxx1re\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BpK6r6MW29zb46lH_wG0yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pveu</p>\n<p>SpringBoot集成Elasticsearch7.4实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ip2uYkxdidc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16GhqhpmVUfKHLll3z_dnlQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tewy</p>\n<p>大数据搜索与日志挖掘及可视化方案++ELK+Stack++Elasticsearch+Logstash+Kibana++第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i3E26kxxjqb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q1DrL8kopQDJPvTESqy9Sw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vudd</p>\n<p>深入理解ElasticSearch.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/izKODkxdrwf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A8_KVHXsuFe6u--XZgL6eA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxpf</p>\n<p>实战Elasticsearch、Logstash、Kibana++分布式大数据搜索与日志挖掘及可视化解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAwXbkxdpyf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xnY8s6i7hI8bzRmy38s-sQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ncce</p>\n<p>数据分析与决策技术丛书ELKstack权威指南,饶琛琳编著,P394.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4AjAkxdila\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Rugsxq8mfnK_tEtFB80Q4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pgab</p>\n<p>搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2KLFkxdinc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y4THdUHLG8WTa5ipYTovKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffjd</p>\n<p>最新版Elasticsearch调优搜索速度.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iNXvZkxdjrc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ewPAjJ6zWPeBHLPQx66QVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trqt</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p>GitBook（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLUKFkxe29i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xhG-q_BEFY-U4uuY9oybDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kvak</p>\n<p>GitCheatSheet中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/il9lkkxe2ed\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M_aVeiwUR0Hwf9l7SjziFg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvwp</p>\n<p>GitforTeams.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ibym9kxe2la\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LY1Ie9FN78aUybcNxM4BcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qrrp</p>\n<p>GitHub入门与实践（日）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyqIekxe2ti\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Db3YzGgVjQt9kSMg8HfcUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahjm</p>\n<p>Git版本控制管理（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioRcDkxe31g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eJTo4qBAsiGvCSVLuU7SPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：adrk</p>\n<p>Git版本控制管理（第二版）迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLkpMkxe3ni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oimhw2LAiuVkD_8gnV_NrA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyct</p>\n<p>Git官方手册中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9bekkxe3za\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NC6Oi4HdJ5b72VKaIdJR7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saqd</p>\n<p>Git讲义-深度讲解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLMXTkxe4de\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hRGXi6L31eOj6YhTPaEUnA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swyh</p>\n<p>Git教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioXiZkxe4ja\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kOBBwQi_cC6j3QvgRr6RuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrp</p>\n<p>Git权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaye2kxe62f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13bGqDQ35cJgVfp0ht9SkqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkak</p>\n<p>Git中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iR2Swkxe8pa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Hlh9b3NX6roVOruQ8-RcuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmux</p>\n<p>Git中文手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEl0ikxeana\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gNKclKvcNITBXDniY0dadA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtpb</p>\n<p>ProGit中文版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHn3pkxeawj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OkqTAyfUoCFOzgnYmImMDA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkry</p>\n<p>ProGit中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iMrizkxebib\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l98hVaPhqHkYq3nSkETZUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwgk</p>\n<p>版本控制之道使用Git.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iW6o3kxec3c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GpOXPOBpfB8Yi15VGnIgKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfth</p>\n<p>常用Git命令清单.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ifScYkxec7g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yx5lwu0gskwfmHvn7D7M1g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajkn</p>\n<p>从+0+开始学习+GitHub+系列.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ifHzvkxecla\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dakSbdxFubYb_lNoApeaqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbqg</p>\n<p>完全学会GITGITHUBGITSERVER的24堂课.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ij3V8kxedhc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12Hk4dMkfkE1L0WERrEa-qg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbpj</p>\n<h2 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h2><p>Hadoop搭建与Eclipse开发环境设置.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iQTivkxehba\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-yw-COXzqlIlOl95h8I74w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvda</p>\n<p>Hadoop大数据分析与挖掘实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAlA8kxei4j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_ndlcCJjmYnPk7s914U__w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwvr</p>\n<p>Hadoop高级编程-构建与实现大数据解决方案.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4JMrkxeich\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ISRomZnhzO3pTSE33HLvYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xubc</p>\n<p>Hadoop公平调度器指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia2mkkxel5i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Be1AoEQZyIRVlRf261bbOQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwyq</p>\n<p>Hadoop技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHJbDkxemed\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Nxfu7ytEhdfTDv6_G6TyNA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvvg</p>\n<p>hadoop简介.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iLHp3kxemwb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HjPoXCY4-aQ9OJiXNGvdfA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ebfm</p>\n<p>hadoop开发者第三期.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/imUQnkxenfa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qnnDciMx68FIYpGqj0ZrnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhs</p>\n<p>Hadoop开发者第四期.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iPUH6kxenoj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pfi3AUbMfcCKz-jG85orUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgx</p>\n<p>Hadoop开发者入门专刊.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGk6wkxente\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/107Z2PCG-Q_Njiyg7bV0ibQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kejg</p>\n<p>Hadoop权威指南（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1S3lkxeo7i\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CFuFsngiC9nmKwc2J4_zCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvab</p>\n<p>Hadoop权威指南（中文第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/irntIkxepxa\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1e1oWfYr8atVYQA3Swhb71w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tqar</p>\n<p>基于Hadoop平台的亿贝用户邮件数据分析（苏立）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHLQekxeqad\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1obIfdffIOX8w348MC9njVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr</p>\n<p>实战Hadoop：开启通向云计算的捷径（刘鹏）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTT9Hkxered\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l-HrGhtJ3fZ6nJou4gnC7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsbw</p>\n<p>数据算法HadoopSpark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTxcMkxetbc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OWxadCpz_iqE1Fq4cVR9JA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxf</p>\n<p>数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTxcMkxetbc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CL8-WG7XQOxbWLisgb7TZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdey</p>\n<p>在Windows上安装Hadoop教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i8EVmkxetcd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w1JBUHP9K4E5QwYje-UM3A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmkv</p>\n<h2 id=\"HeadFirst\"><a href=\"#HeadFirst\" class=\"headerlink\" title=\"HeadFirst\"></a>HeadFirst</h2><p>Head First Ajax（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXpYUkxeuhe\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-RyMwcVfgc2PplMHm0UKww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyuq</p>\n<p>Head First C# 第二版-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iAQ0rcy9gH2yO1DEgv7Y_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mhtd</p>\n<p>Head First HTML5 Programming 中文版 .pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ioWjikxev2f\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-uMMg_GjFQedOAJQQ3UrgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjyy</p>\n<p>Head First HTML与CSS、XHTML.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iH1LQkxeypg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167awhMP91mzcBGFPoIcLDA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hspd</p>\n<p>Head First Java 中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEwj9kxf18h\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/155P-tL24jowuGMtNdY2wSA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvpy</p>\n<p>Head First JavaScript 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iERoWkxf5zi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cRLHU-NKIA0nQ2XMzHp2sA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fkby</p>\n<p>Head First Java第二版涵盖java5.0.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXHoSkxf8md\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NM7eb06vGK2iBMOF_6uEYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cebe</p>\n<p>Head First Networking 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iZ0Pwkxf9if\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dD968W_tr-SUq1i_HdubVA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upkx</p>\n<p>Head First PMP 中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ijZbskxf9tg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DeZdj4zh7hxDnpINLdq0RA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxau</p>\n<p>Head First Python 重视大脑的学习指南  中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i0A5nkxfa9c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hLAU9HqUbpgh1PQ7DVn3gQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avey</p>\n<p>Head First Servlet JSP.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i7J8Zkxfcsd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mlSoZJ42ukvB7Rl0YBRGdw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkv</p>\n<p>Head First Servlets and JSP 第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i83VIkxfhni\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/139L7zhrwsgNhgIGmf1jRZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pysa</p>\n<p>Head First 设计模式（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i6b7Wkxfj6d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GX8ZZT2_ISqJv47sBwFvgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafw</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>21天学通Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iwPMNkxfsde\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KcnqkVnoSiiOkZmkzYNGfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jeyg</p>\n<p>Effective+Java+中文第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i4R1ikxfsub\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13qz0iXAQdfv-7FiXiodIww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqgg</p>\n<p>EffectiveJava（中文版第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEXrIkxgepi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JCdDt9dMSxIT01jBSBRDIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cpen</p>\n<p>Java8函数式编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/igZEhkxgc2d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_-85Wx3LYJHSktFYCH_hUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pjan</p>\n<p>Java8中的炫酷特性和Java9中的新特性-杨晓峰.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iDzpOkxgfkj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O6euAamgF3Y7v1JnfGyjjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkwc</p>\n<p>JavaNIO（中文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWsplkxgfnc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/139eXkJl2jtagTZm-ROxL7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpaq</p>\n<p>JavaOOP-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iRe3ekxgg7c\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vubz7vJybbosl3iLFWPhCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pkmp</p>\n<p>JavaRESTfulWebService实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i1xFVkxghvc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O7km01HayjzW_yYRCyR3gw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfju</p>\n<p>JavaServlet和jsp学习指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia4bkkxgkqf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1muJPmcUcjV4k4wBQqPT8yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：daqb</p>\n<p>JavaTCPIPSocket编程（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iFwCJkxgnna\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/197jWtCamqIFQdqiPcrQCew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vynk</p>\n<p>JavaWEB服务.构建与运行.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2MGbkxgo0d\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z1XCRAtblPvbgt9qN8CMVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcrr</p>\n<p>JavaWeb企业项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iNjuGkyordi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iZGKcMOmQmMYuxUfAkJEbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aumu</p>\n<p>JavaWeb整合开发王者归来.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1U2pDBLUyYqvIjo7w7gRQZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fprs</p>\n<p>Java编程的逻辑.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ijGyakxgtwf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PiN48omo9JLLzb63sP0Bkw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xtxs</p>\n<p>Java编程思想第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJiGqkxhdeh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1p_E22a4VUpWVYgzqMmfDIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mnpq</p>\n<p>Java编辑思想（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iGM8Fkxhdjc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eLEyRlUpxZqp5_ISdZu86w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfaj</p>\n<p>Java程序员修炼之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iHblakxhfmh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zhIZCnmLFzbBCxtwtxKltg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpea</p>\n<p>Java从小白到大牛精简版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iapU1kxhfqb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Kd7gdxnNtOzHDLpLYxk7vA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kaqv</p>\n<p>Java典型模块与项目实战大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ie7Xvkxhjsh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x_SsiWi2OLw3HF1CRWOJSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：assw</p>\n<p>Java关键技术JSP与JDBC应用详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iWXqykxhlri\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RImaM6qZcRlN_ueUN2MaEQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tscq</p>\n<p>Java核心技术卷一基础知识第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJTXAkxhngj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1urz-kz246b7KJEMREYIJyA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjmy</p>\n<p>Java核心技术卷二高级特性原书第10版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iVCbnkyoaha\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1biNDg0wY9NhzPEbYYFqKhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cjzp</p>\n<p>Java基础概念.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iaqL3kxhnib\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1l8iKRzjGPYBXwrTm281LPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfu</p>\n<p>Java基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqFPekxhnmf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wrCF3ttjvPTmMavEx27UMg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rrma</p>\n<p>Java开发之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i2vEZkxhs6j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wgivWU-eJuvzXC3DILpEzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rvpq</p>\n<p>Java数据库应用基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEJ8Ckxht7g\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17DQzOJFnaXQ2M6RWNvzo8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fawd</p>\n<p>Java特种兵上.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iJTuVkxhwqd\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iGdCv9y6HCfMwA8QKbsmTA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmgf</p>\n<p>Java图形与网络游戏开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iayknkxhx6j\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1B0XNM5dr7tijN-CMMKNOUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjjb</p>\n<p>Java网络应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ia9AHkxi1jg\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OS8fQKKsjgcHd23oRIJ0Jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bdxn</p>\n<p>Java与模式（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/ik4Aqkxi1zc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qbwz2PMClWo11Eb1zrl1EQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：asfv</p>\n<p>Java语言程序设计-进阶篇（原书第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyQI3kxi2fi\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GdX636VmycTU9t-4OgbgIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqnn</p>\n<p>Web安全开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iOSPgkxi2jc\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h5fZHvtNbodM7hZbrpRLCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhsj</p>\n<p>Web性能测试实战详解+Web开发典藏大系.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iTd6Akxi4kf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zC2VwRjNr8mT69ENmNUJ0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bsct</p>\n<p>Web应用安全权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iEc6nkxi5of\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17YmTumIWjckrqBcP6Gu4RA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydkm</p>\n<p>Web应用开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i72VPkxi7mf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n4pmkCkYbk9cDFGvMLW1HQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfqe</p>\n<p>编写高效优雅Java程序.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqkHBkxi7oh\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/111RMs5dIwOt9I09aE4iMhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nskv</p>\n<p>菜鸟成长之路—Java程序员职场全攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iAbu0kxi9di\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bcnbsfSP-agoIFKUUPwgzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vxjx</p>\n<p>大型网站系统与JAVA中间件实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iqHZdkxig4b\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MliFXVP-mjZoMWs_RpANXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdbx</p>\n<p>分布式Java应用基础与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i5ci2kxihcf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1X2x4RA1D2-Ig8vcr1KOrqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dbeu</p>\n<p>疯狂Java讲义.pdf&nbsp;&nbsp;&nbsp;&nbsp;nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fYIQdDNdncR3JyxAr_x-dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hejg</p>\n<p>高性能响应式Web开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i9wUOkxiife\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EcPNoFTVUtHePBWePLm7tw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bafb</p>\n<p>构建高性能Web站点.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/icEMlkxijkf\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13gYFTc0bRJvR87nY51slqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndfc</p>\n<p>解密搜索引擎技术实战Java精华版.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iX3Z8kxikne\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wjiwni7ABH2R1jUIfvrHUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：susc</p>\n<p>了不起的Nodejs将JavaScript进行到底.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iXFJkkxilyb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O8Aaw8iyWNwVrD6VN6mtQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xbbx</p>\n<p>零成本实现Web性能测试.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iUq4xkximsb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XS1Jy7fHc5koAkh9xbqcDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：varj</p>\n<p>码出高效：Java开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/i34i6kxirqj\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hlLIkAJYIkmeFZuUFkmrOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqxs</p>\n<p>深入分析JavaWeb技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iuhbakxitgb\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14QwWsW4jClVyL6SepaZrNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbqt</p>\n<p>使用Java.Web服务构建SOA.pdf&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://itdevtools.lanzous.com/iyx8mkxiuab\">不限速下载</a>✅&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BsDNPiQs6Lml_UkPP6aUNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：lof7</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><p>JavaScript基础教程（中文第八版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KrBmT24VTDJblH9pfGTzOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxer</p>\n<p>JavaScript框架高级编程应用Prototype、YUI、ExtJS、Dojo、MooTools.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dCyMSxlsdX_szCA05PB63A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfb</p>\n<p>JavaScript框架设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x226ttlJYfSYquDEojIRMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akbn</p>\n<p>JavaScript面向对象精要.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GXRA3uhy_-tgksrw1Sl9Pg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jvrm</p>\n<p>JavaScript权威指南（第六版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AhnItsQRwZN5OKH_o_amxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxuf</p>\n<p>JavaScript权威指南（第五版）中文版（上）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ya6dqxo2zKB-oOolJf_oZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vpmn</p>\n<p>JavaScript权威指南（第五版）中文版（下）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4ATUyl12uM7xL1xqUGtAg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdar</p>\n<p>JavaScript入门经典（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jmmwbpkUaEnn8TD4Kv0x_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wawc</p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><p>glibc内存管理ptmalloc源代码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zrCQ4sOaDKl17P8KfD6pxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnbu</p>\n<p>HotSpot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xpa-yfb221Kdq-FIwWbmug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aqee</p>\n<p>Java+JVM.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A93OKyY11xjyGu8Y4T4wwQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dwyb</p>\n<p>Java性能权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sXEQx5eXIhLAq_hi70_1YA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfan</p>\n<p>Java性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gBnhP28-YJjzojiRlKEakQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aapq</p>\n<p>Java虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vTwsR8WgRpq--yKoBzR40A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yabq</p>\n<p>Java虚拟机规范-JavaSE7.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RitXq-hZRH-tZiVK--NYtA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnab</p>\n<p>Java虚拟机规范-JavaSE8版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uOmGGM4SdWvtZsOlGIVIww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yadt</p>\n<p>Java虚拟机解释执行机制研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/146F4WskyY_6WmbBjhK_olQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hffn</p>\n<p>JVM.Spec.v9.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1crTDBQ48j8pBSmJ41eY7Ag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjpk</p>\n<p>JVM定制改进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CFcHX0HasDNgOBl7tRLRZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkj</p>\n<p>Twitter的JVM性能调优经验.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uWIvg9guDm4JZKnAhb0Gtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swpn</p>\n<p>揭秘Java虚拟机-JVM设计原理与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrNNvxFlqJsiNnONbRiXTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uprt</p>\n<p>垃圾回收的算法与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Iiwe_Aw2MwdqbufDzJtcBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynpk</p>\n<p>垃圾回收算法手册++自动内存管理的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iKLOyw9YS2CT_1qTcHN-LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcpg</p>\n<p>深入Java内存模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NOyDh5_zyeI_J1MGmeQfjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmkk</p>\n<p>深入Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lOU9AMAviJLzQ_bEt6zw5Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghds</p>\n<p>深入理解Java虚拟机：JVM高级特性与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1T0bTPTLwwOPXKXdEhKDKDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxe</p>\n<p>深入理解Java虚拟机：JVM高级特性与最佳实践（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UdIG3CvNYE4sT75YgUYong\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrng</p>\n<p>实战Java虚拟机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/151o-bzu51xsRNQwfDH-v0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxkn</p>\n<p>实战JAVA虚拟机JVM故障诊断与性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LxC19YKuOhbTaTk3oRUVOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfrp</p>\n<p>虚拟机系统与进程的通用平台.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n1g5gbqHqbnVKeScHKDIvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjxg</p>\n<p>自己动手写Java虚拟机（Java核心技术系列）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18tOPFGWfkHt8wHec6gHjuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdcw</p>\n<h2 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h2><p>Apache Kafka实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1F2gu3LgHSz7-mCu1grPE0A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjcw</p>\n<p>kafka-高性能揭秘及优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V-y3nnC2W43ICl4KtvUd0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbey</p>\n<p>Kafka并不难学！入门、进阶、商业实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SEWr4qFnK_Xo7TAWbrtBCw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tyyy</p>\n<p>Kafka技术内幕-图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ws1V7-zlfwlN412zLQuEtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbgr</p>\n<p>Kafka技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SMnb-k18Oe0tGfrCo9OeHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftsy</p>\n<p>Kafka权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WzjA7J2eSK-1AyJNJYfPjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prjv</p>\n<p>Kafka源码解析与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jnaMi49J-2ssZ2VI-0IOjA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eymk</p>\n<p>深入理解Kafka核心设计与实践原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sHmX9x4QrYEmo8CVDO05Og\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jubt</p>\n<p>图文详解Kafka源码设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fs_pLDYhO-X3Gw0VGX__GA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhjd</p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p>Linux C编程一站式学习(最新版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nSM92Y0ACgKCnW5c_MBOQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wchx</p>\n<p>LinuxC函数库参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10g6n3vUw3WjWHCleKCeO3A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edaw</p>\n<p>LinuxShell脚本攻略（中文版带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Y1Ur18yR7WhLADdf0X2YQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcnn</p>\n<p>Linux宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YtnnSKHEdHoDupKYHK694w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvbj</p>\n<p>Linux程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10lItD3ThyEvIcys7viEMqA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mwxb</p>\n<p>Linux初学者入门优秀教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i6xgfH_rbCWVQpbn0T5wag\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jmpr</p>\n<p>Linux防火墙（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fo3ZVIPIDTx66H6AXIDSLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tudk</p>\n<p>Linux命令详解词典].施威铭研究室..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1psZy9LInYtBYtRKwNVqo2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpqc</p>\n<p>Linux内核IO性能优化及块BIO处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NBSUxyHYkRD7gNrfcvuAKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hphr</p>\n<p>Linux内核设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sCG7F3X8pRuRrKf-rWL7bw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dyas</p>\n<p>Linux企业运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RH87jSJ-bM8zR7GRUCuL5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gffg</p>\n<p>Linux系统常用命令快速入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oXW-YdsQS9FWX7FE_-ngrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxmn</p>\n<p>Unix与Linux.Shell编程.PDF.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kV_srGnJaXKXbFsQnySR0w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfk</p>\n<p>鸟哥的Linux私房菜-基础篇-第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fQOp0ay4V6BrXxOyg-L5CQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnuy</p>\n<p>鸟哥的Linux私房菜-基础篇第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MRfO9rnOs4I9PFmL0yYdpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ptnk</p>\n<p>鸟哥的Linux私房菜-基础学习篇%28第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d_fU9jnwFOzWBM09zZzY1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgcm</p>\n<p>鸟哥的Linux私房菜-基础学习篇（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BO2mAcbpmWeHpMwk8zJ_tQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jesv</p>\n<p>鸟哥的Linux私房菜.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L2cDjyajadQLfnq8KEKvVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：syue</p>\n<p>鸟哥的LINUX私房菜_基础学习篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mFe83qmAJFxPpUitkHoHsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vhdp</p>\n<p>鸟哥的Linux私房菜：服务器架设篇（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1K4TM42FaxqvwI8Z40XronQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvpc</p>\n<p>鸟哥的Linux私房菜：服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gZqiZz4kXz0QLBlculqXZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ghbv</p>\n<p>鸟哥的Linux私房菜服务器架设篇（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lGXi89r_HYVKJmEaT4gn3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxjm</p>\n<p>鸟哥私房菜（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f5_hfVlNO1hksn_CO-cb4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byyb</p>\n<p>循序渐进Linux第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZK5-N-9aVPy9INC5XBDf1w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykch</p>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>Maven权威指南_中文清晰.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bdYjpFbdTgO1jdirwXUaKw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwqy</p>\n<p>Maven权威指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jCxc7DsQYI9sM9jB99DZ-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrhe</p>\n<p>Maven实战（完整带书签）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lfCCDoH1oMF950slGA5yNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dncc</p>\n<p>Maven应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1siK3mklE4FNgoN-DyA-sFQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cysv</p>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><p>50TipsandTricksforMongoDBDevelopers.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wDIEHzT8fyDQq_-nx-Vc_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcrm</p>\n<p>MongoDBTheDefinitiveGuide.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SgRaWvocG9J24OFD4ctZiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uruj</p>\n<p>MongoDB大数据处理权威指南-第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1viqo7Xf5u1RY_RrZxgoxvw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhdj</p>\n<p>mongodb分片教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XKCPsKYozxR2w1KUvGUdbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqsj</p>\n<p>MongoDB权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XFgtsaN2vh5XqhwNRpuH7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvkj</p>\n<p>MongoDB实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z81kDxzBUphuvmC-bOleZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ggmy</p>\n<p>MongoDB游记之轻松入门到进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pcBGRm__NQ0bWb5dJ7v9-Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrnr</p>\n<p>MongoDB运维实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1er045VTi4TRIVueLv4fZFQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quyw</p>\n<p>ScalingMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SsTNYOMU_WXrC8MVB2TKqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：byxj</p>\n<p>TheDefinitiveGuidetoMongoDB.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uuCMIGBDkPXsHiqEh4g7Tg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fafw</p>\n<p>大数据存储MongoDB实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FCRYw9GGSrKFZwAaBCK7lg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qnrp</p>\n<p>深入学习MongoDb.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19x0Yi3xyzohl6Akqr6YKUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkva</p>\n<h2 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h2><p>JavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f_o0B3_zvlHVaOL2AXbAQA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kpvv</p>\n<p>MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19SxKgiAEyf6p3c8Nn9gFWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ndvu</p>\n<p>MyBatis3用户指南中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AE0PgRl_89WoIuOR2yeOog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykkm</p>\n<p>MyBatis3中文用户指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j1TMakPzclyy4q6hJXoxNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rwqq</p>\n<p>MyBatis从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bgAr1YxXLUF--3gIzXvGGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykne</p>\n<p>MyBatis技术内幕.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11Bb7EqCMrOZk9qdZeT9Yqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rytk</p>\n<p>Spring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nFPpcI__63rusGRnaAPtIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxst</p>\n<p>Spring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fantirermH4IZ_Bg1q9R0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arxs</p>\n<p>深入浅出MyBatis技术原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AR7-WWcbSlfBbMPvAVKH3w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqaq</p>\n<p>一本小小的MyBatis源码分析书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-ci1QjI-Pgqr92J9sAWYcg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cejt</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL5.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P2rN3s0e3PC_U7WXXyozGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjvd</p>\n<p>MySQL5权威指南中文版（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dm7uzjGkoQZuN6uwb20HnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：edfs</p>\n<p>MySQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kOo5TpfRepC2YkHkALX-AQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yvmx</p>\n<p>MySQL高性能书籍_第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19kYPQ_Y-1QPWRPxtUrqVzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvkk</p>\n<p>MySQL管理之道，性能调优，高可用与监控（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q6ZeXnTTbsqZAk7hb1uxUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kwpb</p>\n<p>MySQL技术内幕.第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Edkesp8UWAvg3zsP7ASAVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bajp</p>\n<p>MySQL技术内幕：InnoDB存储引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Bzxj4jlK9WbyC5FmlEHaAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvnp</p>\n<p>MySQL技术内幕：InnoDB存储引擎（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19IgB4YxDaLWM4QyHPaPPhw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gtet</p>\n<p>MySQL技术内幕：SQL编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12o1A5-9YWVXlZ_8y9mnnsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tapk</p>\n<p>MySQL开发者SQL权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16WtukI0dylCyRe4mx9XZ2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nsvv</p>\n<p>MySQL权威指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uGow9RNUz5ZpzpOKcJHcqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qndv</p>\n<p>MySQL入门很简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Js1-s-YAPfTANBdEQVb7Tg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：huhm</p>\n<p>MySQL入门很简单－学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BXgczzido8DYWAw_5I0GUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nwgq</p>\n<p>MySQL数据库开发的三十六条规定-石展.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/183DOyuMxnPKTP9k_7mmpNQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfxf</p>\n<p>MySQL性能调优与架构设计–全册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xy-7uSydvbty3O3V9FDdrQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aket</p>\n<p>MySQL性能调优与架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1njPg4JsO0lRpzuHKR2CLlw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjxv</p>\n<p>Mysql性能优化教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LvCrKzNTHmjfK_nUMakXhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etch</p>\n<p>MySQL运维内参：MySQL、Galera、Inception核心原理与最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KvaTodjLvF0Gn0eqt2DWoQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtmy</p>\n<p>MySQL最佳优化完美攻略.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ul9g5e44BABbScNeWM50wA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chts</p>\n<p>高可用MySQL_构建健壮的数据中心.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LTcu5PFGvqSK15wsa44gbQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：envf</p>\n<p>高性能MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/101-v3r_-PHZtsXbJcDHAxA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtwy</p>\n<p>高性能MySQL（第二版）中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1Z0tgOxm1TWWIEyTt-TNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akcb</p>\n<p>高性能MySQL（第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mzhuEvZ0n7Kwb6y4oqlUfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwns</p>\n<p>高性能MySQL第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YuxX2mrJmRKKRqdD0SIU4A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjps</p>\n<p>深入浅出MySQL++数据库开发、优化与管理维护（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-691pY2chOJp8pk6cZ2uTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wast</p>\n<p>深入浅出MySQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f2043vmGRx_dusNiANPNPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rjhc</p>\n<p>深入浅出MySQL数据库开发优化与管理维护.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PgWkcukmRUi1qXxD19381g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：absj</p>\n<h2 id=\"Netty\"><a href=\"#Netty\" class=\"headerlink\" title=\"Netty\"></a>Netty</h2><p>Netty5.0架构剖析和源码解读.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DwH83VFmXv7Dtl4CaNUMGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqwx</p>\n<p>NettyinAction第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lehtQaEjHXGAJ19W8Wr7Ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecpc</p>\n<p>Netty权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1se8QSu4Fuypt1aBDO_U0ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rbvj</p>\n<p>Netty实战（精髓）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12dcJfI17WxLBtk3lhuU5Gw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwxe</p>\n<p>Netty实战（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TVs1rydRUcrru8N030L2qg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wasw</p>\n<p>开源电子书：Netty4开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ft4211OqluHHlZazaqf0Dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpfw</p>\n<p>开源电子书：Netty手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qe6Yjw71LpHmA0PAVIGXbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mkpj</p>\n<p>Netty 入门与实战：仿写微信 IM 即时通讯系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h8E7ozV2kuGi1Eb-bsuVVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhct</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>Nginx高性能Web服务器详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1amY8cgIv7Zxci8YFupIxCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjwk</p>\n<p>Nginx开发从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lfiRc9A6xfE5NiZu6bPTQA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnja</p>\n<p>精通Nginx第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HPKEC-RBXQ0jX01jn8Rh_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgxu</p>\n<p>决战Nginx技术卷：高性能Web服务器部署与运维.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvIYX-QesMmay96QfUlNCA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccdy</p>\n<p>开源电子书：Nginx开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yEHGKaIIWmU0-yHGEx2Vkg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：guaa</p>\n<p>深入理解Nginx：模块开发与架构解析（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A01qpz8rTz7Gt4C0SQS8Cw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：umpm</p>\n<p>深入剖析Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12cb86rd92hMjsiean_Fzug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：chpu</p>\n<p>实战Nginx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VPXRFg_9TyChY18lwDXnyA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dexy</p>\n<p>实战Nginx：取代Apache的高性能Web服务器.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IVpgtls7W8x5IC0PWJ26IQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkej</p>\n<p>学习NginxHTTPServer中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12oMND71vtg94ZCxOhk1vVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjhj</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>Head_First_Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VFiGTiEH1UZ-O1Q7ESxWMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxjd</p>\n<p>Intermediate_Python中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JKffHxAIWXf9AT8uzJhePA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxhk</p>\n<p>NumPy攻略-Python科学计算与数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12sy-W34olu2FxJhuF-QO7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：urga</p>\n<p>Python100经典练习题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qEG1lr_-q4Sdjs0_GC_NRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvxx</p>\n<p>Python3.5从零开始学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fb_hFaz3j5DGN58IkrnS6w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgdk</p>\n<p>Python3程序开发指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NMNOw8CoRuYayX6pAlLAXg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xfgn</p>\n<p>Python3高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QUanOjYMbvelhTJ0c-WfDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：stdr</p>\n<p>Python3萌新入门笔记及练习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Y1R7C1Vbe9MyqpEatCoSaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tjrm</p>\n<p>Python3网络爬虫数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DonjcwYxRwtK2-UlWK102g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjej</p>\n<p>PythonbyLiao.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lX2Ww1oH1rlNRsNiSUyRKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmkt</p>\n<p>PythonCookbook（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tCuQxQkdz3TWI6By6o8lhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ypqq</p>\n<p>PythonQtGUI快速编程PYQT编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qyY6q48Uaf5q18Hy-KlmJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rptg</p>\n<p>PythonWeb开发：测试驱动方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OwkXe4OiEZqnGxPiTSb-ow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgjf</p>\n<p>PythonWeb开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WN4hg9V1Gb8678ni6ZHb8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqad</p>\n<p>Python编程：从入门到实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rxHSlRYDeRzER86Iat3bBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qpew</p>\n<p>Python编程初学者指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QigptG5G3bUT3LBR5bGh4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gfba</p>\n<p>Python编程导论第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DIW_V74AqzmbkSHqFM3VgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rymv</p>\n<p>Python编程快速上手-让繁琐工作自动化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cXMjJxqrgvE7mRfeo_YOqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfcg</p>\n<p>Python编程入门经典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bnwDSA2FtSOKU3OfSA4oHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvur</p>\n<p>Python编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Mxu0wcIplfr50h3uaFgINQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfbk</p>\n<p>Python标准库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14Sb6PDlIfE9Q6j-NwWpfSQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vyfw</p>\n<p>Python参考手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YnYbkhEfeyrFqK0bOHkx-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cfmd</p>\n<p>Python程序员指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UgzN9KU0ohONquoSp0fUQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：axgj</p>\n<p>Python地理空间分析指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YgFdxCGCD88mDbv-N5UPsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ibeq</p>\n<p>Python高级编程（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qlPvBIfqav2NOaXdRGyQEQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbpf</p>\n<p>Python高级编程（清华）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-2WqO3Vr6KIGPhhJ3VuZxg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtgk</p>\n<p>Python高性能编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AfkFyRnsHeCcrdnzTBmDbw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxee</p>\n<p>Python核心编程第三版中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1npiohmcnxEfOBYDz8xgl7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：djfv</p>\n<p>Python核心编程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q__Bab9vh6rrQTNcXs89OA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：evtr</p>\n<p>Python灰帽子-黑客与逆向工程师的Python编程之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VauUNGVKpDVcjP0nwHXxWg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhcc</p>\n<p>Python机器学习基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u7mQNMYqGHGa0z-JFpZzXw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fgvu</p>\n<p>Python机器学习及实践－从零开始通往KAGGLE竞赛之路.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QL4Q-ZRSEN8Nw0FiGjQYNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apjt</p>\n<p>Python机器学习预测分析核心算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pl9gvj4Aa3UvUWH606gghA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btgd</p>\n<p>Python基础教程（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P1CTx-pZVqmnjhgmabTtYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxtx</p>\n<p>Python技术参考大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16AorSuzzprwITIH5pQnLDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryv</p>\n<p>Python简明教程中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RWVAaXsTN8UZVT93qYGAow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qqfd</p>\n<p>Python金融大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hPZGpgcJ4mrD-hPUHi6v-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkde</p>\n<p>Python金融实战###.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT6jWL6evmLno-DqxOwztQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdtd</p>\n<p>Python进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MgdTNPvZmL4wCO30fD1PYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpge</p>\n<p>Python开发技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cBUeX7g9FO-YmQfm4tjqew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fsen</p>\n<p>Python开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSoagU8uWVrd06PEV3M8cg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：akms</p>\n<p>Python科学计算.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_QM1-pKyOX6igigD68dubA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxnf</p>\n<p>Python科学计算张若愚.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BKh190iPHJ6YuV8dF4u-SA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jqkk</p>\n<p>Python快速入门.（英文版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iueknRUbscCwbuVJqnVAYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpmf</p>\n<p>Python面向对象编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VDoUBcjeJE3E4PvpHTDnkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mfqt</p>\n<p>Python爬虫开发与项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19HvOnwlddYVTu1J_A3Ar_w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bppw</p>\n<p>Python入门经典-图灵图书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ADZTfo8d-BhWRVMTuc9vbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnys</p>\n<p>Python入门经典_以解决计算问题为导向的Python编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AtmPablSgCYCEGlzVt0nsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qwcc</p>\n<p>Python实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zuj5_Pf6hlBWRDcttgs1Hw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dmkk</p>\n<p>Python数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oV8MkV9MeIEJd5vvKykSTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nuyd</p>\n<p>Python数据分析基础教程：NumPy学习指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n_3DdmFSJIr2hvrQVdYR_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtfw</p>\n<p>Python数据分析实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1etCRbwO9pnh92ZfDmk_Thw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpl0</p>\n<p>Python数据科学手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y0YDhW1j2c-7y3JYa5XcRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdpm</p>\n<p>Python数据可视化编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1t1M1cPbVc3Q4GY8KJzu3zQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wbbj</p>\n<p>Python网络编程基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LiKopPZbm-cl3EZSsQNvaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qxmc</p>\n<p>Python网络数据采集.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_WYX4OuYfLZejHffPyxElw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avqp</p>\n<p>Python文本处理指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_2WB8aYQIsN_N_ejDHkqng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xsbp</p>\n<p>Python学习手册（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/112mWtJksF52XuuTbhAZDDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bbkb</p>\n<p>Python学习手册（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yf-Kx3QUi4FxRA4EeMSKgg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newx</p>\n<p>Python语言及其应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M7vxF3rWfBkaEkMx1e1jfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jper</p>\n<p>Python语言入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ag-d9IZhcJJlq0EtjCGbRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjvg</p>\n<p>Python源码剖析-深度探索动态语言核心技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KOpCn8WpfD-u1TFDo2S1vQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrdk</p>\n<p>Selenium2自动化测试实战基于Python语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JHkKIFuYyOneIRIuZ5CWng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sned</p>\n<p>贝叶斯思维统计建模的PYTHON学习法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jgwOa7pAxWizS74wZgPsaA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvh</p>\n<p>笨办法学Python（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1j3X9eHXyyiEx6Qt_5NG-hA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrwu</p>\n<p>编程小白的第一本Python入门书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1779Scda492B6cV_JDtYVKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gawm</p>\n<p>编写高质量代码改善Python程序的91个建议.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RbeRjcOyoED4XssfehWCrQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fdqf</p>\n<p>常用数据挖掘算法总结及Python实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17bCvudE58piFmzXuqPxyLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：crhc</p>\n<p>从Excel到Python数据分析进阶指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wGm22yDbNZb3-fMxg9U1xw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sjej</p>\n<p>从Python开始学编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xbTixG5vp46jF978gzhjSA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jpcd</p>\n<p>基于Python实现的微信好友数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lUNyfgLjJQ7a3wYTJohSUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkxh</p>\n<p>简明Python教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yAKe7FKdjykrPw1VCf0dyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjpe</p>\n<p>精通Python爬虫框架Scrapy.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SsXFFATYsFuGpOIB4Wu0tA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：agdt</p>\n<p>精通Python设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15mPbGSDAge1rerPKlPNzOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cstd</p>\n<p>可爱的Python脚本语言入门精品文章.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xa_FLvZY1HALR1DCQxgXkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcss</p>\n<p>利用Python进行数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_UV9ksV1nB-74Y6jUPGgBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqcg</p>\n<p>量化投资以Python为工具.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UY9A2psHqVvwBLFctFGhfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hqng</p>\n<p>流畅的Python.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tMriduk7AKgjhbso8PoYkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhra</p>\n<p>深度学习入门：基于Python的理论与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wHkyJ49Jd0-tWN2HnyseAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uptu</p>\n<p>深入Python3中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Om4fYBrWWQRsdubmQZOnQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fscr</p>\n<p>数据结构与算法-Python语言描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_26rHItQjriX-uoAnfDDIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srqh</p>\n<p>网络爬虫－Python和数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MbwZbJ4iCa3d--QGY_gvvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yngd</p>\n<p>用Python进行自然语言处理（中文翻译NLTK）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15g8eTQEUTNC4XfGFAXlqSg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yunh</p>\n<p>用Python写网络爬虫.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yTWnUNcViJoXTPH07sRjyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nhas</p>\n<p>征服Python语言基础与典型应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11dPvt3a-TK_DZafOLWHXyw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tfpc</p>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>LearningRabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11OLPEtgvamlehbM-kaJPCQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjef</p>\n<p>Manning.RabbitMQ.in.Depth.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/141oa5XeaJoYbImQ1J1AVpg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmvx</p>\n<p>RabbitMQinAction.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Z-PX_oQvCrm8ZkfqZRFsA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kqnj</p>\n<p>RabbitMQ安装与使用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mCd1AXHWZ_SNoLe05y53dw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ryge</p>\n<p>RabbitMQ实战+高效部署分布式消息队列.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AW-9Ld_h0oNBo8MBNWmlIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnvq</p>\n<p>RabbitMQ实战指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16KUEfZ7E0LQ9EtWVZZoq1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hvfa</p>\n<p>RabbitMQ学习整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dqd2kKDrRyF8BFfhIM3_3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：quhr</p>\n<p>RabbitMQ研究v1.1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tZtvd8venJ-OH2dgpz3MyQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvhh</p>\n<p>RocketMQ实战与原理解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YFSlSY9fssmzGNl4pAGTjA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxhc</p>\n<p>深入RabbitMQ.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u1zZr6sYHgCk_ombXpwgVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jwns</p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><p>Redis4.xCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT5vxTrQ6GkplG7oC_njig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyje</p>\n<p>Redis开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HrA_VRs6-eTS1eV1a3QX7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qehg</p>\n<p>Redis开发运维实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LV8ltQSf9eZIxITQUftoDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txvx</p>\n<p>Redis开发运维指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y5toFOh6L78MBmm8NgsoGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kegb</p>\n<p>Redis命令参考.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QE2WAnsasYtoVLzDcyvd5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：haps</p>\n<p>redis命令参考手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VZOS8sNEt1VrdhGJWUsH6Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pxpf</p>\n<p>Redis入门手册（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TLR49uLo-QKh6rkDmK2UIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fnmw</p>\n<p>Redis入门指南+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13ouDpjbckPseqR9unl8Qlg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwrx</p>\n<p>Redis入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KHQ1IRHFwM7QR7MQVDLIQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：setg</p>\n<p>Redis入门指南第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VaYgcB11STHoRbY0v5Cbjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wyry</p>\n<p>Redis设计与实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1x485r6hUdA6ReGS_Qs-8ug\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgja</p>\n<p>Redis设计与实现（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iBfqH71XF21v7UC8hp4gVA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvhp</p>\n<p>Redis深度历险：核心原理和应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dv-L9npNpGst2NB9QnF-9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmjs</p>\n<p>Redis实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TC2fhntA5c3-AGQeLxWN8Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bayn</p>\n<p>Redis实战JosiahL.Carlson.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JU2GEnIx4Z3dY_GjmpZ_ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcea</p>\n<p>Redis实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fJklWMC9wxvbS4WJSYLAfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sdkm</p>\n<p>Redis小白入门指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LQG-Tens7eeKk2gTGlacQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dqmt</p>\n<p>Redis学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NkE18t6odi2HXv9Oo52LOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbc</p>\n<p>左手MongoDB，右手Redis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mqaPNHWzR2mAQOR9MtQYYA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：usvk</p>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala\"></a>Scala</h2><p>Scala伴生对象.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AjvtMiN_yNmkjHBWwIz1wA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtbr</p>\n<p>Scala编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15pq_oc-8ekzfPFfri415hQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swak</p>\n<p>Scala编程实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pyEdgq_T0VBoguk4zSIDHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wudx</p>\n<p>Scala编程思想-原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1niHLNXLzzskDEGNprsZSyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqbb</p>\n<p>Scala并发编程程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mj_9nxhpaUr9i3Do8WhyNg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgpa</p>\n<p>Scala程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hAYn_whVc1uJ2wyk3qdlzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kmwv</p>\n<p>Scala基础语法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RDSS-Eo0SPgW_uyfKwBCCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wqet</p>\n<p>Scala集合.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AER6yVefvsjBdx0qfX4Afg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gyyf</p>\n<p>Scala学习手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1XePbusG3vktRYwoQyM6eqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhdt</p>\n<p>Scala语言规范.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eE7s7mSKmEbyE0UEhEKTtQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhwu</p>\n<p>快学Scala.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MubjIXRpV00O4iuk8BHN2w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfdv</p>\n<h2 id=\"Solr\"><a href=\"#Solr\" class=\"headerlink\" title=\"Solr\"></a>Solr</h2><p>ApacheSolrEssentials.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Yf5ACO-f2CwWllCB90Va6Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngks</p>\n<p>ApacheSolr参考指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PveHHBLEa0UxlUM38_h9ng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qvtx</p>\n<p>cookbooksolr4.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1G0AKrEIwS9sPhnXgSmF-1w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucyq</p>\n<p>Java搜索服务Solr操作指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SHLK-B5km75SvV8Vlhv9XA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frjr</p>\n<p>Solr+In+Action.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1n2Ru2eEVAJhep6s9UfHFog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhpj</p>\n<p>SolrJ教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AF7OMIaxKH24WBSn0Sz0MA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ttnn</p>\n<p>Solr的应用教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i6P1YWKu2P1hdOKxhWiV4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ydqr</p>\n<p>Solr权威指南上卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZLt1IPqpib1shVCwXH_wuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdeh</p>\n<p>Solr权威指南下卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1M5IyLBOevsCppdmcKiPr0A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bqbv</p>\n<p>Solr实战中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xAOp9m5nTedRTWQoWN0CBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqbm</p>\n<p>搜索引擎核心技术与实现（基于Lucene和Solr）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14dPfzeUfz_VOiGIAyUsAWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mevj</p>\n<p>用Solr构建垂直搜索引擎.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fztu32bV-8gzlLA63YOtDg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utgg</p>\n<h2 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h2><p>LearningSpark.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a3pZe9TldXUHp_Cc0e_hMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpbb</p>\n<p>SparkContext.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BmslNv9yFOOHAm1v0zNU9g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahwk</p>\n<p>SparkCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SbU88xeawgY43To6x0lqIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjnw</p>\n<p>spark编程指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oBgXPSls4C2teTD4l1KljA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kryq</p>\n<p>Spark初识.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PSgvOmfNshU_MLtyI09WVQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecua</p>\n<p>Spark大数据处理：技术应用与性能优化（全）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rX0IMFa9mGOhkalQ3DBGAQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ffyf</p>\n<p>Spark大数据分析实战（大数据技术丛书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NgQ9bG27C0Y10HPe_s5pxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sccm</p>\n<p>Spark高级数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrcXrbyKGFdXJaK3EPY3KQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mntr</p>\n<p>Spark机器学习-NickPentreath.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dnYnxh0Wpej4O78lZmBFdA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uubr</p>\n<p>Spark机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f1cgmkbyfAmXnQzp3RfXXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xkwp</p>\n<p>Spark快速大数据分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18rEWffYn03R9MMPXZyXt4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rqdp</p>\n<p>Spark快速数据处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/125J1v1mT5sjpho1RALszGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhvq</p>\n<p>Spark内核.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GrAjbQwrIZoGeqiuWZgXWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftvj</p>\n<p>Spark之SQL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UmzDoY2i4Rv6RP_x2a5Dyg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yamy</p>\n<p>Spark总结.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oS-ORk8JmuyD2Rvhlswngw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：htvg</p>\n<p>大数据Spark企业级实战版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1E5t7vvCg-lL4pcHPBuQvOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vsye</p>\n<p>深入理解Spark：核心思想与源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ui-OYpKb0PrZfKS-SR5cUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wvbc</p>\n<p>数据算法：Hadoop、Spark大数据处理技巧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QjxarlwM3jR53fBd8h3vJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：scym</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>JavaEE框架技术SpringMVC+Spring+MyBatis.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13t5wcfnzzSI8MaSoDs-f6A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuqh</p>\n<p>JavaEE设计模式：Spring企业级开发最佳实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nwMCWnj6AbBVTjzv27Spsg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rber</p>\n<p>Spring+MVC+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mA9IBQAXMFHSuxMYb0dwOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuau</p>\n<p>Spring+MyBatis企业应用实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10cNgpDROfBl8Y9YaiYOKXQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uugy</p>\n<p>Spring+Security3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bSbTHCM5sdyK4vzcmsRxsw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cecb</p>\n<p>Spring.in.Action_4th.Edition-Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JeGK6-fJM5JA2ob0LGEp5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbna</p>\n<p>Spring3.0就这么简单.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vcGkxbdbPeJr8ZFpbasiUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgfh</p>\n<p>SpringBatch批处理框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14J6GWb8yloJobdjTn6Yo8A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhaq</p>\n<p>SpringDataJPA从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mb60lfExZerVL74IMMcB-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rhfd</p>\n<p>SpringData实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YFgOkiOdgpI-YxS2snxDVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ymgf</p>\n<p>Springframeworkreference.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jeZ1XWcSTTLqKovtq07BLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gghe</p>\n<p>Springinaction中文版（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19hVshSMI9dKPbxj8mgufSg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nvpv</p>\n<p>SpringMvc教学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yBGQhQrMuDD2yW2Yo1Kurg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bxym</p>\n<p>Spring技术内幕：深入解析Spring架构与设计原理-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14O9Be78yllAL42XgwyD6Xw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvwg</p>\n<p>Spring揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12lJjIJQBpUFJEe6SHReEFA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bmtb</p>\n<p>Spring揭秘（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y3ra1sLoZgRMLw5NwPnkfQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqqa</p>\n<p>Spring实战（第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ym5f1CjAaYTp2UC7q6PSLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtsa</p>\n<p>Spring实战（第三版）.（Spring.in.Action.3rd.Edition）.Craig.Walls.文字版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JWMfgnsNN3CiN4kKnhAedQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xuaq</p>\n<p>Spring实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AxldKhH5nE457d_z7xQ0fw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uwey</p>\n<p>Spring微服务.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CNk_cfmr2NkT_wLdGB_I9g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dycv</p>\n<p>Spring微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MfsYnFhcS8prjR0MgidsFA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wtqy</p>\n<p>Spring源码深度解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yUdNGv7JwkimJ-D8ELk4_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnam</p>\n<p>Spring源码深度解析[郝佳编著]sample.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1N55_R0jemO6OYrKDeTMtvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：caha</p>\n<p>Spring中文开发手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1trSR0TnHIwXlwxhHaT1BOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utnd</p>\n<p>精通Spring+4.x++企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sboKbsdGcoJ_9C-ghJ-EzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uyhq</p>\n<p>精通Spring4.X企业应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oGAa4XQHyqZwn5fEmDLyLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qjms</p>\n<p>精通SpringMVC4.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UPTbM8hzQXmuzHRzYnvavA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svmc</p>\n<p>精通Spring（清晰书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TjoTtbfCUpY9vjkEXfj3-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdb</p>\n<p>开源电子书：SpringMVC开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nvqA3ZUsmt4nHlNo6KtFnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jbwt</p>\n<p>看透SpringMVC源代码分析与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Axx-brgEQPAyceeduOC4EA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qgbs</p>\n<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><p>JavaEE开发的颠覆者SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18_ChlhYC5WPR0z2em0XEJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skhv</p>\n<p>SpringBoot2参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L9ybprmzbVKVO7dM9N_dZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wcqd</p>\n<p>SpringBoot2精髓.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17z6b52RndqkYMy3XogSd8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmyr</p>\n<p>SpringBootCookbook.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r4_0rJJoAcOS8BHLlMsmvw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjq</p>\n<p>SpringBootreference-guide-zh.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ueA9qfWcEgmIo-KFuY4WYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xvck</p>\n<p>SpringBoot揭秘：快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1I3kIasza2KLVGalih1jueA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wp25</p>\n<p>SpringBoot揭秘快速构建微服务体系.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YYCf7Nt4fIWshEDqOOHCxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yjfp</p>\n<p>SpringBoot企业级应用开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10oNwJpuoxIIeLJo_1L--WQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytyn</p>\n<p>SpringBoot实战,丁雪丰（译者）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kH2XcrxHu9blC-VpWIOT6g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：erre</p>\n<p>SpringBoot实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yLfvcBg6kialAeCK8UtA3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mcxf</p>\n<p>SpringBoot实战（第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bJXfMZbKc7BRW4Os_e0ZQw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：iqh5</p>\n<p>从零开始学SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wvveBEUlFd39oIE13CeMjg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nffk</p>\n<p>开源电子书：SpringBoot开发手册文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zK-xruUmxZcMl_PBu537eg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tnca</p>\n<p>深入浅出SpringBoot2.x.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a0KXvVa0DxgijdD2iFi3nA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cvrv</p>\n<p>深入实践SpringBoot.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1o28NYp6qS0GwErBZkQQEHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fhce</p>\n<p>微服务架构基础SpringBoot+SpringCloud+Docker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DKC_sCenraRpiSrWUiTrXw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrac</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qSMW_4LOLB5u3wggmpNgSQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkws</p>\n<p>一步一步学SpringBoot2微服务项目实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m0hb9sIdkp3L_uvQEVof4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etuc</p>\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><p>SpringCloudDalston中文文档+参考手册+中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17OOwAEwU9m1xH9peLYwNuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gepu</p>\n<p>SpringCloudFinchley.RELEASE参考手册中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UYPHxpKS4ApQ5HPIjDg14A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbcb</p>\n<p>SpringCloud_Data_Flow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zg2AZwiLBCsUkBHEpv-_zQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gqsb</p>\n<p>SpringCloud微服务架构进阶.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CvIBWtGQkM30gb6vIuB_TA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hrpg</p>\n<p>SpringCloud微服务架构开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hb5Ha9Df7DGhgysizIKG1A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gaje</p>\n<p>SpringCloud微服务实战-翟永超-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jzzH6aZMuplJn2f55dIreg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：svry</p>\n<p>SpringCloud微服务实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17fBvrg0dS3jShZCtVextKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：apkf</p>\n<p>SpringCloud与Docker高并发微服务架构设计实施.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RZNBY5GtJEUWnSvUNOfl2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytxu</p>\n<p>SpringCloud与Docker微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tVqVWKNM2aAxM-CfDqL6bw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eygt</p>\n<p>SpringCloud中文文档.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AsaM1V-xAWB1N1HE0ygf1Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjde</p>\n<p>疯狂SpringCloud微服务架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17m-C1i1m4UZQ1fBU_7AKjQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：m75a</p>\n<p>深入理解SpringCloud与微服务构建-第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UvDP10G8oFquvLkkou9vKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bpaf</p>\n<p>深入理解SpringCloud与微服务构建.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dvcYUenti_PGA3IFDjDPog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gpvu</p>\n<p>微服务架构实战基于SpringBootSpringCloudDocker.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SJH1l-B_NS0SvrSn9MvCcQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pyde</p>\n<p>重新定义SpringCloud实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1toi6LIOPhm7uIcBshhBtJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gcvr</p>\n<h2 id=\"TCPIP\"><a href=\"#TCPIP\" class=\"headerlink\" title=\"TCPIP\"></a>TCPIP</h2><p>HTTP权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V-E7qA1chayHptjMqWD4jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfxn</p>\n<p>TCPIP网络编程技术基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1A0tNLreWUnfnC0OZNRzYzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egcj</p>\n<p>TCPIP详解卷1.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18-1DGhzaiIGFCqnrDwuRcw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhqk</p>\n<p>TCPIP详解卷2.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TxZ6eXOKXMLtuwUQ11b-ZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hckb</p>\n<p>TCPIP详解卷3.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1U-Bu8UCYxbo82T9WPIkILQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbbs</p>\n<p>图解HTTP.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iBy_vgZybISzYQ-pcHGXlQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uybd</p>\n<p>图解TCPIP（第五版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4WusvoRv5JUT5N136KbPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eaeg</p>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><p>HowTomcatWorks中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bUzW18tucUfnpZplko1QuA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqpn</p>\n<p>Java+Web开发与实战–Eclipse+Tomcat+Servlet+JSP整合应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kIkW5Dy4MG19TST7MWsBlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnje</p>\n<p>Tomcat架构解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1e_gKL2PnAratdONt3ktbvQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dtph</p>\n<p>Tomcat内核设计剖析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R1zlCwMWNOeuNHTmvbw00g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aycy</p>\n<p>Tomcat权威指南（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvlZIh42lE9jt2oZdYntDw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bcpx</p>\n<p>Tomcat源码研究.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PR52YaEr_IISdx0VAXVoTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：teru</p>\n<p>基于Tomcat5.0和_Axis2开发Web_Service应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zFz490uTpZ5XfpVV9m3UVw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhkw</p>\n<p>深入剖析Tomcat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bIQQtU5IDwgqMufy6qRtRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkmw</p>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h2><p>Netty_Redis_Zookeeper高并发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HglGmsYXMxLn5vme3-qtdQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfje</p>\n<p>Zookeeper_3.3.5源码分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xIWKqaK8QQSjRd0qzMqwVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdjy</p>\n<p>ZooKeeper分布式过程协同技术详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V0yMLS7N_zl5FBgOLRq67w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwqs</p>\n<p>ZooKeeper原理与实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1T1I8mrhHn16-4MZGi_e8LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdv</p>\n<p>从Paxos到Zookeeper分布式一致性原理与实践（书签版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hIQ0y498zyjOPsK09-8wEw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xamx</p>\n<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>Java并发编程的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12noqXaPB5jQqf-dZq_mVRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vvqk</p>\n<p>Java并发编程核心方法与框架,高洪岩著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AbDG2WWDfEZDNPsmmc3cpA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krkx</p>\n<p>Java并发编程实践（中文）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Fp2XewwqOPQ4DDS0CP26Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udhx</p>\n<p>Java并发编程实战手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Z31bV_2pKLb8QYGeqIaYTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pygh</p>\n<p>Java并发编程学习笔记.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DiWDJysVBMcC3BU2-77E2Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vmat</p>\n<p>Java程序性能优化让你的Java程序更快、更稳定.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Zu7PDffnvK-jQJ-2pTS_xg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dysx</p>\n<p>Java多线程编程核心技术-迷你书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/194HtZ2V0Fo2qPjNKmCo3ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cwnt</p>\n<p>Java多线程编程核心技术_.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IWYc0eB7T6cB1IMbW4bb9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxqn</p>\n<p>Java多线程编程深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jiOK9QuIwkLkR53Qu8SEbQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qsrq</p>\n<p>Java线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BhqzszXZMCvxPNyUO0l6OQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grjv</p>\n<p>Java性能优化权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YsLDmlDmpf2D1ID1K0uCRA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nrcr</p>\n<p>UNIX网络编程卷1(第3版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_tLFKEMmZeCbHEttWn-9hQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fyhq</p>\n<p>UNIX网络编程卷1(第3版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cNyPJY6Pgf1erI5tPqwGkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjph</p>\n<p>UNIX网络编程卷2(第2版_英文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16iP-wOr-97AAnmhkfTN8_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wujv</p>\n<p>UNIX网络编程卷2(第2版_中文版).pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12TQGM2WSWTCO6_YmuEhj-A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvme</p>\n<p>高并发环境下的数据产品架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14P_iYOF9iTNv4swqv9H3tA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ngnp</p>\n<p>七周七并发模型.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NQlbnSS9aL5cjpVWhqzFAA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hhvn</p>\n<p>深入浅出 Java 多线程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wLJPyMZK01aQQj4xE6VsBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvec</p>\n<p>实战Java高并发程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O9ITt7hdt5i1sDSLIeTFUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ajhj</p>\n<p>搜索引擎优化魔法书+SEO+Magic+Book.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ulpf4W7o-MM7kLSk_3jopg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dejw</p>\n<h2 id=\"大数据类\"><a href=\"#大数据类\" class=\"headerlink\" title=\"大数据类\"></a>大数据类</h2><p>Druid实时大数据分析原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/143Fl3BExT295-apzDYERmQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvwt</p>\n<p>白话大数据与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H3UPxGOLyboxe-WT8rRxiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfsk</p>\n<p>百度2015大数据云计算研发笔试卷.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ANm9rUkfPaLE2v30cWfdXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjan</p>\n<p>大话数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ExZMQaZVhcwgbGOcjgD9kA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：udnq</p>\n<p>大数据：互联网大规模数据挖掘与分布式处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UdsXXk-o1Ay1w1HM46l5Uw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ytah</p>\n<p>大数据处理hive深入详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/14ohVpdzzq-kybnX_AQAKqw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cchf</p>\n<p>大数据时代：生活、工作与思维的大变革》.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qheslcB63Wl1RgyroXXU-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fmhd</p>\n<p>大数据之路：阿里巴巴大数据实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yB0FYU0selFFaW9hHqUBeA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：utjg</p>\n<p>分布式文件系统HDFS，大数据存储实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1V_e-unVW9enh39FX8F60kQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gvvf</p>\n<p>傅强-当当在大数据挖掘分析与管理—个性化精准营销方面的探索.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mZP6vdBzErKVVmIY6VFz4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgac</p>\n<p>用户网络行为画像大数据中的用户网络行为画像分析与内容推荐应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NomTFjPQGsBqubmmNqWhIA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdsy</p>\n<p>云计算大数据10.9日课腾讯邮箱垃圾邮箱解密-机器学习之贝叶斯分类.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EEdMdCYi6f-pdz_w57IaWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cadp</p>\n<p>云计算和大数据时代网络技术揭秘.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1q9iVEL2eHolQPrGbq2yYjw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfeu</p>\n<p>自己动手做大数据系统.张魁（带书签文字版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oef-psBj1qyYh3A7b5Y2lQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xugy</p>\n<h2 id=\"计算机类\"><a href=\"#计算机类\" class=\"headerlink\" title=\"计算机类\"></a>计算机类</h2><p>编码：隐匿在计算机软硬件背后的语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ub9V4Kyo-Uqk8_nGJlFXhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wxsc</p>\n<p>程序是怎样跑起来的.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FvoZx3Izkc8-4PrlS1qrAQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qtdf</p>\n<p>程序员的数学3+线性代数.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OTxVO8d_xx08Fy86s6IZmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ynfv</p>\n<p>计算机操作系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AHemuAa0ylbcaOrAqXNkdQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uudw</p>\n<p>计算机操作系统（第3版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i3aCX4UPEWRmbaPN1j_cpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdpc</p>\n<p>计算机系统要素：从零开始构建现代计算机.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-rZX-unw9HhH7Z-vqosJJg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vary</p>\n<p>计算机组成：结构化方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YT8u3GT5jdmpWSMc3tSAoA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：avgg</p>\n<p>计算机组成及汇编语言原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Me5ih2DjRku7m_32bbvvUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkme</p>\n<p>计算机组成与嵌入式系统原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sGkzfLXCIfZHoAatt4dApA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aknv</p>\n<p>计算机组成与设计硬件软件接口原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yVvP4VmAKcVUgxjOwEjy-g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyxu</p>\n<p>计算机组成与体系结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12wuTAlW0Wx0eZ-FGHvje5w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qcvk</p>\n<p>计算机组成与体系结构：性能设计第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19MY0qTxeJTTlu2cD7TtOTw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mjqd</p>\n<p>计算机组成原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qKi0pi85y4DhJ3tiG4I3HA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkdx</p>\n<p>计算理论导引原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bUKiyTvLBwn2-UuZJ0-FcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wpqp</p>\n<p>深入理解计算机系统（原书第三版3）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16hvccmhx4k6IMGcE89_1KA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xyyu</p>\n<p>实时系统与编程语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oqAaL8_vHDgOychXpKXdPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sbuy</p>\n<p>网络科学原理与应用.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Ywhevg1Yryj9jWI8kGOnKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hnty</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><p>Microsoft.NET.框架程序设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kQrL65G9MvFJHVWTYCIF4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgtb</p>\n<p>阿里双11系统管控调度架构与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SPIZK_zzFobxhHmTSBDTGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：acmb</p>\n<p>程序员必读之软件架构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WSIqyXJ9hxZTrucSXbzn7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ysdp</p>\n<p>大规模分布式存储系统：原理解析与架构实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lSqIq8U6gyFDP0uVpqbLTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dckf</p>\n<p>大规模分布式系统架构与设计实战..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VzZ7rPaTYt6CXCirDrdJ3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：embe</p>\n<p>大数据架构师指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m_fOWgcxs1KB0g6ZSQkcrw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vqgx</p>\n<p>大数据架构详解：从数据获取到深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BOxy1UYgpQnwZQOjsHaUhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cdtk</p>\n<p>大型电商分布式系统实践 - 第三课.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c_DDSlFcVvCGVcRhTkDL3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gafm</p>\n<p>大型分布式网站架构设计与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H2d-yqMcNoK1nss04B8auA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nbuw</p>\n<p>大型分布式网站架构设计与实践.带目录书签..pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/167Glqiy01WM5O6dlzwhk4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hdtt</p>\n<p>大型网站服务器容量规划（异步图书）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PcYP-GWVaNo0w4scEzdAhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejjn</p>\n<p>大型网站技术架构：核心原理与案例分析+李智慧.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OVmhvHeEPzgwPEbPplcgGg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tmem</p>\n<p>大型网站技术架构：核心原理与案例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1R8ItDeKjXdZChQmYjNDTdw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mmxj</p>\n<p>分布式系统原理 介绍.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O_EMeQ8ZnhUpQurCME8dJQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：trrb</p>\n<p>计算机程序设计艺术（第二卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fbtY-Zd6qylgpnWJ1EnsgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhbb</p>\n<p>计算机程序设计艺术（第三卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1aASj5P2lPohVGBb0HRif3w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhnd</p>\n<p>计算机程序设计艺术（第一卷）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KiP1N-KmCWkFptqVQC5Qfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pfrk</p>\n<p>计算机网络与因特网原书第五版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IcaX8b29y_qULbcUKSR6dg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdfh</p>\n<p>计算机系统概论（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15dGDm5XHjSL_qjmWmsyFpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dgpe</p>\n<p>计算机系统结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16__4vm_xk9QV4Jt35klVZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfca</p>\n<p>架构即未来现代企业可扩展的Web架构流程和组织原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1uErhVIjSuczf1jm6YxZs1Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gwuy</p>\n<p>架构探险：从零开始写分布式服务框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pmU3H0sEYfolwuy02P3yew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：arfq</p>\n<p>架构探险从零开始写Javaweb框架.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VO93QIrOWu800GzwVKIhTQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wwws</p>\n<p>架构演进：滴滴打车架构演变及应用实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PCW2Y8psLPI-Hb3pXaelfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vgyn</p>\n<p>架构演进：豆瓣架构演进.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gG8fgFQoPGypigCzgtoZrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tuhm</p>\n<p>架构演进：京东服务框架实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Zw3MG4k6K5G5Ao4PXU3wg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：psqv</p>\n<p>架构演进：京东应用架构设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/16ZUuKJgy6NaPpP-kMG1yzw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vbmq</p>\n<p>架构演进：汽车之家架构分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wHHeiii23aui5-g6yBluZw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wber</p>\n<p>架构演进：人寿系统架构演变.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OA56l9dM8ho7qA7D28jOUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rmms</p>\n<p>架构演进：网易开源.pptx.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AGn0Og5v3QyTrwwmMAI8Ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykgy</p>\n<p>架构演进：微信之道－至简.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qRy8pJly-tN3JMUg4cpspA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yapu</p>\n<p>架构演进：小米的经验分享.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1d_zYN8SExBJZz5ezXX2BKA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pmqn</p>\n<p>架构演进：一亿用户增长背后的架构秘密（全文PPT）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eGKa-TAw8rRDK7vrM20oIg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：augf</p>\n<p>架构演进：知乎架构变迁史.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CZr31zOQfdWXDSg6dEN4nw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：eknk</p>\n<p>面向对象程序设计图形应用实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h0C6BVqLeJWC7t1F6dGshQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxnq</p>\n<p>面向对象软件工程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_SeVnUc1Hu413KhzDcAFgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qkhm</p>\n<p>面向对象与传统软件工程统一过程的理论与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tkej8trl4c36HwnzgcioaQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hxxd</p>\n<p>敏捷软件开发：原则、模式与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HujV9N_tIm2Ue-M_F_9eNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rspa</p>\n<p>轻量级微服务架构（上册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18qfvhPp649heoFmXktvFOg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xftj</p>\n<p>轻量级微服务架构（下册）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zoX-AJLBxN5yUa5VYTgBoQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jcmb</p>\n<p>人人都是架构师+分布式系统架构落地与瓶颈突破.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c4sMiCOdT06pxd-e4-dbcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dirl</p>\n<p>软件安全从源头开始.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KFw4y1VXHsOmqwOfb8oVew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pdsr</p>\n<p>软件工程架构驱动的软件开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mntiX1Sznsl8yqS98zSHxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wjtd</p>\n<p>软件工程面向对象和传统的方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fG3_AqJu-tLX2QHUOw-Q7A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ews3</p>\n<p>软件工程原书第9版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1o8Ymui9KxyEdLy3A8E-mXA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vdgn</p>\n<p>软件构架实践_第二版_林_巴斯等著.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fzHMMsD2wK7b4Xp-CugCeQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhfx</p>\n<p>软件架构师的12项修炼.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QLZMF249JTHhcY6bDENNWg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xxyr</p>\n<p>软件可靠性方法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IPzTU6DIrv31Gi1ZCMHdOA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ahss</p>\n<p>深入理解Nginx模块开发与架构解析第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ldqoJcfcSIeBSWByqPBOVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sknj</p>\n<p>数据密集型应用系统设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vo1nEA1gj-1NF_t5lVh-KA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cgkx</p>\n<p>数据通信、计算机网络与开放系统（原书第四版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13Fv9GeGueBOHOxcnH5o53Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjst</p>\n<p>数据通信基础设施、联网和安全原书第七版T.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nWlpGl3m87mzVw5e-lNS4w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njdc</p>\n<p>数据通信与网络-原书第四版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zgd8JZF8OXG8f3O76ob0JA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xjkb</p>\n<p>数字设计和计算机体系结构原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mokVM4hllmfU1_dSR0Q3RQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xdxx</p>\n<p>数字图像处理疑难解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/154jpOVPO8CNRtgg8s2UtgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：spdu</p>\n<p>推荐系统整体架构和mycat.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CuZ8VUbbJMlqZ3iNHyvPng\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfrm</p>\n<p>微服设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eXxSXr_At-Dm_fk_jQCOBQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：atfj</p>\n<p>微服务分布式构架开发实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QUMfzz7sEnA6dvaTWhsJfA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：abgn</p>\n<p>微服务架构与实践（王磊著）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1LFeA-0pDUbDjxqpJ8KB3xg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntaw</p>\n<p>系统分析与设计导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L_9aH3VmLpi8slWRGI8dZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pncy</p>\n<p>系统分析与设计教程原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11D62FySweDeHetxiSgaBhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wnuk</p>\n<p>系统分析与设计敏捷迭代方法原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1slWRoJVVfHzOOYRsM2y8iw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ycyd</p>\n<p>系统分析与设计原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1AWfWNGlOUQ1MwMXuUkOfvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bgsr</p>\n<p>系统架构：复杂系统的产品设计与开发.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L5aTNNiasKgr5zEKG2kXNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xstp</p>\n<p>现代操作系统第三版英文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1cqO-1t5ktFyaLGoSFYrFmA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rebf</p>\n<p>阎宏-Java与模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mZ3euwfuuZYZz0dWD2ETeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nxdn</p>\n<p>一线架构师实践指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1f_6dngfklUJLM7hOhD83lQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ktet</p>\n<p>亿级流量网站架构核心技术+跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MoSsDMzUzGc513NCrGZqzg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rgww</p>\n<p>亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1hLOp66q0bIlJ3XRTFNZTgg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：upfs</p>\n<p>云计算架构技术与实践+第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pi4i2YntSaPYdoSHvsonVg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：newj</p>\n<p>重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17TwdU1c0BZAbGAOD-PAQ7Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fceb</p>\n<p>自动机理论、语言和计算导论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zlg_0XChqqcCO5oQAqNQ8g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hsyr</p>\n<h2 id=\"人工智能\"><a href=\"#人工智能\" class=\"headerlink\" title=\"人工智能\"></a>人工智能</h2><p>白话深度学习与TensorFlow.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZLw__yjBUaZlWksJp7v7FA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ddjm</p>\n<p>机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1D5Ev9mTVN7js9OhjpKH2yA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t44o</p>\n<p>机器学习numpy和pandas基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kk9_TAsA_R6Yb_VJKx2duw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhys</p>\n<p>机器学习实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pTrPGVbmLQMrIcSwMCSbLw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ecgp</p>\n<p>人工智能复杂问题求解的结构和策略原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SDsUMKH04iyaCT9NMlapbg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ermp</p>\n<p>人工智能智能系统指南（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wvu4z-_LSzofglfox1e4ig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dnxh</p>\n<p>深度学习-无水印-中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FY_754yfqikeY5qc1rKEmw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfnn</p>\n<p>神经网络和深度学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1CJbzqyobhwqchZksZN7yCg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qfax</p>\n<p>神经网络与机器学习.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L3IqJJXj8IEw5DYhu17YWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mgtu</p>\n<p>神经网络原理.原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Btx6EMx-zgP1wFT1_nKrZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yhc5</p>\n<h2 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h2><p>软件测试基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10s7yvEvwMy1caKWAwcFUPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qdbt</p>\n<p>软件测试基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oRJNseVIFgDs6SLBL3XFZA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qaav</p>\n<p>软件测试原理与实践.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1aTkoMSzGdkAa1wXxmOLMbw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：krgp</p>\n<p>软件测试原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10vW1n9E_7_O4bwdlOMX0EA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dcwd</p>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>23种Java设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eh5oqb8vbdq5RAlSL79D8Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yfja</p>\n<p>23种设计模式知识要点.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QAL-yAVeqjRcwfsD2JGcvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pynv</p>\n<p>24个Java代码（Java经典模式设计）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OoosrBfBWK9QAK0TQIE4ew\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tdkn</p>\n<p>HeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1a9C2j3RckNZZwCWOzZagzQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jnws</p>\n<p>JavaHeadFirst设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSFgFkhK6lOlIGog2r8teA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sfhj</p>\n<p>JavaWeb模式设计之道（jb51.net）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ViNmcCBVrjbhzC4YlGtVOw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：egag</p>\n<p>Java并发编程：设计原则与模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MLgSHc7_gYUF2p3IP6vjUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxvt</p>\n<p>Java多线程编程实战指南设计模式篇.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OakxWURtDF1MhnB5ChmvSw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：awws</p>\n<p>Java设计模式（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1IktvcAQWoBjbOVq_LXe7Ww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dasf</p>\n<p>大话设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b1nQRPcA5hNyxqQas2SWEg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：afcx</p>\n<p>设计模式-可复用面向对象软件的基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1odKYhYMr4oHMhKtkQHXmog\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewss</p>\n<p>设计模式之禅.秦小波.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WWXQJ_kXE7bFNL6YGg2Uww\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rsun</p>\n<p>设计模式之禅（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KWoz-LdblGericVV-ydvqg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ehkb</p>\n<p>图解Java多线程设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GZsmyslADdDiG9ubWqQ1RQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dsvh</p>\n<p>图解设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1teydg8GdbD2e-dmiNbJ1NQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wubt</p>\n<p>研磨设计模式-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_Eh7vreNW5U69pSVz9UZgQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pvud</p>\n<p>研磨设计模式.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Hdjlf0Go3N6vzQIBqGfqvg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bhpx</p>\n<h2 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h2><p>Java网站数据库设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_J34VM8FGV5GvIpcnmNEMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yrmj</p>\n<p>PostgreSQL从入门到精通.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kMwCMbF-HPnwHN3Eub5dhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fjar</p>\n<p>PostgreSQL详解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Zlr13EcrCVviOqi5uMZy2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rpbb</p>\n<p>PowerDesigner16系统分析与建模实战.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19uRhLZ-y-wSeJLwtDHg1LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpc</p>\n<p>PowerDesigner_15.1教程（完整）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eOffPVGYRVnuUxKZFz0C5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bvag</p>\n<p>PowerDesigner教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1oPirlfDkZ8KPbBZ05cJdQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jjau</p>\n<p>SQLCookbook中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1BNG6VD7RGH5gIRX63xcwtA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gbgc</p>\n<p>SQLite权威指南.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b4ou4nLGMtDOzuW0UwmTIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mbpu</p>\n<p>SQL查询的艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EvRbBfMRjBeKhSrCe36DHg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yxxm</p>\n<p>SQL经典实例.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/192IgNkJiN_jCWn4uM5Yr0w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vrmj</p>\n<p>SQL语句大全大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xT7Pp57YlCrBk41z_eIyUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tkvr</p>\n<p>SQL语言艺术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11Dte6piqSqH5Pu6kJ-aY3Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vuvg</p>\n<p>SQL注入攻击与防御第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1-8dOeTUpDLDrvVJ-Cvc7Lg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yyux</p>\n<p>SQL注入攻击与防御原书第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1joJZS9_QK4Pzc1rzXlKxlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efms</p>\n<p>VisualC#数据库高级教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1yMlj5LyHy9Wz4camNrLeGw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：l0lz</p>\n<p>设计有效的数据库系统.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kt5mzpLMsvN51RDIszTaaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gnbx</p>\n<p>数据库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19eNfc0qaI5nZn4nSS0wKgA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqxw</p>\n<p>数据库查询优化器的艺术：原理解析与SQL性能优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fr11ipECSDb-svyemX4zDQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxcv</p>\n<p>数据库管理基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1edShCJlIVc1tDRqiJmNgJw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：saky</p>\n<p>数据库管理系统第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VgjYq5wkzPa5c0GpbTnTYg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hwek</p>\n<p>数据库设计教程第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1llPfN3VXo6Mw5YPaycYRiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bkww</p>\n<p>数据库系统导论-原书第八版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RK6fCpXZX3fEkvM5SBU2_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dhge</p>\n<p>数据库系统概念-原书第六版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1DkVWc-iGeBWWxZuOtxYwxw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sakx</p>\n<p>数据库系统基础教程-原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w33HafOgk7h3GLJ-Ut5Zzg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ftbp</p>\n<p>数据库系统全书.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1z54u7ZLvyHMEVO-aP2iwcA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qhvb</p>\n<p>数据库系统设计实现与管理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Up8b6C498s7M1lLlC0ReXQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xddg</p>\n<p>数据库系统实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FWzyeTSTOGoCnDNTpUOSfg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dxqx</p>\n<p>数据库与事务处理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PsJ45MHV0PCsgyrj8pDTzA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yspv</p>\n<h2 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h2><p>社交网站的数据挖掘与分析_中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pu9o4QYGXmBsgvJ0sGqjaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vywe</p>\n<p>数据挖掘：实用机器学习技术（原书第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1NroTWqpcLB19cl1IyWyOpQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kjmb</p>\n<p>数据挖掘概念与技术.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pumcjYmKfFZ8VaUcZgCEYw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykup</p>\n<p>数据挖掘基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1EREYruDyMCPmq9kqR7Uq8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yckk</p>\n<p>数据挖掘实用机器学习工具与技术原书第三版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Li7Xjrwmipc0U9ijr5WwUQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bwgt</p>\n<p>数据挖掘原理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gu8oHS2XtuPv5Jxu77DlLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vkmp</p>\n<h2 id=\"算法系列\"><a href=\"#算法系列\" class=\"headerlink\" title=\"算法系列\"></a>算法系列</h2><p>C数据结构和算法分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/119TlKdgXWYj5QdrGwCyicA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ckwh</p>\n<p>C数值算法程序大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zHEV2a4YA4MN0_jN4iZLPw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbgw</p>\n<p>Java常用算法手册.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HWvLLZPJE61zXIm8yaoapg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：skcw</p>\n<p>Java常用算法手册第三版本.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vm36ZPfncut62oZ2jJ5-3g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bnjk</p>\n<p>Java数据结构和算法.第二版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_EKJ5IgHjZFYdLk1o4Mu2w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：csad</p>\n<p>啊哈！算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1c8pUakJY6xfOYUaVJKvnqQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：npxg</p>\n<p>大数据算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1b9H66pNc8Z0LzMvLlgizMA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fvuc</p>\n<p>高级数据结构.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VdHbHaxefL7CA0yoniZGIQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：grrm</p>\n<p>和小浩学算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jOHwgH8FY5QKpZnJRhzRvA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtke</p>\n<p>计算机算法分析与设计课件.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1PFCrqYhrgJUDtXFti-P1LA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kctg</p>\n<p>经典算法大全.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1rZ6xTTlHOVtqoAImgJcakw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wkfj</p>\n<p>离散数学导学.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1SzLiz4kVKQfgAdmdK3yrbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：srjf</p>\n<p>离散数学及其应用原书第七版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w4iebO1bfNocgMfPa8XuQQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjck</p>\n<p>漫画算法：小灰的算法之旅 - 魏梦舒.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tFgroWnaYQr-X2ci5OtPRQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hjms</p>\n<p>密码学导引.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h099raG_ivawHCZ4tWk31w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twdc</p>\n<p>密码学基础教程秘密与承诺.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1pY7nr8w6Uhh4WjhY4PYrjg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tysf</p>\n<p>密码学算法协议c实现.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m2Hy-VfgwD5fx6MK273kJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：twqg</p>\n<p>深入理解机器学习从原理到算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1szpU-intfQFlzxkxX1WEHw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xwgp</p>\n<p>数据结构（C#语言版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mcQEiZMNZsODci_n0QUbZQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uavm</p>\n<p>数据结构（Java版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Tjp1nRZuhWhvC_HKwxYbuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mckf</p>\n<p>数据结构讲义（严蔚敏版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1eFHuo2TmZhl6RH7FwwgR_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vwyg</p>\n<p>数据结构实例分析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JNYwq4XX8Mp4a7SYK_jcQg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rtwf</p>\n<p>数据结构与STL.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Pg8gyoFANjlCYyc4CNq_vw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ccgm</p>\n<p>数据结构与算法-JAVA语言.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ofptqxxZgfGglBuB9B9T9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tgpj</p>\n<p>数据结构与算法.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1K3DmV6P7m2uWLeNsfNg2cA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fegs</p>\n<p>数据结构与算法Java版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10BI3NCMafNx8niBYV2PYrg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wftu</p>\n<p>数据结构与算法（JAVA语言版解密）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19sIVT9nm2ZbIxLMfcEEtWw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tbwv</p>\n<p>数据科学入门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/18W_8MN5Uu4H-zsSRmr4AhA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jkab</p>\n<p>算法导论（原书第三版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1P9lqf2fUYuJ-laoTS4JJtQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xhaf</p>\n<p>算法导论（原书第三版）中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1RZkZH5Tb4lE38kmieurRRg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：frpr</p>\n<p>算法导论第三版中文.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tjZd9odmAiJCJ4VvvaMMuw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dute</p>\n<p>算法第四版-谢路云译.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YVRjo6YXQrb8DBU9phOB8w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kgtg</p>\n<p>算法第四版-谢路云译Java描述.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19B3NF1NqUMi_MnDGtZPEKQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mqpr</p>\n<p>算法分析导论_11562998.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Wqvb7mEF67Qeybyet8IXhQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xrgq</p>\n<p>算法概论.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1u6NJjJpocFe_1gKlfAY4rw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gebr</p>\n<p>算法基础.打开算法之门.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L8Zqr4LLlEqA0oKbDps5aQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：yssa</p>\n<p>算法设计手册-第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dDxKZVxq2_TplFro3cmElA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hpet</p>\n<p>算法设计与分析导论_11888784.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i2mSmNW72raCBbmsc2BxAg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bjsr</p>\n<p>算法设计与分析基础.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1umRr7JTLfp6tgWvKBGzcuQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nfgv</p>\n<p>算法图解.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1KaUCkSW_Nt1yZTfDwqTEYQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rdkb</p>\n<p>算法与数据结构-实用算法基础教程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1h61A39ID5ZYVdAs_Fp1vmg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dvbu</p>\n<p>图解数据结构-使用Java.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1w_dYMOWZLxGBtUYmADog5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpvd</p>\n<h2 id=\"新面试题\"><a href=\"#新面试题\" class=\"headerlink\" title=\"新面试题\"></a>新面试题</h2><p>Dubbo面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1i-2HU_podnONkXCIVITXBw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dewh</p>\n<p>Elasticsearch面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1JfNokxTzcoTGwXof-hA6vQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fryw</p>\n<p>Java程序员面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mchSdZg81Nz0fjoDp8E2Dg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wdcc</p>\n<p>Java程序员面试宝典（第二版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1asqIE61lGXposZ-p0AlyZg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vunv</p>\n<p>Java程序员面试笔试宝典-何昊.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1qLnsU39IHDSKkog5aLS8FA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ukgj</p>\n<p>Java程序员面试笔试真题库.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xSBYutVnwVHvj6z_lv5OJg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swsf</p>\n<p>Java程序员面试笔试真题与解析.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19i4svUmbEDBi-_KZYtB1Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gybx</p>\n<p>Java核心知识点面试题整理.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/143GVY2tfMh_d_xM0oaxyLQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rcdm</p>\n<p>Java面试宝典.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Kbdx5etJnN7esz01lc8gnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vawb</p>\n<p>JVM面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QvsniJFbncUrylWV47u6rA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tcgr</p>\n<p>Kafka面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZI_f14B-UbRYVl6c3naCtw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：hyyw</p>\n<p>Linux面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10mthqPHRgqu9cSGdhAWitA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxyv</p>\n<p>Memcached面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12FgrF54YqbQi_JES2Ug8AA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tvew</p>\n<p>MongoDB面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FIxAbXaSHzD5sLf8Q4HT5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxhn</p>\n<p>MyBatis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1v0Llj_7wVPMKPHWGozAl_A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aewm</p>\n<p>Mysql面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VUZM3sqXp5O6vfJEfylMsg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyae</p>\n<p>RabbitMQ面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1VOPFZGNxv4v8EK4I-f4GlA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：txtf</p>\n<p>Redis面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mrY2VfeqTdPQZ-wu1Qn3Jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xnaj</p>\n<p>SpringBoot面试题.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1W1SVyA5URstE2vYYZRhs6g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：area</p>\n<p>SpringCloud面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mc8P9o2FwXslX1HZtY3O0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sqdn</p>\n<p>String面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UKTA4SBUI7ySilvKDUT0og\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tpny</p>\n<p>ZooKeeper面试题-发布版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/11xLMllJ1O8J22Fs2q4AmmA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqbn</p>\n<p>剑指offer第2版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GnoqSMTaakGcA4HJi4fPiA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gxyb</p>\n<h2 id=\"重构优化\"><a href=\"#重构优化\" class=\"headerlink\" title=\"重构优化\"></a>重构优化</h2><p>Java虚拟机并发编程.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MBwYNHEVuOq-V1FpPq7tfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：texj</p>\n<p>编程之美-.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1trz5QH73sRboEDtQjPtEJQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mawq</p>\n<p>大神手把手教你Java性能优化-江南白衣（加强版）.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1lSGEI4vD4moEV3Uzcg_rkw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucrd</p>\n<p>代码大全2中文版.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1_GEyjV0Y4w3XpkRDj6iHrA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：aych</p>\n<p>代码整洁之道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Xxiz8LzT7u1wazR0o-nEJA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：tymx</p>\n<p>江南白衣优化.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1jGcfNaiT1k1V8tX6uabb8g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mvpa</p>\n<p>重构-改善既有代码的设计.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1UGnVQwvguIMuFMf6yy8l4g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bssy</p>\n<h2 id=\"新增，第二版：面试题\"><a href=\"#新增，第二版：面试题\" class=\"headerlink\" title=\"新增，第二版：面试题\"></a>新增，第二版：面试题</h2><p>第二版：面试题 Android 100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1iKSwXFJ6QYnSvpDITa0rwg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ewdu</p>\n<p>第二版：面试题 Android 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1O4GgpzQg5S_22XHmhzegeg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：bspw</p>\n<p>第二版：面试题 CSS 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mrrBhTMgAM8ENTs1AukWaA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksge</p>\n<p>第二版：面试题 CSS 50  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1fjpSyKzZwASii8wCPb7S0Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：prfb</p>\n<p>第二版：面试题 Dubbo  19 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TPsIFslNRspYSm9U8FNBkA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ppmv</p>\n<p>第二版：面试题 Dubbo 30 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17Wkqpp5DhXKGQxQbu_00kg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etff</p>\n<p>第二版：面试题 Dubbo 58 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r3K652QB2msrF8ph_MkQLA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sayu</p>\n<p>第二版：面试题 Elasticsearch 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1r0zJ19iQhpHMa9j-fsDDIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cxak</p>\n<p>第二版：面试题 HTML 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zdFSUdU2eCZo6s6tcy0E_g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmab</p>\n<p>第二版：面试题 Java  100 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wDv-YWEyWXGzuJjHJ1UcGA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：junt</p>\n<p>第二版：面试题 Java  17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L__c7fExhoH3KbyILzFalg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kyxy</p>\n<p>第二版：面试题 Java  算法 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1s3NQewKgT3Ly93K5U7BPUA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：affq</p>\n<p>第二版：面试题 Java 133 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mxmXTNaMzru3RyRpZOME2A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ykde</p>\n<p>第二版：面试题 Java 47  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kGwAhK36voheuvYNOUpA5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfym</p>\n<p>第二版：面试题 Java 95 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mvPwDa9vBaUpBX_SGybp4A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtxu</p>\n<p>第二版：面试题 Java 集合 72 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1vuEueYxuKJwN3IF7otPp9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：swqr</p>\n<p>第二版：面试题 Java 综合 84 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/17OaURL3iWKAEjtBSfKWMnw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：btry</p>\n<p>第二版：面试题 JavaScript 43 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1YA_0XYBPqBTeY7ngpSxixA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xmys</p>\n<p>第二版：面试题 JavaScript 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1p9s7pCEDDl-tOHXwZ2v4Jg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kytg</p>\n<p>第二版：面试题 JavaScript 96 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1WRfTrjEMEZAdrGrTk9_Waw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：rfrb</p>\n<p>第二版：面试题 JVM 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1y4Mxc9JhyHjZQgpuH0qC2g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：wfwx</p>\n<p>第二版：面试题 Kafka 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H64nJGtvYwxQK2KVD1h3jw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmdq</p>\n<p>第二版：面试题 kafka 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1ZXyeUUAivxuy5GskxEd2LQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：efuf</p>\n<p>第二版：面试题 Kafka 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H8kXIFfxCsGno25_y6bS5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cuye</p>\n<p>第二版：面试题 Linux 45 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1sOqNqcc4PpScq858S93zbA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qadp</p>\n<p>第二版：面试题 Linux 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1968KSi1QiqC9rPauU95p5g\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etun</p>\n<p>第二版：面试题 Memcached 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/189Q1AZmcQVXDyQC5eT1knA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fpuf</p>\n<p>第二版：面试题 MongoDB 24 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1L3ukE4vqeDQdLcb_b4TNUw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jhmr</p>\n<p>第二版：面试题 MyBatis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1D8ICwwMg5gMdMKFn2LF2Mg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kfsd</p>\n<p>第二版：面试题 MyBatis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1xuruCkfd_zLpjYndFf-uIw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ucst</p>\n<p>第二版：面试题 MySQL 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1nAHFJHPRvS22aWxbc1i4WQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：xqnk</p>\n<p>第二版：面试题 MySql 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1QeaKsRriqbxmGvMgugAHkQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fbjr</p>\n<p>第二版：面试题 MySQL索引 6 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1H5qdmoCP3yMLvr_7gWVGMQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nqgg</p>\n<p>第二版：面试题 Netty 11 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bXgemm4jllpH73l7TA3-Vw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jamh</p>\n<p>第二版：面试题 Nginx 18 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1329KFq2Wfg9IqZnUMe3fBA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fqet</p>\n<p>第二版：面试题 Python  36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1kRyX4jAuQ41yR_euJk4nTg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：unjj</p>\n<p>第二版：面试题 Python 292 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OTrxw-3JxKDgKQspoqs_pw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kydp</p>\n<p>第二版：面试题 RabbitMQ 12 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1zMkeMXa6e9A4jvmJWOuEBg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ntsu</p>\n<p>第二版：面试题 RabbitMQ 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1mk6rfXq6ronvvQmv-tRr5A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：etkd</p>\n<p>第二版：面试题 React 17 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bI6NHgk8Qgk9W433Jt2Xig\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ksdw</p>\n<p>第二版：面试题 Redis 27 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1OUNs5_ZZA4ug2S1rTTJFEw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ejyc</p>\n<p>第二版：面试题 Redis 40 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/13ns5YkrurQzGBvH5XbswPA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：cnsj</p>\n<p>第二版：面试题 Spring 55 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tT4RIqUishJS605rNJDaBA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pswp</p>\n<p>第二版：面试题 Spring 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/10c5Pfv9BZnsjsrLR0A3iow\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jxfv</p>\n<p>第二版：面试题 SpringBoot 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1idLAz8DDuSURBXYO2PJzUg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jfxs</p>\n<p>第二版：面试题 SpringBoot 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dFnZIePqMFeEINB51QaA-Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：t25p</p>\n<p>第二版：面试题 SpringCloud 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1naqYsW4UzMfiLHq3NrSrKg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ygxb</p>\n<p>第二版：面试题 SpringCloud 22 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1tzoUY3TZg8dwAAljnDNfaw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：nmgd</p>\n<p>第二版：面试题 SpringCloud 29 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1seZo1XloSEc0fNBncSW4vg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：mxda</p>\n<p>第二版：面试题 SpringCloud 50 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1v36uJU32IXNkvqZZK9EAdg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：qbvn</p>\n<p>第二版：面试题 SpringCloud 70 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1GG9X8Av_HZKh56ZWNRWEiw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uhbr</p>\n<p>第二版：面试题 SpringCloud 8 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1gXQq18Zu0SEfC7hH6Oping\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vfwf</p>\n<p>第二版：面试题 SpringMVC 35 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/15QaXlVGXUPh4FHGAF0y3JQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：canh</p>\n<p>第二版：面试题 Tomcat 16 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1HkloT28H8Jb8Z1Cslaj22Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：gmqb</p>\n<p>第二版：面试题 Vue 20 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1bE36aDEoRFLlv9vP33WMNw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：fcmg</p>\n<p>第二版：面试题 Vue 39 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1dwPL_XHNnOMYDETFQ4Xs4Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：vapx</p>\n<p>第二版：面试题 ZooKeeper 23 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/12_kkYMkwPuhts8RnoQWm9w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ufqw</p>\n<p>第二版：面试题 ZooKeeper 28 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1Q-sxq0vpzInt-9HKTRqZ_Q\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：kkjh</p>\n<p>第二版：面试题 ZooKeeper 36 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1B5T6Hmeb_uIvAV2wQHNVwA\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：dkwd</p>\n<p>第二版：面试题 并发编程 140 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1FYsA869oaPcv1LJF9mdJnQ\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：pwek</p>\n<p>第二版：面试题 并发编程 48 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1m5ThtAWHp4k2FGxQ72LHXg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：njgu</p>\n<p>第二版：面试题 多线程 75 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1wiw1kA_iWQCjyFBTbndjtg\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：uxty</p>\n<p>第二版：面试题 精选设计模式 10 道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1TijTPNvjqFAOBosM78ax7w\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：sxnn</p>\n<p>第二版：面试题 前端汇总 100  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/19XbZKt8QDrbDtTkBXOjy9A\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：jtfq</p>\n<p>第二版：面试题 前端综合 45  道.pdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://pan.baidu.com/s/1MiXOm2pkWFBvQL3-qrocfw\">百度云下载链接</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;百度云提取码：ybev</p>\n<h2 id=\"免责声明\"><a href=\"#免责声明\" class=\"headerlink\" title=\"免责声明\"></a>免责声明</h2><p>书籍全部来源于网络其他人的整理，我这里只是收集整理了他们的链接，如有侵权，马上联系我，我立马删除对应链接。我的邮箱：<a href=\"mailto:&#x37;&#x35;&#x39;&#x39;&#55;&#x35;&#51;&#x33;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x37;&#x35;&#x39;&#x39;&#55;&#x35;&#51;&#x33;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p>"},{"title":"Java 八股文指南","summary":"Java 八股文面试指南","abbrlink":57988,"date":"2022-03-17T07:39:07.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537909.jpeg)\n\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [mp.weixin.qq.com](https://mp.weixin.qq.com/s/FkuyBobjh5rON-WFp6yFMA)\n**1、中华石杉老师的《Java 面试突击第一季》！**\n\n  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537821.png)石杉老师的 Java 面试突击第一季\n\n即使是 19 年那会出来的视频，放到现在依然是适用的！对于想要进 Java 生态为主的公司比如美团、阿里非常有帮助！主要讲的是高并发高可用相关的内容\n\n> 视频地址：https://www.bilibili.com/video/BV1B4411h7Nz\n\n有小伙伴将这门课程的内容整理成了一系列笔记并开源了出来，目前这个项目已经有接近 60k star。\n\n> 配套笔记在线阅读地址：https://doocs.github.io/advanced-java/#/ \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537433.png)\n\n**2、图灵学院的《Java 常见面试题详解系列》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537293.png)\n\n图灵的一位老师讲的 Java 面试常考题，涵盖 Java 核心知识、数据库以及常见框架。\n\n拿数据库和缓存来说：\n\n*   数据库以面试常问的 MySQL 为例介绍了索引、锁、事务、主从同步、MyISAM 和 InnoDB 的区别、分库分表、慢查询处理等面试题。\n\n*   缓存以面试常问的 Redis 为例介绍了 Redis 常见数据库结构、缓存过期策略、 缓存穿透、缓存击穿、缓存雪崩、数据库和缓存一致性保证、Redis 高可用等面试题。\n\n> 视频地址：https://www.bilibili.com/video/BV1XU4y1J7Dr\n\n**3、享学的《Java 面试全解析系列》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537956.png)\n\n内容比较杂，可以挑选自己比较感兴趣面试题学习。\n\n可以重点看看数据库这块，对于常见的 MySQL 面试题比如 MySQL 索引数据结构介绍的比较详细。\n\n> 视频地址：https://www.bilibili.com/video/BV1yA411u7WL\n\n**4、图灵的《分布式面试核心面试题系列》**\n\n![](https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TznMwv90LicM81CUe5YjBaRBHyXVfsu2zjibQo6oib4Ga7sbvmvOta5vlkCdYeic8n5uic4nXw8HVPwGRA/640?wx_fmt=png)\n\n主要是分布式相关的内容，涵盖负载均衡、分布式 ID、分布式事务、Dubbo、Zookeeper 、Redis。\n\n> 视频地址：https://www.bilibili.com/video/BV1Mz4y1Z7bM\n\n**5、尚硅谷周阳老师的 《Java 面试题第三季》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021538587.png)\n\nJava 培训领域比较出名的周阳老师的作品，内容涵盖算法、Java 核心知识、数据库以及常见框架。\n\n可以重点看看并发和 Spring 这块，比其他老师讲的要深入和好理解很多。\n\n> 视频地址：https://www.bilibili.com/video/BV1Hy4y1B78T\n\n第三季之前，Java 面试题第一季和第二季视频地址如下：\n\n> *   Java 面试题第一季 ：https://www.bilibili.com/video/BV1Eb411P7bP\n>\n> *   Java 面试题第二季 ：https://www.bilibili.com/video/BV18b411M7xz","source":"_posts/2022-03-02-Java-八股文指南.md","raw":"---\ntitle: Java 八股文指南\ntags: 面试\ncategories: 面试\nsummary: Java 八股文面试指南\nabbrlink: 57988\ndate: 2022-03-17 15:39:07\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537909.jpeg)\n\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [mp.weixin.qq.com](https://mp.weixin.qq.com/s/FkuyBobjh5rON-WFp6yFMA)\n**1、中华石杉老师的《Java 面试突击第一季》！**\n\n  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537821.png)石杉老师的 Java 面试突击第一季\n\n即使是 19 年那会出来的视频，放到现在依然是适用的！对于想要进 Java 生态为主的公司比如美团、阿里非常有帮助！主要讲的是高并发高可用相关的内容\n\n> 视频地址：https://www.bilibili.com/video/BV1B4411h7Nz\n\n有小伙伴将这门课程的内容整理成了一系列笔记并开源了出来，目前这个项目已经有接近 60k star。\n\n> 配套笔记在线阅读地址：https://doocs.github.io/advanced-java/#/ \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537433.png)\n\n**2、图灵学院的《Java 常见面试题详解系列》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537293.png)\n\n图灵的一位老师讲的 Java 面试常考题，涵盖 Java 核心知识、数据库以及常见框架。\n\n拿数据库和缓存来说：\n\n*   数据库以面试常问的 MySQL 为例介绍了索引、锁、事务、主从同步、MyISAM 和 InnoDB 的区别、分库分表、慢查询处理等面试题。\n\n*   缓存以面试常问的 Redis 为例介绍了 Redis 常见数据库结构、缓存过期策略、 缓存穿透、缓存击穿、缓存雪崩、数据库和缓存一致性保证、Redis 高可用等面试题。\n\n> 视频地址：https://www.bilibili.com/video/BV1XU4y1J7Dr\n\n**3、享学的《Java 面试全解析系列》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537956.png)\n\n内容比较杂，可以挑选自己比较感兴趣面试题学习。\n\n可以重点看看数据库这块，对于常见的 MySQL 面试题比如 MySQL 索引数据结构介绍的比较详细。\n\n> 视频地址：https://www.bilibili.com/video/BV1yA411u7WL\n\n**4、图灵的《分布式面试核心面试题系列》**\n\n![](https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TznMwv90LicM81CUe5YjBaRBHyXVfsu2zjibQo6oib4Ga7sbvmvOta5vlkCdYeic8n5uic4nXw8HVPwGRA/640?wx_fmt=png)\n\n主要是分布式相关的内容，涵盖负载均衡、分布式 ID、分布式事务、Dubbo、Zookeeper 、Redis。\n\n> 视频地址：https://www.bilibili.com/video/BV1Mz4y1Z7bM\n\n**5、尚硅谷周阳老师的 《Java 面试题第三季》**\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021538587.png)\n\nJava 培训领域比较出名的周阳老师的作品，内容涵盖算法、Java 核心知识、数据库以及常见框架。\n\n可以重点看看并发和 Spring 这块，比其他老师讲的要深入和好理解很多。\n\n> 视频地址：https://www.bilibili.com/video/BV1Hy4y1B78T\n\n第三季之前，Java 面试题第一季和第二季视频地址如下：\n\n> *   Java 面试题第一季 ：https://www.bilibili.com/video/BV1Eb411P7bP\n>\n> *   Java 面试题第二季 ：https://www.bilibili.com/video/BV18b411M7xz","slug":"Java-八股文指南","published":1,"updated":"2024-12-16T12:11:11.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyog0012j0krfm8c6821","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537909.jpeg\"></p>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://mp.weixin.qq.com/s/FkuyBobjh5rON-WFp6yFMA\">mp.weixin.qq.com</a><br><strong>1、中华石杉老师的《Java 面试突击第一季》！</strong></p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537821.png\">石杉老师的 Java 面试突击第一季</p>\n<p>即使是 19 年那会出来的视频，放到现在依然是适用的！对于想要进 Java 生态为主的公司比如美团、阿里非常有帮助！主要讲的是高并发高可用相关的内容</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1B4411h7Nz\">https://www.bilibili.com/video/BV1B4411h7Nz</a></p>\n</blockquote>\n<p>有小伙伴将这门课程的内容整理成了一系列笔记并开源了出来，目前这个项目已经有接近 60k star。</p>\n<blockquote>\n<p>配套笔记在线阅读地址：<a href=\"https://doocs.github.io/advanced-java/#/\">https://doocs.github.io/advanced-java/#/</a> </p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537433.png\"></p>\n<p><strong>2、图灵学院的《Java 常见面试题详解系列》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537293.png\"></p>\n<p>图灵的一位老师讲的 Java 面试常考题，涵盖 Java 核心知识、数据库以及常见框架。</p>\n<p>拿数据库和缓存来说：</p>\n<ul>\n<li><p>  数据库以面试常问的 MySQL 为例介绍了索引、锁、事务、主从同步、MyISAM 和 InnoDB 的区别、分库分表、慢查询处理等面试题。</p>\n</li>\n<li><p>  缓存以面试常问的 Redis 为例介绍了 Redis 常见数据库结构、缓存过期策略、 缓存穿透、缓存击穿、缓存雪崩、数据库和缓存一致性保证、Redis 高可用等面试题。</p>\n</li>\n</ul>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1XU4y1J7Dr\">https://www.bilibili.com/video/BV1XU4y1J7Dr</a></p>\n</blockquote>\n<p><strong>3、享学的《Java 面试全解析系列》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537956.png\"></p>\n<p>内容比较杂，可以挑选自己比较感兴趣面试题学习。</p>\n<p>可以重点看看数据库这块，对于常见的 MySQL 面试题比如 MySQL 索引数据结构介绍的比较详细。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1yA411u7WL\">https://www.bilibili.com/video/BV1yA411u7WL</a></p>\n</blockquote>\n<p><strong>4、图灵的《分布式面试核心面试题系列》</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TznMwv90LicM81CUe5YjBaRBHyXVfsu2zjibQo6oib4Ga7sbvmvOta5vlkCdYeic8n5uic4nXw8HVPwGRA/640?wx_fmt=png\"></p>\n<p>主要是分布式相关的内容，涵盖负载均衡、分布式 ID、分布式事务、Dubbo、Zookeeper 、Redis。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1Mz4y1Z7bM\">https://www.bilibili.com/video/BV1Mz4y1Z7bM</a></p>\n</blockquote>\n<p><strong>5、尚硅谷周阳老师的 《Java 面试题第三季》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021538587.png\"></p>\n<p>Java 培训领域比较出名的周阳老师的作品，内容涵盖算法、Java 核心知识、数据库以及常见框架。</p>\n<p>可以重点看看并发和 Spring 这块，比其他老师讲的要深入和好理解很多。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1Hy4y1B78T\">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p>\n</blockquote>\n<p>第三季之前，Java 面试题第一季和第二季视频地址如下：</p>\n<blockquote>\n<ul>\n<li><p>  Java 面试题第一季 ：<a href=\"https://www.bilibili.com/video/BV1Eb411P7bP\">https://www.bilibili.com/video/BV1Eb411P7bP</a></p>\n</li>\n<li><p>  Java 面试题第二季 ：<a href=\"https://www.bilibili.com/video/BV18b411M7xz\">https://www.bilibili.com/video/BV18b411M7xz</a></p>\n</li>\n</ul>\n</blockquote>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537909.jpeg\"></p>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://mp.weixin.qq.com/s/FkuyBobjh5rON-WFp6yFMA\">mp.weixin.qq.com</a><br><strong>1、中华石杉老师的《Java 面试突击第一季》！</strong></p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537821.png\">石杉老师的 Java 面试突击第一季</p>\n<p>即使是 19 年那会出来的视频，放到现在依然是适用的！对于想要进 Java 生态为主的公司比如美团、阿里非常有帮助！主要讲的是高并发高可用相关的内容</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1B4411h7Nz\">https://www.bilibili.com/video/BV1B4411h7Nz</a></p>\n</blockquote>\n<p>有小伙伴将这门课程的内容整理成了一系列笔记并开源了出来，目前这个项目已经有接近 60k star。</p>\n<blockquote>\n<p>配套笔记在线阅读地址：<a href=\"https://doocs.github.io/advanced-java/#/\">https://doocs.github.io/advanced-java/#/</a> </p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537433.png\"></p>\n<p><strong>2、图灵学院的《Java 常见面试题详解系列》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537293.png\"></p>\n<p>图灵的一位老师讲的 Java 面试常考题，涵盖 Java 核心知识、数据库以及常见框架。</p>\n<p>拿数据库和缓存来说：</p>\n<ul>\n<li><p>  数据库以面试常问的 MySQL 为例介绍了索引、锁、事务、主从同步、MyISAM 和 InnoDB 的区别、分库分表、慢查询处理等面试题。</p>\n</li>\n<li><p>  缓存以面试常问的 Redis 为例介绍了 Redis 常见数据库结构、缓存过期策略、 缓存穿透、缓存击穿、缓存雪崩、数据库和缓存一致性保证、Redis 高可用等面试题。</p>\n</li>\n</ul>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1XU4y1J7Dr\">https://www.bilibili.com/video/BV1XU4y1J7Dr</a></p>\n</blockquote>\n<p><strong>3、享学的《Java 面试全解析系列》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021537956.png\"></p>\n<p>内容比较杂，可以挑选自己比较感兴趣面试题学习。</p>\n<p>可以重点看看数据库这块，对于常见的 MySQL 面试题比如 MySQL 索引数据结构介绍的比较详细。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1yA411u7WL\">https://www.bilibili.com/video/BV1yA411u7WL</a></p>\n</blockquote>\n<p><strong>4、图灵的《分布式面试核心面试题系列》</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TznMwv90LicM81CUe5YjBaRBHyXVfsu2zjibQo6oib4Ga7sbvmvOta5vlkCdYeic8n5uic4nXw8HVPwGRA/640?wx_fmt=png\"></p>\n<p>主要是分布式相关的内容，涵盖负载均衡、分布式 ID、分布式事务、Dubbo、Zookeeper 、Redis。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1Mz4y1Z7bM\">https://www.bilibili.com/video/BV1Mz4y1Z7bM</a></p>\n</blockquote>\n<p><strong>5、尚硅谷周阳老师的 《Java 面试题第三季》</strong></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021538587.png\"></p>\n<p>Java 培训领域比较出名的周阳老师的作品，内容涵盖算法、Java 核心知识、数据库以及常见框架。</p>\n<p>可以重点看看并发和 Spring 这块，比其他老师讲的要深入和好理解很多。</p>\n<blockquote>\n<p>视频地址：<a href=\"https://www.bilibili.com/video/BV1Hy4y1B78T\">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p>\n</blockquote>\n<p>第三季之前，Java 面试题第一季和第二季视频地址如下：</p>\n<blockquote>\n<ul>\n<li><p>  Java 面试题第一季 ：<a href=\"https://www.bilibili.com/video/BV1Eb411P7bP\">https://www.bilibili.com/video/BV1Eb411P7bP</a></p>\n</li>\n<li><p>  Java 面试题第二季 ：<a href=\"https://www.bilibili.com/video/BV18b411M7xz\">https://www.bilibili.com/video/BV18b411M7xz</a></p>\n</li>\n</ul>\n</blockquote>\n"},{"title":"自定义注解应用场景和使用示例","summary":"1.实现登录校验 2.AOP日志打印","abbrlink":45688,"date":"2022-04-04T06:54:23.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041533682.jpg)\n<!--more-->\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.jianshu.com](https://www.jianshu.com/p/a7bedc771204)\n\n项目示例：https://gitee.com/lingzhexi/annotation\n\nJava 自定义注解一般使用场景为：自定义注解 + 拦截器或者 AOP，使用自定义注解来自己设计框架，使得代码看起来非常优雅。  \n本文将先从自定义注解的基础概念说起，然后开始实战，写小段代码实现自定义注解 + 拦截器，自定义注解 + AOP。\n\n##### 一. 什么是注解 (Annotation)\n\nJava 注解是什么，以下是引用自维基百科的内容\n\n> Java 注解又称 Java 标注，是 JDK5.0 版本开始支持加入源代码的特殊语法元数据。  \n> Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义 Java 标注。\n\n##### 二. 注解体系图\n\n元注解：`java.lang.annotation`中提供了元注解，可以使用这些注解来定义自己的注解。主要使用的是 Target 和 Retention 注解  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436917.png) 元注解\n\n注解处理类：既然上面定义了注解，那得有办法拿到我们定义的注解啊。\n\n`java.lang.reflect.AnnotatedElement`\n\n接口则提供了该功能。注解的处理是通过 java 反射来处理的。如下，反射相关的类 Class, Method, Field 都实现了 AnnotatedElement 接口。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435447.png) 反射处理\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png) AnnotatedElement 接口方法\n\n因此，只要我们通过反射拿到 Class, Method, Field 类，就能够通过 getAnnotation(Class<T>) 拿到我们想要的注解并取值。\n\n##### 三. 常用元注解\n\n**Target**：描述了注解修饰的对象范围，取值在`java.lang.annotation.ElementType`定义，常用的包括：\n\n*   METHOD：用于描述方法\n*   PACKAGE：用于描述包\n*   PARAMETER：用于描述方法变量\n*   TYPE：用于描述类、接口或 enum 类型\n\n**Retention**: 表示注解保留时间长短。取值在`java.lang.annotation.RetentionPolicy`中，取值为：\n\n*   SOURCE：在源文件中有效，编译过程中会被忽略\n*   CLASS：随源文件一起编译在 class 文件中，运行时忽略\n*   RUNTIME：在运行时有效\n\n只有定义为`RetentionPolicy.RUNTIME`时，我们才能通过注解反射获取到注解。  \n所以，假设我们要自定义一个注解，它用在字段上，并且可以通过反射获取到，功能是用来描述字段的长度和作用。可以定义如下，[代码见](https://gitee.com/lingzhexi/annotation )\n\n```java\n@Target(ElementType.FIELD)  //  注解用于字段上\n@Retention(RetentionPolicy.RUNTIME)  // 保留到运行时，可通过注解获取\npublic @interface MyField {\n    String description();\n    int length();\n}\n```\n\n##### 四. 示例 - 反射获取注解\n\n先定义一个注解：\n\n```java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyField {\n    String description();\n    int length();\n}\n```\n\n通过反射获取注解\n\n```java\npublic class MyFieldTest {\n\n    //使用我们的自定义注解\n    @MyField(description = \"用户名\", length = 12)\n    private String username;\n\n    @Test\n    public void testMyField(){\n\n        // 获取类模板\n        Class c = MyFieldTest.class;\n\n        // 获取所有字段\n        for(Field f : c.getDeclaredFields()){\n            // 判断这个字段是否有MyField注解\n            if(f.isAnnotationPresent(MyField.class)){\n                MyField annotation = f.getAnnotation(MyField.class);\n                System.out.println(\"字段:[\" + f.getName() + \"], 描述:[\" + annotation.description() + \"], 长度:[\" + annotation.length() +\"]\");\n            }\n        }\n\n    }\n}\n```\n\n运行结果\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435883.png) 运行结果\n\n##### 应用场景一：自定义注解 + 拦截器 实现登录校验\n\n接下来，我们使用 springboot 拦截器实现这样一个功能，如果方法上加了 @LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。  \n首先定义一个 LoginRequired 注解\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LoginRequired {\n    \n}\n```\n\n然后写两个简单的接口，访问 sourceA，sourceB 资源\n\n```java\n@RestController\npublic class IndexController {\n\n    @GetMapping(\"/sourceA\")\n    public String sourceA(){\n        return \"你正在访问sourceA资源\";\n    }\n\n    @GetMapping(\"/sourceB\")\n    public String sourceB(){\n        return \"你正在访问sourceB资源\";\n    }\n\n}\n```\n\n没添加拦截器之前成功访问\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435589.png) sourceB\n\n实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：\n\n```java\npublic class SourceAccessInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"进入拦截器了\");\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n实现 spring 类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中\n\n```java\n@Configuration\npublic class InterceptorTrainConfigurer implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(\"/**\");\n    }\n}\n```\n\n拦截成功如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435486.png) 拦截了\n\n在 sourceB 方法上添加我们的登录注解 @LoginRequired\n\n```java\n@RestController\npublic class IndexController {\n\n    @GetMapping(\"/sourceA\")\n    public String sourceA(){\n        return \"你正在访问sourceA资源\";\n    }\n\n    @LoginRequired\n    @GetMapping(\"/sourceB\")\n    public String sourceB(){\n        return \"你正在访问sourceB资源\";\n    }\n\n}\n```\n\n简单实现登录拦截逻辑\n\n```java\n@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"进入拦截器了\");\n\n        // 反射获取方法上的LoginRequred注解\n        HandlerMethod handlerMethod = (HandlerMethod)handler;\n        LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class);\n        if(loginRequired == null){\n            return true;\n        }\n\n        // 有LoginRequired注解说明需要登录，提示用户登录\n        response.setContentType(\"application/json; charset=utf-8\");\n        response.getWriter().print(\"你访问的资源需要登录\");\n        return false;\n    }\n```\n\n运行成功，访问 sourceB 时需要登录了，访问 sourceA 则不用登录，完整代码见[我的 GitHub](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fzebinh%2Fannotation-demo)  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435779.png) sourceA\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435907.png) sourceB\n\n##### 应用场景二：自定义注解 + AOP 实现日志打印\n\n先导入切面需要的依赖包\n\n```xml\n<dependency>\n      <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n定义一个注解 @MyLog\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyLog {\n    \n}\n```\n\n定义一个切面类，见如下代码注释理解：\n\n```java\n@Aspect // 1.表明这是一个切面类\n@Component\npublic class MyLogAspect {\n\n    // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名\n    // 切面最主要的就是切点，所有的故事都围绕切点发生\n    // logPointCut()代表切点名称\n    @Pointcut(\"@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)\")\n    public void logPointCut(){};\n\n    // 3. 环绕通知\n    @Around(\"logPointCut()\")\n    public void logAround(ProceedingJoinPoint joinPoint){\n        // 获取方法名称\n        String methodName = joinPoint.getSignature().getName();\n        // 获取入参\n        Object[] param = joinPoint.getArgs();\n\n        StringBuilder sb = new StringBuilder();\n        for(Object o : param){\n            sb.append(o + \"; \");\n        }\n        System.out.println(\"进入[\" + methodName + \"]方法,参数为:\" + sb.toString());\n\n        // 继续执行方法\n        try {\n            joinPoint.proceed();\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(methodName + \"方法执行结束\");\n\n    }\n}\n```\n\n在步骤二中的 IndexController 写一个 sourceC 进行测试，加上我们的自定义注解：\n\n```java\n    @MyLog\n    @GetMapping(\"/sourceC/{source_name}\")\n    public String sourceC(@PathVariable(\"source_name\") String sourceName){\n        return \"你正在访问sourceC资源\";\n    }\n```\n\n启动 springboot web 项目，输入访问地址\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436680.png) 访问项目\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436427.png) 切面成功","source":"_posts/2022-03-04-自定义注解应用场景和使用示例.md","raw":"---\ntitle: 自定义注解应用场景和使用示例\ntags: JAVA\ncategories: JAVA\nsummary: 1.实现登录校验 2.AOP日志打印\nabbrlink: 45688\ndate: 2022-04-04 14:54:23\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041533682.jpg)\n<!--more-->\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.jianshu.com](https://www.jianshu.com/p/a7bedc771204)\n\n项目示例：https://gitee.com/lingzhexi/annotation\n\nJava 自定义注解一般使用场景为：自定义注解 + 拦截器或者 AOP，使用自定义注解来自己设计框架，使得代码看起来非常优雅。  \n本文将先从自定义注解的基础概念说起，然后开始实战，写小段代码实现自定义注解 + 拦截器，自定义注解 + AOP。\n\n##### 一. 什么是注解 (Annotation)\n\nJava 注解是什么，以下是引用自维基百科的内容\n\n> Java 注解又称 Java 标注，是 JDK5.0 版本开始支持加入源代码的特殊语法元数据。  \n> Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义 Java 标注。\n\n##### 二. 注解体系图\n\n元注解：`java.lang.annotation`中提供了元注解，可以使用这些注解来定义自己的注解。主要使用的是 Target 和 Retention 注解  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436917.png) 元注解\n\n注解处理类：既然上面定义了注解，那得有办法拿到我们定义的注解啊。\n\n`java.lang.reflect.AnnotatedElement`\n\n接口则提供了该功能。注解的处理是通过 java 反射来处理的。如下，反射相关的类 Class, Method, Field 都实现了 AnnotatedElement 接口。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435447.png) 反射处理\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png) AnnotatedElement 接口方法\n\n因此，只要我们通过反射拿到 Class, Method, Field 类，就能够通过 getAnnotation(Class<T>) 拿到我们想要的注解并取值。\n\n##### 三. 常用元注解\n\n**Target**：描述了注解修饰的对象范围，取值在`java.lang.annotation.ElementType`定义，常用的包括：\n\n*   METHOD：用于描述方法\n*   PACKAGE：用于描述包\n*   PARAMETER：用于描述方法变量\n*   TYPE：用于描述类、接口或 enum 类型\n\n**Retention**: 表示注解保留时间长短。取值在`java.lang.annotation.RetentionPolicy`中，取值为：\n\n*   SOURCE：在源文件中有效，编译过程中会被忽略\n*   CLASS：随源文件一起编译在 class 文件中，运行时忽略\n*   RUNTIME：在运行时有效\n\n只有定义为`RetentionPolicy.RUNTIME`时，我们才能通过注解反射获取到注解。  \n所以，假设我们要自定义一个注解，它用在字段上，并且可以通过反射获取到，功能是用来描述字段的长度和作用。可以定义如下，[代码见](https://gitee.com/lingzhexi/annotation )\n\n```java\n@Target(ElementType.FIELD)  //  注解用于字段上\n@Retention(RetentionPolicy.RUNTIME)  // 保留到运行时，可通过注解获取\npublic @interface MyField {\n    String description();\n    int length();\n}\n```\n\n##### 四. 示例 - 反射获取注解\n\n先定义一个注解：\n\n```java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyField {\n    String description();\n    int length();\n}\n```\n\n通过反射获取注解\n\n```java\npublic class MyFieldTest {\n\n    //使用我们的自定义注解\n    @MyField(description = \"用户名\", length = 12)\n    private String username;\n\n    @Test\n    public void testMyField(){\n\n        // 获取类模板\n        Class c = MyFieldTest.class;\n\n        // 获取所有字段\n        for(Field f : c.getDeclaredFields()){\n            // 判断这个字段是否有MyField注解\n            if(f.isAnnotationPresent(MyField.class)){\n                MyField annotation = f.getAnnotation(MyField.class);\n                System.out.println(\"字段:[\" + f.getName() + \"], 描述:[\" + annotation.description() + \"], 长度:[\" + annotation.length() +\"]\");\n            }\n        }\n\n    }\n}\n```\n\n运行结果\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435883.png) 运行结果\n\n##### 应用场景一：自定义注解 + 拦截器 实现登录校验\n\n接下来，我们使用 springboot 拦截器实现这样一个功能，如果方法上加了 @LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。  \n首先定义一个 LoginRequired 注解\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LoginRequired {\n    \n}\n```\n\n然后写两个简单的接口，访问 sourceA，sourceB 资源\n\n```java\n@RestController\npublic class IndexController {\n\n    @GetMapping(\"/sourceA\")\n    public String sourceA(){\n        return \"你正在访问sourceA资源\";\n    }\n\n    @GetMapping(\"/sourceB\")\n    public String sourceB(){\n        return \"你正在访问sourceB资源\";\n    }\n\n}\n```\n\n没添加拦截器之前成功访问\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435589.png) sourceB\n\n实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：\n\n```java\npublic class SourceAccessInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"进入拦截器了\");\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n}\n```\n\n实现 spring 类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中\n\n```java\n@Configuration\npublic class InterceptorTrainConfigurer implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(\"/**\");\n    }\n}\n```\n\n拦截成功如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435486.png) 拦截了\n\n在 sourceB 方法上添加我们的登录注解 @LoginRequired\n\n```java\n@RestController\npublic class IndexController {\n\n    @GetMapping(\"/sourceA\")\n    public String sourceA(){\n        return \"你正在访问sourceA资源\";\n    }\n\n    @LoginRequired\n    @GetMapping(\"/sourceB\")\n    public String sourceB(){\n        return \"你正在访问sourceB资源\";\n    }\n\n}\n```\n\n简单实现登录拦截逻辑\n\n```java\n@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"进入拦截器了\");\n\n        // 反射获取方法上的LoginRequred注解\n        HandlerMethod handlerMethod = (HandlerMethod)handler;\n        LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class);\n        if(loginRequired == null){\n            return true;\n        }\n\n        // 有LoginRequired注解说明需要登录，提示用户登录\n        response.setContentType(\"application/json; charset=utf-8\");\n        response.getWriter().print(\"你访问的资源需要登录\");\n        return false;\n    }\n```\n\n运行成功，访问 sourceB 时需要登录了，访问 sourceA 则不用登录，完整代码见[我的 GitHub](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fzebinh%2Fannotation-demo)  \n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435779.png) sourceA\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435907.png) sourceB\n\n##### 应用场景二：自定义注解 + AOP 实现日志打印\n\n先导入切面需要的依赖包\n\n```xml\n<dependency>\n      <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n定义一个注解 @MyLog\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyLog {\n    \n}\n```\n\n定义一个切面类，见如下代码注释理解：\n\n```java\n@Aspect // 1.表明这是一个切面类\n@Component\npublic class MyLogAspect {\n\n    // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名\n    // 切面最主要的就是切点，所有的故事都围绕切点发生\n    // logPointCut()代表切点名称\n    @Pointcut(\"@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)\")\n    public void logPointCut(){};\n\n    // 3. 环绕通知\n    @Around(\"logPointCut()\")\n    public void logAround(ProceedingJoinPoint joinPoint){\n        // 获取方法名称\n        String methodName = joinPoint.getSignature().getName();\n        // 获取入参\n        Object[] param = joinPoint.getArgs();\n\n        StringBuilder sb = new StringBuilder();\n        for(Object o : param){\n            sb.append(o + \"; \");\n        }\n        System.out.println(\"进入[\" + methodName + \"]方法,参数为:\" + sb.toString());\n\n        // 继续执行方法\n        try {\n            joinPoint.proceed();\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(methodName + \"方法执行结束\");\n\n    }\n}\n```\n\n在步骤二中的 IndexController 写一个 sourceC 进行测试，加上我们的自定义注解：\n\n```java\n    @MyLog\n    @GetMapping(\"/sourceC/{source_name}\")\n    public String sourceC(@PathVariable(\"source_name\") String sourceName){\n        return \"你正在访问sourceC资源\";\n    }\n```\n\n启动 springboot web 项目，输入访问地址\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436680.png) 访问项目\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436427.png) 切面成功","slug":"自定义注解应用场景和使用示例","published":1,"updated":"2024-12-16T12:11:11.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyoj0015j0kranrm7myj","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041533682.jpg\"></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.jianshu.com/p/a7bedc771204\">www.jianshu.com</a></p>\n</blockquote>\n<p>项目示例：<a href=\"https://gitee.com/lingzhexi/annotation\">https://gitee.com/lingzhexi/annotation</a></p>\n<p>Java 自定义注解一般使用场景为：自定义注解 + 拦截器或者 AOP，使用自定义注解来自己设计框架，使得代码看起来非常优雅。<br>本文将先从自定义注解的基础概念说起，然后开始实战，写小段代码实现自定义注解 + 拦截器，自定义注解 + AOP。</p>\n<h5 id=\"一-什么是注解-Annotation\"><a href=\"#一-什么是注解-Annotation\" class=\"headerlink\" title=\"一. 什么是注解 (Annotation)\"></a>一. 什么是注解 (Annotation)</h5><p>Java 注解是什么，以下是引用自维基百科的内容</p>\n<blockquote>\n<p>Java 注解又称 Java 标注，是 JDK5.0 版本开始支持加入源代码的特殊语法元数据。<br>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义 Java 标注。</p>\n</blockquote>\n<h5 id=\"二-注解体系图\"><a href=\"#二-注解体系图\" class=\"headerlink\" title=\"二. 注解体系图\"></a>二. 注解体系图</h5><p>元注解：<code>java.lang.annotation</code>中提供了元注解，可以使用这些注解来定义自己的注解。主要使用的是 Target 和 Retention 注解  </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436917.png\"> 元注解</p>\n<p>注解处理类：既然上面定义了注解，那得有办法拿到我们定义的注解啊。</p>\n<p><code>java.lang.reflect.AnnotatedElement</code></p>\n<p>接口则提供了该功能。注解的处理是通过 java 反射来处理的。如下，反射相关的类 Class, Method, Field 都实现了 AnnotatedElement 接口。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435447.png\"> 反射处理</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png\"> AnnotatedElement 接口方法</p>\n<p>因此，只要我们通过反射拿到 Class, Method, Field 类，就能够通过 getAnnotation(Class<T>) 拿到我们想要的注解并取值。</p>\n<h5 id=\"三-常用元注解\"><a href=\"#三-常用元注解\" class=\"headerlink\" title=\"三. 常用元注解\"></a>三. 常用元注解</h5><p><strong>Target</strong>：描述了注解修饰的对象范围，取值在<code>java.lang.annotation.ElementType</code>定义，常用的包括：</p>\n<ul>\n<li>  METHOD：用于描述方法</li>\n<li>  PACKAGE：用于描述包</li>\n<li>  PARAMETER：用于描述方法变量</li>\n<li>  TYPE：用于描述类、接口或 enum 类型</li>\n</ul>\n<p><strong>Retention</strong>: 表示注解保留时间长短。取值在<code>java.lang.annotation.RetentionPolicy</code>中，取值为：</p>\n<ul>\n<li>  SOURCE：在源文件中有效，编译过程中会被忽略</li>\n<li>  CLASS：随源文件一起编译在 class 文件中，运行时忽略</li>\n<li>  RUNTIME：在运行时有效</li>\n</ul>\n<p>只有定义为<code>RetentionPolicy.RUNTIME</code>时，我们才能通过注解反射获取到注解。<br>所以，假设我们要自定义一个注解，它用在字段上，并且可以通过反射获取到，功能是用来描述字段的长度和作用。可以定义如下，<a href=\"https://gitee.com/lingzhexi/annotation\">代码见</a></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//  注解用于字段上</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 保留到运行时，可通过注解获取</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyField</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    String <span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"四-示例-反射获取注解\"><a href=\"#四-示例-反射获取注解\" class=\"headerlink\" title=\"四. 示例 - 反射获取注解\"></a>四. 示例 - 反射获取注解</h5><p>先定义一个注解：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyField</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    String <span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通过反射获取注解</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFieldTest</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用我们的自定义注解</span>\n    <span class=\"token annotation punctuation\">@MyField</span><span class=\"token punctuation\">(</span>description <span class=\"token operator\">=</span> <span class=\"token string\">\"用户名\"</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMyField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 获取类模板</span>\n        Class <span class=\"token class-name\">c</span> <span class=\"token operator\">=</span> MyFieldTest<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 获取所有字段</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Field f <span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 判断这个字段是否有MyField注解</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyField<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                MyField annotation <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyField<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字段:[\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"], 描述:[\"</span> <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">description</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"], 长度:[\"</span> <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435883.png\"> 运行结果</p>\n<h5 id=\"应用场景一：自定义注解-拦截器-实现登录校验\"><a href=\"#应用场景一：自定义注解-拦截器-实现登录校验\" class=\"headerlink\" title=\"应用场景一：自定义注解 + 拦截器 实现登录校验\"></a>应用场景一：自定义注解 + 拦截器 实现登录校验</h5><p>接下来，我们使用 springboot 拦截器实现这样一个功能，如果方法上加了 @LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。<br>首先定义一个 LoginRequired 注解</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoginRequired</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>然后写两个简单的接口，访问 sourceA，sourceB 资源</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexController</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sourceA\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">sourceA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"你正在访问sourceA资源\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sourceB\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">sourceB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"你正在访问sourceB资源\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>没添加拦截器之前成功访问</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435589.png\"> sourceB</p>\n<p>实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SourceAccessInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">,</span> HttpServletResponse response<span class=\"token punctuation\">,</span> Object handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入拦截器了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">,</span> HttpServletResponse response<span class=\"token punctuation\">,</span> Object handler<span class=\"token punctuation\">,</span> ModelAndView modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">,</span> HttpServletResponse response<span class=\"token punctuation\">,</span> Object handler<span class=\"token punctuation\">,</span> Exception ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>实现 spring 类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorTrainConfigurer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span>InterceptorRegistry registry<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceAccessInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>拦截成功如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435486.png\"> 拦截了</p>\n<p>在 sourceB 方法上添加我们的登录注解 @LoginRequired</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexController</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sourceA\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">sourceA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"你正在访问sourceA资源\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@LoginRequired</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sourceB\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">sourceB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"你正在访问sourceB资源\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>简单实现登录拦截逻辑</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span>HttpServletRequest request<span class=\"token punctuation\">,</span> HttpServletResponse response<span class=\"token punctuation\">,</span> Object handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入拦截器了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 反射获取方法上的LoginRequred注解</span>\n        HandlerMethod handlerMethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HandlerMethod<span class=\"token punctuation\">)</span>handler<span class=\"token punctuation\">;</span>\n        LoginRequired loginRequired <span class=\"token operator\">=</span> handlerMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>LoginRequired<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loginRequired <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 有LoginRequired注解说明需要登录，提示用户登录</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json; charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你访问的资源需要登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>运行成功，访问 sourceB 时需要登录了，访问 sourceA 则不用登录，完整代码见<a href=\"https://links.jianshu.com/go?to=https://github.com/zebinh/annotation-demo\">我的 GitHub</a>  </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435779.png\"> sourceA</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435907.png\"> sourceB</p>\n<h5 id=\"应用场景二：自定义注解-AOP-实现日志打印\"><a href=\"#应用场景二：自定义注解-AOP-实现日志打印\" class=\"headerlink\" title=\"应用场景二：自定义注解 + AOP 实现日志打印\"></a>应用场景二：自定义注解 + AOP 实现日志打印</h5><p>先导入切面需要的依赖包</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>定义一个注解 @MyLog</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyLog</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>定义一个切面类，见如下代码注释理解：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\" spellcheck=\"true\">// 1.表明这是一个切面类</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLogAspect</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 切面最主要的就是切点，所有的故事都围绕切点发生</span>\n    <span class=\"token comment\" spellcheck=\"true\">// logPointCut()代表切点名称</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logPointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 3. 环绕通知</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logPointCut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAround</span><span class=\"token punctuation\">(</span>ProceedingJoinPoint joinPoint<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取方法名称</span>\n        String methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 获取入参</span>\n        Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> param <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Object o <span class=\"token operator\">:</span> param<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">+</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入[\"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\"]方法,参数为:\"</span> <span class=\"token operator\">+</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 继续执行方法</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            throwable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>methodName <span class=\"token operator\">+</span> <span class=\"token string\">\"方法执行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在步骤二中的 IndexController 写一个 sourceC 进行测试，加上我们的自定义注解：</p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@MyLog</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sourceC/&amp;#123;source_name&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">sourceC</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source_name\"</span><span class=\"token punctuation\">)</span> String sourceName<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"你正在访问sourceC资源\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>启动 springboot web 项目，输入访问地址</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436680.png\"> 访问项目</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436427.png\"> 切面成功</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041533682.jpg\"></p>","more":"<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.jianshu.com/p/a7bedc771204\">www.jianshu.com</a></p>\n</blockquote>\n<p>项目示例：<a href=\"https://gitee.com/lingzhexi/annotation\">https://gitee.com/lingzhexi/annotation</a></p>\n<p>Java 自定义注解一般使用场景为：自定义注解 + 拦截器或者 AOP，使用自定义注解来自己设计框架，使得代码看起来非常优雅。<br>本文将先从自定义注解的基础概念说起，然后开始实战，写小段代码实现自定义注解 + 拦截器，自定义注解 + AOP。</p>\n<h5 id=\"一-什么是注解-Annotation\"><a href=\"#一-什么是注解-Annotation\" class=\"headerlink\" title=\"一. 什么是注解 (Annotation)\"></a>一. 什么是注解 (Annotation)</h5><p>Java 注解是什么，以下是引用自维基百科的内容</p>\n<blockquote>\n<p>Java 注解又称 Java 标注，是 JDK5.0 版本开始支持加入源代码的特殊语法元数据。<br>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义 Java 标注。</p>\n</blockquote>\n<h5 id=\"二-注解体系图\"><a href=\"#二-注解体系图\" class=\"headerlink\" title=\"二. 注解体系图\"></a>二. 注解体系图</h5><p>元注解：<code>java.lang.annotation</code>中提供了元注解，可以使用这些注解来定义自己的注解。主要使用的是 Target 和 Retention 注解  </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436917.png\"> 元注解</p>\n<p>注解处理类：既然上面定义了注解，那得有办法拿到我们定义的注解啊。</p>\n<p><code>java.lang.reflect.AnnotatedElement</code></p>\n<p>接口则提供了该功能。注解的处理是通过 java 反射来处理的。如下，反射相关的类 Class, Method, Field 都实现了 AnnotatedElement 接口。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435447.png\"> 反射处理</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436928.png\"> AnnotatedElement 接口方法</p>\n<p>因此，只要我们通过反射拿到 Class, Method, Field 类，就能够通过 getAnnotation(Class<T>) 拿到我们想要的注解并取值。</p>\n<h5 id=\"三-常用元注解\"><a href=\"#三-常用元注解\" class=\"headerlink\" title=\"三. 常用元注解\"></a>三. 常用元注解</h5><p><strong>Target</strong>：描述了注解修饰的对象范围，取值在<code>java.lang.annotation.ElementType</code>定义，常用的包括：</p>\n<ul>\n<li>  METHOD：用于描述方法</li>\n<li>  PACKAGE：用于描述包</li>\n<li>  PARAMETER：用于描述方法变量</li>\n<li>  TYPE：用于描述类、接口或 enum 类型</li>\n</ul>\n<p><strong>Retention</strong>: 表示注解保留时间长短。取值在<code>java.lang.annotation.RetentionPolicy</code>中，取值为：</p>\n<ul>\n<li>  SOURCE：在源文件中有效，编译过程中会被忽略</li>\n<li>  CLASS：随源文件一起编译在 class 文件中，运行时忽略</li>\n<li>  RUNTIME：在运行时有效</li>\n</ul>\n<p>只有定义为<code>RetentionPolicy.RUNTIME</code>时，我们才能通过注解反射获取到注解。<br>所以，假设我们要自定义一个注解，它用在字段上，并且可以通过反射获取到，功能是用来描述字段的长度和作用。可以定义如下，<a href=\"https://gitee.com/lingzhexi/annotation\">代码见</a></p>\n<pre><code class=\"java\">@Target(ElementType.FIELD)  //  注解用于字段上\n@Retention(RetentionPolicy.RUNTIME)  // 保留到运行时，可通过注解获取\npublic @interface MyField &#123;\n    String description();\n    int length();\n&#125;\n</code></pre>\n<h5 id=\"四-示例-反射获取注解\"><a href=\"#四-示例-反射获取注解\" class=\"headerlink\" title=\"四. 示例 - 反射获取注解\"></a>四. 示例 - 反射获取注解</h5><p>先定义一个注解：</p>\n<pre><code class=\"java\">@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyField &#123;\n    String description();\n    int length();\n&#125;\n</code></pre>\n<p>通过反射获取注解</p>\n<pre><code class=\"java\">public class MyFieldTest &#123;\n\n    //使用我们的自定义注解\n    @MyField(description = &quot;用户名&quot;, length = 12)\n    private String username;\n\n    @Test\n    public void testMyField()&#123;\n\n        // 获取类模板\n        Class c = MyFieldTest.class;\n\n        // 获取所有字段\n        for(Field f : c.getDeclaredFields())&#123;\n            // 判断这个字段是否有MyField注解\n            if(f.isAnnotationPresent(MyField.class))&#123;\n                MyField annotation = f.getAnnotation(MyField.class);\n                System.out.println(&quot;字段:[&quot; + f.getName() + &quot;], 描述:[&quot; + annotation.description() + &quot;], 长度:[&quot; + annotation.length() +&quot;]&quot;);\n            &#125;\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435883.png\"> 运行结果</p>\n<h5 id=\"应用场景一：自定义注解-拦截器-实现登录校验\"><a href=\"#应用场景一：自定义注解-拦截器-实现登录校验\" class=\"headerlink\" title=\"应用场景一：自定义注解 + 拦截器 实现登录校验\"></a>应用场景一：自定义注解 + 拦截器 实现登录校验</h5><p>接下来，我们使用 springboot 拦截器实现这样一个功能，如果方法上加了 @LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。<br>首先定义一个 LoginRequired 注解</p>\n<pre><code class=\"java\">@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface LoginRequired &#123;\n    \n&#125;\n</code></pre>\n<p>然后写两个简单的接口，访问 sourceA，sourceB 资源</p>\n<pre><code class=\"java\">@RestController\npublic class IndexController &#123;\n\n    @GetMapping(&quot;/sourceA&quot;)\n    public String sourceA()&#123;\n        return &quot;你正在访问sourceA资源&quot;;\n    &#125;\n\n    @GetMapping(&quot;/sourceB&quot;)\n    public String sourceB()&#123;\n        return &quot;你正在访问sourceB资源&quot;;\n    &#125;\n\n&#125;\n</code></pre>\n<p>没添加拦截器之前成功访问</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435589.png\"> sourceB</p>\n<p>实现 spring 的 HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：</p>\n<pre><code class=\"java\">public class SourceAccessInterceptor implements HandlerInterceptor &#123;\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        System.out.println(&quot;进入拦截器了&quot;);\n        return true;\n    &#125;\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n\n    &#125;\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n\n    &#125;\n&#125;\n</code></pre>\n<p>实现 spring 类 WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中</p>\n<pre><code class=\"java\">@Configuration\npublic class InterceptorTrainConfigurer implements WebMvcConfigurer &#123;\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(&quot;/**&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>拦截成功如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435486.png\"> 拦截了</p>\n<p>在 sourceB 方法上添加我们的登录注解 @LoginRequired</p>\n<pre><code class=\"java\">@RestController\npublic class IndexController &#123;\n\n    @GetMapping(&quot;/sourceA&quot;)\n    public String sourceA()&#123;\n        return &quot;你正在访问sourceA资源&quot;;\n    &#125;\n\n    @LoginRequired\n    @GetMapping(&quot;/sourceB&quot;)\n    public String sourceB()&#123;\n        return &quot;你正在访问sourceB资源&quot;;\n    &#125;\n\n&#125;\n</code></pre>\n<p>简单实现登录拦截逻辑</p>\n<pre><code class=\"java\">@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        System.out.println(&quot;进入拦截器了&quot;);\n\n        // 反射获取方法上的LoginRequred注解\n        HandlerMethod handlerMethod = (HandlerMethod)handler;\n        LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class);\n        if(loginRequired == null)&#123;\n            return true;\n        &#125;\n\n        // 有LoginRequired注解说明需要登录，提示用户登录\n        response.setContentType(&quot;application/json; charset=utf-8&quot;);\n        response.getWriter().print(&quot;你访问的资源需要登录&quot;);\n        return false;\n    &#125;\n</code></pre>\n<p>运行成功，访问 sourceB 时需要登录了，访问 sourceA 则不用登录，完整代码见<a href=\"https://links.jianshu.com/go?to=https://github.com/zebinh/annotation-demo\">我的 GitHub</a>  </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435779.png\"> sourceA</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041435907.png\"> sourceB</p>\n<h5 id=\"应用场景二：自定义注解-AOP-实现日志打印\"><a href=\"#应用场景二：自定义注解-AOP-实现日志打印\" class=\"headerlink\" title=\"应用场景二：自定义注解 + AOP 实现日志打印\"></a>应用场景二：自定义注解 + AOP 实现日志打印</h5><p>先导入切面需要的依赖包</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n     &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>定义一个注解 @MyLog</p>\n<pre><code class=\"java\">@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyLog &#123;\n    \n&#125;\n</code></pre>\n<p>定义一个切面类，见如下代码注释理解：</p>\n<pre><code class=\"java\">@Aspect // 1.表明这是一个切面类\n@Component\npublic class MyLogAspect &#123;\n\n    // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名\n    // 切面最主要的就是切点，所有的故事都围绕切点发生\n    // logPointCut()代表切点名称\n    @Pointcut(&quot;@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)&quot;)\n    public void logPointCut()&#123;&#125;;\n\n    // 3. 环绕通知\n    @Around(&quot;logPointCut()&quot;)\n    public void logAround(ProceedingJoinPoint joinPoint)&#123;\n        // 获取方法名称\n        String methodName = joinPoint.getSignature().getName();\n        // 获取入参\n        Object[] param = joinPoint.getArgs();\n\n        StringBuilder sb = new StringBuilder();\n        for(Object o : param)&#123;\n            sb.append(o + &quot;; &quot;);\n        &#125;\n        System.out.println(&quot;进入[&quot; + methodName + &quot;]方法,参数为:&quot; + sb.toString());\n\n        // 继续执行方法\n        try &#123;\n            joinPoint.proceed();\n        &#125; catch (Throwable throwable) &#123;\n            throwable.printStackTrace();\n        &#125;\n        System.out.println(methodName + &quot;方法执行结束&quot;);\n\n    &#125;\n&#125;\n</code></pre>\n<p>在步骤二中的 IndexController 写一个 sourceC 进行测试，加上我们的自定义注解：</p>\n<pre><code class=\"java\">    @MyLog\n    @GetMapping(&quot;/sourceC/&#123;source_name&#125;&quot;)\n    public String sourceC(@PathVariable(&quot;source_name&quot;) String sourceName)&#123;\n        return &quot;你正在访问sourceC资源&quot;;\n    &#125;\n</code></pre>\n<p>启动 springboot web 项目，输入访问地址</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436680.png\"> 访问项目</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203041436427.png\"> 切面成功</p>"},{"title":"解析城市地铁AFC系统","summary":"清分结算、线路、车站、设备、票卡中心","abbrlink":30078,"date":"2022-03-29T02:00:30.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031029134.jpg)\n\n<!--more-->\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [zhuanlan.zhihu.com](https://zhuanlan.zhihu.com/p/429357685)\n\n# **城市地铁 AFC 系统简析**\n\n## **一、概述**\n\n### **1.1 定义**\n\nAFC 系统的全称是 Automatic Fare Collection System（城市轨道交通自动售检票系统），是基于计算机、通信、网络、自动控制等技术，实现轨道交通售票、检票、计费、收费、统计、清分、管理等全过程的自动化系统。\n\n### **1.2 主要工作内容**\n\n1、实现中央系统、车站系统和终端设备之间的数据传输和处理;\n\n2、完成车 票制作、售票、检票、票务统计分析等工作;\n\n3、及时、准确地进行客流、票务数据的收集、整理、汇总和分析;\n\n4、实现轨道交通收益方得清分结算以及与关联系统等外部接口之间的清分结算，同时可通过银行或金融机构实现账务划拨。\n\n### **1.3 优点**\n\n1）人性化\n\n自动售检票系统为乘客设置符合人体工程学的售票机和检票机，方便乘客的购票和检票过程，同时提供符合地方特色的操作方式。\n\n2）客流导向\n\n自动售检票系统可方便地实现乘车路径和优惠票价管理，可以通过票价设定来为乘客提供导向性服务，实现柔性的乘客自主对出行路径或时段的选择，合理调整客流分布。\n\n3）社会效益\n\n一方面可通过自动售检票系统形成对区域交通客流状况的调整，对设备生活产生影响；另一方面可通过自动化的设施影响人们的行为模式，规范管理模式，客服票务工作中的舞弊行为。\n\n4）提供信息支持\n\n自动售检票系统能够提供客流量、票务收入等统计信息，为轨道交通的运营、规划和管理决策提供信息支持。\n\n5）提高运行效率\n\n轨道交通运营单位可根据自动售检票系统的客流信息及时调整运行组织，合理安排运能，提高运行效率。\n\n6）强化安全管理\n\n借助自动售检票系统付费区的封闭条件，可对乘客在车站内的行为进行管理。在紧急情况下，可通过闸机的禁止和方形措施疏导人群，实现安全管理。\n\n7）提升形象\n\n通过自动售检票系统，增加了轨道交通与乘客的操作交互性和乘客的主动性，良好的应用效果可以提升运营企业和所在地的形象。\n\n## **二、结构及功能**\n\nAFC 的结构按层次划分一般分为车票、车站终端设备（SLE）、车站计算机系统（SC）、线路中央计算机系统（LC/LCC）、清分系统（CC）五个层次。\n\n![清分、线路、车站、设备、票卡](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001436.jpeg)\n\n\n![整体结构图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001029.jpeg)\n\n\n### **2.1 清分结算管理中心 (ACC)**\n\n清分结算中心作为整个 AFC 系统的顶层，主要是负责对地铁线路之间、地铁与城市一卡通系统之间的清分结算，对不同运营实体 (或线路) 进行管理，制定业务规程和票务规则，制作发行票卡全面协调不同线路间的日常运营。\n\n### **2.2 线路中心 (LC)**\n\n线路中心管理线路内交易、客流、设备、票务等数据, 负责本线路系统的 AFC 收费数据、设备状态数据、客流量数据的采集，生成报表以及对账等。LC 将收集的本线路数据上传到清结算管理中心，接受清结算管理中心的命令与参数，并将其下发到各车站系统; 同时，LC 也管理和下发线路级的命令及系统参数，完成本线路的票务管理，具备票卡的库存管理和调配等功能。\n\n![LC 物理结构图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001786.jpeg)\n\n\n### **2.3 车站中心 (SC)**\n\n车站中心用来监控和配置车站本地设备，采集本地车站设备数据, 对车站的每一台设备实施监督、控制、参数化、数据采集和审计。SC 接收 LC 的指令和参数, 并下发到相应的设备。同时，SC 采集设备的交易、事件和审计数据，上传到 LC。\n\n![车站中心](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001365.jpeg)\n\n\n### **2.4 AFC 车站终端设备 (SLE)**\n\nAFC 设备层包括闸机、半自动售票机、自动售票机、自动充值机、银行圈存机、自助查询机、移动支付设备和其他设备等。\n\n### **2.4.1 自动检票机 (AGM)**\n\n自动检票机设置在付费区与非付费区的交界处，起着分割付费区与非付费区的作用，实现票卡有效性验证、检票、通行控制、车票回收等功能。\n\n![闸机AGM（也有称 GATE）](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001316.jpeg)\n\n自动检票机主要由进站用乘客显示器、出站用乘客显示器、进站用读写器、出站用读写器、车票回收模块、站员操作部、通道显示部、闸门、主控单元、电源模块、人体检测部、外部接口等构成。\n\n### **2.4.2 半自动售票机 (BOM)**\n\n设于车站服务中心，具有售票、补票和售补票功能，对于一卡通车票的处理可以按照一卡通系统的规则进行。\n\n同时可发行各种类型的车票，兼有对车票进行查验和票据打印等功能，所能实现的功能可由系统参数灵活设置。\n\n![半自动售票机 BOM](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001343.jpeg)\n\n当与 SC 通信中断时，具有离线工作和数据保存能力。BOM 可以保存 30 天的运营数据。在通信恢复时，能将保存的交易数据及时上传给 SC。\n\n我方提供半自动售票机上电启动后一分钟之内即可进入正常服务状态。\n\n### **2.4.3 自动查询机 (TCM)**\n\n自动查询机安装在地铁车站非付费区, 供在轨道交通内使用的地铁专用票及城市 “一卡通 \" 的自助查询验票及发布地铁通知信息等服务。自动查询机操作界面采用触摸屏操作方式，由 LC 下载乘客服务信息，可以回溯车票内记录的使用历史，包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等。每笔交易信息应逐条显示。对有问题的交易记录应可以醒目的提示。自动查询机在进行车票查询时，能对车票的有效性进行检查，如有问题能显示原因，并提示乘客去半自动售票机处处理。\n\n![自动售票机 TCM (又称TVM)](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001444.jpeg)\n\n自动查询机具有如下功能:\n\n1.  所有车票均可查询；可以自动播放预先录制的影音片断，可以向乘客介绍系统使. 用方法、显示公司通告及操作指南动画短片等信息；\n\n2.  可以回溯车票内记录的使用历史 (包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等) ;\n\n3.  交易信息逐条显示;\n\n4.  问题的交易记录可以醒目的提示;\n\n5.  车票有效性进行检查，如有问题显示原因并提示。\n\n### **2.5 票卡 (Ticket）**\n\n五层架构体系的底层为票卡层，它是乘客所持的车费支付媒介，包括计次票、储值票、单程票、员工票和其他车票等。\n\n## **三、AFC 系统主要业务流程**\n\nAFC 系统运营管理的业务流程是一体三面，面向信息流，物流和责任链，主要包括三大业务流程：\n\n### （1）票务管理流程\n\n![管理流程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001220.jpeg)\n\n### （2）收益管理流程\n\n![收益管理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001547.jpeg)\n\n### （3）运营维护流程\n\n![运营维护](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001372.jpeg)\n","source":"_posts/2022-03-03-解析城市地铁AFC系统.md","raw":"---\ntitle: 解析城市地铁AFC系统\ntags: 地铁AFC\ncategories: 地铁AFC\nsummary: 清分结算、线路、车站、设备、票卡中心\nabbrlink: 30078\ndate: 2022-03-29 10:00:30\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031029134.jpg)\n\n<!--more-->\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [zhuanlan.zhihu.com](https://zhuanlan.zhihu.com/p/429357685)\n\n# **城市地铁 AFC 系统简析**\n\n## **一、概述**\n\n### **1.1 定义**\n\nAFC 系统的全称是 Automatic Fare Collection System（城市轨道交通自动售检票系统），是基于计算机、通信、网络、自动控制等技术，实现轨道交通售票、检票、计费、收费、统计、清分、管理等全过程的自动化系统。\n\n### **1.2 主要工作内容**\n\n1、实现中央系统、车站系统和终端设备之间的数据传输和处理;\n\n2、完成车 票制作、售票、检票、票务统计分析等工作;\n\n3、及时、准确地进行客流、票务数据的收集、整理、汇总和分析;\n\n4、实现轨道交通收益方得清分结算以及与关联系统等外部接口之间的清分结算，同时可通过银行或金融机构实现账务划拨。\n\n### **1.3 优点**\n\n1）人性化\n\n自动售检票系统为乘客设置符合人体工程学的售票机和检票机，方便乘客的购票和检票过程，同时提供符合地方特色的操作方式。\n\n2）客流导向\n\n自动售检票系统可方便地实现乘车路径和优惠票价管理，可以通过票价设定来为乘客提供导向性服务，实现柔性的乘客自主对出行路径或时段的选择，合理调整客流分布。\n\n3）社会效益\n\n一方面可通过自动售检票系统形成对区域交通客流状况的调整，对设备生活产生影响；另一方面可通过自动化的设施影响人们的行为模式，规范管理模式，客服票务工作中的舞弊行为。\n\n4）提供信息支持\n\n自动售检票系统能够提供客流量、票务收入等统计信息，为轨道交通的运营、规划和管理决策提供信息支持。\n\n5）提高运行效率\n\n轨道交通运营单位可根据自动售检票系统的客流信息及时调整运行组织，合理安排运能，提高运行效率。\n\n6）强化安全管理\n\n借助自动售检票系统付费区的封闭条件，可对乘客在车站内的行为进行管理。在紧急情况下，可通过闸机的禁止和方形措施疏导人群，实现安全管理。\n\n7）提升形象\n\n通过自动售检票系统，增加了轨道交通与乘客的操作交互性和乘客的主动性，良好的应用效果可以提升运营企业和所在地的形象。\n\n## **二、结构及功能**\n\nAFC 的结构按层次划分一般分为车票、车站终端设备（SLE）、车站计算机系统（SC）、线路中央计算机系统（LC/LCC）、清分系统（CC）五个层次。\n\n![清分、线路、车站、设备、票卡](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001436.jpeg)\n\n\n![整体结构图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001029.jpeg)\n\n\n### **2.1 清分结算管理中心 (ACC)**\n\n清分结算中心作为整个 AFC 系统的顶层，主要是负责对地铁线路之间、地铁与城市一卡通系统之间的清分结算，对不同运营实体 (或线路) 进行管理，制定业务规程和票务规则，制作发行票卡全面协调不同线路间的日常运营。\n\n### **2.2 线路中心 (LC)**\n\n线路中心管理线路内交易、客流、设备、票务等数据, 负责本线路系统的 AFC 收费数据、设备状态数据、客流量数据的采集，生成报表以及对账等。LC 将收集的本线路数据上传到清结算管理中心，接受清结算管理中心的命令与参数，并将其下发到各车站系统; 同时，LC 也管理和下发线路级的命令及系统参数，完成本线路的票务管理，具备票卡的库存管理和调配等功能。\n\n![LC 物理结构图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001786.jpeg)\n\n\n### **2.3 车站中心 (SC)**\n\n车站中心用来监控和配置车站本地设备，采集本地车站设备数据, 对车站的每一台设备实施监督、控制、参数化、数据采集和审计。SC 接收 LC 的指令和参数, 并下发到相应的设备。同时，SC 采集设备的交易、事件和审计数据，上传到 LC。\n\n![车站中心](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001365.jpeg)\n\n\n### **2.4 AFC 车站终端设备 (SLE)**\n\nAFC 设备层包括闸机、半自动售票机、自动售票机、自动充值机、银行圈存机、自助查询机、移动支付设备和其他设备等。\n\n### **2.4.1 自动检票机 (AGM)**\n\n自动检票机设置在付费区与非付费区的交界处，起着分割付费区与非付费区的作用，实现票卡有效性验证、检票、通行控制、车票回收等功能。\n\n![闸机AGM（也有称 GATE）](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001316.jpeg)\n\n自动检票机主要由进站用乘客显示器、出站用乘客显示器、进站用读写器、出站用读写器、车票回收模块、站员操作部、通道显示部、闸门、主控单元、电源模块、人体检测部、外部接口等构成。\n\n### **2.4.2 半自动售票机 (BOM)**\n\n设于车站服务中心，具有售票、补票和售补票功能，对于一卡通车票的处理可以按照一卡通系统的规则进行。\n\n同时可发行各种类型的车票，兼有对车票进行查验和票据打印等功能，所能实现的功能可由系统参数灵活设置。\n\n![半自动售票机 BOM](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001343.jpeg)\n\n当与 SC 通信中断时，具有离线工作和数据保存能力。BOM 可以保存 30 天的运营数据。在通信恢复时，能将保存的交易数据及时上传给 SC。\n\n我方提供半自动售票机上电启动后一分钟之内即可进入正常服务状态。\n\n### **2.4.3 自动查询机 (TCM)**\n\n自动查询机安装在地铁车站非付费区, 供在轨道交通内使用的地铁专用票及城市 “一卡通 \" 的自助查询验票及发布地铁通知信息等服务。自动查询机操作界面采用触摸屏操作方式，由 LC 下载乘客服务信息，可以回溯车票内记录的使用历史，包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等。每笔交易信息应逐条显示。对有问题的交易记录应可以醒目的提示。自动查询机在进行车票查询时，能对车票的有效性进行检查，如有问题能显示原因，并提示乘客去半自动售票机处处理。\n\n![自动售票机 TCM (又称TVM)](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001444.jpeg)\n\n自动查询机具有如下功能:\n\n1.  所有车票均可查询；可以自动播放预先录制的影音片断，可以向乘客介绍系统使. 用方法、显示公司通告及操作指南动画短片等信息；\n\n2.  可以回溯车票内记录的使用历史 (包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等) ;\n\n3.  交易信息逐条显示;\n\n4.  问题的交易记录可以醒目的提示;\n\n5.  车票有效性进行检查，如有问题显示原因并提示。\n\n### **2.5 票卡 (Ticket）**\n\n五层架构体系的底层为票卡层，它是乘客所持的车费支付媒介，包括计次票、储值票、单程票、员工票和其他车票等。\n\n## **三、AFC 系统主要业务流程**\n\nAFC 系统运营管理的业务流程是一体三面，面向信息流，物流和责任链，主要包括三大业务流程：\n\n### （1）票务管理流程\n\n![管理流程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001220.jpeg)\n\n### （2）收益管理流程\n\n![收益管理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001547.jpeg)\n\n### （3）运营维护流程\n\n![运营维护](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001372.jpeg)\n","slug":"解析城市地铁AFC系统","published":1,"updated":"2024-12-16T12:11:11.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyon001aj0krdauagdri","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031029134.jpg\"></p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://zhuanlan.zhihu.com/p/429357685\">zhuanlan.zhihu.com</a></p>\n</blockquote>\n<h1 id=\"城市地铁-AFC-系统简析\"><a href=\"#城市地铁-AFC-系统简析\" class=\"headerlink\" title=\"城市地铁 AFC 系统简析\"></a><strong>城市地铁 AFC 系统简析</strong></h1><h2 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a><strong>一、概述</strong></h2><h3 id=\"1-1-定义\"><a href=\"#1-1-定义\" class=\"headerlink\" title=\"1.1 定义\"></a><strong>1.1 定义</strong></h3><p>AFC 系统的全称是 Automatic Fare Collection System（城市轨道交通自动售检票系统），是基于计算机、通信、网络、自动控制等技术，实现轨道交通售票、检票、计费、收费、统计、清分、管理等全过程的自动化系统。</p>\n<h3 id=\"1-2-主要工作内容\"><a href=\"#1-2-主要工作内容\" class=\"headerlink\" title=\"1.2 主要工作内容\"></a><strong>1.2 主要工作内容</strong></h3><p>1、实现中央系统、车站系统和终端设备之间的数据传输和处理;</p>\n<p>2、完成车 票制作、售票、检票、票务统计分析等工作;</p>\n<p>3、及时、准确地进行客流、票务数据的收集、整理、汇总和分析;</p>\n<p>4、实现轨道交通收益方得清分结算以及与关联系统等外部接口之间的清分结算，同时可通过银行或金融机构实现账务划拨。</p>\n<h3 id=\"1-3-优点\"><a href=\"#1-3-优点\" class=\"headerlink\" title=\"1.3 优点\"></a><strong>1.3 优点</strong></h3><p>1）人性化</p>\n<p>自动售检票系统为乘客设置符合人体工程学的售票机和检票机，方便乘客的购票和检票过程，同时提供符合地方特色的操作方式。</p>\n<p>2）客流导向</p>\n<p>自动售检票系统可方便地实现乘车路径和优惠票价管理，可以通过票价设定来为乘客提供导向性服务，实现柔性的乘客自主对出行路径或时段的选择，合理调整客流分布。</p>\n<p>3）社会效益</p>\n<p>一方面可通过自动售检票系统形成对区域交通客流状况的调整，对设备生活产生影响；另一方面可通过自动化的设施影响人们的行为模式，规范管理模式，客服票务工作中的舞弊行为。</p>\n<p>4）提供信息支持</p>\n<p>自动售检票系统能够提供客流量、票务收入等统计信息，为轨道交通的运营、规划和管理决策提供信息支持。</p>\n<p>5）提高运行效率</p>\n<p>轨道交通运营单位可根据自动售检票系统的客流信息及时调整运行组织，合理安排运能，提高运行效率。</p>\n<p>6）强化安全管理</p>\n<p>借助自动售检票系统付费区的封闭条件，可对乘客在车站内的行为进行管理。在紧急情况下，可通过闸机的禁止和方形措施疏导人群，实现安全管理。</p>\n<p>7）提升形象</p>\n<p>通过自动售检票系统，增加了轨道交通与乘客的操作交互性和乘客的主动性，良好的应用效果可以提升运营企业和所在地的形象。</p>\n<h2 id=\"二、结构及功能\"><a href=\"#二、结构及功能\" class=\"headerlink\" title=\"二、结构及功能\"></a><strong>二、结构及功能</strong></h2><p>AFC 的结构按层次划分一般分为车票、车站终端设备（SLE）、车站计算机系统（SC）、线路中央计算机系统（LC/LCC）、清分系统（CC）五个层次。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001436.jpeg\" alt=\"清分、线路、车站、设备、票卡\"></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001029.jpeg\" alt=\"整体结构图\"></p>\n<h3 id=\"2-1-清分结算管理中心-ACC\"><a href=\"#2-1-清分结算管理中心-ACC\" class=\"headerlink\" title=\"2.1 清分结算管理中心 (ACC)\"></a><strong>2.1 清分结算管理中心 (ACC)</strong></h3><p>清分结算中心作为整个 AFC 系统的顶层，主要是负责对地铁线路之间、地铁与城市一卡通系统之间的清分结算，对不同运营实体 (或线路) 进行管理，制定业务规程和票务规则，制作发行票卡全面协调不同线路间的日常运营。</p>\n<h3 id=\"2-2-线路中心-LC\"><a href=\"#2-2-线路中心-LC\" class=\"headerlink\" title=\"2.2 线路中心 (LC)\"></a><strong>2.2 线路中心 (LC)</strong></h3><p>线路中心管理线路内交易、客流、设备、票务等数据, 负责本线路系统的 AFC 收费数据、设备状态数据、客流量数据的采集，生成报表以及对账等。LC 将收集的本线路数据上传到清结算管理中心，接受清结算管理中心的命令与参数，并将其下发到各车站系统; 同时，LC 也管理和下发线路级的命令及系统参数，完成本线路的票务管理，具备票卡的库存管理和调配等功能。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001786.jpeg\" alt=\"LC 物理结构图\"></p>\n<h3 id=\"2-3-车站中心-SC\"><a href=\"#2-3-车站中心-SC\" class=\"headerlink\" title=\"2.3 车站中心 (SC)\"></a><strong>2.3 车站中心 (SC)</strong></h3><p>车站中心用来监控和配置车站本地设备，采集本地车站设备数据, 对车站的每一台设备实施监督、控制、参数化、数据采集和审计。SC 接收 LC 的指令和参数, 并下发到相应的设备。同时，SC 采集设备的交易、事件和审计数据，上传到 LC。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001365.jpeg\" alt=\"车站中心\"></p>\n<h3 id=\"2-4-AFC-车站终端设备-SLE\"><a href=\"#2-4-AFC-车站终端设备-SLE\" class=\"headerlink\" title=\"2.4 AFC 车站终端设备 (SLE)\"></a><strong>2.4 AFC 车站终端设备 (SLE)</strong></h3><p>AFC 设备层包括闸机、半自动售票机、自动售票机、自动充值机、银行圈存机、自助查询机、移动支付设备和其他设备等。</p>\n<h3 id=\"2-4-1-自动检票机-AGM\"><a href=\"#2-4-1-自动检票机-AGM\" class=\"headerlink\" title=\"2.4.1 自动检票机 (AGM)\"></a><strong>2.4.1 自动检票机 (AGM)</strong></h3><p>自动检票机设置在付费区与非付费区的交界处，起着分割付费区与非付费区的作用，实现票卡有效性验证、检票、通行控制、车票回收等功能。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001316.jpeg\" alt=\"闸机AGM（也有称 GATE）\"></p>\n<p>自动检票机主要由进站用乘客显示器、出站用乘客显示器、进站用读写器、出站用读写器、车票回收模块、站员操作部、通道显示部、闸门、主控单元、电源模块、人体检测部、外部接口等构成。</p>\n<h3 id=\"2-4-2-半自动售票机-BOM\"><a href=\"#2-4-2-半自动售票机-BOM\" class=\"headerlink\" title=\"2.4.2 半自动售票机 (BOM)\"></a><strong>2.4.2 半自动售票机 (BOM)</strong></h3><p>设于车站服务中心，具有售票、补票和售补票功能，对于一卡通车票的处理可以按照一卡通系统的规则进行。</p>\n<p>同时可发行各种类型的车票，兼有对车票进行查验和票据打印等功能，所能实现的功能可由系统参数灵活设置。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001343.jpeg\" alt=\"半自动售票机 BOM\"></p>\n<p>当与 SC 通信中断时，具有离线工作和数据保存能力。BOM 可以保存 30 天的运营数据。在通信恢复时，能将保存的交易数据及时上传给 SC。</p>\n<p>我方提供半自动售票机上电启动后一分钟之内即可进入正常服务状态。</p>\n<h3 id=\"2-4-3-自动查询机-TCM\"><a href=\"#2-4-3-自动查询机-TCM\" class=\"headerlink\" title=\"2.4.3 自动查询机 (TCM)\"></a><strong>2.4.3 自动查询机 (TCM)</strong></h3><p>自动查询机安装在地铁车站非付费区, 供在轨道交通内使用的地铁专用票及城市 “一卡通 “ 的自助查询验票及发布地铁通知信息等服务。自动查询机操作界面采用触摸屏操作方式，由 LC 下载乘客服务信息，可以回溯车票内记录的使用历史，包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等。每笔交易信息应逐条显示。对有问题的交易记录应可以醒目的提示。自动查询机在进行车票查询时，能对车票的有效性进行检查，如有问题能显示原因，并提示乘客去半自动售票机处处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001444.jpeg\" alt=\"自动售票机 TCM (又称TVM)\"></p>\n<p>自动查询机具有如下功能:</p>\n<ol>\n<li><p> 所有车票均可查询；可以自动播放预先录制的影音片断，可以向乘客介绍系统使. 用方法、显示公司通告及操作指南动画短片等信息；</p>\n</li>\n<li><p> 可以回溯车票内记录的使用历史 (包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等) ;</p>\n</li>\n<li><p> 交易信息逐条显示;</p>\n</li>\n<li><p> 问题的交易记录可以醒目的提示;</p>\n</li>\n<li><p> 车票有效性进行检查，如有问题显示原因并提示。</p>\n</li>\n</ol>\n<h3 id=\"2-5-票卡-Ticket）\"><a href=\"#2-5-票卡-Ticket）\" class=\"headerlink\" title=\"2.5 票卡 (Ticket）\"></a><strong>2.5 票卡 (Ticket）</strong></h3><p>五层架构体系的底层为票卡层，它是乘客所持的车费支付媒介，包括计次票、储值票、单程票、员工票和其他车票等。</p>\n<h2 id=\"三、AFC-系统主要业务流程\"><a href=\"#三、AFC-系统主要业务流程\" class=\"headerlink\" title=\"三、AFC 系统主要业务流程\"></a><strong>三、AFC 系统主要业务流程</strong></h2><p>AFC 系统运营管理的业务流程是一体三面，面向信息流，物流和责任链，主要包括三大业务流程：</p>\n<h3 id=\"（1）票务管理流程\"><a href=\"#（1）票务管理流程\" class=\"headerlink\" title=\"（1）票务管理流程\"></a>（1）票务管理流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001220.jpeg\" alt=\"管理流程\"></p>\n<h3 id=\"（2）收益管理流程\"><a href=\"#（2）收益管理流程\" class=\"headerlink\" title=\"（2）收益管理流程\"></a>（2）收益管理流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001547.jpeg\" alt=\"收益管理\"></p>\n<h3 id=\"（3）运营维护流程\"><a href=\"#（3）运营维护流程\" class=\"headerlink\" title=\"（3）运营维护流程\"></a>（3）运营维护流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001372.jpeg\" alt=\"运营维护\"></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031029134.jpg\"></p>","more":"<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://zhuanlan.zhihu.com/p/429357685\">zhuanlan.zhihu.com</a></p>\n</blockquote>\n<h1 id=\"城市地铁-AFC-系统简析\"><a href=\"#城市地铁-AFC-系统简析\" class=\"headerlink\" title=\"城市地铁 AFC 系统简析\"></a><strong>城市地铁 AFC 系统简析</strong></h1><h2 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a><strong>一、概述</strong></h2><h3 id=\"1-1-定义\"><a href=\"#1-1-定义\" class=\"headerlink\" title=\"1.1 定义\"></a><strong>1.1 定义</strong></h3><p>AFC 系统的全称是 Automatic Fare Collection System（城市轨道交通自动售检票系统），是基于计算机、通信、网络、自动控制等技术，实现轨道交通售票、检票、计费、收费、统计、清分、管理等全过程的自动化系统。</p>\n<h3 id=\"1-2-主要工作内容\"><a href=\"#1-2-主要工作内容\" class=\"headerlink\" title=\"1.2 主要工作内容\"></a><strong>1.2 主要工作内容</strong></h3><p>1、实现中央系统、车站系统和终端设备之间的数据传输和处理;</p>\n<p>2、完成车 票制作、售票、检票、票务统计分析等工作;</p>\n<p>3、及时、准确地进行客流、票务数据的收集、整理、汇总和分析;</p>\n<p>4、实现轨道交通收益方得清分结算以及与关联系统等外部接口之间的清分结算，同时可通过银行或金融机构实现账务划拨。</p>\n<h3 id=\"1-3-优点\"><a href=\"#1-3-优点\" class=\"headerlink\" title=\"1.3 优点\"></a><strong>1.3 优点</strong></h3><p>1）人性化</p>\n<p>自动售检票系统为乘客设置符合人体工程学的售票机和检票机，方便乘客的购票和检票过程，同时提供符合地方特色的操作方式。</p>\n<p>2）客流导向</p>\n<p>自动售检票系统可方便地实现乘车路径和优惠票价管理，可以通过票价设定来为乘客提供导向性服务，实现柔性的乘客自主对出行路径或时段的选择，合理调整客流分布。</p>\n<p>3）社会效益</p>\n<p>一方面可通过自动售检票系统形成对区域交通客流状况的调整，对设备生活产生影响；另一方面可通过自动化的设施影响人们的行为模式，规范管理模式，客服票务工作中的舞弊行为。</p>\n<p>4）提供信息支持</p>\n<p>自动售检票系统能够提供客流量、票务收入等统计信息，为轨道交通的运营、规划和管理决策提供信息支持。</p>\n<p>5）提高运行效率</p>\n<p>轨道交通运营单位可根据自动售检票系统的客流信息及时调整运行组织，合理安排运能，提高运行效率。</p>\n<p>6）强化安全管理</p>\n<p>借助自动售检票系统付费区的封闭条件，可对乘客在车站内的行为进行管理。在紧急情况下，可通过闸机的禁止和方形措施疏导人群，实现安全管理。</p>\n<p>7）提升形象</p>\n<p>通过自动售检票系统，增加了轨道交通与乘客的操作交互性和乘客的主动性，良好的应用效果可以提升运营企业和所在地的形象。</p>\n<h2 id=\"二、结构及功能\"><a href=\"#二、结构及功能\" class=\"headerlink\" title=\"二、结构及功能\"></a><strong>二、结构及功能</strong></h2><p>AFC 的结构按层次划分一般分为车票、车站终端设备（SLE）、车站计算机系统（SC）、线路中央计算机系统（LC/LCC）、清分系统（CC）五个层次。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001436.jpeg\" alt=\"清分、线路、车站、设备、票卡\"></p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001029.jpeg\" alt=\"整体结构图\"></p>\n<h3 id=\"2-1-清分结算管理中心-ACC\"><a href=\"#2-1-清分结算管理中心-ACC\" class=\"headerlink\" title=\"2.1 清分结算管理中心 (ACC)\"></a><strong>2.1 清分结算管理中心 (ACC)</strong></h3><p>清分结算中心作为整个 AFC 系统的顶层，主要是负责对地铁线路之间、地铁与城市一卡通系统之间的清分结算，对不同运营实体 (或线路) 进行管理，制定业务规程和票务规则，制作发行票卡全面协调不同线路间的日常运营。</p>\n<h3 id=\"2-2-线路中心-LC\"><a href=\"#2-2-线路中心-LC\" class=\"headerlink\" title=\"2.2 线路中心 (LC)\"></a><strong>2.2 线路中心 (LC)</strong></h3><p>线路中心管理线路内交易、客流、设备、票务等数据, 负责本线路系统的 AFC 收费数据、设备状态数据、客流量数据的采集，生成报表以及对账等。LC 将收集的本线路数据上传到清结算管理中心，接受清结算管理中心的命令与参数，并将其下发到各车站系统; 同时，LC 也管理和下发线路级的命令及系统参数，完成本线路的票务管理，具备票卡的库存管理和调配等功能。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001786.jpeg\" alt=\"LC 物理结构图\"></p>\n<h3 id=\"2-3-车站中心-SC\"><a href=\"#2-3-车站中心-SC\" class=\"headerlink\" title=\"2.3 车站中心 (SC)\"></a><strong>2.3 车站中心 (SC)</strong></h3><p>车站中心用来监控和配置车站本地设备，采集本地车站设备数据, 对车站的每一台设备实施监督、控制、参数化、数据采集和审计。SC 接收 LC 的指令和参数, 并下发到相应的设备。同时，SC 采集设备的交易、事件和审计数据，上传到 LC。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001365.jpeg\" alt=\"车站中心\"></p>\n<h3 id=\"2-4-AFC-车站终端设备-SLE\"><a href=\"#2-4-AFC-车站终端设备-SLE\" class=\"headerlink\" title=\"2.4 AFC 车站终端设备 (SLE)\"></a><strong>2.4 AFC 车站终端设备 (SLE)</strong></h3><p>AFC 设备层包括闸机、半自动售票机、自动售票机、自动充值机、银行圈存机、自助查询机、移动支付设备和其他设备等。</p>\n<h3 id=\"2-4-1-自动检票机-AGM\"><a href=\"#2-4-1-自动检票机-AGM\" class=\"headerlink\" title=\"2.4.1 自动检票机 (AGM)\"></a><strong>2.4.1 自动检票机 (AGM)</strong></h3><p>自动检票机设置在付费区与非付费区的交界处，起着分割付费区与非付费区的作用，实现票卡有效性验证、检票、通行控制、车票回收等功能。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001316.jpeg\" alt=\"闸机AGM（也有称 GATE）\"></p>\n<p>自动检票机主要由进站用乘客显示器、出站用乘客显示器、进站用读写器、出站用读写器、车票回收模块、站员操作部、通道显示部、闸门、主控单元、电源模块、人体检测部、外部接口等构成。</p>\n<h3 id=\"2-4-2-半自动售票机-BOM\"><a href=\"#2-4-2-半自动售票机-BOM\" class=\"headerlink\" title=\"2.4.2 半自动售票机 (BOM)\"></a><strong>2.4.2 半自动售票机 (BOM)</strong></h3><p>设于车站服务中心，具有售票、补票和售补票功能，对于一卡通车票的处理可以按照一卡通系统的规则进行。</p>\n<p>同时可发行各种类型的车票，兼有对车票进行查验和票据打印等功能，所能实现的功能可由系统参数灵活设置。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001343.jpeg\" alt=\"半自动售票机 BOM\"></p>\n<p>当与 SC 通信中断时，具有离线工作和数据保存能力。BOM 可以保存 30 天的运营数据。在通信恢复时，能将保存的交易数据及时上传给 SC。</p>\n<p>我方提供半自动售票机上电启动后一分钟之内即可进入正常服务状态。</p>\n<h3 id=\"2-4-3-自动查询机-TCM\"><a href=\"#2-4-3-自动查询机-TCM\" class=\"headerlink\" title=\"2.4.3 自动查询机 (TCM)\"></a><strong>2.4.3 自动查询机 (TCM)</strong></h3><p>自动查询机安装在地铁车站非付费区, 供在轨道交通内使用的地铁专用票及城市 “一卡通 “ 的自助查询验票及发布地铁通知信息等服务。自动查询机操作界面采用触摸屏操作方式，由 LC 下载乘客服务信息，可以回溯车票内记录的使用历史，包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等。每笔交易信息应逐条显示。对有问题的交易记录应可以醒目的提示。自动查询机在进行车票查询时，能对车票的有效性进行检查，如有问题能显示原因，并提示乘客去半自动售票机处处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001444.jpeg\" alt=\"自动售票机 TCM (又称TVM)\"></p>\n<p>自动查询机具有如下功能:</p>\n<ol>\n<li><p> 所有车票均可查询；可以自动播放预先录制的影音片断，可以向乘客介绍系统使. 用方法、显示公司通告及操作指南动画短片等信息；</p>\n</li>\n<li><p> 可以回溯车票内记录的使用历史 (包括票种、购票时间、进站时间、出站时间、进站地点、出站地点、扣费金额、剩余金额、有效期等) ;</p>\n</li>\n<li><p> 交易信息逐条显示;</p>\n</li>\n<li><p> 问题的交易记录可以醒目的提示;</p>\n</li>\n<li><p> 车票有效性进行检查，如有问题显示原因并提示。</p>\n</li>\n</ol>\n<h3 id=\"2-5-票卡-Ticket）\"><a href=\"#2-5-票卡-Ticket）\" class=\"headerlink\" title=\"2.5 票卡 (Ticket）\"></a><strong>2.5 票卡 (Ticket）</strong></h3><p>五层架构体系的底层为票卡层，它是乘客所持的车费支付媒介，包括计次票、储值票、单程票、员工票和其他车票等。</p>\n<h2 id=\"三、AFC-系统主要业务流程\"><a href=\"#三、AFC-系统主要业务流程\" class=\"headerlink\" title=\"三、AFC 系统主要业务流程\"></a><strong>三、AFC 系统主要业务流程</strong></h2><p>AFC 系统运营管理的业务流程是一体三面，面向信息流，物流和责任链，主要包括三大业务流程：</p>\n<h3 id=\"（1）票务管理流程\"><a href=\"#（1）票务管理流程\" class=\"headerlink\" title=\"（1）票务管理流程\"></a>（1）票务管理流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001220.jpeg\" alt=\"管理流程\"></p>\n<h3 id=\"（2）收益管理流程\"><a href=\"#（2）收益管理流程\" class=\"headerlink\" title=\"（2）收益管理流程\"></a>（2）收益管理流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001547.jpeg\" alt=\"收益管理\"></p>\n<h3 id=\"（3）运营维护流程\"><a href=\"#（3）运营维护流程\" class=\"headerlink\" title=\"（3）运营维护流程\"></a>（3）运营维护流程</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031001372.jpeg\" alt=\"运营维护\"></p>"},{"title":"深入理解消息队列","summary":"理解原理、为何使用、优缺点、选型、优化","abbrlink":44535,"date":"2022-04-19T16:40:02.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080043295.jpg)\n<!--more-->\n\n> 消息队列解决的核心场景：解构、异步、削峰\n\n## 1.为什么使用MQ\n\n​\t公司业务场景，核心：解耦、异步、削峰\n\n### 解耦：\n\n​\tA系统发数据给到BCD系统，如果E系统需要接入？C系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。\n\n![解耦-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203061747025.png)\n\n​\t如果使用MQ，A系统产生一条数据，发送到MQ中，那个系统需要数据自己去MQ消费。如果新的系统需要数据，直接从MQ中消费；某个系统不需要数据的话，取消消费这个MQ即可。这样A系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。\n\n![解耦-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062104532.png)\n\n**总结**：通过一个MQ，Pub/Sub发布订阅消息模型，A系统就和其他系统彻底耦合了。\n\n#### 项目应用：\n\n​\t车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：闸机、半自动售票机、自动售票机、手持机等设备。如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多，当车站增减一个设备就可能需要重新对接接口，造成系统耦合性很高，这样的效率不高且不优雅。所以当系统需要发送命令（生产一个数据），将数据放到MQ中，不需要知道那个设备收到成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到，系统下发设备控制命令，不同设备响应。\n\n### 异步：\n\n​\tA系统接收请求，需要本地入库，还需要BCD三个系统入库，本地入库（3ms），BCD（300ms+400ms+500ms），用户体验很差等待时间太长。业内请求需要做到 200ms 以内，对用户几乎无感。\n\n![异步-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062204267.png)\n\n​\t使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。\n\n![异步-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png)\n\n### 削峰：\n\n​\t每天一段时间，A系统风平浪静，每秒请求数量就50个。结果每次一到 12:00~13:00，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于MySQL，大量请求涌入MySQL，每秒执行约5k条SQL，\n\n​\t一般情况下MySQL 每秒可抗 2k请求，5k的请求可能打死MySQL，导致无法使用。\n\n​\t一旦过了高峰，到了下午就到了低峰期，每秒请求数量 50 左右，对整个系统没有多少压力了。\n\n![削峰-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062301225.png)\n\n如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。\n\n![削峰-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062328446.png)\n\n​\t短暂的挤压后是可允许的，等到高峰期过后，每秒进入MQ的消息降低很多，但是系统依然按照 2k 的请求取消费，A系统很快的就会把挤压解决掉了。\n\n\n\n## 2.MQ的优缺点\n\n- 降低系统可用性，引出如何保证消息高可用\n- 系统复杂度提高，引出如何保证消息没有重复消费、处理消息丢失、保证消息传递顺序性\n- 一致性问题：A系统处理完返回成功，BC处理完写库成功，D写库失败了，数据不能一致了。\n\n## 3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）\n\n| 特性                     | ActiveMQ                              | RabbitMQ                                           | RocketMQ                                                     | Kafka                                                        |\n| ------------------------ | ------------------------------------- | -------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 单机吞吐量               | 万级，比 RocketMQ、Kafka 低一个数量级 | 万级别                                             | 10 万级，支撑高吞吐                                          | 10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景 |\n| topic 数量对吞吐量的影响 |                                       |                                                    | **topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic** | topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源 |\n| 时效性                   | ms 级                                 | **微秒级，这是 RabbitMQ 的一大特点，延迟最低**     | ms 级                                                        | 延迟在 ms 级以内                                             |\n| 可用性                   | 高，基于主从架构实现高可用            | 基于主从架构实现高可用                             | **非常高，分布式架构**                                       | 非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 |\n| 消息可靠性               | 有较低的概率丢失数据                  | 基本不丢                                           | **经过参数优化配置，可以做到 0 丢失**                        | 同 RocketMQ                                                  |\n| 功能支持                 | MQ 领域的功能极其完备                 | 基于 erlang 开发，并发能力很强，性能极好，延时很低 | MQ 功能较为完善，还是分布式的，扩展性好                      | 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用 |\n\n- 单机吞吐量：**RocketMQ** **10万级**\n- 时效性：**RabbitMQ** **微秒级**\n- 可用性：**RocketMQ** **非常高，分布式架构**\n- 消息可靠性：**RocketMQ** **参数优化，可以做到0丢失**\n\n## 4.保证MQ的高可用\n\n### RabbitMQ高可性\n\n​\tRabbitMQ是典型的基于主从（非分布式）做高可用。\n\n​\t三种模式：单机模式、普通集群模式、镜像集群模式\n\n#### 单机模式：\n\n​\tDemo级别，没有生产使用这个\n\n#### 普通集群模式：<无高可用>\n\n​\t多台机器启动多个RabbitMQ实例，每台机器启动一个。**创建的queue，只会放在一个RabbitMQ实例上**，  但每个实例同步 queue 元数据（queue的配置，可通过这个找到queue实例）。实际消费的时候连接到另一个实例，这个实例从queue所在的实例拉取数据。\n\n![普通集群](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203070951779.png)\n\n​\t**没有做到分布式**，只是普通的集群。导致消费者每次随机获取一个实例然后拉取数据，要么是固定连接 queue 的那个实例，前者有**数据拉取的开销**，后者有**单实例性能开销**。\n\n​\t这样只是**提高了吞吐量**，集群多个节点服务某个 queue 的读写操作。\n\n#### 镜像集群模式：<高可用>\n\n​\tRabbitMQ 的高可用模式。和普通集群模型不一样，该模式下，创建的 queue，无论是元数据还是 queue 里的消息都会存在多个实例中，每个节点都有 queue 的**完整镜像**。每次写消息到 queue 时，都会自动**消息同步**到多个实例上 queue 。\n\n![RabbitMQ-高可用-镜像集群](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071023085.png)\n\n##### **如何开启镜像集群模式**？\n\n​\t在后台**新增一个策略**，这个策略就是镜像集群模式的策略。可以指定数据**同步到所有**节点，也可同步到**指定数量**的节点，再次创建queue 的时候，应用这个策略，就会自动同步到其他节点上去了。**好处在于**，你任何一个机器宕机了，没事，其他节点有完整的数据，别的消费者都可以到其他的节点消费。**坏处是**，第一，**同步性能开销大**，网络带宽压力和消耗很重。第二，不**是分布式，没有扩展性**，某个queue 负载很重，加机器，新增的机器包含这个 queue 的所有数据，并**没有办法线性扩展**。如果 queue 的数量很大，大到这个机器上的容量无法容纳该怎么办？\n\n### Kafka 的高可用性\n\n​\tKafka 基本架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic ，这个topic可以划分多个partition，每个 partition 可以存在不同的 broker 上，每个partition 就放一部分的数据。\n\n​\t天然的分布式消息队列，一个topic 的数据，**分散到多个机器上，每个机器放一部分**。\n\n​\tRabbitMQ 之类的并不是什么分布式消息队列，传统的消息队列，只不过提供了集群、HA的机制，无论如何操作，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放 queue 的完整数据。\n\n​\tKafka 0.8 之前没有 HA 机制，任何的 broker 挂了，那个 broker 上的 partition 就废了，就没有办法读写，无法保证高可用。\n\n​\t我们假如创建一个 topic ，指定了其 partition 数量是 3 个 ，分别在三台机器上。但是，如果第二台宕机了，会导致1/3的数据丢失，做不到高可用了。\n\n![Kafka-高可用](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071341869.png)\n\nKafka 0.8 后提供了 HA 机制，就是 **replica 副本机制**。每个 partition 的数据都会同步到其他机器上，形成多个 replica 副本。所有 replica 中选举一个 leader 出来，那么生产者和消费者都跟这个 **leader 打交道**，其他的 replica 就是 follower (从属）。\n写的时候，leader 负责将**数据同步到其他的 follower** 上，读的时候，直接读取 leader 上的数据。\n\n#### 为什么只能读写leader?\n\n​\t如果可以随意读取的每个 follower ，那么就要关系数据的一致性问题了，系统复杂度势必增加。Kafka 会将一个 partition 的所有 replica 分布在不同的机器中，可以提高容错性。\n\n![broker](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071428565.png)\n\n​\t这就是所谓的**高可用**，因为如果某个 broker 宕机了，没事，那么 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面由某个 partition 的 leader ，那么此时会从 follower 中**重新选举**一个新的 leader 出来，继续读写这个 leader 即可。\n\n​\t**写数据**的时候，生产者就写 leader ,然后 leader 将数据落地到写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功消息给生产者（一种模式之一）。\n\n​\t**消费的时候**，只会从 leader 去读，但是只有当一个消费已经被所有 follower 都同步成功返回 ack 后，这个消息才会被消费者读到。 \n\n## 5.保证消息不被重复消费（消费队列保证幂等性）\n\n**大概说一说可能哪些重复消息的问题**\n\nRabbitMQ、RocketMQ、Kafka 都可能出现消息重复消费的问题。\n\n​\tKafka 实际上有个 **offset** 的概念，每个消息写进去，都有一个 offset ，代表**消息的序号**，然后 consumer 消费了数据之后，每隔一段时间（**定时定期**），会把自己消费过的消**息的 offset 提交**一下，表示 \"我消费过来，下次我要重启，就让我继续从上次消费的 offset 来继续消费吧\"。\n\n​\t如果生产重启系统，紧急情况直接 kill 进程，可能导致 consumer 由消息处理，但是没有来的及提交 offset 。重启之后少数消费会再次消费一次。\n\n​\t举个例子。\n\n​\t场景带入，数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset ，代表这条数据的序号，我们就假设分配的 offset 依次是 152/ 153 /154 。消费从 Kafka 去消费的时候也是按照这个顺序。假如消费者消费了 offset= 153 这个数据，刚准备提交 offset 到 Zookeeper ，此时消费者进程被重启。此时消费过的数据 1/2 的offset 没有提交，Kafka 也就不知道你消费 offset = 153 这条数据。重启之后，消费者找 Kafka 说，哥们，你给我把上次我消费的的地方后面的数据继续传给我。由于没有提交 1/2 数据再次传过来，如果消费者没有去重的话，那么就会导致消费重复。\n\n注意：新版本的 Kafka 已经将 `offset` 存储到 Zookeeper 转移到 `Kafka brokers`，并使用内部位移注意 `__consumer_offsets` 进行存储。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071509099.png)\n\n结果就会导致数据 1/2 往数据插入2 次，那么数据就错了。重复消费不可怕，可怕没有考虑重复消费之后，**怎么保证幂等性。**\n\n​\t举例说明。假如有个系统，消费一条消息就是往数据库插入一条数据，要是你消息重复两次，就插入了两条，数据就是错了。但是你消费到第二次的时候，**判断是否消费过了**，若是就直接丢了，这样就保证了一条数据了。\n\n​\t一条数据重复出现两次，数据库只有一条数据，这就保证了系统的幂等性。\n\n​\t幂等性：就是一个数据，或者一个请求，给你重复来多次，你的确保对应的数据是不会改变的，**不能出错。**\n\n#### 如何保证消息的幂等性？\n\n​\t结合业务思考，思路：\n\n- 如果是写库，根据**主键查一下**，如果这个数据有了，就update \n\n- **写 Redis**，每次都是 set ，天然幂等性 。当数据1 消费之后，存入Redis ，再次消费后将修改数据1的值\n\n- 复杂一点，生产者发送每条消息数据的时候，里面假如一个**全局的唯一id**，类似订单id，然后消费之后，先根据这个 id 去比如 Redis 里去查，之前的消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费，那就别处理，保重别重复处理相同的消息即可。\n\n- 基于数据库的**唯一键**来保证重复数据不会重复插入多条。因为有唯一键约束，重复数据插入只会报错，不会导致数据库中出现脏数据。\n\n  ![幂等性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071555682.png)\n\n\n## 6.保证消息的可靠性传输？保证消费不丢失\n\n​\tMQ的基本原则，**数据不能多一条，也不能少一条**，不能多，就是上面说的 重复消费和幂等性的问题。不能少。就是数据别弄丢。\n\n​\t如果用MQ来传递非常核心的肖，如计费、扣费，就需要保证 MQ **绝对不会把计费消息给弄丢**\n\n### RabbitMQ\n\n![消息可靠性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071602457.png)\n\n#### 生产者弄丢了数据\n\n​\t生产者将数据发送到 RabbitMQ ，可能在半路弄丢了，因为网络获取其他问题。\n\n##### 事务机制--消耗性能：\n\n​\t选择 RabbitMQ 提供的**事务功能**，就是生产者**发送数据之前**开启 RabbitMQ事务 `channel.txSelect()` ，然后发送消息，如果消息没有成功被 RabbitMQ 接收，那么生产者会收到异常报错的消息，此时可以回滚事务 `channel.txRollback()`，然后重试发送消息；如果收到消息，那么就可以提交事务了 `channel.txCommit()`\n\n```java\ntry {\n    // 通过工厂创建连接\n    connection = factory.newConnection();\n    // 获取通道\n    channel = connection.createChannel();\n    // 开启事务\n    channel.txSelect();\n    // 这里发送消息\n    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());\n    // 模拟出现异常\n    int result = 1 / 0;\n    // 提交事务\n    channel.txCommit();\n} catch (IOException | TimeoutException e) {\n    // 捕捉异常，回滚事务\n    channel.txRollback();\n}\n```\n\n问题是，RabbitMQ 事务机制，导致吞吐量下来，因为消耗性能。\n\n##### confirm 模式：\n\n​\t如果要保证 RabbitMQ 消息不丢，可以开启 `confirm` 模式，你每次些的**消息都会分配一个唯一的id**。\n​\t如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 `ack` 消息，告诉你这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你一个 `nack` 接口，告诉你这个消息接收失败了，你可以重试。而且你可以结合这个机制自己在**内存里维护每个消息 id 状态**，如果超过一定时间还没有接收这个消息的回调，那个可以重发。\n\n​\t事务机制和 `confirm` 机制最大不同在于，**事务机制是同步的**，你提交一个事务之后会**阻塞**，但是 `confirm` 机制是**异步**的，发送消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会**异步回调**一个接口通知你这个消息接收到了。\n\n​\t所以生产者 **避免丢失数据**，都是用 `confirm` 机制的\n\n> 在 transaction 事务模式的channel 不能设置成 confirm 模式的，这两种不共存\n\n客户端实现生产者 `confirm` 三种方式：\n\n1. **普通 confirm 模式**：每发送一条消息后，调用 `waitForConfirms()` 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。\n\n   ```java\n   channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n   if (!channel.waitForConfirms()) {\n       // 消息发送失败\n       // ...\n   }\n   ```\n\n2. **批量 confirm 模式**：每发送一批消息后，调用 `waitForConfirms()` 方法，等待服务端 confirm。\n\n   ```java\n   channel.confirmSelect();\n   for (int i = 0; i < batchCount; ++i) {\n       channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n   }\n   if (!channel.waitForConfirms()) {\n       // 消息发送失败\n       // ...\n   }\n   ```\n\n3. **异步 confirm 模式**：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。\n\n   ```java\n   SortedSet<Long> confirmSet = Collections.synchronizedSortedSet(new TreeSet<Long>());\n   channel.confirmSelect();\n   channel.addConfirmListener(new ConfirmListener() {\n       public void handleAck(long deliveryTag, boolean multiple) throws IOException {\n           if (multiple) {\n               confirmSet.headSet(deliveryTag + 1).clear();\n           } else {\n               confirmSet.remove(deliveryTag);\n           }\n       }\n   \n       public void handleNack(long deliveryTag, boolean multiple) throws IOException {\n           System.out.println(\"Nack, SeqNo: \" + deliveryTag + \", multiple: \" + multiple);\n           if (multiple) {\n               confirmSet.headSet(deliveryTag + 1).clear();\n           } else {\n               confirmSet.remove(deliveryTag);\n           }\n       }\n   });\n   \n   while (true) {\n       long nextSeqNo = channel.getNextPublishSeqNo();\n       channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n       confirmSet.add(nextSeqNo);\n   }\n   ```\n\n#### RabbitMQ 弄丢了数据\n\n**开启 RabbitMQ的持久化**，消息写入之后会持久化到磁盘，挂后恢复会**自动读取之前存储的数据**，一般数据不会丢。小概率情况，RabbitMQ还没有持久化，就挂了，**可能导致少量数据丢失**。\n\n##### 设置持久化：\n\n- **创建 queue 时候设置为持久化**。可以保证 RabbitMQ **持久化 queue 的元数据**，但是它是不会持久化 queue 里的数据的\n- 第二个是发送消息的时候将消息的 **`deliveryMode` 设置为2**。就是**将消息设置为持久化的**，此时RMQ 就会将消息持久化到磁盘上了。\n\n必须同时设置这个两个持久化才行，RMQ 哪怕挂了，再次重启，也会磁盘上重启恢复 queue，恢复这个 queue 里的数据。\n\n注意，哪怕是开启持久化机制了，也有可能，在消息写到 RMQ中，还没有来的机持久化到磁盘上，结果不巧，此时的 RMQ 挂了，就会导致内存里的的一点点数据丢失。\n\n所以，持久化可以跟生产者那边的 `confirm` 机制配合，只有消息被持久化到磁盘后，才会通知生产者 `ack` 了，哪怕 持久化到磁盘之前，RMQ 挂了，数据丢了，生产者收不到 `ack` ，自己也可以重发。\n\n#### 消费者弄丢了数据：<关闭自动 ack，声明队列，指定noAck = false>\n\nRabbitMQ 如果丢失消息，主要是因为你消费的时候，刚消费，还没去处理，结果进程挂了。重启完后，RMQ认为你都消费了，这数据就丢了。\n\n这时候的用RabbitMQ提供的 `ack` 机制。就是必须**关闭RMQ自动 `ack`**，可以通过 api 来调用就行，然后每次再代码**处理完后**，再**主动的 `ack`**。这样没有处理的话，RMQ 就收不到 `ack`，RMQ 就会认为你没有处理完，这时候RMQ 会把消息分给别的消费者处理，消息就不会丢。 \n\n> RMQ  为了保证消息可靠不丢失提供消息确认机制。消费者在声明队列时，可以指定noAck 参数，当noAck = false, RMQ 会等待消费者显示的发送 ack 信号后，才从内存（和磁盘，如果持久化）移除消息。否则消息一旦被消费者消费，RMQ 会立即删除它。\n\n![RMQ-持久化](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080926472.png)\n\n### Kafka\n\n#### 消费端弄丢了数据\n\n唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边**自动提交了 offset**，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还**没处理，你自己就挂了**，此时这条消息就丢咯。\n\n这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要**关闭自动提交** offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是**可能会有重复消费**，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。\n\n生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。\n\n#### Kafka 弄丢了数据\n\n这块比较常见的一个场景，就是 Kafka **某个 broker 宕机**，然后重新选举 partition 的 leader。大家想想，要是此时其他的 **follower 刚好还有些数据没有同步**，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。\n\n生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。\n\n所以此时一般是要求起码设置如下 4 个参数：\n\n- 给 topic 设置 `replication.factor` 参数：这个值必须大于 1，要求每个 **partition 必须有至少 2 个副本。**\n- 在 Kafka 服务端设置 `min.insync.replicas` 参数：这个值必须大于 1，这个是要求一个 **leader 至少感知到有至少一个 follower** 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。\n- 在 producer 端设置 `acks=all` ：这个是要求每条数据，必须是**写入所有 replica 之后，才能认为是写成功了**。\n- 在 producer 端设置 `retries=MAX` （很大很大很大的一个值，无限次重试的意思）：这个是**要求一旦写入失败，就无限重试**，卡在这里了。\n\n我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。\n\n#### 生产者会不会弄丢数据？\n\n如果按照上述的思路设置了 `acks=all` ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。\n\n## 7.保证消费顺序\n\n我举个例子，我们以前做过一个 mysql `binlog` 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -> mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。\n\n你在 mysql 里增删改一条数据，对应出来了增删改 3 条 `binlog` 日志，接着这三条 `binlog` 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。\n\n本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。\n\n先看看顺序会错乱的俩场景：\n\n- **RabbitMQ**：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。\n\n![RMQ-消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080945298.png)\n\n- **Kafka**：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。\n  消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞**多个线程来并发处理消息**。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。\n\n![Kafka-消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946857.png)\n\n### 解决方案\n\n#### RabbitMQ\n\n拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。\n\n![消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946242.png)\n\n#### Kafka\n\n- 一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。\n- 写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。\n\n![消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946970.png)\n\n","source":"_posts/2022-03-08-深入理解消息队列.md","raw":"---\ntitle: 深入理解消息队列\ntags:\n  - 后端\n  - 消息队列\n  - MQ\ncategories: 后端\nsummary: 理解原理、为何使用、优缺点、选型、优化\nabbrlink: 44535\ndate: 2022-04-20 00:40:02\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080043295.jpg)\n<!--more-->\n\n> 消息队列解决的核心场景：解构、异步、削峰\n\n## 1.为什么使用MQ\n\n​\t公司业务场景，核心：解耦、异步、削峰\n\n### 解耦：\n\n​\tA系统发数据给到BCD系统，如果E系统需要接入？C系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。\n\n![解耦-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203061747025.png)\n\n​\t如果使用MQ，A系统产生一条数据，发送到MQ中，那个系统需要数据自己去MQ消费。如果新的系统需要数据，直接从MQ中消费；某个系统不需要数据的话，取消消费这个MQ即可。这样A系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。\n\n![解耦-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062104532.png)\n\n**总结**：通过一个MQ，Pub/Sub发布订阅消息模型，A系统就和其他系统彻底耦合了。\n\n#### 项目应用：\n\n​\t车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：闸机、半自动售票机、自动售票机、手持机等设备。如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多，当车站增减一个设备就可能需要重新对接接口，造成系统耦合性很高，这样的效率不高且不优雅。所以当系统需要发送命令（生产一个数据），将数据放到MQ中，不需要知道那个设备收到成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到，系统下发设备控制命令，不同设备响应。\n\n### 异步：\n\n​\tA系统接收请求，需要本地入库，还需要BCD三个系统入库，本地入库（3ms），BCD（300ms+400ms+500ms），用户体验很差等待时间太长。业内请求需要做到 200ms 以内，对用户几乎无感。\n\n![异步-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062204267.png)\n\n​\t使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。\n\n![异步-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png)\n\n### 削峰：\n\n​\t每天一段时间，A系统风平浪静，每秒请求数量就50个。结果每次一到 12:00~13:00，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于MySQL，大量请求涌入MySQL，每秒执行约5k条SQL，\n\n​\t一般情况下MySQL 每秒可抗 2k请求，5k的请求可能打死MySQL，导致无法使用。\n\n​\t一旦过了高峰，到了下午就到了低峰期，每秒请求数量 50 左右，对整个系统没有多少压力了。\n\n![削峰-1](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062301225.png)\n\n如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。\n\n![削峰-2](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062328446.png)\n\n​\t短暂的挤压后是可允许的，等到高峰期过后，每秒进入MQ的消息降低很多，但是系统依然按照 2k 的请求取消费，A系统很快的就会把挤压解决掉了。\n\n\n\n## 2.MQ的优缺点\n\n- 降低系统可用性，引出如何保证消息高可用\n- 系统复杂度提高，引出如何保证消息没有重复消费、处理消息丢失、保证消息传递顺序性\n- 一致性问题：A系统处理完返回成功，BC处理完写库成功，D写库失败了，数据不能一致了。\n\n## 3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）\n\n| 特性                     | ActiveMQ                              | RabbitMQ                                           | RocketMQ                                                     | Kafka                                                        |\n| ------------------------ | ------------------------------------- | -------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 单机吞吐量               | 万级，比 RocketMQ、Kafka 低一个数量级 | 万级别                                             | 10 万级，支撑高吞吐                                          | 10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景 |\n| topic 数量对吞吐量的影响 |                                       |                                                    | **topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic** | topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源 |\n| 时效性                   | ms 级                                 | **微秒级，这是 RabbitMQ 的一大特点，延迟最低**     | ms 级                                                        | 延迟在 ms 级以内                                             |\n| 可用性                   | 高，基于主从架构实现高可用            | 基于主从架构实现高可用                             | **非常高，分布式架构**                                       | 非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 |\n| 消息可靠性               | 有较低的概率丢失数据                  | 基本不丢                                           | **经过参数优化配置，可以做到 0 丢失**                        | 同 RocketMQ                                                  |\n| 功能支持                 | MQ 领域的功能极其完备                 | 基于 erlang 开发，并发能力很强，性能极好，延时很低 | MQ 功能较为完善，还是分布式的，扩展性好                      | 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用 |\n\n- 单机吞吐量：**RocketMQ** **10万级**\n- 时效性：**RabbitMQ** **微秒级**\n- 可用性：**RocketMQ** **非常高，分布式架构**\n- 消息可靠性：**RocketMQ** **参数优化，可以做到0丢失**\n\n## 4.保证MQ的高可用\n\n### RabbitMQ高可性\n\n​\tRabbitMQ是典型的基于主从（非分布式）做高可用。\n\n​\t三种模式：单机模式、普通集群模式、镜像集群模式\n\n#### 单机模式：\n\n​\tDemo级别，没有生产使用这个\n\n#### 普通集群模式：<无高可用>\n\n​\t多台机器启动多个RabbitMQ实例，每台机器启动一个。**创建的queue，只会放在一个RabbitMQ实例上**，  但每个实例同步 queue 元数据（queue的配置，可通过这个找到queue实例）。实际消费的时候连接到另一个实例，这个实例从queue所在的实例拉取数据。\n\n![普通集群](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203070951779.png)\n\n​\t**没有做到分布式**，只是普通的集群。导致消费者每次随机获取一个实例然后拉取数据，要么是固定连接 queue 的那个实例，前者有**数据拉取的开销**，后者有**单实例性能开销**。\n\n​\t这样只是**提高了吞吐量**，集群多个节点服务某个 queue 的读写操作。\n\n#### 镜像集群模式：<高可用>\n\n​\tRabbitMQ 的高可用模式。和普通集群模型不一样，该模式下，创建的 queue，无论是元数据还是 queue 里的消息都会存在多个实例中，每个节点都有 queue 的**完整镜像**。每次写消息到 queue 时，都会自动**消息同步**到多个实例上 queue 。\n\n![RabbitMQ-高可用-镜像集群](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071023085.png)\n\n##### **如何开启镜像集群模式**？\n\n​\t在后台**新增一个策略**，这个策略就是镜像集群模式的策略。可以指定数据**同步到所有**节点，也可同步到**指定数量**的节点，再次创建queue 的时候，应用这个策略，就会自动同步到其他节点上去了。**好处在于**，你任何一个机器宕机了，没事，其他节点有完整的数据，别的消费者都可以到其他的节点消费。**坏处是**，第一，**同步性能开销大**，网络带宽压力和消耗很重。第二，不**是分布式，没有扩展性**，某个queue 负载很重，加机器，新增的机器包含这个 queue 的所有数据，并**没有办法线性扩展**。如果 queue 的数量很大，大到这个机器上的容量无法容纳该怎么办？\n\n### Kafka 的高可用性\n\n​\tKafka 基本架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic ，这个topic可以划分多个partition，每个 partition 可以存在不同的 broker 上，每个partition 就放一部分的数据。\n\n​\t天然的分布式消息队列，一个topic 的数据，**分散到多个机器上，每个机器放一部分**。\n\n​\tRabbitMQ 之类的并不是什么分布式消息队列，传统的消息队列，只不过提供了集群、HA的机制，无论如何操作，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放 queue 的完整数据。\n\n​\tKafka 0.8 之前没有 HA 机制，任何的 broker 挂了，那个 broker 上的 partition 就废了，就没有办法读写，无法保证高可用。\n\n​\t我们假如创建一个 topic ，指定了其 partition 数量是 3 个 ，分别在三台机器上。但是，如果第二台宕机了，会导致1/3的数据丢失，做不到高可用了。\n\n![Kafka-高可用](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071341869.png)\n\nKafka 0.8 后提供了 HA 机制，就是 **replica 副本机制**。每个 partition 的数据都会同步到其他机器上，形成多个 replica 副本。所有 replica 中选举一个 leader 出来，那么生产者和消费者都跟这个 **leader 打交道**，其他的 replica 就是 follower (从属）。\n写的时候，leader 负责将**数据同步到其他的 follower** 上，读的时候，直接读取 leader 上的数据。\n\n#### 为什么只能读写leader?\n\n​\t如果可以随意读取的每个 follower ，那么就要关系数据的一致性问题了，系统复杂度势必增加。Kafka 会将一个 partition 的所有 replica 分布在不同的机器中，可以提高容错性。\n\n![broker](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071428565.png)\n\n​\t这就是所谓的**高可用**，因为如果某个 broker 宕机了，没事，那么 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面由某个 partition 的 leader ，那么此时会从 follower 中**重新选举**一个新的 leader 出来，继续读写这个 leader 即可。\n\n​\t**写数据**的时候，生产者就写 leader ,然后 leader 将数据落地到写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功消息给生产者（一种模式之一）。\n\n​\t**消费的时候**，只会从 leader 去读，但是只有当一个消费已经被所有 follower 都同步成功返回 ack 后，这个消息才会被消费者读到。 \n\n## 5.保证消息不被重复消费（消费队列保证幂等性）\n\n**大概说一说可能哪些重复消息的问题**\n\nRabbitMQ、RocketMQ、Kafka 都可能出现消息重复消费的问题。\n\n​\tKafka 实际上有个 **offset** 的概念，每个消息写进去，都有一个 offset ，代表**消息的序号**，然后 consumer 消费了数据之后，每隔一段时间（**定时定期**），会把自己消费过的消**息的 offset 提交**一下，表示 \"我消费过来，下次我要重启，就让我继续从上次消费的 offset 来继续消费吧\"。\n\n​\t如果生产重启系统，紧急情况直接 kill 进程，可能导致 consumer 由消息处理，但是没有来的及提交 offset 。重启之后少数消费会再次消费一次。\n\n​\t举个例子。\n\n​\t场景带入，数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset ，代表这条数据的序号，我们就假设分配的 offset 依次是 152/ 153 /154 。消费从 Kafka 去消费的时候也是按照这个顺序。假如消费者消费了 offset= 153 这个数据，刚准备提交 offset 到 Zookeeper ，此时消费者进程被重启。此时消费过的数据 1/2 的offset 没有提交，Kafka 也就不知道你消费 offset = 153 这条数据。重启之后，消费者找 Kafka 说，哥们，你给我把上次我消费的的地方后面的数据继续传给我。由于没有提交 1/2 数据再次传过来，如果消费者没有去重的话，那么就会导致消费重复。\n\n注意：新版本的 Kafka 已经将 `offset` 存储到 Zookeeper 转移到 `Kafka brokers`，并使用内部位移注意 `__consumer_offsets` 进行存储。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071509099.png)\n\n结果就会导致数据 1/2 往数据插入2 次，那么数据就错了。重复消费不可怕，可怕没有考虑重复消费之后，**怎么保证幂等性。**\n\n​\t举例说明。假如有个系统，消费一条消息就是往数据库插入一条数据，要是你消息重复两次，就插入了两条，数据就是错了。但是你消费到第二次的时候，**判断是否消费过了**，若是就直接丢了，这样就保证了一条数据了。\n\n​\t一条数据重复出现两次，数据库只有一条数据，这就保证了系统的幂等性。\n\n​\t幂等性：就是一个数据，或者一个请求，给你重复来多次，你的确保对应的数据是不会改变的，**不能出错。**\n\n#### 如何保证消息的幂等性？\n\n​\t结合业务思考，思路：\n\n- 如果是写库，根据**主键查一下**，如果这个数据有了，就update \n\n- **写 Redis**，每次都是 set ，天然幂等性 。当数据1 消费之后，存入Redis ，再次消费后将修改数据1的值\n\n- 复杂一点，生产者发送每条消息数据的时候，里面假如一个**全局的唯一id**，类似订单id，然后消费之后，先根据这个 id 去比如 Redis 里去查，之前的消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费，那就别处理，保重别重复处理相同的消息即可。\n\n- 基于数据库的**唯一键**来保证重复数据不会重复插入多条。因为有唯一键约束，重复数据插入只会报错，不会导致数据库中出现脏数据。\n\n  ![幂等性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071555682.png)\n\n\n## 6.保证消息的可靠性传输？保证消费不丢失\n\n​\tMQ的基本原则，**数据不能多一条，也不能少一条**，不能多，就是上面说的 重复消费和幂等性的问题。不能少。就是数据别弄丢。\n\n​\t如果用MQ来传递非常核心的肖，如计费、扣费，就需要保证 MQ **绝对不会把计费消息给弄丢**\n\n### RabbitMQ\n\n![消息可靠性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071602457.png)\n\n#### 生产者弄丢了数据\n\n​\t生产者将数据发送到 RabbitMQ ，可能在半路弄丢了，因为网络获取其他问题。\n\n##### 事务机制--消耗性能：\n\n​\t选择 RabbitMQ 提供的**事务功能**，就是生产者**发送数据之前**开启 RabbitMQ事务 `channel.txSelect()` ，然后发送消息，如果消息没有成功被 RabbitMQ 接收，那么生产者会收到异常报错的消息，此时可以回滚事务 `channel.txRollback()`，然后重试发送消息；如果收到消息，那么就可以提交事务了 `channel.txCommit()`\n\n```java\ntry {\n    // 通过工厂创建连接\n    connection = factory.newConnection();\n    // 获取通道\n    channel = connection.createChannel();\n    // 开启事务\n    channel.txSelect();\n    // 这里发送消息\n    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());\n    // 模拟出现异常\n    int result = 1 / 0;\n    // 提交事务\n    channel.txCommit();\n} catch (IOException | TimeoutException e) {\n    // 捕捉异常，回滚事务\n    channel.txRollback();\n}\n```\n\n问题是，RabbitMQ 事务机制，导致吞吐量下来，因为消耗性能。\n\n##### confirm 模式：\n\n​\t如果要保证 RabbitMQ 消息不丢，可以开启 `confirm` 模式，你每次些的**消息都会分配一个唯一的id**。\n​\t如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 `ack` 消息，告诉你这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你一个 `nack` 接口，告诉你这个消息接收失败了，你可以重试。而且你可以结合这个机制自己在**内存里维护每个消息 id 状态**，如果超过一定时间还没有接收这个消息的回调，那个可以重发。\n\n​\t事务机制和 `confirm` 机制最大不同在于，**事务机制是同步的**，你提交一个事务之后会**阻塞**，但是 `confirm` 机制是**异步**的，发送消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会**异步回调**一个接口通知你这个消息接收到了。\n\n​\t所以生产者 **避免丢失数据**，都是用 `confirm` 机制的\n\n> 在 transaction 事务模式的channel 不能设置成 confirm 模式的，这两种不共存\n\n客户端实现生产者 `confirm` 三种方式：\n\n1. **普通 confirm 模式**：每发送一条消息后，调用 `waitForConfirms()` 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。\n\n   ```java\n   channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n   if (!channel.waitForConfirms()) {\n       // 消息发送失败\n       // ...\n   }\n   ```\n\n2. **批量 confirm 模式**：每发送一批消息后，调用 `waitForConfirms()` 方法，等待服务端 confirm。\n\n   ```java\n   channel.confirmSelect();\n   for (int i = 0; i < batchCount; ++i) {\n       channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n   }\n   if (!channel.waitForConfirms()) {\n       // 消息发送失败\n       // ...\n   }\n   ```\n\n3. **异步 confirm 模式**：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。\n\n   ```java\n   SortedSet<Long> confirmSet = Collections.synchronizedSortedSet(new TreeSet<Long>());\n   channel.confirmSelect();\n   channel.addConfirmListener(new ConfirmListener() {\n       public void handleAck(long deliveryTag, boolean multiple) throws IOException {\n           if (multiple) {\n               confirmSet.headSet(deliveryTag + 1).clear();\n           } else {\n               confirmSet.remove(deliveryTag);\n           }\n       }\n   \n       public void handleNack(long deliveryTag, boolean multiple) throws IOException {\n           System.out.println(\"Nack, SeqNo: \" + deliveryTag + \", multiple: \" + multiple);\n           if (multiple) {\n               confirmSet.headSet(deliveryTag + 1).clear();\n           } else {\n               confirmSet.remove(deliveryTag);\n           }\n       }\n   });\n   \n   while (true) {\n       long nextSeqNo = channel.getNextPublishSeqNo();\n       channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n       confirmSet.add(nextSeqNo);\n   }\n   ```\n\n#### RabbitMQ 弄丢了数据\n\n**开启 RabbitMQ的持久化**，消息写入之后会持久化到磁盘，挂后恢复会**自动读取之前存储的数据**，一般数据不会丢。小概率情况，RabbitMQ还没有持久化，就挂了，**可能导致少量数据丢失**。\n\n##### 设置持久化：\n\n- **创建 queue 时候设置为持久化**。可以保证 RabbitMQ **持久化 queue 的元数据**，但是它是不会持久化 queue 里的数据的\n- 第二个是发送消息的时候将消息的 **`deliveryMode` 设置为2**。就是**将消息设置为持久化的**，此时RMQ 就会将消息持久化到磁盘上了。\n\n必须同时设置这个两个持久化才行，RMQ 哪怕挂了，再次重启，也会磁盘上重启恢复 queue，恢复这个 queue 里的数据。\n\n注意，哪怕是开启持久化机制了，也有可能，在消息写到 RMQ中，还没有来的机持久化到磁盘上，结果不巧，此时的 RMQ 挂了，就会导致内存里的的一点点数据丢失。\n\n所以，持久化可以跟生产者那边的 `confirm` 机制配合，只有消息被持久化到磁盘后，才会通知生产者 `ack` 了，哪怕 持久化到磁盘之前，RMQ 挂了，数据丢了，生产者收不到 `ack` ，自己也可以重发。\n\n#### 消费者弄丢了数据：<关闭自动 ack，声明队列，指定noAck = false>\n\nRabbitMQ 如果丢失消息，主要是因为你消费的时候，刚消费，还没去处理，结果进程挂了。重启完后，RMQ认为你都消费了，这数据就丢了。\n\n这时候的用RabbitMQ提供的 `ack` 机制。就是必须**关闭RMQ自动 `ack`**，可以通过 api 来调用就行，然后每次再代码**处理完后**，再**主动的 `ack`**。这样没有处理的话，RMQ 就收不到 `ack`，RMQ 就会认为你没有处理完，这时候RMQ 会把消息分给别的消费者处理，消息就不会丢。 \n\n> RMQ  为了保证消息可靠不丢失提供消息确认机制。消费者在声明队列时，可以指定noAck 参数，当noAck = false, RMQ 会等待消费者显示的发送 ack 信号后，才从内存（和磁盘，如果持久化）移除消息。否则消息一旦被消费者消费，RMQ 会立即删除它。\n\n![RMQ-持久化](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080926472.png)\n\n### Kafka\n\n#### 消费端弄丢了数据\n\n唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边**自动提交了 offset**，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还**没处理，你自己就挂了**，此时这条消息就丢咯。\n\n这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要**关闭自动提交** offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是**可能会有重复消费**，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。\n\n生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。\n\n#### Kafka 弄丢了数据\n\n这块比较常见的一个场景，就是 Kafka **某个 broker 宕机**，然后重新选举 partition 的 leader。大家想想，要是此时其他的 **follower 刚好还有些数据没有同步**，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。\n\n生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。\n\n所以此时一般是要求起码设置如下 4 个参数：\n\n- 给 topic 设置 `replication.factor` 参数：这个值必须大于 1，要求每个 **partition 必须有至少 2 个副本。**\n- 在 Kafka 服务端设置 `min.insync.replicas` 参数：这个值必须大于 1，这个是要求一个 **leader 至少感知到有至少一个 follower** 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。\n- 在 producer 端设置 `acks=all` ：这个是要求每条数据，必须是**写入所有 replica 之后，才能认为是写成功了**。\n- 在 producer 端设置 `retries=MAX` （很大很大很大的一个值，无限次重试的意思）：这个是**要求一旦写入失败，就无限重试**，卡在这里了。\n\n我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。\n\n#### 生产者会不会弄丢数据？\n\n如果按照上述的思路设置了 `acks=all` ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。\n\n## 7.保证消费顺序\n\n我举个例子，我们以前做过一个 mysql `binlog` 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -> mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。\n\n你在 mysql 里增删改一条数据，对应出来了增删改 3 条 `binlog` 日志，接着这三条 `binlog` 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。\n\n本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。\n\n先看看顺序会错乱的俩场景：\n\n- **RabbitMQ**：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。\n\n![RMQ-消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080945298.png)\n\n- **Kafka**：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。\n  消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞**多个线程来并发处理消息**。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。\n\n![Kafka-消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946857.png)\n\n### 解决方案\n\n#### RabbitMQ\n\n拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。\n\n![消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946242.png)\n\n#### Kafka\n\n- 一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。\n- 写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。\n\n![消息顺序](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946970.png)\n\n","slug":"深入理解消息队列","published":1,"updated":"2024-12-16T12:11:11.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyop001dj0kr1xihhoe4","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080043295.jpg\"></p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>消息队列解决的核心场景：解构、异步、削峰</p>\n</blockquote>\n<h2 id=\"1-为什么使用MQ\"><a href=\"#1-为什么使用MQ\" class=\"headerlink\" title=\"1.为什么使用MQ\"></a>1.为什么使用MQ</h2><p>​    公司业务场景，核心：解耦、异步、削峰</p>\n<h3 id=\"解耦：\"><a href=\"#解耦：\" class=\"headerlink\" title=\"解耦：\"></a>解耦：</h3><p>​    A系统发数据给到BCD系统，如果E系统需要接入？C系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203061747025.png\" alt=\"解耦-1\"></p>\n<p>​    如果使用MQ，A系统产生一条数据，发送到MQ中，那个系统需要数据自己去MQ消费。如果新的系统需要数据，直接从MQ中消费；某个系统不需要数据的话，取消消费这个MQ即可。这样A系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062104532.png\" alt=\"解耦-2\"></p>\n<p><strong>总结</strong>：通过一个MQ，Pub/Sub发布订阅消息模型，A系统就和其他系统彻底耦合了。</p>\n<h4 id=\"项目应用：\"><a href=\"#项目应用：\" class=\"headerlink\" title=\"项目应用：\"></a>项目应用：</h4><p>​    车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：闸机、半自动售票机、自动售票机、手持机等设备。如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多，当车站增减一个设备就可能需要重新对接接口，造成系统耦合性很高，这样的效率不高且不优雅。所以当系统需要发送命令（生产一个数据），将数据放到MQ中，不需要知道那个设备收到成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到，系统下发设备控制命令，不同设备响应。</p>\n<h3 id=\"异步：\"><a href=\"#异步：\" class=\"headerlink\" title=\"异步：\"></a>异步：</h3><p>​    A系统接收请求，需要本地入库，还需要BCD三个系统入库，本地入库（3ms），BCD（300ms+400ms+500ms），用户体验很差等待时间太长。业内请求需要做到 200ms 以内，对用户几乎无感。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062204267.png\" alt=\"异步-1\"></p>\n<p>​    使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png\" alt=\"异步-2\"></p>\n<h3 id=\"削峰：\"><a href=\"#削峰：\" class=\"headerlink\" title=\"削峰：\"></a>削峰：</h3><p>​    每天一段时间，A系统风平浪静，每秒请求数量就50个。结果每次一到 12:00~13:00，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于MySQL，大量请求涌入MySQL，每秒执行约5k条SQL，</p>\n<p>​    一般情况下MySQL 每秒可抗 2k请求，5k的请求可能打死MySQL，导致无法使用。</p>\n<p>​    一旦过了高峰，到了下午就到了低峰期，每秒请求数量 50 左右，对整个系统没有多少压力了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062301225.png\" alt=\"削峰-1\"></p>\n<p>如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062328446.png\" alt=\"削峰-2\"></p>\n<p>​    短暂的挤压后是可允许的，等到高峰期过后，每秒进入MQ的消息降低很多，但是系统依然按照 2k 的请求取消费，A系统很快的就会把挤压解决掉了。</p>\n<h2 id=\"2-MQ的优缺点\"><a href=\"#2-MQ的优缺点\" class=\"headerlink\" title=\"2.MQ的优缺点\"></a>2.MQ的优缺点</h2><ul>\n<li>降低系统可用性，引出如何保证消息高可用</li>\n<li>系统复杂度提高，引出如何保证消息没有重复消费、处理消息丢失、保证消息传递顺序性</li>\n<li>一致性问题：A系统处理完返回成功，BC处理完写库成功，D写库失败了，数据不能一致了。</li>\n</ul>\n<h2 id=\"3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）\"><a href=\"#3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）\" class=\"headerlink\" title=\"3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）\"></a>3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）</h2><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单机吞吐量</td>\n<td>万级，比 RocketMQ、Kafka 低一个数量级</td>\n<td>万级别</td>\n<td>10 万级，支撑高吞吐</td>\n<td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>\n</tr>\n<tr>\n<td>topic 数量对吞吐量的影响</td>\n<td></td>\n<td></td>\n<td><strong>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</strong></td>\n<td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>\n</tr>\n<tr>\n<td>时效性</td>\n<td>ms 级</td>\n<td><strong>微秒级，这是 RabbitMQ 的一大特点，延迟最低</strong></td>\n<td>ms 级</td>\n<td>延迟在 ms 级以内</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>高，基于主从架构实现高可用</td>\n<td>基于主从架构实现高可用</td>\n<td><strong>非常高，分布式架构</strong></td>\n<td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\n</tr>\n<tr>\n<td>消息可靠性</td>\n<td>有较低的概率丢失数据</td>\n<td>基本不丢</td>\n<td><strong>经过参数优化配置，可以做到 0 丢失</strong></td>\n<td>同 RocketMQ</td>\n</tr>\n<tr>\n<td>功能支持</td>\n<td>MQ 领域的功能极其完备</td>\n<td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td>\n<td>MQ 功能较为完善，还是分布式的，扩展性好</td>\n<td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>\n</tr>\n</tbody></table>\n<ul>\n<li>单机吞吐量：<strong>RocketMQ</strong> <strong>10万级</strong></li>\n<li>时效性：<strong>RabbitMQ</strong> <strong>微秒级</strong></li>\n<li>可用性：<strong>RocketMQ</strong> <strong>非常高，分布式架构</strong></li>\n<li>消息可靠性：<strong>RocketMQ</strong> <strong>参数优化，可以做到0丢失</strong></li>\n</ul>\n<h2 id=\"4-保证MQ的高可用\"><a href=\"#4-保证MQ的高可用\" class=\"headerlink\" title=\"4.保证MQ的高可用\"></a>4.保证MQ的高可用</h2><h3 id=\"RabbitMQ高可性\"><a href=\"#RabbitMQ高可性\" class=\"headerlink\" title=\"RabbitMQ高可性\"></a>RabbitMQ高可性</h3><p>​    RabbitMQ是典型的基于主从（非分布式）做高可用。</p>\n<p>​    三种模式：单机模式、普通集群模式、镜像集群模式</p>\n<h4 id=\"单机模式：\"><a href=\"#单机模式：\" class=\"headerlink\" title=\"单机模式：\"></a>单机模式：</h4><p>​    Demo级别，没有生产使用这个</p>\n<h4 id=\"普通集群模式：-lt-无高可用-gt\"><a href=\"#普通集群模式：-lt-无高可用-gt\" class=\"headerlink\" title=\"普通集群模式：&lt;无高可用&gt;\"></a>普通集群模式：&lt;无高可用&gt;</h4><p>​    多台机器启动多个RabbitMQ实例，每台机器启动一个。<strong>创建的queue，只会放在一个RabbitMQ实例上</strong>，  但每个实例同步 queue 元数据（queue的配置，可通过这个找到queue实例）。实际消费的时候连接到另一个实例，这个实例从queue所在的实例拉取数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203070951779.png\" alt=\"普通集群\"></p>\n<p>​    <strong>没有做到分布式</strong>，只是普通的集群。导致消费者每次随机获取一个实例然后拉取数据，要么是固定连接 queue 的那个实例，前者有<strong>数据拉取的开销</strong>，后者有<strong>单实例性能开销</strong>。</p>\n<p>​    这样只是<strong>提高了吞吐量</strong>，集群多个节点服务某个 queue 的读写操作。</p>\n<h4 id=\"镜像集群模式：-lt-高可用-gt\"><a href=\"#镜像集群模式：-lt-高可用-gt\" class=\"headerlink\" title=\"镜像集群模式：&lt;高可用&gt;\"></a>镜像集群模式：&lt;高可用&gt;</h4><p>​    RabbitMQ 的高可用模式。和普通集群模型不一样，该模式下，创建的 queue，无论是元数据还是 queue 里的消息都会存在多个实例中，每个节点都有 queue 的<strong>完整镜像</strong>。每次写消息到 queue 时，都会自动<strong>消息同步</strong>到多个实例上 queue 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071023085.png\" alt=\"RabbitMQ-高可用-镜像集群\"></p>\n<h5 id=\"如何开启镜像集群模式？\"><a href=\"#如何开启镜像集群模式？\" class=\"headerlink\" title=\"如何开启镜像集群模式？\"></a><strong>如何开启镜像集群模式</strong>？</h5><p>​    在后台<strong>新增一个策略</strong>，这个策略就是镜像集群模式的策略。可以指定数据<strong>同步到所有</strong>节点，也可同步到<strong>指定数量</strong>的节点，再次创建queue 的时候，应用这个策略，就会自动同步到其他节点上去了。<strong>好处在于</strong>，你任何一个机器宕机了，没事，其他节点有完整的数据，别的消费者都可以到其他的节点消费。<strong>坏处是</strong>，第一，<strong>同步性能开销大</strong>，网络带宽压力和消耗很重。第二，不<strong>是分布式，没有扩展性</strong>，某个queue 负载很重，加机器，新增的机器包含这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>。如果 queue 的数量很大，大到这个机器上的容量无法容纳该怎么办？</p>\n<h3 id=\"Kafka-的高可用性\"><a href=\"#Kafka-的高可用性\" class=\"headerlink\" title=\"Kafka 的高可用性\"></a>Kafka 的高可用性</h3><p>​    Kafka 基本架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic ，这个topic可以划分多个partition，每个 partition 可以存在不同的 broker 上，每个partition 就放一部分的数据。</p>\n<p>​    天然的分布式消息队列，一个topic 的数据，<strong>分散到多个机器上，每个机器放一部分</strong>。</p>\n<p>​    RabbitMQ 之类的并不是什么分布式消息队列，传统的消息队列，只不过提供了集群、HA的机制，无论如何操作，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放 queue 的完整数据。</p>\n<p>​    Kafka 0.8 之前没有 HA 机制，任何的 broker 挂了，那个 broker 上的 partition 就废了，就没有办法读写，无法保证高可用。</p>\n<p>​    我们假如创建一个 topic ，指定了其 partition 数量是 3 个 ，分别在三台机器上。但是，如果第二台宕机了，会导致1/3的数据丢失，做不到高可用了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071341869.png\" alt=\"Kafka-高可用\"></p>\n<p>Kafka 0.8 后提供了 HA 机制，就是 <strong>replica 副本机制</strong>。每个 partition 的数据都会同步到其他机器上，形成多个 replica 副本。所有 replica 中选举一个 leader 出来，那么生产者和消费者都跟这个 <strong>leader 打交道</strong>，其他的 replica 就是 follower (从属）。<br>写的时候，leader 负责将<strong>数据同步到其他的 follower</strong> 上，读的时候，直接读取 leader 上的数据。</p>\n<h4 id=\"为什么只能读写leader\"><a href=\"#为什么只能读写leader\" class=\"headerlink\" title=\"为什么只能读写leader?\"></a>为什么只能读写leader?</h4><p>​    如果可以随意读取的每个 follower ，那么就要关系数据的一致性问题了，系统复杂度势必增加。Kafka 会将一个 partition 的所有 replica 分布在不同的机器中，可以提高容错性。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071428565.png\" alt=\"broker\"></p>\n<p>​    这就是所谓的<strong>高可用</strong>，因为如果某个 broker 宕机了，没事，那么 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面由某个 partition 的 leader ，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，继续读写这个 leader 即可。</p>\n<p>​    <strong>写数据</strong>的时候，生产者就写 leader ,然后 leader 将数据落地到写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功消息给生产者（一种模式之一）。</p>\n<p>​    <strong>消费的时候</strong>，只会从 leader 去读，但是只有当一个消费已经被所有 follower 都同步成功返回 ack 后，这个消息才会被消费者读到。 </p>\n<h2 id=\"5-保证消息不被重复消费（消费队列保证幂等性）\"><a href=\"#5-保证消息不被重复消费（消费队列保证幂等性）\" class=\"headerlink\" title=\"5.保证消息不被重复消费（消费队列保证幂等性）\"></a>5.保证消息不被重复消费（消费队列保证幂等性）</h2><p><strong>大概说一说可能哪些重复消息的问题</strong></p>\n<p>RabbitMQ、RocketMQ、Kafka 都可能出现消息重复消费的问题。</p>\n<p>​    Kafka 实际上有个 <strong>offset</strong> 的概念，每个消息写进去，都有一个 offset ，代表<strong>消息的序号</strong>，然后 consumer 消费了数据之后，每隔一段时间（<strong>定时定期</strong>），会把自己消费过的消<strong>息的 offset 提交</strong>一下，表示 “我消费过来，下次我要重启，就让我继续从上次消费的 offset 来继续消费吧”。</p>\n<p>​    如果生产重启系统，紧急情况直接 kill 进程，可能导致 consumer 由消息处理，但是没有来的及提交 offset 。重启之后少数消费会再次消费一次。</p>\n<p>​    举个例子。</p>\n<p>​    场景带入，数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset ，代表这条数据的序号，我们就假设分配的 offset 依次是 152/ 153 /154 。消费从 Kafka 去消费的时候也是按照这个顺序。假如消费者消费了 offset= 153 这个数据，刚准备提交 offset 到 Zookeeper ，此时消费者进程被重启。此时消费过的数据 1/2 的offset 没有提交，Kafka 也就不知道你消费 offset = 153 这条数据。重启之后，消费者找 Kafka 说，哥们，你给我把上次我消费的的地方后面的数据继续传给我。由于没有提交 1/2 数据再次传过来，如果消费者没有去重的话，那么就会导致消费重复。</p>\n<p>注意：新版本的 Kafka 已经将 <code>offset</code> 存储到 Zookeeper 转移到 <code>Kafka brokers</code>，并使用内部位移注意 <code>__consumer_offsets</code> 进行存储。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071509099.png\"></p>\n<p>结果就会导致数据 1/2 往数据插入2 次，那么数据就错了。重复消费不可怕，可怕没有考虑重复消费之后，<strong>怎么保证幂等性。</strong></p>\n<p>​    举例说明。假如有个系统，消费一条消息就是往数据库插入一条数据，要是你消息重复两次，就插入了两条，数据就是错了。但是你消费到第二次的时候，<strong>判断是否消费过了</strong>，若是就直接丢了，这样就保证了一条数据了。</p>\n<p>​    一条数据重复出现两次，数据库只有一条数据，这就保证了系统的幂等性。</p>\n<p>​    幂等性：就是一个数据，或者一个请求，给你重复来多次，你的确保对应的数据是不会改变的，<strong>不能出错。</strong></p>\n<h4 id=\"如何保证消息的幂等性？\"><a href=\"#如何保证消息的幂等性？\" class=\"headerlink\" title=\"如何保证消息的幂等性？\"></a>如何保证消息的幂等性？</h4><p>​    结合业务思考，思路：</p>\n<ul>\n<li><p>如果是写库，根据<strong>主键查一下</strong>，如果这个数据有了，就update </p>\n</li>\n<li><p><strong>写 Redis</strong>，每次都是 set ，天然幂等性 。当数据1 消费之后，存入Redis ，再次消费后将修改数据1的值</p>\n</li>\n<li><p>复杂一点，生产者发送每条消息数据的时候，里面假如一个<strong>全局的唯一id</strong>，类似订单id，然后消费之后，先根据这个 id 去比如 Redis 里去查，之前的消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费，那就别处理，保重别重复处理相同的消息即可。</p>\n</li>\n<li><p>基于数据库的<strong>唯一键</strong>来保证重复数据不会重复插入多条。因为有唯一键约束，重复数据插入只会报错，不会导致数据库中出现脏数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071555682.png\" alt=\"幂等性\"></p>\n</li>\n</ul>\n<h2 id=\"6-保证消息的可靠性传输？保证消费不丢失\"><a href=\"#6-保证消息的可靠性传输？保证消费不丢失\" class=\"headerlink\" title=\"6.保证消息的可靠性传输？保证消费不丢失\"></a>6.保证消息的可靠性传输？保证消费不丢失</h2><p>​    MQ的基本原则，<strong>数据不能多一条，也不能少一条</strong>，不能多，就是上面说的 重复消费和幂等性的问题。不能少。就是数据别弄丢。</p>\n<p>​    如果用MQ来传递非常核心的肖，如计费、扣费，就需要保证 MQ <strong>绝对不会把计费消息给弄丢</strong></p>\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071602457.png\" alt=\"消息可靠性\"></p>\n<h4 id=\"生产者弄丢了数据\"><a href=\"#生产者弄丢了数据\" class=\"headerlink\" title=\"生产者弄丢了数据\"></a>生产者弄丢了数据</h4><p>​    生产者将数据发送到 RabbitMQ ，可能在半路弄丢了，因为网络获取其他问题。</p>\n<h5 id=\"事务机制–消耗性能：\"><a href=\"#事务机制–消耗性能：\" class=\"headerlink\" title=\"事务机制–消耗性能：\"></a>事务机制–消耗性能：</h5><p>​    选择 RabbitMQ 提供的<strong>事务功能</strong>，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ事务 <code>channel.txSelect()</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收，那么生产者会收到异常报错的消息，此时可以回滚事务 <code>channel.txRollback()</code>，然后重试发送消息；如果收到消息，那么就可以提交事务了 <code>channel.txCommit()</code></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 通过工厂创建连接</span>\n    connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 获取通道</span>\n    channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 开启事务</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">txSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 这里发送消息</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> MessageProperties<span class=\"token punctuation\">.</span>PERSISTENT_TEXT_PLAIN<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 模拟出现异常</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 提交事务</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">txCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> TimeoutException e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 捕捉异常，回滚事务</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">txRollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>问题是，RabbitMQ 事务机制，导致吞吐量下来，因为消耗性能。</p>\n<h5 id=\"confirm-模式：\"><a href=\"#confirm-模式：\" class=\"headerlink\" title=\"confirm 模式：\"></a>confirm 模式：</h5><p>​    如果要保证 RabbitMQ 消息不丢，可以开启 <code>confirm</code> 模式，你每次些的<strong>消息都会分配一个唯一的id</strong>。<br>​    如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你一个 <code>nack</code> 接口，告诉你这个消息接收失败了，你可以重试。而且你可以结合这个机制自己在<strong>内存里维护每个消息 id 状态</strong>，如果超过一定时间还没有接收这个消息的回调，那个可以重发。</p>\n<p>​    事务机制和 <code>confirm</code> 机制最大不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>，但是 <code>confirm</code> 机制是<strong>异步</strong>的，发送消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会<strong>异步回调</strong>一个接口通知你这个消息接收到了。</p>\n<p>​    所以生产者 <strong>避免丢失数据</strong>，都是用 <code>confirm</code> 机制的</p>\n<blockquote>\n<p>在 transaction 事务模式的channel 不能设置成 confirm 模式的，这两种不共存</p>\n</blockquote>\n<p>客户端实现生产者 <code>confirm</code> 三种方式：</p>\n<ol>\n<li><p><strong>普通 confirm 模式</strong>：每发送一条消息后，调用 <code>waitForConfirms()</code> 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。</p>\n<pre class=\" language-java\"><code class=\"language-java\">channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>ConfirmConfig<span class=\"token punctuation\">.</span>exchangeName<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>routingKey<span class=\"token punctuation\">,</span> MessageProperties<span class=\"token punctuation\">.</span>PERSISTENT_TEXT_PLAIN<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>msg_10B<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">waitForConfirms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 消息发送失败</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>批量 confirm 模式</strong>：每发送一批消息后，调用 <code>waitForConfirms()</code> 方法，等待服务端 confirm。</p>\n<pre class=\" language-java\"><code class=\"language-java\">channel<span class=\"token punctuation\">.</span><span class=\"token function\">confirmSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> batchCount<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>ConfirmConfig<span class=\"token punctuation\">.</span>exchangeName<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>routingKey<span class=\"token punctuation\">,</span> MessageProperties<span class=\"token punctuation\">.</span>PERSISTENT_TEXT_PLAIN<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>msg_10B<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">waitForConfirms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 消息发送失败</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>异步 confirm 模式</strong>：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。</p>\n<pre class=\" language-java\"><code class=\"language-java\">SortedSet<span class=\"token operator\">&lt;</span>Long<span class=\"token operator\">></span> confirmSet <span class=\"token operator\">=</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedSortedSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token operator\">&lt;</span>Long<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function\">confirmSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchannel<span class=\"token punctuation\">.</span><span class=\"token function\">addConfirmListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfirmListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleAck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> deliveryTag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> multiple<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multiple<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            confirmSet<span class=\"token punctuation\">.</span><span class=\"token function\">headSet</span><span class=\"token punctuation\">(</span>deliveryTag <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            confirmSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>deliveryTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleNack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> deliveryTag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> multiple<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nack, SeqNo: \"</span> <span class=\"token operator\">+</span> deliveryTag <span class=\"token operator\">+</span> <span class=\"token string\">\", multiple: \"</span> <span class=\"token operator\">+</span> multiple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multiple<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            confirmSet<span class=\"token punctuation\">.</span><span class=\"token function\">headSet</span><span class=\"token punctuation\">(</span>deliveryTag <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            confirmSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>deliveryTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> nextSeqNo <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">getNextPublishSeqNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>ConfirmConfig<span class=\"token punctuation\">.</span>exchangeName<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>routingKey<span class=\"token punctuation\">,</span> MessageProperties<span class=\"token punctuation\">.</span>PERSISTENT_TEXT_PLAIN<span class=\"token punctuation\">,</span> ConfirmConfig<span class=\"token punctuation\">.</span>msg_10B<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    confirmSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nextSeqNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h4 id=\"RabbitMQ-弄丢了数据\"><a href=\"#RabbitMQ-弄丢了数据\" class=\"headerlink\" title=\"RabbitMQ 弄丢了数据\"></a>RabbitMQ 弄丢了数据</h4><p><strong>开启 RabbitMQ的持久化</strong>，消息写入之后会持久化到磁盘，挂后恢复会<strong>自动读取之前存储的数据</strong>，一般数据不会丢。小概率情况，RabbitMQ还没有持久化，就挂了，<strong>可能导致少量数据丢失</strong>。</p>\n<h5 id=\"设置持久化：\"><a href=\"#设置持久化：\" class=\"headerlink\" title=\"设置持久化：\"></a>设置持久化：</h5><ul>\n<li><strong>创建 queue 时候设置为持久化</strong>。可以保证 RabbitMQ <strong>持久化 queue 的元数据</strong>，但是它是不会持久化 queue 里的数据的</li>\n<li>第二个是发送消息的时候将消息的 <strong><code>deliveryMode</code> 设置为2</strong>。就是<strong>将消息设置为持久化的</strong>，此时RMQ 就会将消息持久化到磁盘上了。</li>\n</ul>\n<p>必须同时设置这个两个持久化才行，RMQ 哪怕挂了，再次重启，也会磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p>\n<p>注意，哪怕是开启持久化机制了，也有可能，在消息写到 RMQ中，还没有来的机持久化到磁盘上，结果不巧，此时的 RMQ 挂了，就会导致内存里的的一点点数据丢失。</p>\n<p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合，只有消息被持久化到磁盘后，才会通知生产者 <code>ack</code> 了，哪怕 持久化到磁盘之前，RMQ 挂了，数据丢了，生产者收不到 <code>ack</code> ，自己也可以重发。</p>\n<h4 id=\"消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt\"><a href=\"#消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt\" class=\"headerlink\" title=\"消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;\"></a>消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;</h4><p>RabbitMQ 如果丢失消息，主要是因为你消费的时候，刚消费，还没去处理，结果进程挂了。重启完后，RMQ认为你都消费了，这数据就丢了。</p>\n<p>这时候的用RabbitMQ提供的 <code>ack</code> 机制。就是必须<strong>关闭RMQ自动 <code>ack</code><strong>，可以通过 api 来调用就行，然后每次再代码</strong>处理完后</strong>，再**主动的 <code>ack</code>**。这样没有处理的话，RMQ 就收不到 <code>ack</code>，RMQ 就会认为你没有处理完，这时候RMQ 会把消息分给别的消费者处理，消息就不会丢。 </p>\n<blockquote>\n<p>RMQ  为了保证消息可靠不丢失提供消息确认机制。消费者在声明队列时，可以指定noAck 参数，当noAck = false, RMQ 会等待消费者显示的发送 ack 信号后，才从内存（和磁盘，如果持久化）移除消息。否则消息一旦被消费者消费，RMQ 会立即删除它。</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080926472.png\" alt=\"RMQ-持久化\"></p>\n<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><h4 id=\"消费端弄丢了数据\"><a href=\"#消费端弄丢了数据\" class=\"headerlink\" title=\"消费端弄丢了数据\"></a>消费端弄丢了数据</h4><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还<strong>没处理，你自己就挂了</strong>，此时这条消息就丢咯。</p>\n<p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p>\n<p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p>\n<h4 id=\"Kafka-弄丢了数据\"><a href=\"#Kafka-弄丢了数据\" class=\"headerlink\" title=\"Kafka 弄丢了数据\"></a>Kafka 弄丢了数据</h4><p>这块比较常见的一个场景，就是 Kafka <strong>某个 broker 宕机</strong>，然后重新选举 partition 的 leader。大家想想，要是此时其他的 <strong>follower 刚好还有些数据没有同步</strong>，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p>\n<p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p>\n<p>所以此时一般是要求起码设置如下 4 个参数：</p>\n<ul>\n<li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 <strong>partition 必须有至少 2 个副本。</strong></li>\n<li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 <strong>leader 至少感知到有至少一个 follower</strong> 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li>\n<li>在 producer 端设置 <code>acks=all</code> ：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li>\n<li>在 producer 端设置 <code>retries=MAX</code> （很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li>\n</ul>\n<p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p>\n<h4 id=\"生产者会不会弄丢数据？\"><a href=\"#生产者会不会弄丢数据？\" class=\"headerlink\" title=\"生产者会不会弄丢数据？\"></a>生产者会不会弄丢数据？</h4><p>如果按照上述的思路设置了 <code>acks=all</code> ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p>\n<h2 id=\"7-保证消费顺序\"><a href=\"#7-保证消费顺序\" class=\"headerlink\" title=\"7.保证消费顺序\"></a>7.保证消费顺序</h2><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>\n<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。</p>\n<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>\n<p>先看看顺序会错乱的俩场景：</p>\n<ul>\n<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080945298.png\" alt=\"RMQ-消息顺序\"></p>\n<ul>\n<li><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。<br>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946857.png\" alt=\"Kafka-消息顺序\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"RabbitMQ-1\"><a href=\"#RabbitMQ-1\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946242.png\" alt=\"消息顺序\"></p>\n<h4 id=\"Kafka-1\"><a href=\"#Kafka-1\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ul>\n<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>\n<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946970.png\" alt=\"消息顺序\"></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080043295.jpg\"></p>","more":"<blockquote>\n<p>消息队列解决的核心场景：解构、异步、削峰</p>\n</blockquote>\n<h2 id=\"1-为什么使用MQ\"><a href=\"#1-为什么使用MQ\" class=\"headerlink\" title=\"1.为什么使用MQ\"></a>1.为什么使用MQ</h2><p>​    公司业务场景，核心：解耦、异步、削峰</p>\n<h3 id=\"解耦：\"><a href=\"#解耦：\" class=\"headerlink\" title=\"解耦：\"></a>解耦：</h3><p>​    A系统发数据给到BCD系统，如果E系统需要接入？C系统不需要了？A系统的负责人就需要来回修改接口对接其他系统。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203061747025.png\" alt=\"解耦-1\"></p>\n<p>​    如果使用MQ，A系统产生一条数据，发送到MQ中，那个系统需要数据自己去MQ消费。如果新的系统需要数据，直接从MQ中消费；某个系统不需要数据的话，取消消费这个MQ即可。这样A系统不需要考虑谁发送数据给谁，不需要考虑是否调用成功、失败超时等问题。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062104532.png\" alt=\"解耦-2\"></p>\n<p><strong>总结</strong>：通过一个MQ，Pub/Sub发布订阅消息模型，A系统就和其他系统彻底耦合了。</p>\n<h4 id=\"项目应用：\"><a href=\"#项目应用：\" class=\"headerlink\" title=\"项目应用：\"></a>项目应用：</h4><p>​    车站系统通过控制命令下发给各个设备，其中车站的设备通常包含：闸机、半自动售票机、自动售票机、手持机等设备。如果按照常规的同步方式来对接不同的设备，这将使得系统冗余的代码很多，当车站增减一个设备就可能需要重新对接接口，造成系统耦合性很高，这样的效率不高且不优雅。所以当系统需要发送命令（生产一个数据），将数据放到MQ中，不需要知道那个设备收到成功或者失败，其中需要消费的设备自己去订阅并且获取相应的消息即可。这样就可以达到，系统下发设备控制命令，不同设备响应。</p>\n<h3 id=\"异步：\"><a href=\"#异步：\" class=\"headerlink\" title=\"异步：\"></a>异步：</h3><p>​    A系统接收请求，需要本地入库，还需要BCD三个系统入库，本地入库（3ms），BCD（300ms+400ms+500ms），用户体验很差等待时间太长。业内请求需要做到 200ms 以内，对用户几乎无感。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062204267.png\" alt=\"异步-1\"></p>\n<p>​    使用MQ，A系统连续发送3条消息到消息队列，假如消耗5ms，请求花了 5 + 3 = 8ms ，对于用户来说就是点了一个按钮返回很快。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062210072.png\" alt=\"异步-2\"></p>\n<h3 id=\"削峰：\"><a href=\"#削峰：\" class=\"headerlink\" title=\"削峰：\"></a>削峰：</h3><p>​    每天一段时间，A系统风平浪静，每秒请求数量就50个。结果每次一到 12:00~13:00，每秒并发请求数量突然暴增到5k+条。但是系统是直接基于MySQL，大量请求涌入MySQL，每秒执行约5k条SQL，</p>\n<p>​    一般情况下MySQL 每秒可抗 2k请求，5k的请求可能打死MySQL，导致无法使用。</p>\n<p>​    一旦过了高峰，到了下午就到了低峰期，每秒请求数量 50 左右，对整个系统没有多少压力了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062301225.png\" alt=\"削峰-1\"></p>\n<p>如果使用MQ，每秒 5k 请求写入 MQ , A系统每秒最多处理 2k 个请求，因为 MySQL每秒最多请求 2k 个请求。A系统从MQ中慢慢拉取请求，每秒2k个请求，不超过自己每秒最大的请求数量即可。所以再高峰期，A系统不会挂掉。而MQ每秒进 5k ，出 2k，请求就会在高峰期积压可能多大十几万甚至百万的消息再 MQ中。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203062328446.png\" alt=\"削峰-2\"></p>\n<p>​    短暂的挤压后是可允许的，等到高峰期过后，每秒进入MQ的消息降低很多，但是系统依然按照 2k 的请求取消费，A系统很快的就会把挤压解决掉了。</p>\n<h2 id=\"2-MQ的优缺点\"><a href=\"#2-MQ的优缺点\" class=\"headerlink\" title=\"2.MQ的优缺点\"></a>2.MQ的优缺点</h2><ul>\n<li>降低系统可用性，引出如何保证消息高可用</li>\n<li>系统复杂度提高，引出如何保证消息没有重复消费、处理消息丢失、保证消息传递顺序性</li>\n<li>一致性问题：A系统处理完返回成功，BC处理完写库成功，D写库失败了，数据不能一致了。</li>\n</ul>\n<h2 id=\"3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）\"><a href=\"#3-不同MQ的区别（kafka、RabbitMQ、RocketMQ）\" class=\"headerlink\" title=\"3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）\"></a>3.不同MQ的区别（kafka、RabbitMQ、RocketMQ）</h2><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>RocketMQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单机吞吐量</td>\n<td>万级，比 RocketMQ、Kafka 低一个数量级</td>\n<td>万级别</td>\n<td>10 万级，支撑高吞吐</td>\n<td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>\n</tr>\n<tr>\n<td>topic 数量对吞吐量的影响</td>\n<td></td>\n<td></td>\n<td><strong>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</strong></td>\n<td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>\n</tr>\n<tr>\n<td>时效性</td>\n<td>ms 级</td>\n<td><strong>微秒级，这是 RabbitMQ 的一大特点，延迟最低</strong></td>\n<td>ms 级</td>\n<td>延迟在 ms 级以内</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>高，基于主从架构实现高可用</td>\n<td>基于主从架构实现高可用</td>\n<td><strong>非常高，分布式架构</strong></td>\n<td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\n</tr>\n<tr>\n<td>消息可靠性</td>\n<td>有较低的概率丢失数据</td>\n<td>基本不丢</td>\n<td><strong>经过参数优化配置，可以做到 0 丢失</strong></td>\n<td>同 RocketMQ</td>\n</tr>\n<tr>\n<td>功能支持</td>\n<td>MQ 领域的功能极其完备</td>\n<td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td>\n<td>MQ 功能较为完善，还是分布式的，扩展性好</td>\n<td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>\n</tr>\n</tbody></table>\n<ul>\n<li>单机吞吐量：<strong>RocketMQ</strong> <strong>10万级</strong></li>\n<li>时效性：<strong>RabbitMQ</strong> <strong>微秒级</strong></li>\n<li>可用性：<strong>RocketMQ</strong> <strong>非常高，分布式架构</strong></li>\n<li>消息可靠性：<strong>RocketMQ</strong> <strong>参数优化，可以做到0丢失</strong></li>\n</ul>\n<h2 id=\"4-保证MQ的高可用\"><a href=\"#4-保证MQ的高可用\" class=\"headerlink\" title=\"4.保证MQ的高可用\"></a>4.保证MQ的高可用</h2><h3 id=\"RabbitMQ高可性\"><a href=\"#RabbitMQ高可性\" class=\"headerlink\" title=\"RabbitMQ高可性\"></a>RabbitMQ高可性</h3><p>​    RabbitMQ是典型的基于主从（非分布式）做高可用。</p>\n<p>​    三种模式：单机模式、普通集群模式、镜像集群模式</p>\n<h4 id=\"单机模式：\"><a href=\"#单机模式：\" class=\"headerlink\" title=\"单机模式：\"></a>单机模式：</h4><p>​    Demo级别，没有生产使用这个</p>\n<h4 id=\"普通集群模式：-lt-无高可用-gt\"><a href=\"#普通集群模式：-lt-无高可用-gt\" class=\"headerlink\" title=\"普通集群模式：&lt;无高可用&gt;\"></a>普通集群模式：&lt;无高可用&gt;</h4><p>​    多台机器启动多个RabbitMQ实例，每台机器启动一个。<strong>创建的queue，只会放在一个RabbitMQ实例上</strong>，  但每个实例同步 queue 元数据（queue的配置，可通过这个找到queue实例）。实际消费的时候连接到另一个实例，这个实例从queue所在的实例拉取数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203070951779.png\" alt=\"普通集群\"></p>\n<p>​    <strong>没有做到分布式</strong>，只是普通的集群。导致消费者每次随机获取一个实例然后拉取数据，要么是固定连接 queue 的那个实例，前者有<strong>数据拉取的开销</strong>，后者有<strong>单实例性能开销</strong>。</p>\n<p>​    这样只是<strong>提高了吞吐量</strong>，集群多个节点服务某个 queue 的读写操作。</p>\n<h4 id=\"镜像集群模式：-lt-高可用-gt\"><a href=\"#镜像集群模式：-lt-高可用-gt\" class=\"headerlink\" title=\"镜像集群模式：&lt;高可用&gt;\"></a>镜像集群模式：&lt;高可用&gt;</h4><p>​    RabbitMQ 的高可用模式。和普通集群模型不一样，该模式下，创建的 queue，无论是元数据还是 queue 里的消息都会存在多个实例中，每个节点都有 queue 的<strong>完整镜像</strong>。每次写消息到 queue 时，都会自动<strong>消息同步</strong>到多个实例上 queue 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071023085.png\" alt=\"RabbitMQ-高可用-镜像集群\"></p>\n<h5 id=\"如何开启镜像集群模式？\"><a href=\"#如何开启镜像集群模式？\" class=\"headerlink\" title=\"如何开启镜像集群模式？\"></a><strong>如何开启镜像集群模式</strong>？</h5><p>​    在后台<strong>新增一个策略</strong>，这个策略就是镜像集群模式的策略。可以指定数据<strong>同步到所有</strong>节点，也可同步到<strong>指定数量</strong>的节点，再次创建queue 的时候，应用这个策略，就会自动同步到其他节点上去了。<strong>好处在于</strong>，你任何一个机器宕机了，没事，其他节点有完整的数据，别的消费者都可以到其他的节点消费。<strong>坏处是</strong>，第一，<strong>同步性能开销大</strong>，网络带宽压力和消耗很重。第二，不<strong>是分布式，没有扩展性</strong>，某个queue 负载很重，加机器，新增的机器包含这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>。如果 queue 的数量很大，大到这个机器上的容量无法容纳该怎么办？</p>\n<h3 id=\"Kafka-的高可用性\"><a href=\"#Kafka-的高可用性\" class=\"headerlink\" title=\"Kafka 的高可用性\"></a>Kafka 的高可用性</h3><p>​    Kafka 基本架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic ，这个topic可以划分多个partition，每个 partition 可以存在不同的 broker 上，每个partition 就放一部分的数据。</p>\n<p>​    天然的分布式消息队列，一个topic 的数据，<strong>分散到多个机器上，每个机器放一部分</strong>。</p>\n<p>​    RabbitMQ 之类的并不是什么分布式消息队列，传统的消息队列，只不过提供了集群、HA的机制，无论如何操作，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群模式下，也是每个节点都放 queue 的完整数据。</p>\n<p>​    Kafka 0.8 之前没有 HA 机制，任何的 broker 挂了，那个 broker 上的 partition 就废了，就没有办法读写，无法保证高可用。</p>\n<p>​    我们假如创建一个 topic ，指定了其 partition 数量是 3 个 ，分别在三台机器上。但是，如果第二台宕机了，会导致1/3的数据丢失，做不到高可用了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071341869.png\" alt=\"Kafka-高可用\"></p>\n<p>Kafka 0.8 后提供了 HA 机制，就是 <strong>replica 副本机制</strong>。每个 partition 的数据都会同步到其他机器上，形成多个 replica 副本。所有 replica 中选举一个 leader 出来，那么生产者和消费者都跟这个 <strong>leader 打交道</strong>，其他的 replica 就是 follower (从属）。<br>写的时候，leader 负责将<strong>数据同步到其他的 follower</strong> 上，读的时候，直接读取 leader 上的数据。</p>\n<h4 id=\"为什么只能读写leader\"><a href=\"#为什么只能读写leader\" class=\"headerlink\" title=\"为什么只能读写leader?\"></a>为什么只能读写leader?</h4><p>​    如果可以随意读取的每个 follower ，那么就要关系数据的一致性问题了，系统复杂度势必增加。Kafka 会将一个 partition 的所有 replica 分布在不同的机器中，可以提高容错性。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071428565.png\" alt=\"broker\"></p>\n<p>​    这就是所谓的<strong>高可用</strong>，因为如果某个 broker 宕机了，没事，那么 broker 上面的 partition 在其他机器上都有副本的。如果这个宕机的 broker 上面由某个 partition 的 leader ，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，继续读写这个 leader 即可。</p>\n<p>​    <strong>写数据</strong>的时候，生产者就写 leader ,然后 leader 将数据落地到写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功消息给生产者（一种模式之一）。</p>\n<p>​    <strong>消费的时候</strong>，只会从 leader 去读，但是只有当一个消费已经被所有 follower 都同步成功返回 ack 后，这个消息才会被消费者读到。 </p>\n<h2 id=\"5-保证消息不被重复消费（消费队列保证幂等性）\"><a href=\"#5-保证消息不被重复消费（消费队列保证幂等性）\" class=\"headerlink\" title=\"5.保证消息不被重复消费（消费队列保证幂等性）\"></a>5.保证消息不被重复消费（消费队列保证幂等性）</h2><p><strong>大概说一说可能哪些重复消息的问题</strong></p>\n<p>RabbitMQ、RocketMQ、Kafka 都可能出现消息重复消费的问题。</p>\n<p>​    Kafka 实际上有个 <strong>offset</strong> 的概念，每个消息写进去，都有一个 offset ，代表<strong>消息的序号</strong>，然后 consumer 消费了数据之后，每隔一段时间（<strong>定时定期</strong>），会把自己消费过的消<strong>息的 offset 提交</strong>一下，表示 “我消费过来，下次我要重启，就让我继续从上次消费的 offset 来继续消费吧”。</p>\n<p>​    如果生产重启系统，紧急情况直接 kill 进程，可能导致 consumer 由消息处理，但是没有来的及提交 offset 。重启之后少数消费会再次消费一次。</p>\n<p>​    举个例子。</p>\n<p>​    场景带入，数据 1/2/3 依次进入 Kafka，Kafka 会给这三条数据每条分配一个 offset ，代表这条数据的序号，我们就假设分配的 offset 依次是 152/ 153 /154 。消费从 Kafka 去消费的时候也是按照这个顺序。假如消费者消费了 offset= 153 这个数据，刚准备提交 offset 到 Zookeeper ，此时消费者进程被重启。此时消费过的数据 1/2 的offset 没有提交，Kafka 也就不知道你消费 offset = 153 这条数据。重启之后，消费者找 Kafka 说，哥们，你给我把上次我消费的的地方后面的数据继续传给我。由于没有提交 1/2 数据再次传过来，如果消费者没有去重的话，那么就会导致消费重复。</p>\n<p>注意：新版本的 Kafka 已经将 <code>offset</code> 存储到 Zookeeper 转移到 <code>Kafka brokers</code>，并使用内部位移注意 <code>__consumer_offsets</code> 进行存储。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071509099.png\"></p>\n<p>结果就会导致数据 1/2 往数据插入2 次，那么数据就错了。重复消费不可怕，可怕没有考虑重复消费之后，<strong>怎么保证幂等性。</strong></p>\n<p>​    举例说明。假如有个系统，消费一条消息就是往数据库插入一条数据，要是你消息重复两次，就插入了两条，数据就是错了。但是你消费到第二次的时候，<strong>判断是否消费过了</strong>，若是就直接丢了，这样就保证了一条数据了。</p>\n<p>​    一条数据重复出现两次，数据库只有一条数据，这就保证了系统的幂等性。</p>\n<p>​    幂等性：就是一个数据，或者一个请求，给你重复来多次，你的确保对应的数据是不会改变的，<strong>不能出错。</strong></p>\n<h4 id=\"如何保证消息的幂等性？\"><a href=\"#如何保证消息的幂等性？\" class=\"headerlink\" title=\"如何保证消息的幂等性？\"></a>如何保证消息的幂等性？</h4><p>​    结合业务思考，思路：</p>\n<ul>\n<li><p>如果是写库，根据<strong>主键查一下</strong>，如果这个数据有了，就update </p>\n</li>\n<li><p><strong>写 Redis</strong>，每次都是 set ，天然幂等性 。当数据1 消费之后，存入Redis ，再次消费后将修改数据1的值</p>\n</li>\n<li><p>复杂一点，生产者发送每条消息数据的时候，里面假如一个<strong>全局的唯一id</strong>，类似订单id，然后消费之后，先根据这个 id 去比如 Redis 里去查，之前的消费过吗？如果没有消费过，你就处理，然后这个id写 Redis。如果消费，那就别处理，保重别重复处理相同的消息即可。</p>\n</li>\n<li><p>基于数据库的<strong>唯一键</strong>来保证重复数据不会重复插入多条。因为有唯一键约束，重复数据插入只会报错，不会导致数据库中出现脏数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071555682.png\" alt=\"幂等性\"></p>\n</li>\n</ul>\n<h2 id=\"6-保证消息的可靠性传输？保证消费不丢失\"><a href=\"#6-保证消息的可靠性传输？保证消费不丢失\" class=\"headerlink\" title=\"6.保证消息的可靠性传输？保证消费不丢失\"></a>6.保证消息的可靠性传输？保证消费不丢失</h2><p>​    MQ的基本原则，<strong>数据不能多一条，也不能少一条</strong>，不能多，就是上面说的 重复消费和幂等性的问题。不能少。就是数据别弄丢。</p>\n<p>​    如果用MQ来传递非常核心的肖，如计费、扣费，就需要保证 MQ <strong>绝对不会把计费消息给弄丢</strong></p>\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203071602457.png\" alt=\"消息可靠性\"></p>\n<h4 id=\"生产者弄丢了数据\"><a href=\"#生产者弄丢了数据\" class=\"headerlink\" title=\"生产者弄丢了数据\"></a>生产者弄丢了数据</h4><p>​    生产者将数据发送到 RabbitMQ ，可能在半路弄丢了，因为网络获取其他问题。</p>\n<h5 id=\"事务机制–消耗性能：\"><a href=\"#事务机制–消耗性能：\" class=\"headerlink\" title=\"事务机制–消耗性能：\"></a>事务机制–消耗性能：</h5><p>​    选择 RabbitMQ 提供的<strong>事务功能</strong>，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ事务 <code>channel.txSelect()</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收，那么生产者会收到异常报错的消息，此时可以回滚事务 <code>channel.txRollback()</code>，然后重试发送消息；如果收到消息，那么就可以提交事务了 <code>channel.txCommit()</code></p>\n<pre><code class=\"java\">try &#123;\n    // 通过工厂创建连接\n    connection = factory.newConnection();\n    // 获取通道\n    channel = connection.createChannel();\n    // 开启事务\n    channel.txSelect();\n    // 这里发送消息\n    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());\n    // 模拟出现异常\n    int result = 1 / 0;\n    // 提交事务\n    channel.txCommit();\n&#125; catch (IOException | TimeoutException e) &#123;\n    // 捕捉异常，回滚事务\n    channel.txRollback();\n&#125;\n</code></pre>\n<p>问题是，RabbitMQ 事务机制，导致吞吐量下来，因为消耗性能。</p>\n<h5 id=\"confirm-模式：\"><a href=\"#confirm-模式：\" class=\"headerlink\" title=\"confirm 模式：\"></a>confirm 模式：</h5><p>​    如果要保证 RabbitMQ 消息不丢，可以开启 <code>confirm</code> 模式，你每次些的<strong>消息都会分配一个唯一的id</strong>。<br>​    如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你一个 <code>nack</code> 接口，告诉你这个消息接收失败了，你可以重试。而且你可以结合这个机制自己在<strong>内存里维护每个消息 id 状态</strong>，如果超过一定时间还没有接收这个消息的回调，那个可以重发。</p>\n<p>​    事务机制和 <code>confirm</code> 机制最大不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>，但是 <code>confirm</code> 机制是<strong>异步</strong>的，发送消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会<strong>异步回调</strong>一个接口通知你这个消息接收到了。</p>\n<p>​    所以生产者 <strong>避免丢失数据</strong>，都是用 <code>confirm</code> 机制的</p>\n<blockquote>\n<p>在 transaction 事务模式的channel 不能设置成 confirm 模式的，这两种不共存</p>\n</blockquote>\n<p>客户端实现生产者 <code>confirm</code> 三种方式：</p>\n<ol>\n<li><p><strong>普通 confirm 模式</strong>：每发送一条消息后，调用 <code>waitForConfirms()</code> 方法，等待服务器端 confirm，如果服务端返回 false 或者在一段时间内都没返回，客户端可以进行消息重发。</p>\n<pre><code class=\"java\">channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\nif (!channel.waitForConfirms()) &#123;\n    // 消息发送失败\n    // ...\n&#125;\n</code></pre>\n</li>\n<li><p><strong>批量 confirm 模式</strong>：每发送一批消息后，调用 <code>waitForConfirms()</code> 方法，等待服务端 confirm。</p>\n<pre><code class=\"java\">channel.confirmSelect();\nfor (int i = 0; i &lt; batchCount; ++i) &#123;\n    channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n&#125;\nif (!channel.waitForConfirms()) &#123;\n    // 消息发送失败\n    // ...\n&#125;\n</code></pre>\n</li>\n<li><p><strong>异步 confirm 模式</strong>：提供一个回调方法，服务端 confirm 了一条或者多条消息后客户端会回调这个方法。</p>\n<pre><code class=\"java\">SortedSet&lt;Long&gt; confirmSet = Collections.synchronizedSortedSet(new TreeSet&lt;Long&gt;());\nchannel.confirmSelect();\nchannel.addConfirmListener(new ConfirmListener() &#123;\n    public void handleAck(long deliveryTag, boolean multiple) throws IOException &#123;\n        if (multiple) &#123;\n            confirmSet.headSet(deliveryTag + 1).clear();\n        &#125; else &#123;\n            confirmSet.remove(deliveryTag);\n        &#125;\n    &#125;\n\n    public void handleNack(long deliveryTag, boolean multiple) throws IOException &#123;\n        System.out.println(&quot;Nack, SeqNo: &quot; + deliveryTag + &quot;, multiple: &quot; + multiple);\n        if (multiple) &#123;\n            confirmSet.headSet(deliveryTag + 1).clear();\n        &#125; else &#123;\n            confirmSet.remove(deliveryTag);\n        &#125;\n    &#125;\n&#125;);\n\nwhile (true) &#123;\n    long nextSeqNo = channel.getNextPublishSeqNo();\n    channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());\n    confirmSet.add(nextSeqNo);\n&#125;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"RabbitMQ-弄丢了数据\"><a href=\"#RabbitMQ-弄丢了数据\" class=\"headerlink\" title=\"RabbitMQ 弄丢了数据\"></a>RabbitMQ 弄丢了数据</h4><p><strong>开启 RabbitMQ的持久化</strong>，消息写入之后会持久化到磁盘，挂后恢复会<strong>自动读取之前存储的数据</strong>，一般数据不会丢。小概率情况，RabbitMQ还没有持久化，就挂了，<strong>可能导致少量数据丢失</strong>。</p>\n<h5 id=\"设置持久化：\"><a href=\"#设置持久化：\" class=\"headerlink\" title=\"设置持久化：\"></a>设置持久化：</h5><ul>\n<li><strong>创建 queue 时候设置为持久化</strong>。可以保证 RabbitMQ <strong>持久化 queue 的元数据</strong>，但是它是不会持久化 queue 里的数据的</li>\n<li>第二个是发送消息的时候将消息的 <strong><code>deliveryMode</code> 设置为2</strong>。就是<strong>将消息设置为持久化的</strong>，此时RMQ 就会将消息持久化到磁盘上了。</li>\n</ul>\n<p>必须同时设置这个两个持久化才行，RMQ 哪怕挂了，再次重启，也会磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p>\n<p>注意，哪怕是开启持久化机制了，也有可能，在消息写到 RMQ中，还没有来的机持久化到磁盘上，结果不巧，此时的 RMQ 挂了，就会导致内存里的的一点点数据丢失。</p>\n<p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合，只有消息被持久化到磁盘后，才会通知生产者 <code>ack</code> 了，哪怕 持久化到磁盘之前，RMQ 挂了，数据丢了，生产者收不到 <code>ack</code> ，自己也可以重发。</p>\n<h4 id=\"消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt\"><a href=\"#消费者弄丢了数据：-lt-关闭自动-ack，声明队列，指定noAck-false-gt\" class=\"headerlink\" title=\"消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;\"></a>消费者弄丢了数据：&lt;关闭自动 ack，声明队列，指定noAck = false&gt;</h4><p>RabbitMQ 如果丢失消息，主要是因为你消费的时候，刚消费，还没去处理，结果进程挂了。重启完后，RMQ认为你都消费了，这数据就丢了。</p>\n<p>这时候的用RabbitMQ提供的 <code>ack</code> 机制。就是必须<strong>关闭RMQ自动 <code>ack</code><strong>，可以通过 api 来调用就行，然后每次再代码</strong>处理完后</strong>，再**主动的 <code>ack</code>**。这样没有处理的话，RMQ 就收不到 <code>ack</code>，RMQ 就会认为你没有处理完，这时候RMQ 会把消息分给别的消费者处理，消息就不会丢。 </p>\n<blockquote>\n<p>RMQ  为了保证消息可靠不丢失提供消息确认机制。消费者在声明队列时，可以指定noAck 参数，当noAck = false, RMQ 会等待消费者显示的发送 ack 信号后，才从内存（和磁盘，如果持久化）移除消息。否则消息一旦被消费者消费，RMQ 会立即删除它。</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080926472.png\" alt=\"RMQ-持久化\"></p>\n<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><h4 id=\"消费端弄丢了数据\"><a href=\"#消费端弄丢了数据\" class=\"headerlink\" title=\"消费端弄丢了数据\"></a>消费端弄丢了数据</h4><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还<strong>没处理，你自己就挂了</strong>，此时这条消息就丢咯。</p>\n<p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p>\n<p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p>\n<h4 id=\"Kafka-弄丢了数据\"><a href=\"#Kafka-弄丢了数据\" class=\"headerlink\" title=\"Kafka 弄丢了数据\"></a>Kafka 弄丢了数据</h4><p>这块比较常见的一个场景，就是 Kafka <strong>某个 broker 宕机</strong>，然后重新选举 partition 的 leader。大家想想，要是此时其他的 <strong>follower 刚好还有些数据没有同步</strong>，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p>\n<p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p>\n<p>所以此时一般是要求起码设置如下 4 个参数：</p>\n<ul>\n<li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 <strong>partition 必须有至少 2 个副本。</strong></li>\n<li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 <strong>leader 至少感知到有至少一个 follower</strong> 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li>\n<li>在 producer 端设置 <code>acks=all</code> ：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li>\n<li>在 producer 端设置 <code>retries=MAX</code> （很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li>\n</ul>\n<p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p>\n<h4 id=\"生产者会不会弄丢数据？\"><a href=\"#生产者会不会弄丢数据？\" class=\"headerlink\" title=\"生产者会不会弄丢数据？\"></a>生产者会不会弄丢数据？</h4><p>如果按照上述的思路设置了 <code>acks=all</code> ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p>\n<h2 id=\"7-保证消费顺序\"><a href=\"#7-保证消费顺序\" class=\"headerlink\" title=\"7.保证消费顺序\"></a>7.保证消费顺序</h2><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p>\n<p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你愣是换了顺序给执行成删除、修改、增加，不全错了么。</p>\n<p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p>\n<p>先看看顺序会错乱的俩场景：</p>\n<ul>\n<li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者 2 先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080945298.png\" alt=\"RMQ-消息顺序\"></p>\n<ul>\n<li><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。<br>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946857.png\" alt=\"Kafka-消息顺序\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"RabbitMQ-1\"><a href=\"#RabbitMQ-1\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946242.png\" alt=\"消息顺序\"></p>\n<h4 id=\"Kafka-1\"><a href=\"#Kafka-1\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ul>\n<li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li>\n<li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203080946970.png\" alt=\"消息顺序\"></p>"},{"title":"谷粒商城学习","summary":"谷粒商城项目搭建、开发部署上线运维全流程","abbrlink":57306,"date":"2022-05-18T07:34:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072146144.png)\n\n<!--more-->\n\n# docker 安装\n \n## docker 安装MySQL\n\n1. 下载镜像\n\n   ```shell\n   docker pull mysql:5.7\n   ```\n\n2. 创建实例\n\n   ```sh\n   docker run -p 3307:3306 --name mysql \\\n   -v /mydata/mysql/log:/var/log/mysql \\\n   -v /mydata/mysql/data:/var/lib/mysql \\\n   -v /mydata/mysql/conf:/etc/mysql \\\n   -e MYSQL_ROOT_PASSWORD=root \\\n   -d mysql:5.7\n   ```\n\n   参数说明：\n\n   - -p 3306:3306：-p 主机端口:容器端口，将容器的3306端口映射到主机的3306端口\n   - -v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机\n   - -v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机\n   - -v /mydata/mysql/data:/var/lib/mysql：将配置文件夹挂载到主机\n   - -e MYSQL_ROOT_PASSWORD=root：初始化root用户密码\n   - -d mysql:5.7：表示后台运行(-d) 镜像mysql:5.7   -->查看镜像docekr images\n\n3. 进去docker 容器\n\n   ``` sh\n   root@af26dd647c9a:/# docker exec -it mysql /bin/bash\n   root@af26dd647c9a:/# whereis mysql\n   mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\n   ```\n\n4. mysql配置 my.cnf\n\n   ```sh\n   [root@lingzx conf]# vi /mydata/mysql/conf/my.cnf\n   ```\n\n   ```sh\n   [client]\n   default-character-set=utf8\n   \n   [mysql]\n   default-character-set=utf8\n   \n   [mysqld]\n   init_connect='SET collation_connection=utf8_unicode_ci'\n   init_connect='SET NAMES utf8'\n   character-set-server=utf8\n   collation-server=utf8_unicode_ci\n   skip-character-set-client-handshake\n   skip-name-resolve\n   lower_case_table_names=1\n   ```\n\n5. 查看docker中MySQL的配置\n\n   ```sh\n   cd /etc/mysql\n   cat my.cnf\n   ```\n\n6. 开机自启\n\n   ```sh\n   docker update mysql --restart=always\n   ```\n\n   \n\n## docker 安装Redis\n\n1. 下载redis 镜像\n\n   ``` sh \n   docker pull redis\n   ```\n\n2. 创建实例并启动\n\n   ```sh\n   # 由于 redis容器 /etc/redis目录下没有 redis.conf ，所以需要我们预先在主机上创建一个 redis.conf\n   mkdir -p /mydata/redis/conf\n   touch /mydata/redis/conf/redis.conf\n   \n   docker run -p 6379:6379 --name redis \\\n   -v /mydata/redis/data:/data \\\n   -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n   -d redis redis-server /etc/redis/redis.conf\n   \n   # 连接 docker中的 redis的控制台\n   docker exec -it redis redis-cli\n   ```\n\n3. 配置持久化\n\n   > 当前版本的redis默认配置了【文件追加写持久化】aof\n\n   ```sh\n   vi /mydata/redis/redis.conf\n   \n   appendonly yes\n   \n   docker restart redis\n   ```\n\n4. 开机自启\n\n   ```sh\n   docker update redis --restart=always\n   ```\n\n   \n\n# 统一环境\n\n## Maven 3.6.1\n\n> 链接: https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA 提取码: 38iw 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n配置阿里云镜像\n\n```xml\n<mirrors>\n\t<mirror>\n      <id>nexus-aliyun</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Nexus aliyun</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n    </mirror>\n</mirrors> \n```\n\n配置 JDK 1.8 编译环境\n\n```xml\n<profiles>\n  <profile>\n    <id>jdk-1.8</id>\n    <activation>\n      <activeByDefault>true</activeByDefault>\n      <jdk>1.8</jdk>\n    </activation>\n    <properties>\n      <maven.compile.source>1.8</maven.compile.source>\n      <maven.compile.target>1.8</maven.compile.target>\n      <maven.compile.compilerVersion>1.8</maven.compile.compilerVersion>\n    </properties>\n  </profile>\n</profiles>\n```\n\n配置本地仓库\n\n```xml\n<localRepository>D:\\Program Files\\Maven\\LocalWareHouse</localRepository>\n```\n\n## idea 安装插件\n\n- lombok\n- MybatisX\n\n## Vscode 安装配置\n\n- Auto Close Tag\n- Auto Rename Tag\n- Chinese (Simplified)\n- ESLint\n- HTML CSS Support\n- HTML Snippets\n- JavaScript（ES6）\n- Live Server\n- open in browser\n- Vetur\n\n## 安装配置 git\n\n1. 下载 git：https://git-scm.com\n\n2. 配置 git ，进入git bash\n\n   ```sh\n   # 配置用户名\n   git config --global user.name 'username'\n   # 配置邮箱\n   git config --global user.email 'username@email.com'\n   ```\n\n3. 配置 shh 免密登录，进入git bash\n\n   ```sh\n   ssh-keygen -t rsa -C 'xx@xxx.com'\n   ```\n\n    三次回车，查找 id_rsa 和 id_rsa.pub\n\n4. 登录 gitee，在设置里面找到 SSH KEY 将 .pub 文件的内容粘贴进去\n\n   ```sh\n   # 查看是否成功\n   ssh -T git@gitee.com \n   ```\n\n# 创建项目\n\n1. 商品服务、仓储服务、订单服务、优惠券服务、用户服务\n\n   共用：\n\n   1. web 、openfeign\n   2. 每个服务，包名 **com.atguigu.gulimall**.xxx(product/order/ware/coupon/member)\n   3. 模块名：gulimall-coupon\n\n2. 添加pom文件\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n       <modelVersion>4.0.0</modelVersion>\n       <groupId>com.atguigu.gulimall</groupId>\n       <artifactId>gulimall</artifactId>\n       <version>0.0.1-SNAPSHOT</version>\n       <name>gulimall</name>\n       <description>聚合服务</description>\n       <packaging>pom</packaging>\n       <modules>\n           <module>gulimall-coupon</module>\n           <module>gulimall-member</module>\n           <module>gulimall-order</module>\n           <module>gulimall-product</module>\n           <module>gulimall-ware</module>\n       </modules>\n   </project>\n   ```\n\n3. 设置忽略提交内容 .gitgnore\n\n   ```sh\n   **/mvnw\n   **/mvnw.cmd\n   \n   **/.mvn\n   **/target/\n   \n   .idea\n   **/.gitignore\n   ```\n\n   ![image-20220323234601504](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203232346905.png) \n\n4. 提交并推送到仓库\n\n## 数据库设计 PowerDesigner\n\n1. ![image-20220324004223247](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042296.png) \n\n7. ![image-20220324004234654](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042710.png) \n\n2. 每个微服务创建自己的数据库\n\n## 人人开源快速开发\n\n### 后端管理 renren-fast\n\n1. 克隆项目\n\n   > git clone git@gitee.com:renrenio/renren-fast.git\n   \n2. 将renren-fast 放在gulimall项目pom中 module\n\n   > <module>renren-fast</module>\n\n3. 新增数据库 gulimall_admin\n\n4. 修改pom\n\n   1. 关联gulimall\n\n      ```xml\n      <parent>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-parent</artifactId>\n          <version>2.3.7.RELEASE</version>\n          <relativePath/>\n      </parent>\n      ```\n\n   2. 解决@NotBlank 和 @Email 报错\n\n      ```xml\n      <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-validation</artifactId>\n      </dependency>\n      ```\n\n5. 修改数据库配置，连接到 gulimall_admin 的配置信息\n\n### 前端管理 renren-fast-vue\n\n1. 克隆项目\n\n   > git clone git@gitee.com:renrenio/renren-fast-vue.git\n\n2. 将项目拖到VSCode中\n\n3. 统一配置\n\n   1. nodeJs，\n\n      > node 版本 14 可以解决所有的报错\n      >\n      > 关注 node.js 的 npm 功能\n      >\n      > NPM 是NodeJS的包管理工具，JS-NPM，Java-Maven\n\n      - 官网下载安装，node -v 检查版本\n\n      - 配置npm 淘宝镜像\n\n        ```sh\n        npm config set registry http://registry.npm.taobao.org/\n        ```\n\n      - 下载依赖包\n\n        ```sh\n        npm install\n        ```\n\n      - 报错处理\n\n        ```sh\n        npm install --save  -g core-js@^3\n        ```\n\n      - node-sass报错 是由于版本的问题，在package.json中可以解决\n\n   2. Vue\n\n### 代码生成 renren-generator\n\n 1. 克隆项目\n\n    > git clone git@gitee.com:renrenio/renren-generator.git\n\n\t2. 将项目拖到 idea 中\n\n\t3. 修改配置（以 product 模块为例子）\n\n    - 修改 generator.properties\n\n      ```properties\n      #代码生成器，配置信息\n      mainPath=com.atguigu\n      #包名\n      package=com.atguigu.gulimall\n      moduleName=product\n      #作者\n      author=Mr.Ling\n      #Email\n      email=lingzhexi@163.com\n      #表前缀(类名不会包含表前缀)\n      tablePrefix=pms_\n      ```\n\n    - 修改 Controller.java.vm 模板\n\n      ```java\n      注释 @RequeiresPermissions 注解\n      //@RequiresPermissions(\"${moduleName}:${pathName}:list\")\n      ```\n\n    - 修改数据库配置( pms )\n\n      ```yml\n      spring:\n        datasource:\n          type: com.alibaba.druid.pool.DruidDataSource\n          #MySQL配置\n          driverClassName: com.mysql.cj.jdbc.Driver\n          url: jdbc:mysql://localhost:13306/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai\n          username: root\n          password: root\n      ```\n\n\t4. 启动项目，生成代码\n\n    - 点击生成代码\n\n      ![image-20220407215910844](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072159051.png)\n\n    - 将代码放到 product 模块中\n\n### 新增 gulimall-common\n\n- 通用的依赖模块 ，product 模块引用该模块\n\n  ```xml\n  <dependency>\n      <groupId>com.baomidou</groupId>\n      <artifactId>mybatis-plus-boot-starter</artifactId>\n      <version>3.3.1</version>\n  </dependency>\n  <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.18.22</version>\n  </dependency>\n  <dependency>\n      <groupId>commons-lang</groupId>\n      <artifactId>commons-lang</artifactId>\n      <version>2.6</version>\n  </dependency>\n  <dependency>\n      <groupId>org.apache.httpcomponents</groupId>\n      <artifactId>httpcore</artifactId>\n      <version>4.4.14</version>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-validation</artifactId>\n      <version>2.3.7.RELEASE</version>\n  </dependency>\n  ```\n\n## 整合Mybatis-pus\n\n1. 导入依赖\n\n   ```xml\n   <dependency>\n       <groupId>com.baomidou</groupId>\n       <artifactId>mybatis-plus-boot-starter</artifactId>\n       <version>3.3.1</version>\n   </dependency>\n   ```\n\n2. 配置\n\n   1. 配置数据源\n\n      1. 导入MySql 驱动\n\n         推荐使用 8 版本的Mysql connector![image-20220410002401508](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100039304.png)\n\n         ```xml\n         <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n             <version>8.0.28</version>\n         </dependency>\n         ```\n\n      2. 整合 application.yml\n\n         ```yml\n         server:\n             port: 8080\n         spring:\n             application:\n                 name: gulimall-product\n             datasource:\n                 username: root\n                 password: root\n                 url: jdbc:mysql://localhost:13306/gulimall_pms\n                 driver-class-name: com.mysql.cj.jdbc.Driver\n         \n         ```\n\n   2. 配置 mybaits-plus\n\n      1. 主启动配置 @MapperScan(\"com.atguigu.gulimall.product.dao\")\n\n         ![image-20220410004352680](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png) \n\n      2. 告诉 MyBatis-Plus ， sql 映射文件位置\n\n         默认位置类路径下的 classpath*:/mapper/**/*.xml\n\n         ![image-20220410004908204](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100049256.png) \n\n         ```yml\n         mybatis-plus:\n         \tmapper-locations: classpath:/mapper/**/*.xml\n         ```\n\n      3. 设置主键自增配置\n      \n         ```yml\n         # 填写 id 自动联想出来\n         mybatis-plus: \n          global-config:\n                 db-config:\n                     id-type: auto\n         ```\n   \n   ​\t**各模块最终需要依赖到 gulimall-common** \n\n# 整合微服务\n\n ![image-20220411213056325](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112131562.png)\n\n## 搭配方案：\n\n- SpringCloud Alibaba - Nacos : 注册中心 （服务发现/注册）\n- SpringCloud Alibaba - Nacos : 配置中心 （动态配置管理）\n- SpringCloud - Ribbon :  负载均衡\n- SpringCloud - Feign : 声明式 HTTP 客户端 （调用远程服务）\n- SpringCloud Alibaba - Sentinel : 服务容错 （限流、降级、熔断）\n- SpringCloud - Gateway : API 网关 （webflux 编程模式）\n- SpringCloud - Sleuth : 调用链监控\n- SpringCloud Alibaba - Seata : 原 Fescar 即分布式事务解决方案 \t\n\n阿里巴巴中文文档：[SpringCloud Alibab 中文文档](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md)\n\n## 版本选择：\n\n![image-20220411215026972](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150099.png)  \n\nSpringCloud - SpringBoot 版本对比（[SpringCloud 官网](https://spring.io/projects/spring-cloud)）\n\n![image-20220411215056217](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150336.png) \n\nSpringCloud Alibaba - SpringBoot 版本对比 （ [SpringCloud Alibaba Github](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md)）\n\n![image-20220411220224816](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112202930.png) \n\n将 SpringCloud Alibaba 依赖 加入 gulimall-common 中  \n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n            <version>2.1.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n \n\n## 注册中心\n\n[nacos 注册中心](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc)\n\n### 服务注册/发现 Nacos Discovery\n\n1. 引入依赖，加入gulimall-common\n\n   ```xml\n   <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n   </dependency>\n   ```\n\n   优惠卷模块引入 nacos discovery 依赖\n\n    ![image-20220411222218474](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112222593.png) \n\n2. 配置Nacos Server 地址\n\n   ```yml\n   spring:\n   \tcloud:\n   \t\tnacos:\n   \t\t\tdiscovery:\n   \t\t\t\tserver-addr: 127.0.0.1:8848\n   ```\n\n3. 使用 @EnableDiscoveryClient 注解开启服务注册和发现\n   ![image-20220411222803578](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png) \n\n4. 查看注册的服务\n\n   >  登录后台 127.0.0.1:8848/nacos \n   >\n   > 用户信息：nacos/nacos\n\n   ![image-20220411223200216](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112232366.png) \n\n## 远程调用\n\n1. 引入 open-feign\n\n2. 编写一个接口，告诉SpringCloud 需要调用远程接口\n\n   - 新建一个feign 包\n\n   - 写一个接口\n\n     ```java\n     @FeignClient(\"gulimall-coupon\") //表示 nacos 注册中心中的找到服务名为 gulimall-coupon 的服务\n     public interface CouponFeignService {\n     \n         @RequestMapping(\"/coupon/coupon/member/coupon\") // 找到优惠券服务中的该接口\n         public R memberCoupons();\n     }\n     ```\n\n3. 开启远程调用功能 \n\n   在主启动中添加 @EnableFeignClients(basePackages=\"xx\") xx表示指定feign的接口包\n\n   ```java\n   @EnableFeignClients(basePackages = \"com.atguigu.gulimall.member.feign\") //此时的basePackages 可以省略\n   @EnableDiscoveryClient\n   @MapperScan(\"com.atguigu.gulimall.member.dao\")\n   @SpringBootApplication\n   public class GulimallMemberApplication {\n   \n       public static void main(String[] args) {\n           SpringApplication.run(GulimallMemberApplication.class, args);\n       }\n   \n   } \n   ```\n\n4. 示例\n\n   - 添加远程接口\n\n     ```java\n     @RestController\n     @RequestMapping(\"coupon/coupon\")\n     public class CouponController {\n         @Autowired\n         private CouponService couponService;\n     \n         /**\n          * 会员优惠券\n          */\n         @RequestMapping(\"/member/coupon\")\n         public R memberCoupons() {\n             CouponEntity couponEntity = new CouponEntity();\n             couponEntity.setCouponName(\"满100减10\");\n             return R.ok().put(\"coupons\", Arrays.asList(couponEntity));\n         }\n     }\n     ```\n\n   - 添加调用接口\n\n     ```java\n     @RestController\n     @RequestMapping(\"member/member\")\n     public class MemberController {\n         @Autowired\n         private MemberService memberService;\n     \n         @Autowired\n         CouponFeignService couponFeignService;\n     \n         @RequestMapping(\"/coupons\")\n         public R test() {\n             MemberEntity memberEntity = new MemberEntity();\n             memberEntity.setNickname(\"张三\");\n             R r = couponFeignService.memberCoupons();\n             return R.ok().put(\"member\", memberEntity).put(\"coupons\", r.get(\"coupons\"));\n         }\n     }\n     ```\n\n   - 请求接口 localhost:8000/member/member/coupons\n\n     \n\n## 配置中心：动态管理配置\n\n[nacos 配置中心文档](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md)\n\n1. 引入 Nacos Config  Starter\n\n   ```xml\n   <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n   </dependency>\n   ```\n\n2. 创建 bootstrap.yml，配置 Nacos 元数据\n\n   ```yml\n   spring:\n   \tapplication:\n   \t\tname: gulimall-coupon\n   \tcloud:\n   \t\tnacos:\n   \t\t\tconfig:\n   \t\t\t\tserver-addr: 127.0.0.1:8848\n   ```\n\n3. 配置中心 添加 数据集（Data Id） gulimall-coupon.properties ，默认规则，应用名.properties\n   ![image-20220412213509978](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png) \n\n   ![image-20220412214528762](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122145876.png) \n\n4. 动态获取配置\n    @RefreshScope ：动态获取并刷新配置\n\n    @Value(\"${配置项的名}\") ：获取到配置\n\n   如果配置中心和当前应用都配置相同的项，优先使用配置中心的配置\n\n   ```java\n   @RefreshScope //动态刷新\n   @RestController\n   @RequestMapping(\"coupon/coupon\")\n   public class CouponController {\n       @Autowired\n       private CouponService couponService;\n   \n       @Value(\"${coupon.user.name}\")\n       private String name;\n       @Value(\"${coupon.user.age}\")\n       private Integer age;\n       @GetMapping(\"/test\")\n       public R test() {\n           return R.ok().put(\"name\",name).put(\"age\",age);\n       }\n   }\n   ```\n\n5. 核心概念\n\n   ![image-20220412220641506](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122206664.png)\n\n   - 命名空间：配置隔离 \n\n     默认 public ：默认新增的所有都在该空间下\n\n     1. 开发、测试、生产 ：利用命名空间来做环境隔离\n\n        注意：在bootstrap.yml 配置中，需要使用那个命名空间下的配置\n\n        ```yml\n        spring.cloud.nacos.config.namespace=cc749289-b027-486f-bb6a-3febcabecbdb\n        ```\n\n        ![image-20220412220837375](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122217795.png) \n\n     2. 每个服务应用之间相互隔离，管理微服务自己的配置\n        ![image-20220412223231969](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122232120.png)\n\n   - 配置集：所有配置的集合\n\n   - 配置集ID：类似文件名 （Data ID： 文件名）\n\n   - 配置分组：默认所有的配置集都属于：DEFAULT_GROUP；\n\n     - 组名：1111 、618 、1212\n\n     - ![image-20220412224056530](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122240653.png) \n\n     - 添加分组配置\n\n       ```properties\n       spring.cloud.nacos.config.group=1111\n       ```\n\n   - 每个微服务创建自己的命名空间，使用配置分组区分环境，dev、test、prod 环境\n\n     ![ ](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122247441.png)\t \n\n6. 同时加载多个配置集\n\n   - 微服务任何配置信息，任何配置文件都可以放在配置中心中\n     ![image-20220412233717240](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122337360.png)\n\n   - 只需要在 bootstrap.yml 说明 加载配置中心中的那些配置文件即可\n\n     ```yml\n     spring:\n       appliation:\n         name: gulimall-coupon\n       cloud:\n         nacos:\n           config:\n             server-addr: 127.0.0.1:8848\n             namespace: d6545d08-333c-4806-bf43-6acc99acecc6\n             # 数据库配置\n             ext-config[0].data-id: datasource.yml\n             ext-config[0].group: dev\n             ext-config[0].refresh: true\n             # mybatis 配置\n             ext-config[1].data-id: mybatis.yml\n             ext-config[1].group: dev\n             ext-config[1].refresh: true\n             # 其他配置\n             ext-config[2].data-id: other.yml\n             ext-config[2].group: dev\n             ext-config[2].refresh: true\n     ```\n\n     ![image-20220412233550198](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122335376.png)\n\n   - @Value，@ConfigurationProperties  以前SpringBoot 任何方法从配置文件中获取值，都能使用\n\n   - 配置中心有优先使用配置\n\n## 网关 GateWay\n\n [SpringGateway 官方文档](https://spring.io/projects/spring-cloud-gateway)\t\n\n​\t网关作为流量的入口，常用功能包括 **路由转发、权限校验、限流控制**等，而springcloud gateway\n作为SpringCloud官方推出的第二代网关框架，取代了Zuul网关。\n\n### 特征\n\nSpring Cloud Gateway 的特点：\n\n- 基于Spring Framework 5、Project Reactor和Spring Boot 2.0构建\n- 能够匹配任何请求属性上的路由。\n- 谓词和筛选器特定于路由。\n- 断路器集成。\n- 春云发现客户端集成\n- 易于编写谓词和筛选器\n- 请求速率限制\n- 路径重写\n\n![image-20220415142458247](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151424445.png) \n\n![image-20220415142513181](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151425268.png) \n\n![image-20220415143618115](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151436336.png)\n\n### 概念\n\n- Route（路由）：网关的基本构建基块。它由 **ID、目标 URI**、**断言集合**和**过滤器集合**定义。如果**断言集合为 true**，则匹配路由\n\n- Predicate（断言）：这是一个 [Java 8 函数断言](https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html)。输入类型是[Spring Framework `ServerWebExchange`](https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html)。这使您可以匹配 HTTP 请求中的任何内容，例如标头或参数。\n\n- Filter（过滤器）：这些是使用特定工厂构建的[`网关过滤器`](https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java)实例。在这里，您可以修改发送下游请求之前或之后的请求和响应\n\n### 工作原理：\n\n![Spring Cloud Gateway Diagram](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png) \n\n总结：当请求到达网关，网关利用断言，判断此次请求是不是符合某个路由规则，如果符合了就按照路由规则，路由到指定的地方。当要去指定的地方就要经过一系列的filter进行过滤\n\n### 配置示例 \n\n[路由断言工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gateway-request-predicates-factories)\n\n#### After Route Predicate Factory：后路由断言工厂\n\n路由断言工厂采用一个参数 a（这是一个 java）。此断言匹配在指定日期时间之后发生的请求。以下示例配置路由之后断言：\n\napplication.yml\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        # 断言（条件）：判断请求是在指定的时间后（After)发生的\n        predicates:\n        - After=2017-01-20T17:42:47.789-07:00[America/Denver]\n```\n\n[网关过滤器工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories)\n\n#### AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂\n\napplication.yml\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n      \t# 请求没有断言，任何请求直接跳转到这个链接\n        uri: https://example.org\n        filters:\n        - AddRequestHeader=X-Request-red, blue\n```\n\n此列表将标头添加到所有匹配请求的下游请求头中`X-Request-red:blue`\n\nAddRequestHeader`了解用于匹配路径或主机的 URI 变量。URI 变量可以在值中使用，并在运行时展开。下面的示例配置使用变量的 一个：`AddRequestHeader``GatewayFilter\n\n[全局过滤器工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters)\n\n### 创建网关\n\n1. 创建新 module gulimall-gateway\n\n2. 添加 gateway 依赖，~~添加 gulimall-common 依赖~~，添加nacos 配置中心和服务中心依赖\n\n   ```xml\n    <properties>\n           <java.version>1.8</java.version>\n           <spring-boot.version>2.1.8.RELEASE</spring-boot.version>\n           <spring-cloud.alibaba.version>2.1.0.RELEASE</spring-cloud.alibaba.version>\n           <spring-cloud.version>Greenwich.SR3</spring-cloud.version>\n       </properties>\n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-gateway</artifactId>\n   </dependency>\n    <!--nacos 服务注册/发现-->\n           <dependency>\n               <groupId>com.alibaba.cloud</groupId>\n               <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n               <version>${spring-cloud.alibaba.version}</version>\n           </dependency>\n           <!--naocs 配置中心-->\n           <dependency>\n               <groupId>com.alibaba.cloud</groupId>\n               <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n               <version>${spring-cloud.alibaba.version}</version>\n           </dependency>\n   </dependency>\n   ```\n\n3. 统一 Spring boot、Spring Cloud 版本\n\n   - boot：2.1.8.RELEASE\n   - cloud：Greenwich.SR3 \n\n4. 项目新建 bootstrap.yml 填写 nacos 配置中心 \n\n   ```yaml\n   spring:\n       application:\n           name: gulimall-gateway\n       cloud:\n           nacos:\n               config:\n                   server-addr: 127.0.0.1:8848\n                   namespace: 4b9add0d-df21-4fc6-ad9c-35936b491b10s\t\n   ```\n\n5. 配置中心 新建网关配置命名空间\n\n   - 新建命名空间 gateway\n\n   - 新建配置文件 gulimall-gateway.propertie \n\n     ```properties\n     spring.application.name=gulimall-gateway\n     ```\n\n   - ![image-20220421225143278](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212251449.png)\n\n6. application.properties 配置服务中心\n\n   ```properties\n   server.port=88\n   spring.application.name=gulimall-gateway\n   spring.cloud.nacos.discovery.server-addr=127.0.0.1\n   ```\n\n7. 启动成功 \n   ![image-20220421230109723](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212301809.png)\n\n8. 配置路由断言\n\n   新建一个application.yml\n\n   ![image-20220421230443693](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212304803.png)\n\n   ```yml\n   spring:\n   \tcloud:\n   \t\tgateway:\n   \t\t\troutes:\n                   -id: bing_route\n                   uri: https://www.bing.com\n                   predicates:\n   \t\t\t\t\t# query 表示请求参数 ，参数 url ，参数值正则 baidu\n                   \t-Query=url,bing\n                    -id: bing_route\n                   uri: https://www.bing.com\n                   predicates:\n   \t\t\t\t\t# query 表示请求参数 ，参数 url ，参数值正则 baidu\n                   \t-Query=url,bing\n   \t\t\t\n   ```\n\n   请求路径：\n\n   - ~~百度地址：http://127.0.0.1:88/hello?url=baidu~~~~，无法跳转到百度~~\n\n   - 必应地址：http://127.0.0.1:88/hello?url=bing\n\n   - QQ地址：http://127.0.0.1:88/hello?url=qq\n\n# 前端基础\n\n## 前后端对比\n\n![在这里插入图片描述](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205131014934.png) \n\n## ES6\n\n> ECMAScript 6.0（以下简称 ES6，ECMAScript是一种由Ecma国际通过ECMA-262标准化的脚本）， 是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。 ECMAScript是规范，JS的规范的具体实现。\n\n### let & const\n\n- 作用域：var在{}之外也起作用 let在{}之外不起作用 \n- 声明次数：var 多次声明同一变量不会报错，let多次声明会报错，只能声明一次。\n- 变量提升：var 会变量提升（打印和定义可以顺序反）；let 不存在变量提升（顺序不能反） \n- const 声明之后不允许改变\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    \n\n    <script>\n       // var 声明的变量往往会越域\n       // let 声明的变量有严格局部作用域\n//         {\n//             var a = 1;\n//             let b = 2;\n//         }\n//         console.log(a);  // 1\n//         console.log(b);  // ReferenceError: b is not defined\n\n    // var 可以声明多次\n            // let 只能声明一次\n//         var m = 1\n//         var m = 2\n//         let n = 3\n//       let n = 4\n//         console.log(m)  // 2\n//         console.log(n)  // Identifier 'n' has already been declared\n\n        // var 会变量提升\n        // let 不存在变量提升\n//         console.log(x);  // undefined\n//         var x = 10;\n//         console.log(y);   //ReferenceError: y is not defined\n//         let y = 20;\n\n        // const\n        // 1. const声明之后不允许改变\n        // 2. 一但声明必须初始化，否则会报错\n        const a = 1;\n        a = 3; //Uncaught TypeError: Assignment to constant variable.\n    \n    </script>\n\n</body>\n</html>\n```\n\n### 解构表达式\n\n- 数组解构：支持 let arr = [1,2,3]; let [a,b,c] = arr\n- 冒号改名：const { name: abc, age, language } = person\n- 字符串函数：支持一个字符串为多行 占位符功能 ${}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\n    <script>\n        //数组解构\n        // let arr = [1,2,3];\n        // // let a = arr[0];\n        // // let b = arr[1];\n        // // let c = arr[2];\n\n        // let [a,b,c] = arr;\n        // console.log(a,b,c)\n\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n        //         const name = person.name;\n        //         const age = person.age;\n        //         const language = person.language;\n\n        //对象解构\n        const { name: abc, age, language } = person;\n        console.log(abc, age, language)\n\n        // 字符串扩展\n        let str = \"hello.vue\";\n        console.log(str.startsWith(\"hello\"));//true\n        console.log(str.endsWith(\".vue\"));//true\n        console.log(str.includes(\"e\"));//true\n        console.log(str.includes(\"hello\"));//true\n\n        //字符串模板\n        let ss = `<div>\n                    <span>hello world<span>\n                </div>`;\n        console.log(ss);\n\n        // 字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。\n\n        function fun() {\n            return \"这是一个函数\"\n        }\n\n        let info = `我是${abc}，今年${age + 10}了, 我想说： ${fun()}`;\n        console.log(info);\n\n    </script>\n</body>\n</html>\n```\n\n### 函数优化\n\n- 函数默认值： b = b || 1; 现在可以直接写了function add2(a, b = 1) \n- 不定参数：function fun(...values) {\n- 支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\n    <script>\n        //在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：\n        function add(a, b) {\n            // 判断b是否为空，为空就给默认值1\n            b = b || 1;\n            return a + b;\n        }\n        // 传一个参数\n        console.log(add(10));\n\n\n        //现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值\n        function add2(a, b = 1) {\n            return a + b;\n        }\n        console.log(add2(20));\n\n\n        //不定参数\n        function fun(...values) {\n            console.log(values.length)\n        }\n        fun(1, 2)      //2\n        fun(1, 2, 3, 4)  //4\n\n        //箭头函数\n        //以前声明一个方法\n        // var print = function (obj) {\n        //     console.log(obj);\n        // }\n        var print = obj => console.log(obj);\n        print(\"hello\");\n\n        var sum = function (a, b) {\n            c = a + b;\n            return a + c;\n        }\n\n        var sum2 = (a, b) => a + b;\n        console.log(sum2(11, 12));\n\n        var sum3 = (a, b) => {\n            c = a + b;\n            return a + c;\n        }\n        console.log(sum3(10, 20))\n\n\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n\n        function hello(person) {\n            console.log(\"hello,\" + person.name)\n        }\n\n        //箭头函数+解构\n        var hello2 = ({name}) => console.log(\"hello,\" +name);\n        hello2(person);\n\n    </script>\n</body>\n</html>\n```\n\n### 对象优化\n\n- map：获取map的键值对等Object.keys()、values、entries\n- 对象合并：Object.assign(target,source1,source2)\n- 声明简写：const person2 = { age, name }\n- 对象拷贝：let someone = { …p1 }\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script>\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n\n        console.log(Object.keys(person));//[\"name\", \"age\", \"language\"]\n        console.log(Object.values(person));//[\"jack\", 21, Array(3)]\n        console.log(Object.entries(person));//[Array(2), Array(2), Array(2)]\n\n        const target = { a: 1 };\n        const source1 = { b: 2 };\n        const source2 = { c: 3 };\n\n        //{a:1,b:2,c:3}\n        Object.assign(target, source1, source2);\n\n        console.log(target);//[\"name\", \"age\", \"language\"]\n\n        // 声明对象简写\n        const age = 23\n        const name = \"张三\"\n        const person1 = { age: age, name: name }\n\n        const person2 = { age, name }//声明对象简写\n        console.log(person2);\n\n        // 对象的函数属性简写\n        let person3 = {\n            name: \"jack\",\n            // 以前：\n            eat: function (food) {\n                console.log(this.name + \"在吃\" + food);\n            },\n            //箭头函数this不能使用，对象.属性\n            eat2: food => console.log(person3.name + \"在吃\" + food),\n            eat3(food) {\n                console.log(this.name + \"在吃\" + food);\n            }\n        }\n\n        person3.eat(\"香蕉\");\n        person3.eat2(\"苹果\")\n        person3.eat3(\"橘子\");\n\n        // 对象拓展运算符\n\n        //  拷贝对象（深拷贝）\n        let p1 = { name: \"Amy\", age: 15 }\n        let someone = { ...p1 }\n        console.log(someone)  //{name: \"Amy\", age: 15}\n\n        //  合并对象\n        let age1 = { age: 15 }\n        let name1 = { name: \"Amy\" }\n        let p2 = {name:\"zhangsan\"}\n        p2 = { ...age1, ...name1 } \n        console.log(p2)\n    </script>\n</body>\n\n</html>\n```\n\n### map和reduce\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    \n    <script>\n        //数组中新增了map和reduce方法。\n        //map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。\n         let arr = ['1', '20', '-5', '3'];\n         \n        //  arr = arr.map((item)=>{\n        //     return item*2\n        //  });\n         arr = arr.map(item=> item*2);\n\n        \n\n         console.log(arr);\n        //reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，\n        //[2, 40, -10, 6]\n        //arr.reduce(callback,[initialValue])\n        /**\n     1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）*/\n        let result = arr.reduce((a,b)=>{\n            console.log(\"上一次处理后：\"+a);\n            console.log(\"当前正在处理：\"+b);\n            return a + b;\n        },100);\n        console.log(result)\n\n    \n    </script>\n</body>\n</html>\n```\n\n### promise\n\n- 封装：赋值给 let p 在Ajax中成功使用 resolve(data)，交给then处理， 失败使用reject(err)，交给catch处理p.then().catch()\n\n```json\n//corse_score_10.json 得分\n{\n    \"id\": 100,\n    \"score\": 90\n}\n\n//user.json 用户\n{\n    \"id\": 1,\n    \"name\": \"zhangsan\",\n    \"password\": \"123456\"\n}\n\n\n//user_corse_1.json 课程\n{\n    \"id\": 10,\n    \"name\": \"chinese\"\n}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n</head>\n<body>\n    <script>\n        //1、查出当前用户信息\n        //2、按照当前用户的id查出他的课程\n        //3、按照当前课程id查出分数\n        // $.ajax({\n        //     url: \"mock/user.json\",\n        //     success(data) {\n        //         console.log(\"查询用户：\", data);\n        //         $.ajax({\n        //             url: `mock/user_corse_${data.id}.json`,\n        //             success(data) {\n        //                 console.log(\"查询到课程：\", data);\n        //                 $.ajax({\n        //                     url: `mock/corse_score_${data.id}.json`,\n        //                     success(data) {\n        //                         console.log(\"查询到分数：\", data);\n        //                     },\n        //                     error(error) {\n        //                         console.log(\"出现异常了：\" + error);\n        //                     }\n        //                 });\n        //             },\n        //             error(error) {\n        //                 console.log(\"出现异常了：\" + error);\n        //             }\n        //         });\n        //     },\n        //     error(error) {\n        //         console.log(\"出现异常了：\" + error);\n        //     }\n        // });\n\n\n        //1、Promise可以封装异步操作\n        // let p = new Promise((resolve, reject) => { //传入成功解析，失败拒绝\n        //     //1、异步操作\n        //     $.ajax({\n        //         url: \"mock/user.json\",\n        //         success: function (data) {\n        //             console.log(\"查询用户成功:\", data)\n        //             resolve(data);\n        //         },\n        //         error: function (err) {\n        //             reject(err);\n        //         }\n        //     });\n        // });\n\n        // p.then((obj) => { //成功以后做什么\n        //     return new Promise((resolve, reject) => {\n        //         $.ajax({\n        //             url: `mock/user_corse_${obj.id}.json`,\n        //             success: function (data) {\n        //                 console.log(\"查询用户课程成功:\", data)\n        //                 resolve(data);\n        //             },\n        //             error: function (err) {\n        //                 reject(err)\n        //             }\n        //         });\n        //     })\n        // }).then((data) => { //成功以后干什么\n        //     console.log(\"上一步的结果\", data)\n        //     $.ajax({\n        //         url: `mock/corse_score_${data.id}.json`,\n        //         success: function (data) {\n        //             console.log(\"查询课程得分成功:\", data)\n        //         },\n        //         error: function (err) {\n        //         }\n        //     });\n        // })\n\n        function get(url, data) { //自己定义一个方法整合一下\n            return new Promise((resolve, reject) => {\n                $.ajax({\n                    url: url,\n                    data: data,\n                    success: function (data) {\n                        resolve(data);\n                    },\n                    error: function (err) {\n                        reject(err)\n                    }\n                })\n            });\n        }\n\n        get(\"mock/user.json\")\n            .then((data) => {\n                console.log(\"用户查询成功~~~:\", data)\n                return get(`mock/user_corse_${data.id}.json`);\n            })\n            .then((data) => {\n                console.log(\"课程查询成功~~~:\", data)\n                return get(`mock/corse_score_${data.id}.json`);\n            })\n            .then((data)=>{\n                console.log(\"课程成绩查询成功~~~:\", data)\n            })\n            .catch((err)=>{ //失败的话catch\n                console.log(\"出现异常\",err)\n            });\n\n    </script>\n</body>\n\n</html>\n```\n\n### 模块化\n\n- 代码拆分：类似Java导包，导模块。 \n- 命令：export 和 import \n  - export 用于规定模块的对外接口 \n  - import 用于导入其他模块提供的功能\n\n```js\nuser.js\nvar name = \"jack\"\nvar age = 21\nfunction add(a,b){\n    return a + b;\n}\n\nexport {name,age,add}\n\nhello.js\n// export const util = {\n//     sum(a, b) {\n//         return a + b;\n//     }\n// }\n\nexport default {\n    sum(a, b) {\n        return a + b;\n    }\n}\n// export {util}\n\n//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。\n\n\nmain.js\nimport abc from \"./hello.js\"\nimport {name,add} from \"./user.js\"\n\nabc.sum(1,2);\nconsole.log(name);\nadd(1,3);\n```\n\n## Vue\n\n### MVVM思想\n\n- M：model 包括数据和一些基本操作 \n\n- V：view 视图，页面渲染结果 \n- VM：View-model，模型与视图间的双向操作（无需开发人员干涉） 视图和数据通过VM绑定起来，model里有变化会自动地通过Directives填写到视view中， 视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。\n\n### 案例\t\n\n```sh\nnpm init -y\n//教学的版本是Vue2，目前版本是Vue3\nnpm i vue@2 \n```\n\n```html\n在VSCode中安装vue 2 snippets语法提示插件，在谷歌浏览器中安装vue.js devtools\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"num\">\n        v-model实现双向绑定\n        <button v-on:click=\"num++\">点赞</button>\n        v-on:click绑定事件，实现自增\n        <button v-on:click=\"cancel\">取消</button>\n        回到自定义的方法\n        \n        <h1> {{name}} ,非常帅，有{{num}}个人为他点赞{{hello()}}</h1>\n    </div>\n\n    <!-- 导入依赖 -->\n    <script src=\"./node_modules/vue/dist/vue.js\"></script>\n\n    <script>\n        //1、vue声明式渲染\n        let vm = new Vue({ //生成vue对象\n            el: \"#app\",//绑定元素 div id=\"app\"\n            data: {  //封装数据\n                name: \"张三\",  // 也可以使用{} //表单中可以取出\n                num: 1\n            },\n            methods:{  //封装方法\n                cancel(){\n                    this.num -- ;\n                },\n                hello(){\n                    return \"1\"\n                }\n            }\n        });\n        还可以在html控制台 vm.name ,vm 表示 Vue对象的实例\n\n        //2、双向绑定,模型变化，视图变化。反之亦然。\n        //3、事件处理\n\n        //v-xx：指令\n\n        //1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的\n        //2、指令来简化对dom的一些操作。\n        //3、声明方法来做更复杂的操作。methods里面可以封装方法。\n\n    </script>\n</body>\n\n</html>\n```\n\n### 组件化\n\n> 在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。 但是如果每个页面都自开发，这无疑增加了我们开发的成本。\n>\n> 把页面拆成不同的组件，然后共享组件，避免重复开发。 在vue里，所有的vue实例都是组件，组件其实也是一个vue实例，因此它在定义时也会接收：data、methods、生命周期函等 不同的是组件不会与页面的元素綁定，否则就无法复用了，因此没有el属性。 \n>\n> 但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板 全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组了 data必须是一个函数，不再是一个对象。\n\n### Vue脚手架\n\n```sh\n# 全局安装 Webpack\nnpm i webpack -g\n# 全局安装脚手架\nnpm i vue-cli -g\n# 查看版本 2.9.6\nvue -V\n# 使用 webpack 模板项目 初始化一个 appname 项目\nvue init webpack appname:vue \n# 启动项目，项目中的package.json 中 scripts，代表运行命令\nnpm start = npm run dev \n# 项目打包\nnpm run build\n```\n\n#### 示例\n\n```sh\n$ `vue init webpack app`\n\n? Target directory exists. Continue? (Y/n) y\n? Target directory exists. Continue? Yes\n\n? Project name app\n? Project description (A Vue.js project)\n? Project description A Vue.js project\n? Author (lingzhexi <lingzhexi@gmail.com>)\n? Author lingzhexi <lingzhexi@gmail.com>\n? Vue build (Use arrow keys)\n? Vue build standalone\n? Install vue-router? (Y/n) `y`\n? Install vue-router? Yes\n? Use ESLint to lint your code? (Y/n) `n`\n? Use ESLint to lint your code? No\n? Set up unit tests (Y/n) `n`\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? (Y/n) `y`\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recom\n? Should we run `npm install` for you after the project has been created? (recom\nmended) yarn\n\n   vue-cli · Generated \"app\".\n\n\n# Installing project dependencies ...\n# ========================\n\n'yarn' is not recognized as an internal or external command,\noperable program or batch file.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd app\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n```\n\n### 使用element-UI\n\n```sh\n# 安装\nnpm i elemenet-ui -S\n```\n\n```js\n# 在 main.js 中写入以下内容：\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nVue.use(ElementUI);\n```\n\n### 补充\n\n```sh\n# 补充依赖\nnpm i webpack-dev-server --save-dev\n```\n\n","source":"_posts/2022-03-18-谷粒商城学习.md","raw":"---\ntitle: 谷粒商城学习\ntags:\n  - JAVA\n  - 项目\ncategories: 项目\nsummary: 谷粒商城项目搭建、开发部署上线运维全流程\nabbrlink: 57306\ndate: 2022-05-18 15:34:15\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072146144.png)\n\n<!--more-->\n\n# docker 安装\n \n## docker 安装MySQL\n\n1. 下载镜像\n\n   ```shell\n   docker pull mysql:5.7\n   ```\n\n2. 创建实例\n\n   ```sh\n   docker run -p 3307:3306 --name mysql \\\n   -v /mydata/mysql/log:/var/log/mysql \\\n   -v /mydata/mysql/data:/var/lib/mysql \\\n   -v /mydata/mysql/conf:/etc/mysql \\\n   -e MYSQL_ROOT_PASSWORD=root \\\n   -d mysql:5.7\n   ```\n\n   参数说明：\n\n   - -p 3306:3306：-p 主机端口:容器端口，将容器的3306端口映射到主机的3306端口\n   - -v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机\n   - -v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机\n   - -v /mydata/mysql/data:/var/lib/mysql：将配置文件夹挂载到主机\n   - -e MYSQL_ROOT_PASSWORD=root：初始化root用户密码\n   - -d mysql:5.7：表示后台运行(-d) 镜像mysql:5.7   -->查看镜像docekr images\n\n3. 进去docker 容器\n\n   ``` sh\n   root@af26dd647c9a:/# docker exec -it mysql /bin/bash\n   root@af26dd647c9a:/# whereis mysql\n   mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\n   ```\n\n4. mysql配置 my.cnf\n\n   ```sh\n   [root@lingzx conf]# vi /mydata/mysql/conf/my.cnf\n   ```\n\n   ```sh\n   [client]\n   default-character-set=utf8\n   \n   [mysql]\n   default-character-set=utf8\n   \n   [mysqld]\n   init_connect='SET collation_connection=utf8_unicode_ci'\n   init_connect='SET NAMES utf8'\n   character-set-server=utf8\n   collation-server=utf8_unicode_ci\n   skip-character-set-client-handshake\n   skip-name-resolve\n   lower_case_table_names=1\n   ```\n\n5. 查看docker中MySQL的配置\n\n   ```sh\n   cd /etc/mysql\n   cat my.cnf\n   ```\n\n6. 开机自启\n\n   ```sh\n   docker update mysql --restart=always\n   ```\n\n   \n\n## docker 安装Redis\n\n1. 下载redis 镜像\n\n   ``` sh \n   docker pull redis\n   ```\n\n2. 创建实例并启动\n\n   ```sh\n   # 由于 redis容器 /etc/redis目录下没有 redis.conf ，所以需要我们预先在主机上创建一个 redis.conf\n   mkdir -p /mydata/redis/conf\n   touch /mydata/redis/conf/redis.conf\n   \n   docker run -p 6379:6379 --name redis \\\n   -v /mydata/redis/data:/data \\\n   -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n   -d redis redis-server /etc/redis/redis.conf\n   \n   # 连接 docker中的 redis的控制台\n   docker exec -it redis redis-cli\n   ```\n\n3. 配置持久化\n\n   > 当前版本的redis默认配置了【文件追加写持久化】aof\n\n   ```sh\n   vi /mydata/redis/redis.conf\n   \n   appendonly yes\n   \n   docker restart redis\n   ```\n\n4. 开机自启\n\n   ```sh\n   docker update redis --restart=always\n   ```\n\n   \n\n# 统一环境\n\n## Maven 3.6.1\n\n> 链接: https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA 提取码: 38iw 复制这段内容后打开百度网盘手机App，操作更方便哦\n\n配置阿里云镜像\n\n```xml\n<mirrors>\n\t<mirror>\n      <id>nexus-aliyun</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Nexus aliyun</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n    </mirror>\n</mirrors> \n```\n\n配置 JDK 1.8 编译环境\n\n```xml\n<profiles>\n  <profile>\n    <id>jdk-1.8</id>\n    <activation>\n      <activeByDefault>true</activeByDefault>\n      <jdk>1.8</jdk>\n    </activation>\n    <properties>\n      <maven.compile.source>1.8</maven.compile.source>\n      <maven.compile.target>1.8</maven.compile.target>\n      <maven.compile.compilerVersion>1.8</maven.compile.compilerVersion>\n    </properties>\n  </profile>\n</profiles>\n```\n\n配置本地仓库\n\n```xml\n<localRepository>D:\\Program Files\\Maven\\LocalWareHouse</localRepository>\n```\n\n## idea 安装插件\n\n- lombok\n- MybatisX\n\n## Vscode 安装配置\n\n- Auto Close Tag\n- Auto Rename Tag\n- Chinese (Simplified)\n- ESLint\n- HTML CSS Support\n- HTML Snippets\n- JavaScript（ES6）\n- Live Server\n- open in browser\n- Vetur\n\n## 安装配置 git\n\n1. 下载 git：https://git-scm.com\n\n2. 配置 git ，进入git bash\n\n   ```sh\n   # 配置用户名\n   git config --global user.name 'username'\n   # 配置邮箱\n   git config --global user.email 'username@email.com'\n   ```\n\n3. 配置 shh 免密登录，进入git bash\n\n   ```sh\n   ssh-keygen -t rsa -C 'xx@xxx.com'\n   ```\n\n    三次回车，查找 id_rsa 和 id_rsa.pub\n\n4. 登录 gitee，在设置里面找到 SSH KEY 将 .pub 文件的内容粘贴进去\n\n   ```sh\n   # 查看是否成功\n   ssh -T git@gitee.com \n   ```\n\n# 创建项目\n\n1. 商品服务、仓储服务、订单服务、优惠券服务、用户服务\n\n   共用：\n\n   1. web 、openfeign\n   2. 每个服务，包名 **com.atguigu.gulimall**.xxx(product/order/ware/coupon/member)\n   3. 模块名：gulimall-coupon\n\n2. 添加pom文件\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n       <modelVersion>4.0.0</modelVersion>\n       <groupId>com.atguigu.gulimall</groupId>\n       <artifactId>gulimall</artifactId>\n       <version>0.0.1-SNAPSHOT</version>\n       <name>gulimall</name>\n       <description>聚合服务</description>\n       <packaging>pom</packaging>\n       <modules>\n           <module>gulimall-coupon</module>\n           <module>gulimall-member</module>\n           <module>gulimall-order</module>\n           <module>gulimall-product</module>\n           <module>gulimall-ware</module>\n       </modules>\n   </project>\n   ```\n\n3. 设置忽略提交内容 .gitgnore\n\n   ```sh\n   **/mvnw\n   **/mvnw.cmd\n   \n   **/.mvn\n   **/target/\n   \n   .idea\n   **/.gitignore\n   ```\n\n   ![image-20220323234601504](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203232346905.png) \n\n4. 提交并推送到仓库\n\n## 数据库设计 PowerDesigner\n\n1. ![image-20220324004223247](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042296.png) \n\n7. ![image-20220324004234654](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042710.png) \n\n2. 每个微服务创建自己的数据库\n\n## 人人开源快速开发\n\n### 后端管理 renren-fast\n\n1. 克隆项目\n\n   > git clone git@gitee.com:renrenio/renren-fast.git\n   \n2. 将renren-fast 放在gulimall项目pom中 module\n\n   > <module>renren-fast</module>\n\n3. 新增数据库 gulimall_admin\n\n4. 修改pom\n\n   1. 关联gulimall\n\n      ```xml\n      <parent>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-parent</artifactId>\n          <version>2.3.7.RELEASE</version>\n          <relativePath/>\n      </parent>\n      ```\n\n   2. 解决@NotBlank 和 @Email 报错\n\n      ```xml\n      <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-validation</artifactId>\n      </dependency>\n      ```\n\n5. 修改数据库配置，连接到 gulimall_admin 的配置信息\n\n### 前端管理 renren-fast-vue\n\n1. 克隆项目\n\n   > git clone git@gitee.com:renrenio/renren-fast-vue.git\n\n2. 将项目拖到VSCode中\n\n3. 统一配置\n\n   1. nodeJs，\n\n      > node 版本 14 可以解决所有的报错\n      >\n      > 关注 node.js 的 npm 功能\n      >\n      > NPM 是NodeJS的包管理工具，JS-NPM，Java-Maven\n\n      - 官网下载安装，node -v 检查版本\n\n      - 配置npm 淘宝镜像\n\n        ```sh\n        npm config set registry http://registry.npm.taobao.org/\n        ```\n\n      - 下载依赖包\n\n        ```sh\n        npm install\n        ```\n\n      - 报错处理\n\n        ```sh\n        npm install --save  -g core-js@^3\n        ```\n\n      - node-sass报错 是由于版本的问题，在package.json中可以解决\n\n   2. Vue\n\n### 代码生成 renren-generator\n\n 1. 克隆项目\n\n    > git clone git@gitee.com:renrenio/renren-generator.git\n\n\t2. 将项目拖到 idea 中\n\n\t3. 修改配置（以 product 模块为例子）\n\n    - 修改 generator.properties\n\n      ```properties\n      #代码生成器，配置信息\n      mainPath=com.atguigu\n      #包名\n      package=com.atguigu.gulimall\n      moduleName=product\n      #作者\n      author=Mr.Ling\n      #Email\n      email=lingzhexi@163.com\n      #表前缀(类名不会包含表前缀)\n      tablePrefix=pms_\n      ```\n\n    - 修改 Controller.java.vm 模板\n\n      ```java\n      注释 @RequeiresPermissions 注解\n      //@RequiresPermissions(\"${moduleName}:${pathName}:list\")\n      ```\n\n    - 修改数据库配置( pms )\n\n      ```yml\n      spring:\n        datasource:\n          type: com.alibaba.druid.pool.DruidDataSource\n          #MySQL配置\n          driverClassName: com.mysql.cj.jdbc.Driver\n          url: jdbc:mysql://localhost:13306/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai\n          username: root\n          password: root\n      ```\n\n\t4. 启动项目，生成代码\n\n    - 点击生成代码\n\n      ![image-20220407215910844](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072159051.png)\n\n    - 将代码放到 product 模块中\n\n### 新增 gulimall-common\n\n- 通用的依赖模块 ，product 模块引用该模块\n\n  ```xml\n  <dependency>\n      <groupId>com.baomidou</groupId>\n      <artifactId>mybatis-plus-boot-starter</artifactId>\n      <version>3.3.1</version>\n  </dependency>\n  <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.18.22</version>\n  </dependency>\n  <dependency>\n      <groupId>commons-lang</groupId>\n      <artifactId>commons-lang</artifactId>\n      <version>2.6</version>\n  </dependency>\n  <dependency>\n      <groupId>org.apache.httpcomponents</groupId>\n      <artifactId>httpcore</artifactId>\n      <version>4.4.14</version>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-validation</artifactId>\n      <version>2.3.7.RELEASE</version>\n  </dependency>\n  ```\n\n## 整合Mybatis-pus\n\n1. 导入依赖\n\n   ```xml\n   <dependency>\n       <groupId>com.baomidou</groupId>\n       <artifactId>mybatis-plus-boot-starter</artifactId>\n       <version>3.3.1</version>\n   </dependency>\n   ```\n\n2. 配置\n\n   1. 配置数据源\n\n      1. 导入MySql 驱动\n\n         推荐使用 8 版本的Mysql connector![image-20220410002401508](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100039304.png)\n\n         ```xml\n         <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n             <version>8.0.28</version>\n         </dependency>\n         ```\n\n      2. 整合 application.yml\n\n         ```yml\n         server:\n             port: 8080\n         spring:\n             application:\n                 name: gulimall-product\n             datasource:\n                 username: root\n                 password: root\n                 url: jdbc:mysql://localhost:13306/gulimall_pms\n                 driver-class-name: com.mysql.cj.jdbc.Driver\n         \n         ```\n\n   2. 配置 mybaits-plus\n\n      1. 主启动配置 @MapperScan(\"com.atguigu.gulimall.product.dao\")\n\n         ![image-20220410004352680](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png) \n\n      2. 告诉 MyBatis-Plus ， sql 映射文件位置\n\n         默认位置类路径下的 classpath*:/mapper/**/*.xml\n\n         ![image-20220410004908204](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100049256.png) \n\n         ```yml\n         mybatis-plus:\n         \tmapper-locations: classpath:/mapper/**/*.xml\n         ```\n\n      3. 设置主键自增配置\n      \n         ```yml\n         # 填写 id 自动联想出来\n         mybatis-plus: \n          global-config:\n                 db-config:\n                     id-type: auto\n         ```\n   \n   ​\t**各模块最终需要依赖到 gulimall-common** \n\n# 整合微服务\n\n ![image-20220411213056325](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112131562.png)\n\n## 搭配方案：\n\n- SpringCloud Alibaba - Nacos : 注册中心 （服务发现/注册）\n- SpringCloud Alibaba - Nacos : 配置中心 （动态配置管理）\n- SpringCloud - Ribbon :  负载均衡\n- SpringCloud - Feign : 声明式 HTTP 客户端 （调用远程服务）\n- SpringCloud Alibaba - Sentinel : 服务容错 （限流、降级、熔断）\n- SpringCloud - Gateway : API 网关 （webflux 编程模式）\n- SpringCloud - Sleuth : 调用链监控\n- SpringCloud Alibaba - Seata : 原 Fescar 即分布式事务解决方案 \t\n\n阿里巴巴中文文档：[SpringCloud Alibab 中文文档](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md)\n\n## 版本选择：\n\n![image-20220411215026972](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150099.png)  \n\nSpringCloud - SpringBoot 版本对比（[SpringCloud 官网](https://spring.io/projects/spring-cloud)）\n\n![image-20220411215056217](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150336.png) \n\nSpringCloud Alibaba - SpringBoot 版本对比 （ [SpringCloud Alibaba Github](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md)）\n\n![image-20220411220224816](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112202930.png) \n\n将 SpringCloud Alibaba 依赖 加入 gulimall-common 中  \n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n            <version>2.1.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n \n\n## 注册中心\n\n[nacos 注册中心](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc)\n\n### 服务注册/发现 Nacos Discovery\n\n1. 引入依赖，加入gulimall-common\n\n   ```xml\n   <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n   </dependency>\n   ```\n\n   优惠卷模块引入 nacos discovery 依赖\n\n    ![image-20220411222218474](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112222593.png) \n\n2. 配置Nacos Server 地址\n\n   ```yml\n   spring:\n   \tcloud:\n   \t\tnacos:\n   \t\t\tdiscovery:\n   \t\t\t\tserver-addr: 127.0.0.1:8848\n   ```\n\n3. 使用 @EnableDiscoveryClient 注解开启服务注册和发现\n   ![image-20220411222803578](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png) \n\n4. 查看注册的服务\n\n   >  登录后台 127.0.0.1:8848/nacos \n   >\n   > 用户信息：nacos/nacos\n\n   ![image-20220411223200216](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112232366.png) \n\n## 远程调用\n\n1. 引入 open-feign\n\n2. 编写一个接口，告诉SpringCloud 需要调用远程接口\n\n   - 新建一个feign 包\n\n   - 写一个接口\n\n     ```java\n     @FeignClient(\"gulimall-coupon\") //表示 nacos 注册中心中的找到服务名为 gulimall-coupon 的服务\n     public interface CouponFeignService {\n     \n         @RequestMapping(\"/coupon/coupon/member/coupon\") // 找到优惠券服务中的该接口\n         public R memberCoupons();\n     }\n     ```\n\n3. 开启远程调用功能 \n\n   在主启动中添加 @EnableFeignClients(basePackages=\"xx\") xx表示指定feign的接口包\n\n   ```java\n   @EnableFeignClients(basePackages = \"com.atguigu.gulimall.member.feign\") //此时的basePackages 可以省略\n   @EnableDiscoveryClient\n   @MapperScan(\"com.atguigu.gulimall.member.dao\")\n   @SpringBootApplication\n   public class GulimallMemberApplication {\n   \n       public static void main(String[] args) {\n           SpringApplication.run(GulimallMemberApplication.class, args);\n       }\n   \n   } \n   ```\n\n4. 示例\n\n   - 添加远程接口\n\n     ```java\n     @RestController\n     @RequestMapping(\"coupon/coupon\")\n     public class CouponController {\n         @Autowired\n         private CouponService couponService;\n     \n         /**\n          * 会员优惠券\n          */\n         @RequestMapping(\"/member/coupon\")\n         public R memberCoupons() {\n             CouponEntity couponEntity = new CouponEntity();\n             couponEntity.setCouponName(\"满100减10\");\n             return R.ok().put(\"coupons\", Arrays.asList(couponEntity));\n         }\n     }\n     ```\n\n   - 添加调用接口\n\n     ```java\n     @RestController\n     @RequestMapping(\"member/member\")\n     public class MemberController {\n         @Autowired\n         private MemberService memberService;\n     \n         @Autowired\n         CouponFeignService couponFeignService;\n     \n         @RequestMapping(\"/coupons\")\n         public R test() {\n             MemberEntity memberEntity = new MemberEntity();\n             memberEntity.setNickname(\"张三\");\n             R r = couponFeignService.memberCoupons();\n             return R.ok().put(\"member\", memberEntity).put(\"coupons\", r.get(\"coupons\"));\n         }\n     }\n     ```\n\n   - 请求接口 localhost:8000/member/member/coupons\n\n     \n\n## 配置中心：动态管理配置\n\n[nacos 配置中心文档](https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md)\n\n1. 引入 Nacos Config  Starter\n\n   ```xml\n   <dependency>\n       <groupId>com.alibaba.cloud</groupId>\n       <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n   </dependency>\n   ```\n\n2. 创建 bootstrap.yml，配置 Nacos 元数据\n\n   ```yml\n   spring:\n   \tapplication:\n   \t\tname: gulimall-coupon\n   \tcloud:\n   \t\tnacos:\n   \t\t\tconfig:\n   \t\t\t\tserver-addr: 127.0.0.1:8848\n   ```\n\n3. 配置中心 添加 数据集（Data Id） gulimall-coupon.properties ，默认规则，应用名.properties\n   ![image-20220412213509978](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png) \n\n   ![image-20220412214528762](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122145876.png) \n\n4. 动态获取配置\n    @RefreshScope ：动态获取并刷新配置\n\n    @Value(\"${配置项的名}\") ：获取到配置\n\n   如果配置中心和当前应用都配置相同的项，优先使用配置中心的配置\n\n   ```java\n   @RefreshScope //动态刷新\n   @RestController\n   @RequestMapping(\"coupon/coupon\")\n   public class CouponController {\n       @Autowired\n       private CouponService couponService;\n   \n       @Value(\"${coupon.user.name}\")\n       private String name;\n       @Value(\"${coupon.user.age}\")\n       private Integer age;\n       @GetMapping(\"/test\")\n       public R test() {\n           return R.ok().put(\"name\",name).put(\"age\",age);\n       }\n   }\n   ```\n\n5. 核心概念\n\n   ![image-20220412220641506](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122206664.png)\n\n   - 命名空间：配置隔离 \n\n     默认 public ：默认新增的所有都在该空间下\n\n     1. 开发、测试、生产 ：利用命名空间来做环境隔离\n\n        注意：在bootstrap.yml 配置中，需要使用那个命名空间下的配置\n\n        ```yml\n        spring.cloud.nacos.config.namespace=cc749289-b027-486f-bb6a-3febcabecbdb\n        ```\n\n        ![image-20220412220837375](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122217795.png) \n\n     2. 每个服务应用之间相互隔离，管理微服务自己的配置\n        ![image-20220412223231969](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122232120.png)\n\n   - 配置集：所有配置的集合\n\n   - 配置集ID：类似文件名 （Data ID： 文件名）\n\n   - 配置分组：默认所有的配置集都属于：DEFAULT_GROUP；\n\n     - 组名：1111 、618 、1212\n\n     - ![image-20220412224056530](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122240653.png) \n\n     - 添加分组配置\n\n       ```properties\n       spring.cloud.nacos.config.group=1111\n       ```\n\n   - 每个微服务创建自己的命名空间，使用配置分组区分环境，dev、test、prod 环境\n\n     ![ ](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122247441.png)\t \n\n6. 同时加载多个配置集\n\n   - 微服务任何配置信息，任何配置文件都可以放在配置中心中\n     ![image-20220412233717240](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122337360.png)\n\n   - 只需要在 bootstrap.yml 说明 加载配置中心中的那些配置文件即可\n\n     ```yml\n     spring:\n       appliation:\n         name: gulimall-coupon\n       cloud:\n         nacos:\n           config:\n             server-addr: 127.0.0.1:8848\n             namespace: d6545d08-333c-4806-bf43-6acc99acecc6\n             # 数据库配置\n             ext-config[0].data-id: datasource.yml\n             ext-config[0].group: dev\n             ext-config[0].refresh: true\n             # mybatis 配置\n             ext-config[1].data-id: mybatis.yml\n             ext-config[1].group: dev\n             ext-config[1].refresh: true\n             # 其他配置\n             ext-config[2].data-id: other.yml\n             ext-config[2].group: dev\n             ext-config[2].refresh: true\n     ```\n\n     ![image-20220412233550198](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122335376.png)\n\n   - @Value，@ConfigurationProperties  以前SpringBoot 任何方法从配置文件中获取值，都能使用\n\n   - 配置中心有优先使用配置\n\n## 网关 GateWay\n\n [SpringGateway 官方文档](https://spring.io/projects/spring-cloud-gateway)\t\n\n​\t网关作为流量的入口，常用功能包括 **路由转发、权限校验、限流控制**等，而springcloud gateway\n作为SpringCloud官方推出的第二代网关框架，取代了Zuul网关。\n\n### 特征\n\nSpring Cloud Gateway 的特点：\n\n- 基于Spring Framework 5、Project Reactor和Spring Boot 2.0构建\n- 能够匹配任何请求属性上的路由。\n- 谓词和筛选器特定于路由。\n- 断路器集成。\n- 春云发现客户端集成\n- 易于编写谓词和筛选器\n- 请求速率限制\n- 路径重写\n\n![image-20220415142458247](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151424445.png) \n\n![image-20220415142513181](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151425268.png) \n\n![image-20220415143618115](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151436336.png)\n\n### 概念\n\n- Route（路由）：网关的基本构建基块。它由 **ID、目标 URI**、**断言集合**和**过滤器集合**定义。如果**断言集合为 true**，则匹配路由\n\n- Predicate（断言）：这是一个 [Java 8 函数断言](https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html)。输入类型是[Spring Framework `ServerWebExchange`](https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html)。这使您可以匹配 HTTP 请求中的任何内容，例如标头或参数。\n\n- Filter（过滤器）：这些是使用特定工厂构建的[`网关过滤器`](https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java)实例。在这里，您可以修改发送下游请求之前或之后的请求和响应\n\n### 工作原理：\n\n![Spring Cloud Gateway Diagram](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png) \n\n总结：当请求到达网关，网关利用断言，判断此次请求是不是符合某个路由规则，如果符合了就按照路由规则，路由到指定的地方。当要去指定的地方就要经过一系列的filter进行过滤\n\n### 配置示例 \n\n[路由断言工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gateway-request-predicates-factories)\n\n#### After Route Predicate Factory：后路由断言工厂\n\n路由断言工厂采用一个参数 a（这是一个 java）。此断言匹配在指定日期时间之后发生的请求。以下示例配置路由之后断言：\n\napplication.yml\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        # 断言（条件）：判断请求是在指定的时间后（After)发生的\n        predicates:\n        - After=2017-01-20T17:42:47.789-07:00[America/Denver]\n```\n\n[网关过滤器工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories)\n\n#### AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂\n\napplication.yml\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n      \t# 请求没有断言，任何请求直接跳转到这个链接\n        uri: https://example.org\n        filters:\n        - AddRequestHeader=X-Request-red, blue\n```\n\n此列表将标头添加到所有匹配请求的下游请求头中`X-Request-red:blue`\n\nAddRequestHeader`了解用于匹配路径或主机的 URI 变量。URI 变量可以在值中使用，并在运行时展开。下面的示例配置使用变量的 一个：`AddRequestHeader``GatewayFilter\n\n[全局过滤器工厂](https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters)\n\n### 创建网关\n\n1. 创建新 module gulimall-gateway\n\n2. 添加 gateway 依赖，~~添加 gulimall-common 依赖~~，添加nacos 配置中心和服务中心依赖\n\n   ```xml\n    <properties>\n           <java.version>1.8</java.version>\n           <spring-boot.version>2.1.8.RELEASE</spring-boot.version>\n           <spring-cloud.alibaba.version>2.1.0.RELEASE</spring-cloud.alibaba.version>\n           <spring-cloud.version>Greenwich.SR3</spring-cloud.version>\n       </properties>\n   <dependency>\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-gateway</artifactId>\n   </dependency>\n    <!--nacos 服务注册/发现-->\n           <dependency>\n               <groupId>com.alibaba.cloud</groupId>\n               <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n               <version>${spring-cloud.alibaba.version}</version>\n           </dependency>\n           <!--naocs 配置中心-->\n           <dependency>\n               <groupId>com.alibaba.cloud</groupId>\n               <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n               <version>${spring-cloud.alibaba.version}</version>\n           </dependency>\n   </dependency>\n   ```\n\n3. 统一 Spring boot、Spring Cloud 版本\n\n   - boot：2.1.8.RELEASE\n   - cloud：Greenwich.SR3 \n\n4. 项目新建 bootstrap.yml 填写 nacos 配置中心 \n\n   ```yaml\n   spring:\n       application:\n           name: gulimall-gateway\n       cloud:\n           nacos:\n               config:\n                   server-addr: 127.0.0.1:8848\n                   namespace: 4b9add0d-df21-4fc6-ad9c-35936b491b10s\t\n   ```\n\n5. 配置中心 新建网关配置命名空间\n\n   - 新建命名空间 gateway\n\n   - 新建配置文件 gulimall-gateway.propertie \n\n     ```properties\n     spring.application.name=gulimall-gateway\n     ```\n\n   - ![image-20220421225143278](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212251449.png)\n\n6. application.properties 配置服务中心\n\n   ```properties\n   server.port=88\n   spring.application.name=gulimall-gateway\n   spring.cloud.nacos.discovery.server-addr=127.0.0.1\n   ```\n\n7. 启动成功 \n   ![image-20220421230109723](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212301809.png)\n\n8. 配置路由断言\n\n   新建一个application.yml\n\n   ![image-20220421230443693](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212304803.png)\n\n   ```yml\n   spring:\n   \tcloud:\n   \t\tgateway:\n   \t\t\troutes:\n                   -id: bing_route\n                   uri: https://www.bing.com\n                   predicates:\n   \t\t\t\t\t# query 表示请求参数 ，参数 url ，参数值正则 baidu\n                   \t-Query=url,bing\n                    -id: bing_route\n                   uri: https://www.bing.com\n                   predicates:\n   \t\t\t\t\t# query 表示请求参数 ，参数 url ，参数值正则 baidu\n                   \t-Query=url,bing\n   \t\t\t\n   ```\n\n   请求路径：\n\n   - ~~百度地址：http://127.0.0.1:88/hello?url=baidu~~~~，无法跳转到百度~~\n\n   - 必应地址：http://127.0.0.1:88/hello?url=bing\n\n   - QQ地址：http://127.0.0.1:88/hello?url=qq\n\n# 前端基础\n\n## 前后端对比\n\n![在这里插入图片描述](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205131014934.png) \n\n## ES6\n\n> ECMAScript 6.0（以下简称 ES6，ECMAScript是一种由Ecma国际通过ECMA-262标准化的脚本）， 是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。 ECMAScript是规范，JS的规范的具体实现。\n\n### let & const\n\n- 作用域：var在{}之外也起作用 let在{}之外不起作用 \n- 声明次数：var 多次声明同一变量不会报错，let多次声明会报错，只能声明一次。\n- 变量提升：var 会变量提升（打印和定义可以顺序反）；let 不存在变量提升（顺序不能反） \n- const 声明之后不允许改变\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    \n\n    <script>\n       // var 声明的变量往往会越域\n       // let 声明的变量有严格局部作用域\n//         {\n//             var a = 1;\n//             let b = 2;\n//         }\n//         console.log(a);  // 1\n//         console.log(b);  // ReferenceError: b is not defined\n\n    // var 可以声明多次\n            // let 只能声明一次\n//         var m = 1\n//         var m = 2\n//         let n = 3\n//       let n = 4\n//         console.log(m)  // 2\n//         console.log(n)  // Identifier 'n' has already been declared\n\n        // var 会变量提升\n        // let 不存在变量提升\n//         console.log(x);  // undefined\n//         var x = 10;\n//         console.log(y);   //ReferenceError: y is not defined\n//         let y = 20;\n\n        // const\n        // 1. const声明之后不允许改变\n        // 2. 一但声明必须初始化，否则会报错\n        const a = 1;\n        a = 3; //Uncaught TypeError: Assignment to constant variable.\n    \n    </script>\n\n</body>\n</html>\n```\n\n### 解构表达式\n\n- 数组解构：支持 let arr = [1,2,3]; let [a,b,c] = arr\n- 冒号改名：const { name: abc, age, language } = person\n- 字符串函数：支持一个字符串为多行 占位符功能 ${}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\n    <script>\n        //数组解构\n        // let arr = [1,2,3];\n        // // let a = arr[0];\n        // // let b = arr[1];\n        // // let c = arr[2];\n\n        // let [a,b,c] = arr;\n        // console.log(a,b,c)\n\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n        //         const name = person.name;\n        //         const age = person.age;\n        //         const language = person.language;\n\n        //对象解构\n        const { name: abc, age, language } = person;\n        console.log(abc, age, language)\n\n        // 字符串扩展\n        let str = \"hello.vue\";\n        console.log(str.startsWith(\"hello\"));//true\n        console.log(str.endsWith(\".vue\"));//true\n        console.log(str.includes(\"e\"));//true\n        console.log(str.includes(\"hello\"));//true\n\n        //字符串模板\n        let ss = `<div>\n                    <span>hello world<span>\n                </div>`;\n        console.log(ss);\n\n        // 字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。\n\n        function fun() {\n            return \"这是一个函数\"\n        }\n\n        let info = `我是${abc}，今年${age + 10}了, 我想说： ${fun()}`;\n        console.log(info);\n\n    </script>\n</body>\n</html>\n```\n\n### 函数优化\n\n- 函数默认值： b = b || 1; 现在可以直接写了function add2(a, b = 1) \n- 不定参数：function fun(...values) {\n- 支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n\n    <script>\n        //在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：\n        function add(a, b) {\n            // 判断b是否为空，为空就给默认值1\n            b = b || 1;\n            return a + b;\n        }\n        // 传一个参数\n        console.log(add(10));\n\n\n        //现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值\n        function add2(a, b = 1) {\n            return a + b;\n        }\n        console.log(add2(20));\n\n\n        //不定参数\n        function fun(...values) {\n            console.log(values.length)\n        }\n        fun(1, 2)      //2\n        fun(1, 2, 3, 4)  //4\n\n        //箭头函数\n        //以前声明一个方法\n        // var print = function (obj) {\n        //     console.log(obj);\n        // }\n        var print = obj => console.log(obj);\n        print(\"hello\");\n\n        var sum = function (a, b) {\n            c = a + b;\n            return a + c;\n        }\n\n        var sum2 = (a, b) => a + b;\n        console.log(sum2(11, 12));\n\n        var sum3 = (a, b) => {\n            c = a + b;\n            return a + c;\n        }\n        console.log(sum3(10, 20))\n\n\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n\n        function hello(person) {\n            console.log(\"hello,\" + person.name)\n        }\n\n        //箭头函数+解构\n        var hello2 = ({name}) => console.log(\"hello,\" +name);\n        hello2(person);\n\n    </script>\n</body>\n</html>\n```\n\n### 对象优化\n\n- map：获取map的键值对等Object.keys()、values、entries\n- 对象合并：Object.assign(target,source1,source2)\n- 声明简写：const person2 = { age, name }\n- 对象拷贝：let someone = { …p1 }\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script>\n        const person = {\n            name: \"jack\",\n            age: 21,\n            language: ['java', 'js', 'css']\n        }\n\n        console.log(Object.keys(person));//[\"name\", \"age\", \"language\"]\n        console.log(Object.values(person));//[\"jack\", 21, Array(3)]\n        console.log(Object.entries(person));//[Array(2), Array(2), Array(2)]\n\n        const target = { a: 1 };\n        const source1 = { b: 2 };\n        const source2 = { c: 3 };\n\n        //{a:1,b:2,c:3}\n        Object.assign(target, source1, source2);\n\n        console.log(target);//[\"name\", \"age\", \"language\"]\n\n        // 声明对象简写\n        const age = 23\n        const name = \"张三\"\n        const person1 = { age: age, name: name }\n\n        const person2 = { age, name }//声明对象简写\n        console.log(person2);\n\n        // 对象的函数属性简写\n        let person3 = {\n            name: \"jack\",\n            // 以前：\n            eat: function (food) {\n                console.log(this.name + \"在吃\" + food);\n            },\n            //箭头函数this不能使用，对象.属性\n            eat2: food => console.log(person3.name + \"在吃\" + food),\n            eat3(food) {\n                console.log(this.name + \"在吃\" + food);\n            }\n        }\n\n        person3.eat(\"香蕉\");\n        person3.eat2(\"苹果\")\n        person3.eat3(\"橘子\");\n\n        // 对象拓展运算符\n\n        //  拷贝对象（深拷贝）\n        let p1 = { name: \"Amy\", age: 15 }\n        let someone = { ...p1 }\n        console.log(someone)  //{name: \"Amy\", age: 15}\n\n        //  合并对象\n        let age1 = { age: 15 }\n        let name1 = { name: \"Amy\" }\n        let p2 = {name:\"zhangsan\"}\n        p2 = { ...age1, ...name1 } \n        console.log(p2)\n    </script>\n</body>\n\n</html>\n```\n\n### map和reduce\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    \n    <script>\n        //数组中新增了map和reduce方法。\n        //map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。\n         let arr = ['1', '20', '-5', '3'];\n         \n        //  arr = arr.map((item)=>{\n        //     return item*2\n        //  });\n         arr = arr.map(item=> item*2);\n\n        \n\n         console.log(arr);\n        //reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，\n        //[2, 40, -10, 6]\n        //arr.reduce(callback,[initialValue])\n        /**\n     1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）*/\n        let result = arr.reduce((a,b)=>{\n            console.log(\"上一次处理后：\"+a);\n            console.log(\"当前正在处理：\"+b);\n            return a + b;\n        },100);\n        console.log(result)\n\n    \n    </script>\n</body>\n</html>\n```\n\n### promise\n\n- 封装：赋值给 let p 在Ajax中成功使用 resolve(data)，交给then处理， 失败使用reject(err)，交给catch处理p.then().catch()\n\n```json\n//corse_score_10.json 得分\n{\n    \"id\": 100,\n    \"score\": 90\n}\n\n//user.json 用户\n{\n    \"id\": 1,\n    \"name\": \"zhangsan\",\n    \"password\": \"123456\"\n}\n\n\n//user_corse_1.json 课程\n{\n    \"id\": 10,\n    \"name\": \"chinese\"\n}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n</head>\n<body>\n    <script>\n        //1、查出当前用户信息\n        //2、按照当前用户的id查出他的课程\n        //3、按照当前课程id查出分数\n        // $.ajax({\n        //     url: \"mock/user.json\",\n        //     success(data) {\n        //         console.log(\"查询用户：\", data);\n        //         $.ajax({\n        //             url: `mock/user_corse_${data.id}.json`,\n        //             success(data) {\n        //                 console.log(\"查询到课程：\", data);\n        //                 $.ajax({\n        //                     url: `mock/corse_score_${data.id}.json`,\n        //                     success(data) {\n        //                         console.log(\"查询到分数：\", data);\n        //                     },\n        //                     error(error) {\n        //                         console.log(\"出现异常了：\" + error);\n        //                     }\n        //                 });\n        //             },\n        //             error(error) {\n        //                 console.log(\"出现异常了：\" + error);\n        //             }\n        //         });\n        //     },\n        //     error(error) {\n        //         console.log(\"出现异常了：\" + error);\n        //     }\n        // });\n\n\n        //1、Promise可以封装异步操作\n        // let p = new Promise((resolve, reject) => { //传入成功解析，失败拒绝\n        //     //1、异步操作\n        //     $.ajax({\n        //         url: \"mock/user.json\",\n        //         success: function (data) {\n        //             console.log(\"查询用户成功:\", data)\n        //             resolve(data);\n        //         },\n        //         error: function (err) {\n        //             reject(err);\n        //         }\n        //     });\n        // });\n\n        // p.then((obj) => { //成功以后做什么\n        //     return new Promise((resolve, reject) => {\n        //         $.ajax({\n        //             url: `mock/user_corse_${obj.id}.json`,\n        //             success: function (data) {\n        //                 console.log(\"查询用户课程成功:\", data)\n        //                 resolve(data);\n        //             },\n        //             error: function (err) {\n        //                 reject(err)\n        //             }\n        //         });\n        //     })\n        // }).then((data) => { //成功以后干什么\n        //     console.log(\"上一步的结果\", data)\n        //     $.ajax({\n        //         url: `mock/corse_score_${data.id}.json`,\n        //         success: function (data) {\n        //             console.log(\"查询课程得分成功:\", data)\n        //         },\n        //         error: function (err) {\n        //         }\n        //     });\n        // })\n\n        function get(url, data) { //自己定义一个方法整合一下\n            return new Promise((resolve, reject) => {\n                $.ajax({\n                    url: url,\n                    data: data,\n                    success: function (data) {\n                        resolve(data);\n                    },\n                    error: function (err) {\n                        reject(err)\n                    }\n                })\n            });\n        }\n\n        get(\"mock/user.json\")\n            .then((data) => {\n                console.log(\"用户查询成功~~~:\", data)\n                return get(`mock/user_corse_${data.id}.json`);\n            })\n            .then((data) => {\n                console.log(\"课程查询成功~~~:\", data)\n                return get(`mock/corse_score_${data.id}.json`);\n            })\n            .then((data)=>{\n                console.log(\"课程成绩查询成功~~~:\", data)\n            })\n            .catch((err)=>{ //失败的话catch\n                console.log(\"出现异常\",err)\n            });\n\n    </script>\n</body>\n\n</html>\n```\n\n### 模块化\n\n- 代码拆分：类似Java导包，导模块。 \n- 命令：export 和 import \n  - export 用于规定模块的对外接口 \n  - import 用于导入其他模块提供的功能\n\n```js\nuser.js\nvar name = \"jack\"\nvar age = 21\nfunction add(a,b){\n    return a + b;\n}\n\nexport {name,age,add}\n\nhello.js\n// export const util = {\n//     sum(a, b) {\n//         return a + b;\n//     }\n// }\n\nexport default {\n    sum(a, b) {\n        return a + b;\n    }\n}\n// export {util}\n\n//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。\n\n\nmain.js\nimport abc from \"./hello.js\"\nimport {name,add} from \"./user.js\"\n\nabc.sum(1,2);\nconsole.log(name);\nadd(1,3);\n```\n\n## Vue\n\n### MVVM思想\n\n- M：model 包括数据和一些基本操作 \n\n- V：view 视图，页面渲染结果 \n- VM：View-model，模型与视图间的双向操作（无需开发人员干涉） 视图和数据通过VM绑定起来，model里有变化会自动地通过Directives填写到视view中， 视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。\n\n### 案例\t\n\n```sh\nnpm init -y\n//教学的版本是Vue2，目前版本是Vue3\nnpm i vue@2 \n```\n\n```html\n在VSCode中安装vue 2 snippets语法提示插件，在谷歌浏览器中安装vue.js devtools\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"num\">\n        v-model实现双向绑定\n        <button v-on:click=\"num++\">点赞</button>\n        v-on:click绑定事件，实现自增\n        <button v-on:click=\"cancel\">取消</button>\n        回到自定义的方法\n        \n        <h1> {{name}} ,非常帅，有{{num}}个人为他点赞{{hello()}}</h1>\n    </div>\n\n    <!-- 导入依赖 -->\n    <script src=\"./node_modules/vue/dist/vue.js\"></script>\n\n    <script>\n        //1、vue声明式渲染\n        let vm = new Vue({ //生成vue对象\n            el: \"#app\",//绑定元素 div id=\"app\"\n            data: {  //封装数据\n                name: \"张三\",  // 也可以使用{} //表单中可以取出\n                num: 1\n            },\n            methods:{  //封装方法\n                cancel(){\n                    this.num -- ;\n                },\n                hello(){\n                    return \"1\"\n                }\n            }\n        });\n        还可以在html控制台 vm.name ,vm 表示 Vue对象的实例\n\n        //2、双向绑定,模型变化，视图变化。反之亦然。\n        //3、事件处理\n\n        //v-xx：指令\n\n        //1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的\n        //2、指令来简化对dom的一些操作。\n        //3、声明方法来做更复杂的操作。methods里面可以封装方法。\n\n    </script>\n</body>\n\n</html>\n```\n\n### 组件化\n\n> 在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。 但是如果每个页面都自开发，这无疑增加了我们开发的成本。\n>\n> 把页面拆成不同的组件，然后共享组件，避免重复开发。 在vue里，所有的vue实例都是组件，组件其实也是一个vue实例，因此它在定义时也会接收：data、methods、生命周期函等 不同的是组件不会与页面的元素綁定，否则就无法复用了，因此没有el属性。 \n>\n> 但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板 全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组了 data必须是一个函数，不再是一个对象。\n\n### Vue脚手架\n\n```sh\n# 全局安装 Webpack\nnpm i webpack -g\n# 全局安装脚手架\nnpm i vue-cli -g\n# 查看版本 2.9.6\nvue -V\n# 使用 webpack 模板项目 初始化一个 appname 项目\nvue init webpack appname:vue \n# 启动项目，项目中的package.json 中 scripts，代表运行命令\nnpm start = npm run dev \n# 项目打包\nnpm run build\n```\n\n#### 示例\n\n```sh\n$ `vue init webpack app`\n\n? Target directory exists. Continue? (Y/n) y\n? Target directory exists. Continue? Yes\n\n? Project name app\n? Project description (A Vue.js project)\n? Project description A Vue.js project\n? Author (lingzhexi <lingzhexi@gmail.com>)\n? Author lingzhexi <lingzhexi@gmail.com>\n? Vue build (Use arrow keys)\n? Vue build standalone\n? Install vue-router? (Y/n) `y`\n? Install vue-router? Yes\n? Use ESLint to lint your code? (Y/n) `n`\n? Use ESLint to lint your code? No\n? Set up unit tests (Y/n) `n`\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? (Y/n) `y`\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recom\n? Should we run `npm install` for you after the project has been created? (recom\nmended) yarn\n\n   vue-cli · Generated \"app\".\n\n\n# Installing project dependencies ...\n# ========================\n\n'yarn' is not recognized as an internal or external command,\noperable program or batch file.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd app\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n```\n\n### 使用element-UI\n\n```sh\n# 安装\nnpm i elemenet-ui -S\n```\n\n```js\n# 在 main.js 中写入以下内容：\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nVue.use(ElementUI);\n```\n\n### 补充\n\n```sh\n# 补充依赖\nnpm i webpack-dev-server --save-dev\n```\n\n","slug":"谷粒商城学习","published":1,"updated":"2024-12-16T12:11:11.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyor001ij0krdlj2d9y3","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072146144.png\" alt=\"题图\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h1><h2 id=\"docker-安装MySQL\"><a href=\"#docker-安装MySQL\" class=\"headerlink\" title=\"docker 安装MySQL\"></a>docker 安装MySQL</h2><ol>\n<li><p>下载镜像</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker pull mysql:5.7\n</code></pre>\n</li>\n<li><p>创建实例</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">docker run -p 3307:3306 --name mysql \\\n-v /mydata/mysql/log:/var/log/mysql \\\n-v /mydata/mysql/data:/var/lib/mysql \\\n-v /mydata/mysql/conf:/etc/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li>-p 3306:3306：-p 主机端口:容器端口，将容器的3306端口映射到主机的3306端口</li>\n<li>-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</li>\n<li>-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</li>\n<li>-v /mydata/mysql/data:/var/lib/mysql：将配置文件夹挂载到主机</li>\n<li>-e MYSQL_ROOT_PASSWORD=root：初始化root用户密码</li>\n<li>-d mysql:5.7：表示后台运行(-d) 镜像mysql:5.7   –&gt;查看镜像docekr images</li>\n</ul>\n</li>\n<li><p>进去docker 容器</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">root@af26dd647c9a:/# docker exec -it mysql /bin/bash\nroot@af26dd647c9a:/# whereis mysql\nmysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\n</code></pre>\n</li>\n<li><p>mysql配置 my.cnf</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">[root@lingzx conf]# vi /mydata/mysql/conf/my.cnf\n</code></pre>\n<pre class=\" language-sh\"><code class=\"language-sh\">[client]\ndefault-character-set=utf8\n\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ninit_connect='SET collation_connection=utf8_unicode_ci'\ninit_connect='SET NAMES utf8'\ncharacter-set-server=utf8\ncollation-server=utf8_unicode_ci\nskip-character-set-client-handshake\nskip-name-resolve\nlower_case_table_names=1\n</code></pre>\n</li>\n<li><p>查看docker中MySQL的配置</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">cd /etc/mysql\ncat my.cnf\n</code></pre>\n</li>\n<li><p>开机自启</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">docker update mysql --restart=always\n</code></pre>\n</li>\n</ol>\n<h2 id=\"docker-安装Redis\"><a href=\"#docker-安装Redis\" class=\"headerlink\" title=\"docker 安装Redis\"></a>docker 安装Redis</h2><ol>\n<li><p>下载redis 镜像</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">docker pull redis\n</code></pre>\n</li>\n<li><p>创建实例并启动</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"># 由于 redis容器 /etc/redis目录下没有 redis.conf ，所以需要我们预先在主机上创建一个 redis.conf\nmkdir -p /mydata/redis/conf\ntouch /mydata/redis/conf/redis.conf\n\ndocker run -p 6379:6379 --name redis \\\n-v /mydata/redis/data:/data \\\n-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis redis-server /etc/redis/redis.conf\n\n# 连接 docker中的 redis的控制台\ndocker exec -it redis redis-cli\n</code></pre>\n</li>\n<li><p>配置持久化</p>\n<blockquote>\n<p>当前版本的redis默认配置了【文件追加写持久化】aof</p>\n</blockquote>\n<pre class=\" language-sh\"><code class=\"language-sh\">vi /mydata/redis/redis.conf\n\nappendonly yes\n\ndocker restart redis\n</code></pre>\n</li>\n<li><p>开机自启</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">docker update redis --restart=always\n</code></pre>\n</li>\n</ol>\n<h1 id=\"统一环境\"><a href=\"#统一环境\" class=\"headerlink\" title=\"统一环境\"></a>统一环境</h1><h2 id=\"Maven-3-6-1\"><a href=\"#Maven-3-6-1\" class=\"headerlink\" title=\"Maven 3.6.1\"></a>Maven 3.6.1</h2><blockquote>\n<p>链接: <a href=\"https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA\">https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA</a> 提取码: 38iw 复制这段内容后打开百度网盘手机App，操作更方便哦</p>\n</blockquote>\n<p>配置阿里云镜像</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>nexus-aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>central<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Nexus aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrors</span><span class=\"token punctuation\">></span></span> \n</code></pre>\n<p>配置 JDK 1.8 编译环境</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profiles</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>profile</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>jdk-1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activation</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activeByDefault</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activeByDefault</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jdk</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jdk</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compile.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compile.source</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compile.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compile.target</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compile.compilerVersion</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compile.compilerVersion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profile</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>profiles</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>配置本地仓库</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>localRepository</span><span class=\"token punctuation\">></span></span>D:\\Program Files\\Maven\\LocalWareHouse<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>localRepository</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"idea-安装插件\"><a href=\"#idea-安装插件\" class=\"headerlink\" title=\"idea 安装插件\"></a>idea 安装插件</h2><ul>\n<li>lombok</li>\n<li>MybatisX</li>\n</ul>\n<h2 id=\"Vscode-安装配置\"><a href=\"#Vscode-安装配置\" class=\"headerlink\" title=\"Vscode 安装配置\"></a>Vscode 安装配置</h2><ul>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>Chinese (Simplified)</li>\n<li>ESLint</li>\n<li>HTML CSS Support</li>\n<li>HTML Snippets</li>\n<li>JavaScript（ES6）</li>\n<li>Live Server</li>\n<li>open in browser</li>\n<li>Vetur</li>\n</ul>\n<h2 id=\"安装配置-git\"><a href=\"#安装配置-git\" class=\"headerlink\" title=\"安装配置 git\"></a>安装配置 git</h2><ol>\n<li><p>下载 git：<a href=\"https://git-scm.com/\">https://git-scm.com</a></p>\n</li>\n<li><p>配置 git ，进入git bash</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"># 配置用户名\ngit config --global user.name 'username'\n# 配置邮箱\ngit config --global user.email 'username@email.com'\n</code></pre>\n</li>\n<li><p>配置 shh 免密登录，进入git bash</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">ssh-keygen -t rsa -C 'xx@xxx.com'\n</code></pre>\n<p> 三次回车，查找 id_rsa 和 id_rsa.pub</p>\n</li>\n<li><p>登录 gitee，在设置里面找到 SSH KEY 将 .pub 文件的内容粘贴进去</p>\n<pre class=\" language-sh\"><code class=\"language-sh\"># 查看是否成功\nssh -T git@gitee.com \n</code></pre>\n</li>\n</ol>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><ol>\n<li><p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p>\n<p>共用：</p>\n<ol>\n<li>web 、openfeign</li>\n<li>每个服务，包名 <strong>com.atguigu.gulimall</strong>.xxx(product/order/ware/coupon/member)</li>\n<li>模块名：gulimall-coupon</li>\n</ol>\n</li>\n<li><p>添加pom文件</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.atguigu.gulimall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gulimall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>gulimall<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>聚合服务<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gulimall-coupon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gulimall-member<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gulimall-order<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gulimall-product<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>module</span><span class=\"token punctuation\">></span></span>gulimall-ware<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>module</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>设置忽略提交内容 .gitgnore</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">**/mvnw\n**/mvnw.cmd\n\n**/.mvn\n**/target/\n\n.idea\n**/.gitignore\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203232346905.png\" alt=\"image-20220323234601504\"> </p>\n</li>\n<li><p>提交并推送到仓库</p>\n</li>\n</ol>\n<h2 id=\"数据库设计-PowerDesigner\"><a href=\"#数据库设计-PowerDesigner\" class=\"headerlink\" title=\"数据库设计 PowerDesigner\"></a>数据库设计 PowerDesigner</h2><ol>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042296.png\" alt=\"image-20220324004223247\"> </p>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042710.png\" alt=\"image-20220324004234654\"> </p>\n</li>\n<li><p>每个微服务创建自己的数据库</p>\n</li>\n</ol>\n<h2 id=\"人人开源快速开发\"><a href=\"#人人开源快速开发\" class=\"headerlink\" title=\"人人开源快速开发\"></a>人人开源快速开发</h2><h3 id=\"后端管理-renren-fast\"><a href=\"#后端管理-renren-fast\" class=\"headerlink\" title=\"后端管理 renren-fast\"></a>后端管理 renren-fast</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#x6f;&#x6d;</a>:renrenio/renren-fast.git</p>\n</blockquote>\n</li>\n<li><p>将renren-fast 放在gulimall项目pom中 module</p>\n<blockquote>\n<p><module>renren-fast</module></p>\n</blockquote>\n</li>\n<li><p>新增数据库 gulimall_admin</p>\n</li>\n<li><p>修改pom</p>\n<ol>\n<li><p>关联gulimall</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>解决@NotBlank 和 @Email 报错</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>修改数据库配置，连接到 gulimall_admin 的配置信息</p>\n</li>\n</ol>\n<h3 id=\"前端管理-renren-fast-vue\"><a href=\"#前端管理-renren-fast-vue\" class=\"headerlink\" title=\"前端管理 renren-fast-vue\"></a>前端管理 renren-fast-vue</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#111;&#x6d;\">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#111;&#x6d;</a>:renrenio/renren-fast-vue.git</p>\n</blockquote>\n</li>\n<li><p>将项目拖到VSCode中</p>\n</li>\n<li><p>统一配置</p>\n<ol>\n<li><p>nodeJs，</p>\n<blockquote>\n<p>node 版本 14 可以解决所有的报错</p>\n<p>关注 node.js 的 npm 功能</p>\n<p>NPM 是NodeJS的包管理工具，JS-NPM，Java-Maven</p>\n</blockquote>\n<ul>\n<li><p>官网下载安装，node -v 检查版本</p>\n</li>\n<li><p>配置npm 淘宝镜像</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">npm config set registry http://registry.npm.taobao.org/\n</code></pre>\n</li>\n<li><p>下载依赖包</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">npm install\n</code></pre>\n</li>\n<li><p>报错处理</p>\n<pre class=\" language-sh\"><code class=\"language-sh\">npm install --save  -g core-js@^3\n</code></pre>\n</li>\n<li><p>node-sass报错 是由于版本的问题，在package.json中可以解决</p>\n</li>\n</ul>\n</li>\n<li><p>Vue</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"代码生成-renren-generator\"><a href=\"#代码生成-renren-generator\" class=\"headerlink\" title=\"代码生成 renren-generator\"></a>代码生成 renren-generator</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>:renrenio/renren-generator.git</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>将项目拖到 idea 中</p>\n</li>\n<li><p>修改配置（以 product 模块为例子）</p>\n</li>\n</ol>\n<ul>\n<li><p>修改 generator.properties</p>\n<pre class=\" language-properties\"><code class=\"language-properties\"><span class=\"token comment\" spellcheck=\"true\">#代码生成器，配置信息</span>\n<span class=\"token attr-name\">mainPath</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.atguigu</span>\n<span class=\"token comment\" spellcheck=\"true\">#包名</span>\n<span class=\"token attr-name\">package</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.atguigu.gulimall</span>\n<span class=\"token attr-name\">moduleName</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">product</span>\n<span class=\"token comment\" spellcheck=\"true\">#作者</span>\n<span class=\"token attr-name\">author</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">Mr.Ling</span>\n<span class=\"token comment\" spellcheck=\"true\">#Email</span>\n<span class=\"token attr-name\">email</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">lingzhexi@163.com</span>\n<span class=\"token comment\" spellcheck=\"true\">#表前缀(类名不会包含表前缀)</span>\n<span class=\"token attr-name\">tablePrefix</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">pms_</span>\n</code></pre>\n</li>\n<li><p>修改 Controller.java.vm 模板</p>\n<pre class=\" language-java\"><code class=\"language-java\">注释 <span class=\"token annotation punctuation\">@RequeiresPermissions</span> 注解\n<span class=\"token comment\" spellcheck=\"true\">//@RequiresPermissions(\"$&amp;#123;moduleName&amp;#125;:$&amp;#123;pathName&amp;#125;:list\")</span>\n</code></pre>\n</li>\n<li><p>修改数据库配置( pms )</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    #MySQL配置\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:13306/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>启动项目，生成代码</li>\n</ol>\n<ul>\n<li><p>点击生成代码</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072159051.png\" alt=\"image-20220407215910844\"></p>\n</li>\n<li><p>将代码放到 product 模块中</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"新增-gulimall-common\"><a href=\"#新增-gulimall-common\" class=\"headerlink\" title=\"新增 gulimall-common\"></a>新增 gulimall-common</h3><ul>\n<li><p>通用的依赖模块 ，product 模块引用该模块</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-lang<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpcore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.4.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"整合Mybatis-pus\"><a href=\"#整合Mybatis-pus\" class=\"headerlink\" title=\"整合Mybatis-pus\"></a>整合Mybatis-pus</h2><ol>\n<li><p>导入依赖</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>配置数据源</p>\n<ol>\n<li><p>导入MySql 驱动</p>\n<p>推荐使用 8 版本的Mysql connector<img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100039304.png\" alt=\"image-20220410002401508\"></p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.28<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>整合 application.yml</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">server:\n    port: 8080\nspring:\n    application:\n        name: gulimall-product\n    datasource:\n        username: root\n        password: root\n        url: jdbc:mysql://localhost:13306/gulimall_pms\n        driver-class-name: com.mysql.cj.jdbc.Driver\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>配置 mybaits-plus</p>\n<ol>\n<li><p>主启动配置 @MapperScan(“com.atguigu.gulimall.product.dao”)</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png\" alt=\"image-20220410004352680\"> </p>\n</li>\n<li><p>告诉 MyBatis-Plus ， sql 映射文件位置</p>\n<p>默认位置类路径下的 classpath*:/mapper/**/*.xml</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100049256.png\" alt=\"image-20220410004908204\"> </p>\n<pre class=\" language-yml\"><code class=\"language-yml\">mybatis-plus:\n    mapper-locations: classpath:/mapper/**/*.xml\n</code></pre>\n</li>\n<li><p>设置主键自增配置</p>\n<pre class=\" language-yml\"><code class=\"language-yml\"># 填写 id 自动联想出来\nmybatis-plus: \n global-config:\n        db-config:\n            id-type: auto\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<p>​    <strong>各模块最终需要依赖到 gulimall-common</strong> </p>\n</li>\n</ol>\n<h1 id=\"整合微服务\"><a href=\"#整合微服务\" class=\"headerlink\" title=\"整合微服务\"></a>整合微服务</h1><p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112131562.png\" alt=\"image-20220411213056325\"></p>\n<h2 id=\"搭配方案：\"><a href=\"#搭配方案：\" class=\"headerlink\" title=\"搭配方案：\"></a>搭配方案：</h2><ul>\n<li>SpringCloud Alibaba - Nacos : 注册中心 （服务发现/注册）</li>\n<li>SpringCloud Alibaba - Nacos : 配置中心 （动态配置管理）</li>\n<li>SpringCloud - Ribbon :  负载均衡</li>\n<li>SpringCloud - Feign : 声明式 HTTP 客户端 （调用远程服务）</li>\n<li>SpringCloud Alibaba - Sentinel : 服务容错 （限流、降级、熔断）</li>\n<li>SpringCloud - Gateway : API 网关 （webflux 编程模式）</li>\n<li>SpringCloud - Sleuth : 调用链监控</li>\n<li>SpringCloud Alibaba - Seata : 原 Fescar 即分布式事务解决方案     </li>\n</ul>\n<p>阿里巴巴中文文档：<a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md\">SpringCloud Alibab 中文文档</a></p>\n<h2 id=\"版本选择：\"><a href=\"#版本选择：\" class=\"headerlink\" title=\"版本选择：\"></a>版本选择：</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150099.png\" alt=\"image-20220411215026972\">  </p>\n<p>SpringCloud - SpringBoot 版本对比（<a href=\"https://spring.io/projects/spring-cloud\">SpringCloud 官网</a>）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150336.png\" alt=\"image-20220411215056217\"> </p>\n<p>SpringCloud Alibaba - SpringBoot 版本对比 （ <a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md\">SpringCloud Alibaba Github</a>）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112202930.png\" alt=\"image-20220411220224816\"> </p>\n<p>将 SpringCloud Alibaba 依赖 加入 gulimall-common 中  </p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"注册中心\"><a href=\"#注册中心\" class=\"headerlink\" title=\"注册中心\"></a>注册中心</h2><p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc\">nacos 注册中心</a></p>\n<h3 id=\"服务注册-发现-Nacos-Discovery\"><a href=\"#服务注册-发现-Nacos-Discovery\" class=\"headerlink\" title=\"服务注册/发现 Nacos Discovery\"></a>服务注册/发现 Nacos Discovery</h3><ol>\n<li><p>引入依赖，加入gulimall-common</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>优惠卷模块引入 nacos discovery 依赖</p>\n<p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112222593.png\" alt=\"image-20220411222218474\"> </p>\n</li>\n<li><p>配置Nacos Server 地址</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n    cloud:\n        nacos:\n            discovery:\n                server-addr: 127.0.0.1:8848\n</code></pre>\n</li>\n<li><p>使用 @EnableDiscoveryClient 注解开启服务注册和发现<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png\" alt=\"image-20220411222803578\"> </p>\n</li>\n<li><p>查看注册的服务</p>\n<blockquote>\n<p> 登录后台 127.0.0.1:8848/nacos </p>\n<p>用户信息：nacos/nacos</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112232366.png\" alt=\"image-20220411223200216\"> </p>\n</li>\n</ol>\n<h2 id=\"远程调用\"><a href=\"#远程调用\" class=\"headerlink\" title=\"远程调用\"></a>远程调用</h2><ol>\n<li><p>引入 open-feign</p>\n</li>\n<li><p>编写一个接口，告诉SpringCloud 需要调用远程接口</p>\n<ul>\n<li><p>新建一个feign 包</p>\n</li>\n<li><p>写一个接口</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gulimall-coupon\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//表示 nacos 注册中心中的找到服务名为 gulimall-coupon 的服务</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CouponFeignService</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/coupon/coupon/member/coupon\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 找到优惠券服务中的该接口</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">memberCoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>开启远程调用功能 </p>\n<p>在主启动中添加 @EnableFeignClients(basePackages=”xx”) xx表示指定feign的接口包</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token string\">\"com.atguigu.gulimall.member.feign\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//此时的basePackages 可以省略</span>\n<span class=\"token annotation punctuation\">@EnableDiscoveryClient</span>\n<span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.gulimall.member.dao\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GulimallMemberApplication</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        SpringApplication<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>GulimallMemberApplication<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n</code></pre>\n</li>\n<li><p>示例</p>\n<ul>\n<li><p>添加远程接口</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupon/coupon\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CouponController</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> CouponService couponService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 会员优惠券\n     */</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/member/coupon\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">memberCoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        CouponEntity couponEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CouponEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        couponEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setCouponName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"满100减10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">,</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>couponEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>添加调用接口</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member/member\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberController</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> MemberService memberService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    CouponFeignService couponFeignService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/coupons\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        MemberEntity memberEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setNickname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        R r <span class=\"token operator\">=</span> couponFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">memberCoupons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> memberEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupons\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>请求接口 localhost:8000/member/member/coupons</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置中心：动态管理配置\"><a href=\"#配置中心：动态管理配置\" class=\"headerlink\" title=\"配置中心：动态管理配置\"></a>配置中心：动态管理配置</h2><p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md\">nacos 配置中心文档</a></p>\n<ol>\n<li><p>引入 Nacos Config  Starter</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>创建 bootstrap.yml，配置 Nacos 元数据</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n    application:\n        name: gulimall-coupon\n    cloud:\n        nacos:\n            config:\n                server-addr: 127.0.0.1:8848\n</code></pre>\n</li>\n<li><p>配置中心 添加 数据集（Data Id） gulimall-coupon.properties ，默认规则，应用名.properties<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png\" alt=\"image-20220412213509978\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122145876.png\" alt=\"image-20220412214528762\"> </p>\n</li>\n<li><p>动态获取配置<br> @RefreshScope ：动态获取并刷新配置</p>\n<p> @Value(“${配置项的名}”) ：获取到配置</p>\n<p>如果配置中心和当前应用都配置相同的项，优先使用配置中心的配置</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RefreshScope</span> <span class=\"token comment\" spellcheck=\"true\">//动态刷新</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coupon/coupon\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CouponController</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> CouponService couponService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&amp;#123;coupon.user.name&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&amp;#123;coupon.user.age&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> Integer age<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> R <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> R<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>核心概念</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122206664.png\" alt=\"image-20220412220641506\"></p>\n<ul>\n<li><p>命名空间：配置隔离 </p>\n<p>默认 public ：默认新增的所有都在该空间下</p>\n<ol>\n<li><p>开发、测试、生产 ：利用命名空间来做环境隔离</p>\n<p>注意：在bootstrap.yml 配置中，需要使用那个命名空间下的配置</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring.cloud.nacos.config.namespace=cc749289-b027-486f-bb6a-3febcabecbdb\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122217795.png\" alt=\"image-20220412220837375\"> </p>\n</li>\n<li><p>每个服务应用之间相互隔离，管理微服务自己的配置<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122232120.png\" alt=\"image-20220412223231969\"></p>\n</li>\n</ol>\n</li>\n<li><p>配置集：所有配置的集合</p>\n</li>\n<li><p>配置集ID：类似文件名 （Data ID： 文件名）</p>\n</li>\n<li><p>配置分组：默认所有的配置集都属于：DEFAULT_GROUP；</p>\n<ul>\n<li><p>组名：1111 、618 、1212</p>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122240653.png\" alt=\"image-20220412224056530\"> </p>\n</li>\n<li><p>添加分组配置</p>\n<pre class=\" language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.cloud.nacos.config.group</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">1111</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>每个微服务创建自己的命名空间，使用配置分组区分环境，dev、test、prod 环境</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122247441.png\" alt=\" \">     </p>\n</li>\n</ul>\n</li>\n<li><p>同时加载多个配置集</p>\n<ul>\n<li><p>微服务任何配置信息，任何配置文件都可以放在配置中心中<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122337360.png\" alt=\"image-20220412233717240\"></p>\n</li>\n<li><p>只需要在 bootstrap.yml 说明 加载配置中心中的那些配置文件即可</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n  appliation:\n    name: gulimall-coupon\n  cloud:\n    nacos:\n      config:\n        server-addr: 127.0.0.1:8848\n        namespace: d6545d08-333c-4806-bf43-6acc99acecc6\n        # 数据库配置\n        ext-config[0].data-id: datasource.yml\n        ext-config[0].group: dev\n        ext-config[0].refresh: true\n        # mybatis 配置\n        ext-config[1].data-id: mybatis.yml\n        ext-config[1].group: dev\n        ext-config[1].refresh: true\n        # 其他配置\n        ext-config[2].data-id: other.yml\n        ext-config[2].group: dev\n        ext-config[2].refresh: true\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122335376.png\" alt=\"image-20220412233550198\"></p>\n</li>\n<li><p>@Value，@ConfigurationProperties  以前SpringBoot 任何方法从配置文件中获取值，都能使用</p>\n</li>\n<li><p>配置中心有优先使用配置</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"网关-GateWay\"><a href=\"#网关-GateWay\" class=\"headerlink\" title=\"网关 GateWay\"></a>网关 GateWay</h2><p> <a href=\"https://spring.io/projects/spring-cloud-gateway\">SpringGateway 官方文档</a>    </p>\n<p>​    网关作为流量的入口，常用功能包括 <strong>路由转发、权限校验、限流控制</strong>等，而springcloud gateway<br>作为SpringCloud官方推出的第二代网关框架，取代了Zuul网关。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>Spring Cloud Gateway 的特点：</p>\n<ul>\n<li>基于Spring Framework 5、Project Reactor和Spring Boot 2.0构建</li>\n<li>能够匹配任何请求属性上的路由。</li>\n<li>谓词和筛选器特定于路由。</li>\n<li>断路器集成。</li>\n<li>春云发现客户端集成</li>\n<li>易于编写谓词和筛选器</li>\n<li>请求速率限制</li>\n<li>路径重写</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151424445.png\" alt=\"image-20220415142458247\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151425268.png\" alt=\"image-20220415142513181\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151436336.png\" alt=\"image-20220415143618115\"></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li><p>Route（路由）：网关的基本构建基块。它由 <strong>ID、目标 URI</strong>、<strong>断言集合</strong>和<strong>过滤器集合</strong>定义。如果<strong>断言集合为 true</strong>，则匹配路由</p>\n</li>\n<li><p>Predicate（断言）：这是一个 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\">Java 8 函数断言</a>。输入类型是<a href=\"https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html\">Spring Framework <code>ServerWebExchange</code></a>。这使您可以匹配 HTTP 请求中的任何内容，例如标头或参数。</p>\n</li>\n<li><p>Filter（过滤器）：这些是使用特定工厂构建的<a href=\"https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java\"><code>网关过滤器</code></a>实例。在这里，您可以修改发送下游请求之前或之后的请求和响应</p>\n</li>\n</ul>\n<h3 id=\"工作原理：\"><a href=\"#工作原理：\" class=\"headerlink\" title=\"工作原理：\"></a>工作原理：</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png\" alt=\"Spring Cloud Gateway Diagram\"> </p>\n<p>总结：当请求到达网关，网关利用断言，判断此次请求是不是符合某个路由规则，如果符合了就按照路由规则，路由到指定的地方。当要去指定的地方就要经过一系列的filter进行过滤</p>\n<h3 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h3><p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gateway-request-predicates-factories\">路由断言工厂</a></p>\n<h4 id=\"After-Route-Predicate-Factory：后路由断言工厂\"><a href=\"#After-Route-Predicate-Factory：后路由断言工厂\" class=\"headerlink\" title=\"After Route Predicate Factory：后路由断言工厂\"></a>After Route Predicate Factory：后路由断言工厂</h4><p>路由断言工厂采用一个参数 a（这是一个 java）。此断言匹配在指定日期时间之后发生的请求。以下示例配置路由之后断言：</p>\n<p>application.yml</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        # 断言（条件）：判断请求是在指定的时间后（After)发生的\n        predicates:\n        - After=2017-01-20T17:42:47.789-07:00[America/Denver]\n</code></pre>\n<p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories\">网关过滤器工厂</a></p>\n<h4 id=\"AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂\"><a href=\"#AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂\" class=\"headerlink\" title=\"AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂\"></a>AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂</h4><p>application.yml</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> add_request_header_route\n          <span class=\"token comment\" spellcheck=\"true\"># 请求没有断言，任何请求直接跳转到这个链接</span>\n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//example.org\n        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> AddRequestHeader=X<span class=\"token punctuation\">-</span>Request<span class=\"token punctuation\">-</span>red<span class=\"token punctuation\">,</span> blue\n</code></pre>\n<p>此列表将标头添加到所有匹配请求的下游请求头中<code>X-Request-red:blue</code></p>\n<p>AddRequestHeader<code>了解用于匹配路径或主机的 URI 变量。URI 变量可以在值中使用，并在运行时展开。下面的示例配置使用变量的 一个：</code>AddRequestHeader``GatewayFilter</p>\n<p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters\">全局过滤器工厂</a></p>\n<h3 id=\"创建网关\"><a href=\"#创建网关\" class=\"headerlink\" title=\"创建网关\"></a>创建网关</h3><ol>\n<li><p>创建新 module gulimall-gateway</p>\n</li>\n<li><p>添加 gateway 依赖，<del>添加 gulimall-common 依赖</del>，添加nacos 配置中心和服务中心依赖</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-boot.version</span><span class=\"token punctuation\">></span></span>2.1.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-boot.version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-cloud.alibaba.version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-cloud.alibaba.version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-cloud.version</span><span class=\"token punctuation\">></span></span>Greenwich.SR3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-cloud.version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n <span class=\"token comment\" spellcheck=\"true\">&lt;!--nacos 服务注册/发现--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>spring-cloud.alibaba.version<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--naocs 配置中心--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>spring-cloud.alibaba.version<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>统一 Spring boot、Spring Cloud 版本</p>\n<ul>\n<li>boot：2.1.8.RELEASE</li>\n<li>cloud：Greenwich.SR3 </li>\n</ul>\n</li>\n<li><p>项目新建 bootstrap.yml 填写 nacos 配置中心 </p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gulimall<span class=\"token punctuation\">-</span>gateway\n    <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>\n                <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> 4b9add0d<span class=\"token punctuation\">-</span>df21<span class=\"token punctuation\">-</span>4fc6<span class=\"token punctuation\">-</span>ad9c<span class=\"token punctuation\">-</span>35936b491b10s    \n</code></pre>\n</li>\n<li><p>配置中心 新建网关配置命名空间</p>\n<ul>\n<li><p>新建命名空间 gateway</p>\n</li>\n<li><p>新建配置文件 gulimall-gateway.propertie </p>\n<pre class=\" language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.application.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">gulimall-gateway</span>\n</code></pre>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212251449.png\" alt=\"image-20220421225143278\"></p>\n</li>\n</ul>\n</li>\n<li><p>application.properties 配置服务中心</p>\n<pre class=\" language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">88</span>\n<span class=\"token attr-name\">spring.application.name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">gulimall-gateway</span>\n<span class=\"token attr-name\">spring.cloud.nacos.discovery.server-addr</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">127.0.0.1</span>\n</code></pre>\n</li>\n<li><p>启动成功<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212301809.png\" alt=\"image-20220421230109723\"></p>\n</li>\n<li><p>配置路由断言</p>\n<p>新建一个application.yml</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212304803.png\" alt=\"image-20220421230443693\"></p>\n<pre class=\" language-yml\"><code class=\"language-yml\">spring:\n    cloud:\n        gateway:\n            routes:\n                -id: bing_route\n                uri: https://www.bing.com\n                predicates:\n                    # query 表示请求参数 ，参数 url ，参数值正则 baidu\n                    -Query=url,bing\n                 -id: bing_route\n                uri: https://www.bing.com\n                predicates:\n                    # query 表示请求参数 ，参数 url ，参数值正则 baidu\n                    -Query=url,bing\n            \n</code></pre>\n<p>请求路径：</p>\n<ul>\n<li><p><del>百度地址：<a href=\"http://127.0.0.1:88/hello?url=baidu~~~~%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BE%E5%BA%A6\">http://127.0.0.1:88/hello?url=baidu~~~~，无法跳转到百度</a></del></p>\n</li>\n<li><p>必应地址：<a href=\"http://127.0.0.1:88/hello?url=bing\">http://127.0.0.1:88/hello?url=bing</a></p>\n</li>\n<li><p>QQ地址：<a href=\"http://127.0.0.1:88/hello?url=qq\">http://127.0.0.1:88/hello?url=qq</a></p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"前端基础\"><a href=\"#前端基础\" class=\"headerlink\" title=\"前端基础\"></a>前端基础</h1><h2 id=\"前后端对比\"><a href=\"#前后端对比\" class=\"headerlink\" title=\"前后端对比\"></a>前后端对比</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205131014934.png\" alt=\"在这里插入图片描述\"> </p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><blockquote>\n<p>ECMAScript 6.0（以下简称 ES6，ECMAScript是一种由Ecma国际通过ECMA-262标准化的脚本）， 是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。 ECMAScript是规范，JS的规范的具体实现。</p>\n</blockquote>\n<h3 id=\"let-amp-const\"><a href=\"#let-amp-const\" class=\"headerlink\" title=\"let &amp; const\"></a>let &amp; const</h3><ul>\n<li>作用域：var在{}之外也起作用 let在{}之外不起作用 </li>\n<li>声明次数：var 多次声明同一变量不会报错，let多次声明会报错，只能声明一次。</li>\n<li>变量提升：var 会变量提升（打印和定义可以顺序反）；let 不存在变量提升（顺序不能反） </li>\n<li>const 声明之后不允许改变</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    \n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n       <span class=\"token comment\" spellcheck=\"true\">// var 声明的变量往往会越域</span>\n       <span class=\"token comment\" spellcheck=\"true\">// let 声明的变量有严格局部作用域</span>\n<span class=\"token comment\" spellcheck=\"true\">//         &amp;#123;</span>\n<span class=\"token comment\" spellcheck=\"true\">//             var a = 1;</span>\n<span class=\"token comment\" spellcheck=\"true\">//             let b = 2;</span>\n<span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(a);  // 1</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(b);  // ReferenceError: b is not defined</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// var 可以声明多次</span>\n            <span class=\"token comment\" spellcheck=\"true\">// let 只能声明一次</span>\n<span class=\"token comment\" spellcheck=\"true\">//         var m = 1</span>\n<span class=\"token comment\" spellcheck=\"true\">//         var m = 2</span>\n<span class=\"token comment\" spellcheck=\"true\">//         let n = 3</span>\n<span class=\"token comment\" spellcheck=\"true\">//       let n = 4</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(m)  // 2</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(n)  // Identifier 'n' has already been declared</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// var 会变量提升</span>\n        <span class=\"token comment\" spellcheck=\"true\">// let 不存在变量提升</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(x);  // undefined</span>\n<span class=\"token comment\" spellcheck=\"true\">//         var x = 10;</span>\n<span class=\"token comment\" spellcheck=\"true\">//         console.log(y);   //ReferenceError: y is not defined</span>\n<span class=\"token comment\" spellcheck=\"true\">//         let y = 20;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// const</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1. const声明之后不允许改变</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2. 一但声明必须初始化，否则会报错</span>\n        <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Uncaught TypeError: Assignment to constant variable.</span>\n    \n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"解构表达式\"><a href=\"#解构表达式\" class=\"headerlink\" title=\"解构表达式\"></a>解构表达式</h3><ul>\n<li>数组解构：支持 let arr = [1,2,3]; let [a,b,c] = arr</li>\n<li>冒号改名：const { name: abc, age, language } = person</li>\n<li>字符串函数：支持一个字符串为多行 占位符功能 ${}</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\" spellcheck=\"true\">//数组解构</span>\n        <span class=\"token comment\" spellcheck=\"true\">// let arr = [1,2,3];</span>\n        <span class=\"token comment\" spellcheck=\"true\">// // let a = arr[0];</span>\n        <span class=\"token comment\" spellcheck=\"true\">// // let b = arr[1];</span>\n        <span class=\"token comment\" spellcheck=\"true\">// // let c = arr[2];</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// let [a,b,c] = arr;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// console.log(a,b,c)</span>\n\n        <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n            language<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         const name = person.name;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         const age = person.age;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         const language = person.language;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//对象解构</span>\n        <span class=\"token keyword\">const</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> name<span class=\"token punctuation\">:</span> abc<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> language <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> language<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 字符串扩展</span>\n        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello.vue\"</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//true</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//字符串模板</span>\n        <span class=\"token keyword\">let</span> ss <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;div>\n                    &lt;span>hello world&lt;span>\n                &lt;/div>`</span></span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 字符串插入变量和表达式。变量名写在 $&amp;#123;&amp;#125; 中，$&amp;#123;&amp;#125; 中可以放入 JavaScript 表达式。</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是一个函数\"</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`我是$&amp;#123;abc&amp;#125;，今年$&amp;#123;age + 10&amp;#125;了, 我想说： $&amp;#123;fun()&amp;#125;`</span></span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"函数优化\"><a href=\"#函数优化\" class=\"headerlink\" title=\"函数优化\"></a>函数优化</h3><ul>\n<li>函数默认值： b = b || 1; 现在可以直接写了function add2(a, b = 1) </li>\n<li>不定参数：function fun(…values) {</li>\n<li>支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\" spellcheck=\"true\">//在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 判断b是否为空，为空就给默认值1</span>\n            b <span class=\"token operator\">=</span> b <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 传一个参数</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">//不定参数</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\">//2</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//4</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//箭头函数</span>\n        <span class=\"token comment\" spellcheck=\"true\">//以前声明一个方法</span>\n        <span class=\"token comment\" spellcheck=\"true\">// var print = function (obj) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     console.log(obj);</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;</span>\n        <span class=\"token keyword\">var</span> print <span class=\"token operator\">=</span> obj <span class=\"token operator\">=</span><span class=\"token operator\">></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> sum2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">var</span> sum3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n            language<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,\"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//箭头函数+解构</span>\n        <span class=\"token keyword\">var</span> hello2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,\"</span> <span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">hello2</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"对象优化\"><a href=\"#对象优化\" class=\"headerlink\" title=\"对象优化\"></a>对象优化</h3><ul>\n<li>map：获取map的键值对等Object.keys()、values、entries</li>\n<li>对象合并：Object.assign(target,source1,source2)</li>\n<li>声明简写：const person2 = { age, name }</li>\n<li>对象拷贝：let someone = { …p1 }</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span>\n            age<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n            language<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//[\"name\", \"age\", \"language\"]</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//[\"jack\", 21, Array(3)]</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//[Array(2), Array(2), Array(2)]</span>\n\n        <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> source1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> source2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//&amp;#123;a:1,b:2,c:3&amp;#125;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> source1<span class=\"token punctuation\">,</span> source2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//[\"name\", \"age\", \"language\"]</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 声明对象简写</span>\n        <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\n        <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span>\n        <span class=\"token keyword\">const</span> person1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> age<span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> name <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> person2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> age<span class=\"token punctuation\">,</span> name <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//声明对象简写</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 对象的函数属性简写</span>\n        <span class=\"token keyword\">let</span> person3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 以前：</span>\n            eat<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃\"</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">//箭头函数this不能使用，对象.属性</span>\n            eat2<span class=\"token punctuation\">:</span> food <span class=\"token operator\">=</span><span class=\"token operator\">></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person3<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃\"</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">eat3</span><span class=\"token punctuation\">(</span>food<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"在吃\"</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        person3<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"香蕉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person3<span class=\"token punctuation\">.</span><span class=\"token function\">eat2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">)</span>\n        person3<span class=\"token punctuation\">.</span><span class=\"token function\">eat3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"橘子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 对象拓展运算符</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//  拷贝对象（深拷贝）</span>\n        <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Amy\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> someone <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">...</span>p1 <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someone<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//&amp;#123;name: \"Amy\", age: 15&amp;#125;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//  合并对象</span>\n        <span class=\"token keyword\">let</span> age1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> name1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Amy\"</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">...</span>age1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>name1 <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"map和reduce\"><a href=\"#map和reduce\" class=\"headerlink\" title=\"map和reduce\"></a>map和reduce</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\" spellcheck=\"true\">//数组中新增了map和reduce方法。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</span>\n         <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         \n        <span class=\"token comment\" spellcheck=\"true\">//  arr = arr.map((item)=>&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     return item*2</span>\n        <span class=\"token comment\" spellcheck=\"true\">//  &amp;#125;);</span>\n         arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">=</span><span class=\"token operator\">></span> item<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        \n\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，</span>\n        <span class=\"token comment\" spellcheck=\"true\">//[2, 40, -10, 6]</span>\n        <span class=\"token comment\" spellcheck=\"true\">//arr.reduce(callback,[initialValue])</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n     1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）*/</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上一次处理后：\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前正在处理：\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n    \n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h3><ul>\n<li>封装：赋值给 let p 在Ajax中成功使用 resolve(data)，交给then处理， 失败使用reject(err)，交给catch处理p.then().catch()</li>\n</ul>\n<pre class=\" language-json\"><code class=\"language-json\">//corse_score_10.json 得分\n&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">90</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n//user.json 用户\n&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123456\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n\n//user_corse_1.json 课程\n&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chinese\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\" spellcheck=\"true\">//1、查出当前用户信息</span>\n        <span class=\"token comment\" spellcheck=\"true\">//2、按照当前用户的id查出他的课程</span>\n        <span class=\"token comment\" spellcheck=\"true\">//3、按照当前课程id查出分数</span>\n        <span class=\"token comment\" spellcheck=\"true\">// $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     url: \"mock/user.json\",</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     success(data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         console.log(\"查询用户：\", data);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             url: `mock/user_corse_$&amp;#123;data.id&amp;#125;.json`,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             success(data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 console.log(\"查询到课程：\", data);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                     url: `mock/corse_score_$&amp;#123;data.id&amp;#125;.json`,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                     success(data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                         console.log(\"查询到分数：\", data);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                     &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                     error(error) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                         console.log(\"出现异常了：\" + error);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                     &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 &amp;#125;);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             error(error) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 console.log(\"出现异常了：\" + error);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     error(error) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         console.log(\"出现异常了：\" + error);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;);</span>\n\n\n        <span class=\"token comment\" spellcheck=\"true\">//1、Promise可以封装异步操作</span>\n        <span class=\"token comment\" spellcheck=\"true\">// let p = new Promise((resolve, reject) => &amp;#123; //传入成功解析，失败拒绝</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     //1、异步操作</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         url: \"mock/user.json\",</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         success: function (data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             console.log(\"查询用户成功:\", data)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             resolve(data);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         error: function (err) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             reject(err);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;);</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;);</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// p.then((obj) => &amp;#123; //成功以后做什么</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     return new Promise((resolve, reject) => &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             url: `mock/user_corse_$&amp;#123;obj.id&amp;#125;.json`,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             success: function (data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 console.log(\"查询用户课程成功:\", data)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 resolve(data);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             error: function (err) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//                 reject(err)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;).then((data) => &amp;#123; //成功以后干什么</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     console.log(\"上一步的结果\", data)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     $.ajax(&amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         url: `mock/corse_score_$&amp;#123;data.id&amp;#125;.json`,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         success: function (data) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//             console.log(\"查询课程得分成功:\", data)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;,</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         error: function (err) &amp;#123;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//         &amp;#125;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;);</span>\n        <span class=\"token comment\" spellcheck=\"true\">// &amp;#125;)</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//自己定义一个方法整合一下</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    url<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span>\n                    success<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n                    error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mock/user.json\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户查询成功~~~:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`mock/user_corse_$&amp;#123;data.id&amp;#125;.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"课程查询成功~~~:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`mock/corse_score_$&amp;#123;data.id&amp;#125;.json`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"课程成绩查询成功~~~:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//失败的话catch</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现异常\"</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><ul>\n<li>代码拆分：类似Java导包，导模块。 </li>\n<li>命令：export 和 import <ul>\n<li>export 用于规定模块的对外接口 </li>\n<li>import 用于导入其他模块提供的功能</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\">user<span class=\"token punctuation\">.</span>js\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>add<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nhello<span class=\"token punctuation\">.</span>js\n<span class=\"token comment\" spellcheck=\"true\">// export const util = &amp;#123;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     sum(a, b) &amp;#123;</span>\n<span class=\"token comment\" spellcheck=\"true\">//         return a + b;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     &amp;#125;</span>\n<span class=\"token comment\" spellcheck=\"true\">// &amp;#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// export &amp;#123;util&amp;#125;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。</span>\n\n\nmain<span class=\"token punctuation\">.</span>js\n<span class=\"token keyword\">import</span> abc <span class=\"token keyword\">from</span> <span class=\"token string\">\"./hello.js\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">,</span>add<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./user.js\"</span>\n\nabc<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"MVVM思想\"><a href=\"#MVVM思想\" class=\"headerlink\" title=\"MVVM思想\"></a>MVVM思想</h3><ul>\n<li><p>M：model 包括数据和一些基本操作 </p>\n</li>\n<li><p>V：view 视图，页面渲染结果 </p>\n</li>\n<li><p>VM：View-model，模型与视图间的双向操作（无需开发人员干涉） 视图和数据通过VM绑定起来，model里有变化会自动地通过Directives填写到视view中， 视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。</p>\n</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><pre class=\" language-sh\"><code class=\"language-sh\">npm init -y\n//教学的版本是Vue2，目前版本是Vue3\nnpm i vue@2 \n</code></pre>\n<pre class=\" language-html\"><code class=\"language-html\">在VSCode中安装vue 2 snippets语法提示插件，在谷歌浏览器中安装vue.js devtools\n\n<span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width<span class=\"token punctuation\">=</span>device-width, initial-scale<span class=\"token punctuation\">=</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie<span class=\"token punctuation\">=</span>edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>num<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        v-model实现双向绑定\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>num++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点赞<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        v-on:click绑定事件，实现自增\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cancel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>取消<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        回到自定义的方法\n        \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> <span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>name<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span> ,非常帅，有<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>num<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span>个人为他点赞<span class=\"token entity\" title=\"&#123;\">&amp;#123;</span><span class=\"token entity\" title=\"&#123;\">&amp;#123;</span>hello()<span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token entity\" title=\"&#125;\">&amp;#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 导入依赖 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./node_modules/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n        <span class=\"token comment\" spellcheck=\"true\">//1、vue声明式渲染</span>\n        <span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//生成vue对象</span>\n            el<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">//绑定元素 div id=\"app\"</span>\n            data<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//封装数据</span>\n                name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 也可以使用&amp;#123;&amp;#125; //表单中可以取出</span>\n                num<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n            methods<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//封装方法</span>\n                <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"1\"</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        还可以在html控制台 vm<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">,</span>vm 表示 Vue对象的实例\n\n        <span class=\"token comment\" spellcheck=\"true\">//2、双向绑定,模型变化，视图变化。反之亦然。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//3、事件处理</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//v-xx：指令</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的</span>\n        <span class=\"token comment\" spellcheck=\"true\">//2、指令来简化对dom的一些操作。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//3、声明方法来做更复杂的操作。methods里面可以封装方法。</span>\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h3><blockquote>\n<p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。 但是如果每个页面都自开发，这无疑增加了我们开发的成本。</p>\n<p>把页面拆成不同的组件，然后共享组件，避免重复开发。 在vue里，所有的vue实例都是组件，组件其实也是一个vue实例，因此它在定义时也会接收：data、methods、生命周期函等 不同的是组件不会与页面的元素綁定，否则就无法复用了，因此没有el属性。 </p>\n<p>但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板 全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组了 data必须是一个函数，不再是一个对象。</p>\n</blockquote>\n<h3 id=\"Vue脚手架\"><a href=\"#Vue脚手架\" class=\"headerlink\" title=\"Vue脚手架\"></a>Vue脚手架</h3><pre class=\" language-sh\"><code class=\"language-sh\"># 全局安装 Webpack\nnpm i webpack -g\n# 全局安装脚手架\nnpm i vue-cli -g\n# 查看版本 2.9.6\nvue -V\n# 使用 webpack 模板项目 初始化一个 appname 项目\nvue init webpack appname:vue \n# 启动项目，项目中的package.json 中 scripts，代表运行命令\nnpm start = npm run dev \n# 项目打包\nnpm run build\n</code></pre>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\" language-sh\"><code class=\"language-sh\">$ `vue init webpack app`\n\n? Target directory exists. Continue? (Y/n) y\n? Target directory exists. Continue? Yes\n\n? Project name app\n? Project description (A Vue.js project)\n? Project description A Vue.js project\n? Author (lingzhexi <lingzhexi@gmail.com>)\n? Author lingzhexi <lingzhexi@gmail.com>\n? Vue build (Use arrow keys)\n? Vue build standalone\n? Install vue-router? (Y/n) `y`\n? Install vue-router? Yes\n? Use ESLint to lint your code? (Y/n) `n`\n? Use ESLint to lint your code? No\n? Set up unit tests (Y/n) `n`\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? (Y/n) `y`\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recom\n? Should we run `npm install` for you after the project has been created? (recom\nmended) yarn\n\n   vue-cli · Generated \"app\".\n\n\n# Installing project dependencies ...\n# ========================\n\n'yarn' is not recognized as an internal or external command,\noperable program or batch file.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd app\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n</code></pre>\n<h3 id=\"使用element-UI\"><a href=\"#使用element-UI\" class=\"headerlink\" title=\"使用element-UI\"></a>使用element-UI</h3><pre class=\" language-sh\"><code class=\"language-sh\"># 安装\nnpm i elemenet-ui -S\n</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"># 在 main<span class=\"token punctuation\">.</span>js 中写入以下内容：\n<span class=\"token keyword\">import</span> ElementUI <span class=\"token keyword\">from</span> <span class=\"token string\">'element-ui'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'element-ui/lib/theme-chalk/index.css'</span><span class=\"token punctuation\">;</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><pre class=\" language-sh\"><code class=\"language-sh\"># 补充依赖\nnpm i webpack-dev-server --save-dev\n</code></pre>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072146144.png\" alt=\"题图\"></p>","more":"<h1 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h1><h2 id=\"docker-安装MySQL\"><a href=\"#docker-安装MySQL\" class=\"headerlink\" title=\"docker 安装MySQL\"></a>docker 安装MySQL</h2><ol>\n<li><p>下载镜像</p>\n<pre><code class=\"shell\">docker pull mysql:5.7\n</code></pre>\n</li>\n<li><p>创建实例</p>\n<pre><code class=\"sh\">docker run -p 3307:3306 --name mysql \\\n-v /mydata/mysql/log:/var/log/mysql \\\n-v /mydata/mysql/data:/var/lib/mysql \\\n-v /mydata/mysql/conf:/etc/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7\n</code></pre>\n<p>参数说明：</p>\n<ul>\n<li>-p 3306:3306：-p 主机端口:容器端口，将容器的3306端口映射到主机的3306端口</li>\n<li>-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机</li>\n<li>-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机</li>\n<li>-v /mydata/mysql/data:/var/lib/mysql：将配置文件夹挂载到主机</li>\n<li>-e MYSQL_ROOT_PASSWORD=root：初始化root用户密码</li>\n<li>-d mysql:5.7：表示后台运行(-d) 镜像mysql:5.7   –&gt;查看镜像docekr images</li>\n</ul>\n</li>\n<li><p>进去docker 容器</p>\n<pre><code class=\"sh\">root@af26dd647c9a:/# docker exec -it mysql /bin/bash\nroot@af26dd647c9a:/# whereis mysql\nmysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\n</code></pre>\n</li>\n<li><p>mysql配置 my.cnf</p>\n<pre><code class=\"sh\">[root@lingzx conf]# vi /mydata/mysql/conf/my.cnf\n</code></pre>\n<pre><code class=\"sh\">[client]\ndefault-character-set=utf8\n\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ninit_connect=&#39;SET collation_connection=utf8_unicode_ci&#39;\ninit_connect=&#39;SET NAMES utf8&#39;\ncharacter-set-server=utf8\ncollation-server=utf8_unicode_ci\nskip-character-set-client-handshake\nskip-name-resolve\nlower_case_table_names=1\n</code></pre>\n</li>\n<li><p>查看docker中MySQL的配置</p>\n<pre><code class=\"sh\">cd /etc/mysql\ncat my.cnf\n</code></pre>\n</li>\n<li><p>开机自启</p>\n<pre><code class=\"sh\">docker update mysql --restart=always\n</code></pre>\n</li>\n</ol>\n<h2 id=\"docker-安装Redis\"><a href=\"#docker-安装Redis\" class=\"headerlink\" title=\"docker 安装Redis\"></a>docker 安装Redis</h2><ol>\n<li><p>下载redis 镜像</p>\n<pre><code class=\"sh\">docker pull redis\n</code></pre>\n</li>\n<li><p>创建实例并启动</p>\n<pre><code class=\"sh\"># 由于 redis容器 /etc/redis目录下没有 redis.conf ，所以需要我们预先在主机上创建一个 redis.conf\nmkdir -p /mydata/redis/conf\ntouch /mydata/redis/conf/redis.conf\n\ndocker run -p 6379:6379 --name redis \\\n-v /mydata/redis/data:/data \\\n-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-d redis redis-server /etc/redis/redis.conf\n\n# 连接 docker中的 redis的控制台\ndocker exec -it redis redis-cli\n</code></pre>\n</li>\n<li><p>配置持久化</p>\n<blockquote>\n<p>当前版本的redis默认配置了【文件追加写持久化】aof</p>\n</blockquote>\n<pre><code class=\"sh\">vi /mydata/redis/redis.conf\n\nappendonly yes\n\ndocker restart redis\n</code></pre>\n</li>\n<li><p>开机自启</p>\n<pre><code class=\"sh\">docker update redis --restart=always\n</code></pre>\n</li>\n</ol>\n<h1 id=\"统一环境\"><a href=\"#统一环境\" class=\"headerlink\" title=\"统一环境\"></a>统一环境</h1><h2 id=\"Maven-3-6-1\"><a href=\"#Maven-3-6-1\" class=\"headerlink\" title=\"Maven 3.6.1\"></a>Maven 3.6.1</h2><blockquote>\n<p>链接: <a href=\"https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA\">https://pan.baidu.com/s/1Jd5EAXADSEFop2QT8sxzBA</a> 提取码: 38iw 复制这段内容后打开百度网盘手机App，操作更方便哦</p>\n</blockquote>\n<p>配置阿里云镜像</p>\n<pre><code class=\"xml\">&lt;mirrors&gt;\n    &lt;mirror&gt;\n      &lt;id&gt;nexus-aliyun&lt;/id&gt;\n      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n      &lt;name&gt;Nexus aliyun&lt;/name&gt;\n      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;\n    &lt;/mirror&gt;\n&lt;/mirrors&gt; \n</code></pre>\n<p>配置 JDK 1.8 编译环境</p>\n<pre><code class=\"xml\">&lt;profiles&gt;\n  &lt;profile&gt;\n    &lt;id&gt;jdk-1.8&lt;/id&gt;\n    &lt;activation&gt;\n      &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n      &lt;jdk&gt;1.8&lt;/jdk&gt;\n    &lt;/activation&gt;\n    &lt;properties&gt;\n      &lt;maven.compile.source&gt;1.8&lt;/maven.compile.source&gt;\n      &lt;maven.compile.target&gt;1.8&lt;/maven.compile.target&gt;\n      &lt;maven.compile.compilerVersion&gt;1.8&lt;/maven.compile.compilerVersion&gt;\n    &lt;/properties&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n</code></pre>\n<p>配置本地仓库</p>\n<pre><code class=\"xml\">&lt;localRepository&gt;D:\\Program Files\\Maven\\LocalWareHouse&lt;/localRepository&gt;\n</code></pre>\n<h2 id=\"idea-安装插件\"><a href=\"#idea-安装插件\" class=\"headerlink\" title=\"idea 安装插件\"></a>idea 安装插件</h2><ul>\n<li>lombok</li>\n<li>MybatisX</li>\n</ul>\n<h2 id=\"Vscode-安装配置\"><a href=\"#Vscode-安装配置\" class=\"headerlink\" title=\"Vscode 安装配置\"></a>Vscode 安装配置</h2><ul>\n<li>Auto Close Tag</li>\n<li>Auto Rename Tag</li>\n<li>Chinese (Simplified)</li>\n<li>ESLint</li>\n<li>HTML CSS Support</li>\n<li>HTML Snippets</li>\n<li>JavaScript（ES6）</li>\n<li>Live Server</li>\n<li>open in browser</li>\n<li>Vetur</li>\n</ul>\n<h2 id=\"安装配置-git\"><a href=\"#安装配置-git\" class=\"headerlink\" title=\"安装配置 git\"></a>安装配置 git</h2><ol>\n<li><p>下载 git：<a href=\"https://git-scm.com/\">https://git-scm.com</a></p>\n</li>\n<li><p>配置 git ，进入git bash</p>\n<pre><code class=\"sh\"># 配置用户名\ngit config --global user.name &#39;username&#39;\n# 配置邮箱\ngit config --global user.email &#39;username@email.com&#39;\n</code></pre>\n</li>\n<li><p>配置 shh 免密登录，进入git bash</p>\n<pre><code class=\"sh\">ssh-keygen -t rsa -C &#39;xx@xxx.com&#39;\n</code></pre>\n<p> 三次回车，查找 id_rsa 和 id_rsa.pub</p>\n</li>\n<li><p>登录 gitee，在设置里面找到 SSH KEY 将 .pub 文件的内容粘贴进去</p>\n<pre><code class=\"sh\"># 查看是否成功\nssh -T git@gitee.com \n</code></pre>\n</li>\n</ol>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><ol>\n<li><p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p>\n<p>共用：</p>\n<ol>\n<li>web 、openfeign</li>\n<li>每个服务，包名 <strong>com.atguigu.gulimall</strong>.xxx(product/order/ware/coupon/member)</li>\n<li>模块名：gulimall-coupon</li>\n</ol>\n</li>\n<li><p>添加pom文件</p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;groupId&gt;com.atguigu.gulimall&lt;/groupId&gt;\n    &lt;artifactId&gt;gulimall&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;gulimall&lt;/name&gt;\n    &lt;description&gt;聚合服务&lt;/description&gt;\n    &lt;packaging&gt;pom&lt;/packaging&gt;\n    &lt;modules&gt;\n        &lt;module&gt;gulimall-coupon&lt;/module&gt;\n        &lt;module&gt;gulimall-member&lt;/module&gt;\n        &lt;module&gt;gulimall-order&lt;/module&gt;\n        &lt;module&gt;gulimall-product&lt;/module&gt;\n        &lt;module&gt;gulimall-ware&lt;/module&gt;\n    &lt;/modules&gt;\n&lt;/project&gt;\n</code></pre>\n</li>\n<li><p>设置忽略提交内容 .gitgnore</p>\n<pre><code class=\"sh\">**/mvnw\n**/mvnw.cmd\n\n**/.mvn\n**/target/\n\n.idea\n**/.gitignore\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203232346905.png\" alt=\"image-20220323234601504\"> </p>\n</li>\n<li><p>提交并推送到仓库</p>\n</li>\n</ol>\n<h2 id=\"数据库设计-PowerDesigner\"><a href=\"#数据库设计-PowerDesigner\" class=\"headerlink\" title=\"数据库设计 PowerDesigner\"></a>数据库设计 PowerDesigner</h2><ol>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042296.png\" alt=\"image-20220324004223247\"> </p>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203240042710.png\" alt=\"image-20220324004234654\"> </p>\n</li>\n<li><p>每个微服务创建自己的数据库</p>\n</li>\n</ol>\n<h2 id=\"人人开源快速开发\"><a href=\"#人人开源快速开发\" class=\"headerlink\" title=\"人人开源快速开发\"></a>人人开源快速开发</h2><h3 id=\"后端管理-renren-fast\"><a href=\"#后端管理-renren-fast\" class=\"headerlink\" title=\"后端管理 renren-fast\"></a>后端管理 renren-fast</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#x6f;&#x6d;</a>:renrenio/renren-fast.git</p>\n</blockquote>\n</li>\n<li><p>将renren-fast 放在gulimall项目pom中 module</p>\n<blockquote>\n<p><module>renren-fast</module></p>\n</blockquote>\n</li>\n<li><p>新增数据库 gulimall_admin</p>\n</li>\n<li><p>修改pom</p>\n<ol>\n<li><p>关联gulimall</p>\n<pre><code class=\"xml\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.3.7.RELEASE&lt;/version&gt;\n    &lt;relativePath/&gt;\n&lt;/parent&gt;\n</code></pre>\n</li>\n<li><p>解决@NotBlank 和 @Email 报错</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>修改数据库配置，连接到 gulimall_admin 的配置信息</p>\n</li>\n</ol>\n<h3 id=\"前端管理-renren-fast-vue\"><a href=\"#前端管理-renren-fast-vue\" class=\"headerlink\" title=\"前端管理 renren-fast-vue\"></a>前端管理 renren-fast-vue</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#111;&#x6d;\">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#101;&#x65;&#46;&#99;&#111;&#x6d;</a>:renrenio/renren-fast-vue.git</p>\n</blockquote>\n</li>\n<li><p>将项目拖到VSCode中</p>\n</li>\n<li><p>统一配置</p>\n<ol>\n<li><p>nodeJs，</p>\n<blockquote>\n<p>node 版本 14 可以解决所有的报错</p>\n<p>关注 node.js 的 npm 功能</p>\n<p>NPM 是NodeJS的包管理工具，JS-NPM，Java-Maven</p>\n</blockquote>\n<ul>\n<li><p>官网下载安装，node -v 检查版本</p>\n</li>\n<li><p>配置npm 淘宝镜像</p>\n<pre><code class=\"sh\">npm config set registry http://registry.npm.taobao.org/\n</code></pre>\n</li>\n<li><p>下载依赖包</p>\n<pre><code class=\"sh\">npm install\n</code></pre>\n</li>\n<li><p>报错处理</p>\n<pre><code class=\"sh\">npm install --save  -g core-js@^3\n</code></pre>\n</li>\n<li><p>node-sass报错 是由于版本的问题，在package.json中可以解决</p>\n</li>\n</ul>\n</li>\n<li><p>Vue</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"代码生成-renren-generator\"><a href=\"#代码生成-renren-generator\" class=\"headerlink\" title=\"代码生成 renren-generator\"></a>代码生成 renren-generator</h3><ol>\n<li><p>克隆项目</p>\n<blockquote>\n<p>git clone <a href=\"mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#101;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>:renrenio/renren-generator.git</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>将项目拖到 idea 中</p>\n</li>\n<li><p>修改配置（以 product 模块为例子）</p>\n</li>\n</ol>\n<ul>\n<li><p>修改 generator.properties</p>\n<pre><code class=\"properties\">#代码生成器，配置信息\nmainPath=com.atguigu\n#包名\npackage=com.atguigu.gulimall\nmoduleName=product\n#作者\nauthor=Mr.Ling\n#Email\nemail=lingzhexi@163.com\n#表前缀(类名不会包含表前缀)\ntablePrefix=pms_\n</code></pre>\n</li>\n<li><p>修改 Controller.java.vm 模板</p>\n<pre><code class=\"java\">注释 @RequeiresPermissions 注解\n//@RequiresPermissions(&quot;$&#123;moduleName&#125;:$&#123;pathName&#125;:list&quot;)\n</code></pre>\n</li>\n<li><p>修改数据库配置( pms )</p>\n<pre><code class=\"yml\">spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    #MySQL配置\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:13306/gulimall_pms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>启动项目，生成代码</li>\n</ol>\n<ul>\n<li><p>点击生成代码</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204072159051.png\" alt=\"image-20220407215910844\"></p>\n</li>\n<li><p>将代码放到 product 模块中</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"新增-gulimall-common\"><a href=\"#新增-gulimall-common\" class=\"headerlink\" title=\"新增 gulimall-common\"></a>新增 gulimall-common</h3><ul>\n<li><p>通用的依赖模块 ，product 模块引用该模块</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.3.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;version&gt;1.18.22&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;commons-lang&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;\n    &lt;version&gt;2.6&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n    &lt;artifactId&gt;httpcore&lt;/artifactId&gt;\n    &lt;version&gt;4.4.14&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n    &lt;version&gt;2.3.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"整合Mybatis-pus\"><a href=\"#整合Mybatis-pus\" class=\"headerlink\" title=\"整合Mybatis-pus\"></a>整合Mybatis-pus</h2><ol>\n<li><p>导入依赖</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.3.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>配置数据源</p>\n<ol>\n<li><p>导入MySql 驱动</p>\n<p>推荐使用 8 版本的Mysql connector<img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100039304.png\" alt=\"image-20220410002401508\"></p>\n<pre><code class=\"xml\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;version&gt;8.0.28&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n<li><p>整合 application.yml</p>\n<pre><code class=\"yml\">server:\n    port: 8080\nspring:\n    application:\n        name: gulimall-product\n    datasource:\n        username: root\n        password: root\n        url: jdbc:mysql://localhost:13306/gulimall_pms\n        driver-class-name: com.mysql.cj.jdbc.Driver\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>配置 mybaits-plus</p>\n<ol>\n<li><p>主启动配置 @MapperScan(“com.atguigu.gulimall.product.dao”)</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100043736.png\" alt=\"image-20220410004352680\"> </p>\n</li>\n<li><p>告诉 MyBatis-Plus ， sql 映射文件位置</p>\n<p>默认位置类路径下的 classpath*:/mapper/**/*.xml</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204100049256.png\" alt=\"image-20220410004908204\"> </p>\n<pre><code class=\"yml\">mybatis-plus:\n    mapper-locations: classpath:/mapper/**/*.xml\n</code></pre>\n</li>\n<li><p>设置主键自增配置</p>\n<pre><code class=\"yml\"># 填写 id 自动联想出来\nmybatis-plus: \n global-config:\n        db-config:\n            id-type: auto\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<p>​    <strong>各模块最终需要依赖到 gulimall-common</strong> </p>\n</li>\n</ol>\n<h1 id=\"整合微服务\"><a href=\"#整合微服务\" class=\"headerlink\" title=\"整合微服务\"></a>整合微服务</h1><p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112131562.png\" alt=\"image-20220411213056325\"></p>\n<h2 id=\"搭配方案：\"><a href=\"#搭配方案：\" class=\"headerlink\" title=\"搭配方案：\"></a>搭配方案：</h2><ul>\n<li>SpringCloud Alibaba - Nacos : 注册中心 （服务发现/注册）</li>\n<li>SpringCloud Alibaba - Nacos : 配置中心 （动态配置管理）</li>\n<li>SpringCloud - Ribbon :  负载均衡</li>\n<li>SpringCloud - Feign : 声明式 HTTP 客户端 （调用远程服务）</li>\n<li>SpringCloud Alibaba - Sentinel : 服务容错 （限流、降级、熔断）</li>\n<li>SpringCloud - Gateway : API 网关 （webflux 编程模式）</li>\n<li>SpringCloud - Sleuth : 调用链监控</li>\n<li>SpringCloud Alibaba - Seata : 原 Fescar 即分布式事务解决方案     </li>\n</ul>\n<p>阿里巴巴中文文档：<a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md\">SpringCloud Alibab 中文文档</a></p>\n<h2 id=\"版本选择：\"><a href=\"#版本选择：\" class=\"headerlink\" title=\"版本选择：\"></a>版本选择：</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150099.png\" alt=\"image-20220411215026972\">  </p>\n<p>SpringCloud - SpringBoot 版本对比（<a href=\"https://spring.io/projects/spring-cloud\">SpringCloud 官网</a>）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112150336.png\" alt=\"image-20220411215056217\"> </p>\n<p>SpringCloud Alibaba - SpringBoot 版本对比 （ <a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md\">SpringCloud Alibaba Github</a>）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112202930.png\" alt=\"image-20220411220224816\"> </p>\n<p>将 SpringCloud Alibaba 依赖 加入 gulimall-common 中  </p>\n<pre><code class=\"xml\">&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>\n<h2 id=\"注册中心\"><a href=\"#注册中心\" class=\"headerlink\" title=\"注册中心\"></a>注册中心</h2><p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-discovery.adoc\">nacos 注册中心</a></p>\n<h3 id=\"服务注册-发现-Nacos-Discovery\"><a href=\"#服务注册-发现-Nacos-Discovery\" class=\"headerlink\" title=\"服务注册/发现 Nacos Discovery\"></a>服务注册/发现 Nacos Discovery</h3><ol>\n<li><p>引入依赖，加入gulimall-common</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>优惠卷模块引入 nacos discovery 依赖</p>\n<p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112222593.png\" alt=\"image-20220411222218474\"> </p>\n</li>\n<li><p>配置Nacos Server 地址</p>\n<pre><code class=\"yml\">spring:\n    cloud:\n        nacos:\n            discovery:\n                server-addr: 127.0.0.1:8848\n</code></pre>\n</li>\n<li><p>使用 @EnableDiscoveryClient 注解开启服务注册和发现<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112228697.png\" alt=\"image-20220411222803578\"> </p>\n</li>\n<li><p>查看注册的服务</p>\n<blockquote>\n<p> 登录后台 127.0.0.1:8848/nacos </p>\n<p>用户信息：nacos/nacos</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204112232366.png\" alt=\"image-20220411223200216\"> </p>\n</li>\n</ol>\n<h2 id=\"远程调用\"><a href=\"#远程调用\" class=\"headerlink\" title=\"远程调用\"></a>远程调用</h2><ol>\n<li><p>引入 open-feign</p>\n</li>\n<li><p>编写一个接口，告诉SpringCloud 需要调用远程接口</p>\n<ul>\n<li><p>新建一个feign 包</p>\n</li>\n<li><p>写一个接口</p>\n<pre><code class=\"java\">@FeignClient(&quot;gulimall-coupon&quot;) //表示 nacos 注册中心中的找到服务名为 gulimall-coupon 的服务\npublic interface CouponFeignService &#123;\n\n    @RequestMapping(&quot;/coupon/coupon/member/coupon&quot;) // 找到优惠券服务中的该接口\n    public R memberCoupons();\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>开启远程调用功能 </p>\n<p>在主启动中添加 @EnableFeignClients(basePackages=”xx”) xx表示指定feign的接口包</p>\n<pre><code class=\"java\">@EnableFeignClients(basePackages = &quot;com.atguigu.gulimall.member.feign&quot;) //此时的basePackages 可以省略\n@EnableDiscoveryClient\n@MapperScan(&quot;com.atguigu.gulimall.member.dao&quot;)\n@SpringBootApplication\npublic class GulimallMemberApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(GulimallMemberApplication.class, args);\n    &#125;\n\n&#125; \n</code></pre>\n</li>\n<li><p>示例</p>\n<ul>\n<li><p>添加远程接口</p>\n<pre><code class=\"java\">@RestController\n@RequestMapping(&quot;coupon/coupon&quot;)\npublic class CouponController &#123;\n    @Autowired\n    private CouponService couponService;\n\n    /**\n     * 会员优惠券\n     */\n    @RequestMapping(&quot;/member/coupon&quot;)\n    public R memberCoupons() &#123;\n        CouponEntity couponEntity = new CouponEntity();\n        couponEntity.setCouponName(&quot;满100减10&quot;);\n        return R.ok().put(&quot;coupons&quot;, Arrays.asList(couponEntity));\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>添加调用接口</p>\n<pre><code class=\"java\">@RestController\n@RequestMapping(&quot;member/member&quot;)\npublic class MemberController &#123;\n    @Autowired\n    private MemberService memberService;\n\n    @Autowired\n    CouponFeignService couponFeignService;\n\n    @RequestMapping(&quot;/coupons&quot;)\n    public R test() &#123;\n        MemberEntity memberEntity = new MemberEntity();\n        memberEntity.setNickname(&quot;张三&quot;);\n        R r = couponFeignService.memberCoupons();\n        return R.ok().put(&quot;member&quot;, memberEntity).put(&quot;coupons&quot;, r.get(&quot;coupons&quot;));\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>请求接口 localhost:8000/member/member/coupons</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置中心：动态管理配置\"><a href=\"#配置中心：动态管理配置\" class=\"headerlink\" title=\"配置中心：动态管理配置\"></a>配置中心：动态管理配置</h2><p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md\">nacos 配置中心文档</a></p>\n<ol>\n<li><p>引入 Nacos Config  Starter</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n<li><p>创建 bootstrap.yml，配置 Nacos 元数据</p>\n<pre><code class=\"yml\">spring:\n    application:\n        name: gulimall-coupon\n    cloud:\n        nacos:\n            config:\n                server-addr: 127.0.0.1:8848\n</code></pre>\n</li>\n<li><p>配置中心 添加 数据集（Data Id） gulimall-coupon.properties ，默认规则，应用名.properties<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122135151.png\" alt=\"image-20220412213509978\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122145876.png\" alt=\"image-20220412214528762\"> </p>\n</li>\n<li><p>动态获取配置<br> @RefreshScope ：动态获取并刷新配置</p>\n<p> @Value(“${配置项的名}”) ：获取到配置</p>\n<p>如果配置中心和当前应用都配置相同的项，优先使用配置中心的配置</p>\n<pre><code class=\"java\">@RefreshScope //动态刷新\n@RestController\n@RequestMapping(&quot;coupon/coupon&quot;)\npublic class CouponController &#123;\n    @Autowired\n    private CouponService couponService;\n\n    @Value(&quot;$&#123;coupon.user.name&#125;&quot;)\n    private String name;\n    @Value(&quot;$&#123;coupon.user.age&#125;&quot;)\n    private Integer age;\n    @GetMapping(&quot;/test&quot;)\n    public R test() &#123;\n        return R.ok().put(&quot;name&quot;,name).put(&quot;age&quot;,age);\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>核心概念</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122206664.png\" alt=\"image-20220412220641506\"></p>\n<ul>\n<li><p>命名空间：配置隔离 </p>\n<p>默认 public ：默认新增的所有都在该空间下</p>\n<ol>\n<li><p>开发、测试、生产 ：利用命名空间来做环境隔离</p>\n<p>注意：在bootstrap.yml 配置中，需要使用那个命名空间下的配置</p>\n<pre><code class=\"yml\">spring.cloud.nacos.config.namespace=cc749289-b027-486f-bb6a-3febcabecbdb\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122217795.png\" alt=\"image-20220412220837375\"> </p>\n</li>\n<li><p>每个服务应用之间相互隔离，管理微服务自己的配置<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122232120.png\" alt=\"image-20220412223231969\"></p>\n</li>\n</ol>\n</li>\n<li><p>配置集：所有配置的集合</p>\n</li>\n<li><p>配置集ID：类似文件名 （Data ID： 文件名）</p>\n</li>\n<li><p>配置分组：默认所有的配置集都属于：DEFAULT_GROUP；</p>\n<ul>\n<li><p>组名：1111 、618 、1212</p>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122240653.png\" alt=\"image-20220412224056530\"> </p>\n</li>\n<li><p>添加分组配置</p>\n<pre><code class=\"properties\">spring.cloud.nacos.config.group=1111\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>每个微服务创建自己的命名空间，使用配置分组区分环境，dev、test、prod 环境</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122247441.png\" alt=\" \">     </p>\n</li>\n</ul>\n</li>\n<li><p>同时加载多个配置集</p>\n<ul>\n<li><p>微服务任何配置信息，任何配置文件都可以放在配置中心中<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122337360.png\" alt=\"image-20220412233717240\"></p>\n</li>\n<li><p>只需要在 bootstrap.yml 说明 加载配置中心中的那些配置文件即可</p>\n<pre><code class=\"yml\">spring:\n  appliation:\n    name: gulimall-coupon\n  cloud:\n    nacos:\n      config:\n        server-addr: 127.0.0.1:8848\n        namespace: d6545d08-333c-4806-bf43-6acc99acecc6\n        # 数据库配置\n        ext-config[0].data-id: datasource.yml\n        ext-config[0].group: dev\n        ext-config[0].refresh: true\n        # mybatis 配置\n        ext-config[1].data-id: mybatis.yml\n        ext-config[1].group: dev\n        ext-config[1].refresh: true\n        # 其他配置\n        ext-config[2].data-id: other.yml\n        ext-config[2].group: dev\n        ext-config[2].refresh: true\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204122335376.png\" alt=\"image-20220412233550198\"></p>\n</li>\n<li><p>@Value，@ConfigurationProperties  以前SpringBoot 任何方法从配置文件中获取值，都能使用</p>\n</li>\n<li><p>配置中心有优先使用配置</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"网关-GateWay\"><a href=\"#网关-GateWay\" class=\"headerlink\" title=\"网关 GateWay\"></a>网关 GateWay</h2><p> <a href=\"https://spring.io/projects/spring-cloud-gateway\">SpringGateway 官方文档</a>    </p>\n<p>​    网关作为流量的入口，常用功能包括 <strong>路由转发、权限校验、限流控制</strong>等，而springcloud gateway<br>作为SpringCloud官方推出的第二代网关框架，取代了Zuul网关。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><p>Spring Cloud Gateway 的特点：</p>\n<ul>\n<li>基于Spring Framework 5、Project Reactor和Spring Boot 2.0构建</li>\n<li>能够匹配任何请求属性上的路由。</li>\n<li>谓词和筛选器特定于路由。</li>\n<li>断路器集成。</li>\n<li>春云发现客户端集成</li>\n<li>易于编写谓词和筛选器</li>\n<li>请求速率限制</li>\n<li>路径重写</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151424445.png\" alt=\"image-20220415142458247\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151425268.png\" alt=\"image-20220415142513181\"> </p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151436336.png\" alt=\"image-20220415143618115\"></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li><p>Route（路由）：网关的基本构建基块。它由 <strong>ID、目标 URI</strong>、<strong>断言集合</strong>和<strong>过滤器集合</strong>定义。如果<strong>断言集合为 true</strong>，则匹配路由</p>\n</li>\n<li><p>Predicate（断言）：这是一个 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\">Java 8 函数断言</a>。输入类型是<a href=\"https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html\">Spring Framework <code>ServerWebExchange</code></a>。这使您可以匹配 HTTP 请求中的任何内容，例如标头或参数。</p>\n</li>\n<li><p>Filter（过滤器）：这些是使用特定工厂构建的<a href=\"https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java\"><code>网关过滤器</code></a>实例。在这里，您可以修改发送下游请求之前或之后的请求和响应</p>\n</li>\n</ul>\n<h3 id=\"工作原理：\"><a href=\"#工作原理：\" class=\"headerlink\" title=\"工作原理：\"></a>工作原理：</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204151448583.png\" alt=\"Spring Cloud Gateway Diagram\"> </p>\n<p>总结：当请求到达网关，网关利用断言，判断此次请求是不是符合某个路由规则，如果符合了就按照路由规则，路由到指定的地方。当要去指定的地方就要经过一系列的filter进行过滤</p>\n<h3 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h3><p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gateway-request-predicates-factories\">路由断言工厂</a></p>\n<h4 id=\"After-Route-Predicate-Factory：后路由断言工厂\"><a href=\"#After-Route-Predicate-Factory：后路由断言工厂\" class=\"headerlink\" title=\"After Route Predicate Factory：后路由断言工厂\"></a>After Route Predicate Factory：后路由断言工厂</h4><p>路由断言工厂采用一个参数 a（这是一个 java）。此断言匹配在指定日期时间之后发生的请求。以下示例配置路由之后断言：</p>\n<p>application.yml</p>\n<pre><code class=\"yml\">spring:\n  cloud:\n    gateway:\n      routes:\n      - id: after_route\n        uri: https://example.org\n        # 断言（条件）：判断请求是在指定的时间后（After)发生的\n        predicates:\n        - After=2017-01-20T17:42:47.789-07:00[America/Denver]\n</code></pre>\n<p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories\">网关过滤器工厂</a></p>\n<h4 id=\"AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂\"><a href=\"#AddRequestHeader-GatewayFilter-Factory：添加请求头网关过滤器工厂\" class=\"headerlink\" title=\"AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂\"></a>AddRequestHeader GatewayFilter Factory：添加请求头网关过滤器工厂</h4><p>application.yml</p>\n<pre><code class=\"yaml\">spring:\n  cloud:\n    gateway:\n      routes:\n      - id: add_request_header_route\n          # 请求没有断言，任何请求直接跳转到这个链接\n        uri: https://example.org\n        filters:\n        - AddRequestHeader=X-Request-red, blue\n</code></pre>\n<p>此列表将标头添加到所有匹配请求的下游请求头中<code>X-Request-red:blue</code></p>\n<p>AddRequestHeader<code>了解用于匹配路径或主机的 URI 变量。URI 变量可以在值中使用，并在运行时展开。下面的示例配置使用变量的 一个：</code>AddRequestHeader``GatewayFilter</p>\n<p><a href=\"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#global-filters\">全局过滤器工厂</a></p>\n<h3 id=\"创建网关\"><a href=\"#创建网关\" class=\"headerlink\" title=\"创建网关\"></a>创建网关</h3><ol>\n<li><p>创建新 module gulimall-gateway</p>\n</li>\n<li><p>添加 gateway 依赖，<del>添加 gulimall-common 依赖</del>，添加nacos 配置中心和服务中心依赖</p>\n<pre><code class=\"xml\"> &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;spring-boot.version&gt;2.1.8.RELEASE&lt;/spring-boot.version&gt;\n        &lt;spring-cloud.alibaba.version&gt;2.1.0.RELEASE&lt;/spring-cloud.alibaba.version&gt;\n        &lt;spring-cloud.version&gt;Greenwich.SR3&lt;/spring-cloud.version&gt;\n    &lt;/properties&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n&lt;/dependency&gt;\n &lt;!--nacos 服务注册/发现--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;spring-cloud.alibaba.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--naocs 配置中心--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;\n            &lt;version&gt;$&#123;spring-cloud.alibaba.version&#125;&lt;/version&gt;\n        &lt;/dependency&gt;\n&lt;/dependency&gt;\n</code></pre>\n</li>\n<li><p>统一 Spring boot、Spring Cloud 版本</p>\n<ul>\n<li>boot：2.1.8.RELEASE</li>\n<li>cloud：Greenwich.SR3 </li>\n</ul>\n</li>\n<li><p>项目新建 bootstrap.yml 填写 nacos 配置中心 </p>\n<pre><code class=\"yaml\">spring:\n    application:\n        name: gulimall-gateway\n    cloud:\n        nacos:\n            config:\n                server-addr: 127.0.0.1:8848\n                namespace: 4b9add0d-df21-4fc6-ad9c-35936b491b10s    \n</code></pre>\n</li>\n<li><p>配置中心 新建网关配置命名空间</p>\n<ul>\n<li><p>新建命名空间 gateway</p>\n</li>\n<li><p>新建配置文件 gulimall-gateway.propertie </p>\n<pre><code class=\"properties\">spring.application.name=gulimall-gateway\n</code></pre>\n</li>\n<li><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212251449.png\" alt=\"image-20220421225143278\"></p>\n</li>\n</ul>\n</li>\n<li><p>application.properties 配置服务中心</p>\n<pre><code class=\"properties\">server.port=88\nspring.application.name=gulimall-gateway\nspring.cloud.nacos.discovery.server-addr=127.0.0.1\n</code></pre>\n</li>\n<li><p>启动成功<br><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212301809.png\" alt=\"image-20220421230109723\"></p>\n</li>\n<li><p>配置路由断言</p>\n<p>新建一个application.yml</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204212304803.png\" alt=\"image-20220421230443693\"></p>\n<pre><code class=\"yml\">spring:\n    cloud:\n        gateway:\n            routes:\n                -id: bing_route\n                uri: https://www.bing.com\n                predicates:\n                    # query 表示请求参数 ，参数 url ，参数值正则 baidu\n                    -Query=url,bing\n                 -id: bing_route\n                uri: https://www.bing.com\n                predicates:\n                    # query 表示请求参数 ，参数 url ，参数值正则 baidu\n                    -Query=url,bing\n            \n</code></pre>\n<p>请求路径：</p>\n<ul>\n<li><p><del>百度地址：<a href=\"http://127.0.0.1:88/hello?url=baidu~~~~%EF%BC%8C%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BE%E5%BA%A6\">http://127.0.0.1:88/hello?url=baidu~~~~，无法跳转到百度</a></del></p>\n</li>\n<li><p>必应地址：<a href=\"http://127.0.0.1:88/hello?url=bing\">http://127.0.0.1:88/hello?url=bing</a></p>\n</li>\n<li><p>QQ地址：<a href=\"http://127.0.0.1:88/hello?url=qq\">http://127.0.0.1:88/hello?url=qq</a></p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"前端基础\"><a href=\"#前端基础\" class=\"headerlink\" title=\"前端基础\"></a>前端基础</h1><h2 id=\"前后端对比\"><a href=\"#前后端对比\" class=\"headerlink\" title=\"前后端对比\"></a>前后端对比</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205131014934.png\" alt=\"在这里插入图片描述\"> </p>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><blockquote>\n<p>ECMAScript 6.0（以下简称 ES6，ECMAScript是一种由Ecma国际通过ECMA-262标准化的脚本）， 是JavaScript语言的下一代标准，2015年6月正式发布，从ES6开始的版本号采用年号，如ES2015，就是ES6。ES2016就是ES7。 ECMAScript是规范，JS的规范的具体实现。</p>\n</blockquote>\n<h3 id=\"let-amp-const\"><a href=\"#let-amp-const\" class=\"headerlink\" title=\"let &amp; const\"></a>let &amp; const</h3><ul>\n<li>作用域：var在{}之外也起作用 let在{}之外不起作用 </li>\n<li>声明次数：var 多次声明同一变量不会报错，let多次声明会报错，只能声明一次。</li>\n<li>变量提升：var 会变量提升（打印和定义可以顺序反）；let 不存在变量提升（顺序不能反） </li>\n<li>const 声明之后不允许改变</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \n\n    &lt;script&gt;\n       // var 声明的变量往往会越域\n       // let 声明的变量有严格局部作用域\n//         &#123;\n//             var a = 1;\n//             let b = 2;\n//         &#125;\n//         console.log(a);  // 1\n//         console.log(b);  // ReferenceError: b is not defined\n\n    // var 可以声明多次\n            // let 只能声明一次\n//         var m = 1\n//         var m = 2\n//         let n = 3\n//       let n = 4\n//         console.log(m)  // 2\n//         console.log(n)  // Identifier &#39;n&#39; has already been declared\n\n        // var 会变量提升\n        // let 不存在变量提升\n//         console.log(x);  // undefined\n//         var x = 10;\n//         console.log(y);   //ReferenceError: y is not defined\n//         let y = 20;\n\n        // const\n        // 1. const声明之后不允许改变\n        // 2. 一但声明必须初始化，否则会报错\n        const a = 1;\n        a = 3; //Uncaught TypeError: Assignment to constant variable.\n    \n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"解构表达式\"><a href=\"#解构表达式\" class=\"headerlink\" title=\"解构表达式\"></a>解构表达式</h3><ul>\n<li>数组解构：支持 let arr = [1,2,3]; let [a,b,c] = arr</li>\n<li>冒号改名：const { name: abc, age, language } = person</li>\n<li>字符串函数：支持一个字符串为多行 占位符功能 ${}</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;script&gt;\n        //数组解构\n        // let arr = [1,2,3];\n        // // let a = arr[0];\n        // // let b = arr[1];\n        // // let c = arr[2];\n\n        // let [a,b,c] = arr;\n        // console.log(a,b,c)\n\n        const person = &#123;\n            name: &quot;jack&quot;,\n            age: 21,\n            language: [&#39;java&#39;, &#39;js&#39;, &#39;css&#39;]\n        &#125;\n        //         const name = person.name;\n        //         const age = person.age;\n        //         const language = person.language;\n\n        //对象解构\n        const &#123; name: abc, age, language &#125; = person;\n        console.log(abc, age, language)\n\n        // 字符串扩展\n        let str = &quot;hello.vue&quot;;\n        console.log(str.startsWith(&quot;hello&quot;));//true\n        console.log(str.endsWith(&quot;.vue&quot;));//true\n        console.log(str.includes(&quot;e&quot;));//true\n        console.log(str.includes(&quot;hello&quot;));//true\n\n        //字符串模板\n        let ss = `&lt;div&gt;\n                    &lt;span&gt;hello world&lt;span&gt;\n                &lt;/div&gt;`;\n        console.log(ss);\n\n        // 字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。\n\n        function fun() &#123;\n            return &quot;这是一个函数&quot;\n        &#125;\n\n        let info = `我是$&#123;abc&#125;，今年$&#123;age + 10&#125;了, 我想说： $&#123;fun()&#125;`;\n        console.log(info);\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"函数优化\"><a href=\"#函数优化\" class=\"headerlink\" title=\"函数优化\"></a>函数优化</h3><ul>\n<li>函数默认值： b = b || 1; 现在可以直接写了function add2(a, b = 1) </li>\n<li>不定参数：function fun(…values) {</li>\n<li>支持箭头函数（lambda表达式），还支持使用{}结构传入对象的成员</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;script&gt;\n        //在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：\n        function add(a, b) &#123;\n            // 判断b是否为空，为空就给默认值1\n            b = b || 1;\n            return a + b;\n        &#125;\n        // 传一个参数\n        console.log(add(10));\n\n\n        //现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值\n        function add2(a, b = 1) &#123;\n            return a + b;\n        &#125;\n        console.log(add2(20));\n\n\n        //不定参数\n        function fun(...values) &#123;\n            console.log(values.length)\n        &#125;\n        fun(1, 2)      //2\n        fun(1, 2, 3, 4)  //4\n\n        //箭头函数\n        //以前声明一个方法\n        // var print = function (obj) &#123;\n        //     console.log(obj);\n        // &#125;\n        var print = obj =&gt; console.log(obj);\n        print(&quot;hello&quot;);\n\n        var sum = function (a, b) &#123;\n            c = a + b;\n            return a + c;\n        &#125;\n\n        var sum2 = (a, b) =&gt; a + b;\n        console.log(sum2(11, 12));\n\n        var sum3 = (a, b) =&gt; &#123;\n            c = a + b;\n            return a + c;\n        &#125;\n        console.log(sum3(10, 20))\n\n\n        const person = &#123;\n            name: &quot;jack&quot;,\n            age: 21,\n            language: [&#39;java&#39;, &#39;js&#39;, &#39;css&#39;]\n        &#125;\n\n        function hello(person) &#123;\n            console.log(&quot;hello,&quot; + person.name)\n        &#125;\n\n        //箭头函数+解构\n        var hello2 = (&#123;name&#125;) =&gt; console.log(&quot;hello,&quot; +name);\n        hello2(person);\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"对象优化\"><a href=\"#对象优化\" class=\"headerlink\" title=\"对象优化\"></a>对象优化</h3><ul>\n<li>map：获取map的键值对等Object.keys()、values、entries</li>\n<li>对象合并：Object.assign(target,source1,source2)</li>\n<li>声明简写：const person2 = { age, name }</li>\n<li>对象拷贝：let someone = { …p1 }</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script&gt;\n        const person = &#123;\n            name: &quot;jack&quot;,\n            age: 21,\n            language: [&#39;java&#39;, &#39;js&#39;, &#39;css&#39;]\n        &#125;\n\n        console.log(Object.keys(person));//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]\n        console.log(Object.values(person));//[&quot;jack&quot;, 21, Array(3)]\n        console.log(Object.entries(person));//[Array(2), Array(2), Array(2)]\n\n        const target = &#123; a: 1 &#125;;\n        const source1 = &#123; b: 2 &#125;;\n        const source2 = &#123; c: 3 &#125;;\n\n        //&#123;a:1,b:2,c:3&#125;\n        Object.assign(target, source1, source2);\n\n        console.log(target);//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]\n\n        // 声明对象简写\n        const age = 23\n        const name = &quot;张三&quot;\n        const person1 = &#123; age: age, name: name &#125;\n\n        const person2 = &#123; age, name &#125;//声明对象简写\n        console.log(person2);\n\n        // 对象的函数属性简写\n        let person3 = &#123;\n            name: &quot;jack&quot;,\n            // 以前：\n            eat: function (food) &#123;\n                console.log(this.name + &quot;在吃&quot; + food);\n            &#125;,\n            //箭头函数this不能使用，对象.属性\n            eat2: food =&gt; console.log(person3.name + &quot;在吃&quot; + food),\n            eat3(food) &#123;\n                console.log(this.name + &quot;在吃&quot; + food);\n            &#125;\n        &#125;\n\n        person3.eat(&quot;香蕉&quot;);\n        person3.eat2(&quot;苹果&quot;)\n        person3.eat3(&quot;橘子&quot;);\n\n        // 对象拓展运算符\n\n        //  拷贝对象（深拷贝）\n        let p1 = &#123; name: &quot;Amy&quot;, age: 15 &#125;\n        let someone = &#123; ...p1 &#125;\n        console.log(someone)  //&#123;name: &quot;Amy&quot;, age: 15&#125;\n\n        //  合并对象\n        let age1 = &#123; age: 15 &#125;\n        let name1 = &#123; name: &quot;Amy&quot; &#125;\n        let p2 = &#123;name:&quot;zhangsan&quot;&#125;\n        p2 = &#123; ...age1, ...name1 &#125; \n        console.log(p2)\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"map和reduce\"><a href=\"#map和reduce\" class=\"headerlink\" title=\"map和reduce\"></a>map和reduce</h3><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    \n    &lt;script&gt;\n        //数组中新增了map和reduce方法。\n        //map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。\n         let arr = [&#39;1&#39;, &#39;20&#39;, &#39;-5&#39;, &#39;3&#39;];\n         \n        //  arr = arr.map((item)=&gt;&#123;\n        //     return item*2\n        //  &#125;);\n         arr = arr.map(item=&gt; item*2);\n\n        \n\n         console.log(arr);\n        //reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，\n        //[2, 40, -10, 6]\n        //arr.reduce(callback,[initialValue])\n        /**\n     1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）*/\n        let result = arr.reduce((a,b)=&gt;&#123;\n            console.log(&quot;上一次处理后：&quot;+a);\n            console.log(&quot;当前正在处理：&quot;+b);\n            return a + b;\n        &#125;,100);\n        console.log(result)\n\n    \n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h3><ul>\n<li>封装：赋值给 let p 在Ajax中成功使用 resolve(data)，交给then处理， 失败使用reject(err)，交给catch处理p.then().catch()</li>\n</ul>\n<pre><code class=\"json\">//corse_score_10.json 得分\n&#123;\n    &quot;id&quot;: 100,\n    &quot;score&quot;: 90\n&#125;\n\n//user.json 用户\n&#123;\n    &quot;id&quot;: 1,\n    &quot;name&quot;: &quot;zhangsan&quot;,\n    &quot;password&quot;: &quot;123456&quot;\n&#125;\n\n\n//user_corse_1.json 课程\n&#123;\n    &quot;id&quot;: 10,\n    &quot;name&quot;: &quot;chinese&quot;\n&#125;\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script&gt;\n        //1、查出当前用户信息\n        //2、按照当前用户的id查出他的课程\n        //3、按照当前课程id查出分数\n        // $.ajax(&#123;\n        //     url: &quot;mock/user.json&quot;,\n        //     success(data) &#123;\n        //         console.log(&quot;查询用户：&quot;, data);\n        //         $.ajax(&#123;\n        //             url: `mock/user_corse_$&#123;data.id&#125;.json`,\n        //             success(data) &#123;\n        //                 console.log(&quot;查询到课程：&quot;, data);\n        //                 $.ajax(&#123;\n        //                     url: `mock/corse_score_$&#123;data.id&#125;.json`,\n        //                     success(data) &#123;\n        //                         console.log(&quot;查询到分数：&quot;, data);\n        //                     &#125;,\n        //                     error(error) &#123;\n        //                         console.log(&quot;出现异常了：&quot; + error);\n        //                     &#125;\n        //                 &#125;);\n        //             &#125;,\n        //             error(error) &#123;\n        //                 console.log(&quot;出现异常了：&quot; + error);\n        //             &#125;\n        //         &#125;);\n        //     &#125;,\n        //     error(error) &#123;\n        //         console.log(&quot;出现异常了：&quot; + error);\n        //     &#125;\n        // &#125;);\n\n\n        //1、Promise可以封装异步操作\n        // let p = new Promise((resolve, reject) =&gt; &#123; //传入成功解析，失败拒绝\n        //     //1、异步操作\n        //     $.ajax(&#123;\n        //         url: &quot;mock/user.json&quot;,\n        //         success: function (data) &#123;\n        //             console.log(&quot;查询用户成功:&quot;, data)\n        //             resolve(data);\n        //         &#125;,\n        //         error: function (err) &#123;\n        //             reject(err);\n        //         &#125;\n        //     &#125;);\n        // &#125;);\n\n        // p.then((obj) =&gt; &#123; //成功以后做什么\n        //     return new Promise((resolve, reject) =&gt; &#123;\n        //         $.ajax(&#123;\n        //             url: `mock/user_corse_$&#123;obj.id&#125;.json`,\n        //             success: function (data) &#123;\n        //                 console.log(&quot;查询用户课程成功:&quot;, data)\n        //                 resolve(data);\n        //             &#125;,\n        //             error: function (err) &#123;\n        //                 reject(err)\n        //             &#125;\n        //         &#125;);\n        //     &#125;)\n        // &#125;).then((data) =&gt; &#123; //成功以后干什么\n        //     console.log(&quot;上一步的结果&quot;, data)\n        //     $.ajax(&#123;\n        //         url: `mock/corse_score_$&#123;data.id&#125;.json`,\n        //         success: function (data) &#123;\n        //             console.log(&quot;查询课程得分成功:&quot;, data)\n        //         &#125;,\n        //         error: function (err) &#123;\n        //         &#125;\n        //     &#125;);\n        // &#125;)\n\n        function get(url, data) &#123; //自己定义一个方法整合一下\n            return new Promise((resolve, reject) =&gt; &#123;\n                $.ajax(&#123;\n                    url: url,\n                    data: data,\n                    success: function (data) &#123;\n                        resolve(data);\n                    &#125;,\n                    error: function (err) &#123;\n                        reject(err)\n                    &#125;\n                &#125;)\n            &#125;);\n        &#125;\n\n        get(&quot;mock/user.json&quot;)\n            .then((data) =&gt; &#123;\n                console.log(&quot;用户查询成功~~~:&quot;, data)\n                return get(`mock/user_corse_$&#123;data.id&#125;.json`);\n            &#125;)\n            .then((data) =&gt; &#123;\n                console.log(&quot;课程查询成功~~~:&quot;, data)\n                return get(`mock/corse_score_$&#123;data.id&#125;.json`);\n            &#125;)\n            .then((data)=&gt;&#123;\n                console.log(&quot;课程成绩查询成功~~~:&quot;, data)\n            &#125;)\n            .catch((err)=&gt;&#123; //失败的话catch\n                console.log(&quot;出现异常&quot;,err)\n            &#125;);\n\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><ul>\n<li>代码拆分：类似Java导包，导模块。 </li>\n<li>命令：export 和 import <ul>\n<li>export 用于规定模块的对外接口 </li>\n<li>import 用于导入其他模块提供的功能</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"js\">user.js\nvar name = &quot;jack&quot;\nvar age = 21\nfunction add(a,b)&#123;\n    return a + b;\n&#125;\n\nexport &#123;name,age,add&#125;\n\nhello.js\n// export const util = &#123;\n//     sum(a, b) &#123;\n//         return a + b;\n//     &#125;\n// &#125;\n\nexport default &#123;\n    sum(a, b) &#123;\n        return a + b;\n    &#125;\n&#125;\n// export &#123;util&#125;\n\n//`export`不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。\n\n\nmain.js\nimport abc from &quot;./hello.js&quot;\nimport &#123;name,add&#125; from &quot;./user.js&quot;\n\nabc.sum(1,2);\nconsole.log(name);\nadd(1,3);\n</code></pre>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"MVVM思想\"><a href=\"#MVVM思想\" class=\"headerlink\" title=\"MVVM思想\"></a>MVVM思想</h3><ul>\n<li><p>M：model 包括数据和一些基本操作 </p>\n</li>\n<li><p>V：view 视图，页面渲染结果 </p>\n</li>\n<li><p>VM：View-model，模型与视图间的双向操作（无需开发人员干涉） 视图和数据通过VM绑定起来，model里有变化会自动地通过Directives填写到视view中， 视图表单中添加了内容也会自动地通过DOM Listeners保存到模型中。</p>\n</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><pre><code class=\"sh\">npm init -y\n//教学的版本是Vue2，目前版本是Vue3\nnpm i vue@2 \n</code></pre>\n<pre><code class=\"html\">在VSCode中安装vue 2 snippets语法提示插件，在谷歌浏览器中安装vue.js devtools\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;\n        v-model实现双向绑定\n        &lt;button v-on:click=&quot;num++&quot;&gt;点赞&lt;/button&gt;\n        v-on:click绑定事件，实现自增\n        &lt;button v-on:click=&quot;cancel&quot;&gt;取消&lt;/button&gt;\n        回到自定义的方法\n        \n        &lt;h1&gt; &#123;&#123;name&#125;&#125; ,非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞&#123;&#123;hello()&#125;&#125;&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;!-- 导入依赖 --&gt;\n    &lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        //1、vue声明式渲染\n        let vm = new Vue(&#123; //生成vue对象\n            el: &quot;#app&quot;,//绑定元素 div id=&quot;app&quot;\n            data: &#123;  //封装数据\n                name: &quot;张三&quot;,  // 也可以使用&#123;&#125; //表单中可以取出\n                num: 1\n            &#125;,\n            methods:&#123;  //封装方法\n                cancel()&#123;\n                    this.num -- ;\n                &#125;,\n                hello()&#123;\n                    return &quot;1&quot;\n                &#125;\n            &#125;\n        &#125;);\n        还可以在html控制台 vm.name ,vm 表示 Vue对象的实例\n\n        //2、双向绑定,模型变化，视图变化。反之亦然。\n        //3、事件处理\n\n        //v-xx：指令\n\n        //1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的\n        //2、指令来简化对dom的一些操作。\n        //3、声明方法来做更复杂的操作。methods里面可以封装方法。\n\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h3><blockquote>\n<p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。 但是如果每个页面都自开发，这无疑增加了我们开发的成本。</p>\n<p>把页面拆成不同的组件，然后共享组件，避免重复开发。 在vue里，所有的vue实例都是组件，组件其实也是一个vue实例，因此它在定义时也会接收：data、methods、生命周期函等 不同的是组件不会与页面的元素綁定，否则就无法复用了，因此没有el属性。 </p>\n<p>但是组件渲染需要html模板，所以增加了template属性，值就是HTML模板 全局组件定义完毕，任何vue实例都可以直接在HTML中通过组件名称来使用组了 data必须是一个函数，不再是一个对象。</p>\n</blockquote>\n<h3 id=\"Vue脚手架\"><a href=\"#Vue脚手架\" class=\"headerlink\" title=\"Vue脚手架\"></a>Vue脚手架</h3><pre><code class=\"sh\"># 全局安装 Webpack\nnpm i webpack -g\n# 全局安装脚手架\nnpm i vue-cli -g\n# 查看版本 2.9.6\nvue -V\n# 使用 webpack 模板项目 初始化一个 appname 项目\nvue init webpack appname:vue \n# 启动项目，项目中的package.json 中 scripts，代表运行命令\nnpm start = npm run dev \n# 项目打包\nnpm run build\n</code></pre>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"sh\">$ `vue init webpack app`\n\n? Target directory exists. Continue? (Y/n) y\n? Target directory exists. Continue? Yes\n\n? Project name app\n? Project description (A Vue.js project)\n? Project description A Vue.js project\n? Author (lingzhexi &lt;lingzhexi@gmail.com&gt;)\n? Author lingzhexi &lt;lingzhexi@gmail.com&gt;\n? Vue build (Use arrow keys)\n? Vue build standalone\n? Install vue-router? (Y/n) `y`\n? Install vue-router? Yes\n? Use ESLint to lint your code? (Y/n) `n`\n? Use ESLint to lint your code? No\n? Set up unit tests (Y/n) `n`\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? (Y/n) `y`\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recom\n? Should we run `npm install` for you after the project has been created? (recom\nmended) yarn\n\n   vue-cli · Generated &quot;app&quot;.\n\n\n# Installing project dependencies ...\n# ========================\n\n&#39;yarn&#39; is not recognized as an internal or external command,\noperable program or batch file.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd app\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n</code></pre>\n<h3 id=\"使用element-UI\"><a href=\"#使用element-UI\" class=\"headerlink\" title=\"使用element-UI\"></a>使用element-UI</h3><pre><code class=\"sh\"># 安装\nnpm i elemenet-ui -S\n</code></pre>\n<pre><code class=\"js\"># 在 main.js 中写入以下内容：\nimport ElementUI from &#39;element-ui&#39;;\nimport &#39;element-ui/lib/theme-chalk/index.css&#39;;\nVue.use(ElementUI);\n</code></pre>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><pre><code class=\"sh\"># 补充依赖\nnpm i webpack-dev-server --save-dev\n</code></pre>"},{"title":"TCP 简介","author":"potato","cover":true,"summary":"TCP相关原理、包组成和保证不丢包","abbrlink":14054,"date":"2022-05-10T07:51:15.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# TCP 简介\n\n## 简介\n\n互联网有一整套协议构成，TCP是其中的一层\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101414648.png) \n\n### 以太网\n\n- 作用：电子信号如何组成数据包（packet），解决了`子网内部点对点通信`\n\n- 缺点：`无法连接多个局域网`，IP协议解决\n\n### IP\n\n- 作用：定义一套自己的地址规则，通过`路由`的形式将各个局域网相连。路由器基于IP协议\n- 路由器内部有一张路由表，规定 IP 出口，实现数据包转发\n- 缺点：`是地址协议，不能保证数据完整`，TCP 协议解决\n\n### TCP\n\n- 作用： 保证数据通信的完整性和可靠性，防止丢包\n\n## TCP 数据包\n\n以太网的数据包 大小固定，最初1518 增加到 1522 字节 。其中头信息（head）22 字节，负载（payload）：1500字节\n\n<!-- ![image-20220510142252102](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101435080.png)  -->\n\n![数据包](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101437137.png) \n\n以太网数据包：1522 字节 \n\n- 头信息：22\n- 负载：1500 \n  - IP数据包\n    - 头信息：20（最少）\n    - 负载：1480\n      - TCP 数据包\n        - 头信息：20 （最少）\n        - 负载：1400 \n\n![数据包](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101434508.png) \n\n## TCP 数据包编号（SEQ）\n\nTCP 为每个数据包编号`（sequence number）`，目的是为了接收方按照顺序还原。另外，万一丢包也可知道丢失哪一个包。\n\n每个数据包都有两个编号\n\n- 自身编号：`sequence number`\n- 下一个包编号：`next sequence number`\n\n如下图表示：当前包的负载大小为 46183-45943 = 240 字节\n\n![编号 SEQ](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101430165.png) \n\n##  TCP 数据包组装\n\n`操作系统`持续接收 TCP 数据包，按照顺序`组装`好。一旦组装完成后，根据数据包中的`端口（port）参数`，交给监听该端口的应用程序处理。应用程序收到组装好的原始数据，会根据 HTTP 协议中的 `Content-Length` 字段开始一段段读取数据。其中应用程序需要的数据放在 TCP 数据包中， TCP 原始文件的大小由应用层的协议来规定。\n\n![监听端口](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101443017.png) \n\n## 慢启动和ACK\n\n>  原因：服务器可能由于带宽小、路由器过热、缓存溢出等情况，导致丢包，因此服务器发包的速度不是越快越好。 \n>\n>  作用：服务器为了达到线路的最高速率，获知对方线路的理想速率，使用慢启动。\n\nLinux 内核设计一个 `TCP_INIT_CWND` 刚开始通信的时候，会一次性发送10个数据包，然后停下来，等待接收方确认，再继续发送。\n\n接收方每收到两个数据包，就要发送一个确认消息（acknowledgement，ACK）\n\nACK两个信息：\n\n- ACK NUM：`期待要收到下一个数据包的编号`\n- WINDOW：`接收方的接收窗口的剩余容量`\n\n发送方有了这两个信息，再加上自己已经发出的`数据包的最新编号`，就会推测出接收方`大概的接收速度`，从而降低或增加发送速率。 这被称为\"发送窗口\"，这个窗口的大小是可变的。\n\n![ACK](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101458137.png) \n\n## 数据包丢失处理\n\n每个数据包都是带有下一个数据包的编号，如果下一个数据包没有收到，那么 `ACK 的编号就不会改变`。\n\n如果发送方收到三个连续的重复ACK 或者 超时了还没有收到任何ACK，就会确认丢包，通过这个机制，保证了包不丢失。\n\n举例来说，现在收到了4号包，但是没有收到5号包。ACK 就会记录，期待收到5号包。过了一段时间，5号包收到了，那么下一轮 ACK 会更新编号。如果5号包还是没收到，但是收到了6号包或7号包，那么 ACK 里面的编号不会变化，总是显示5号包。这会导致大 量重复内容的 ACK。\n\n![三次重复ACK的重发机制](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101503085.png) \n\n## 参考\n\n[TCP 协议简介 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html)","source":"_posts/2022-05-10-TCP-简介.md","raw":"---\ntitle: TCP 简介\ntags: 网络\ncategories: 网络\nauthor: potato\ncover: true\nsummary: TCP相关原理、包组成和保证不丢包\nabbrlink: 14054\ndate: 2022-05-10 15:51:15\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n# TCP 简介\n\n## 简介\n\n互联网有一整套协议构成，TCP是其中的一层\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101414648.png) \n\n### 以太网\n\n- 作用：电子信号如何组成数据包（packet），解决了`子网内部点对点通信`\n\n- 缺点：`无法连接多个局域网`，IP协议解决\n\n### IP\n\n- 作用：定义一套自己的地址规则，通过`路由`的形式将各个局域网相连。路由器基于IP协议\n- 路由器内部有一张路由表，规定 IP 出口，实现数据包转发\n- 缺点：`是地址协议，不能保证数据完整`，TCP 协议解决\n\n### TCP\n\n- 作用： 保证数据通信的完整性和可靠性，防止丢包\n\n## TCP 数据包\n\n以太网的数据包 大小固定，最初1518 增加到 1522 字节 。其中头信息（head）22 字节，负载（payload）：1500字节\n\n<!-- ![image-20220510142252102](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101435080.png)  -->\n\n![数据包](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101437137.png) \n\n以太网数据包：1522 字节 \n\n- 头信息：22\n- 负载：1500 \n  - IP数据包\n    - 头信息：20（最少）\n    - 负载：1480\n      - TCP 数据包\n        - 头信息：20 （最少）\n        - 负载：1400 \n\n![数据包](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101434508.png) \n\n## TCP 数据包编号（SEQ）\n\nTCP 为每个数据包编号`（sequence number）`，目的是为了接收方按照顺序还原。另外，万一丢包也可知道丢失哪一个包。\n\n每个数据包都有两个编号\n\n- 自身编号：`sequence number`\n- 下一个包编号：`next sequence number`\n\n如下图表示：当前包的负载大小为 46183-45943 = 240 字节\n\n![编号 SEQ](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101430165.png) \n\n##  TCP 数据包组装\n\n`操作系统`持续接收 TCP 数据包，按照顺序`组装`好。一旦组装完成后，根据数据包中的`端口（port）参数`，交给监听该端口的应用程序处理。应用程序收到组装好的原始数据，会根据 HTTP 协议中的 `Content-Length` 字段开始一段段读取数据。其中应用程序需要的数据放在 TCP 数据包中， TCP 原始文件的大小由应用层的协议来规定。\n\n![监听端口](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101443017.png) \n\n## 慢启动和ACK\n\n>  原因：服务器可能由于带宽小、路由器过热、缓存溢出等情况，导致丢包，因此服务器发包的速度不是越快越好。 \n>\n>  作用：服务器为了达到线路的最高速率，获知对方线路的理想速率，使用慢启动。\n\nLinux 内核设计一个 `TCP_INIT_CWND` 刚开始通信的时候，会一次性发送10个数据包，然后停下来，等待接收方确认，再继续发送。\n\n接收方每收到两个数据包，就要发送一个确认消息（acknowledgement，ACK）\n\nACK两个信息：\n\n- ACK NUM：`期待要收到下一个数据包的编号`\n- WINDOW：`接收方的接收窗口的剩余容量`\n\n发送方有了这两个信息，再加上自己已经发出的`数据包的最新编号`，就会推测出接收方`大概的接收速度`，从而降低或增加发送速率。 这被称为\"发送窗口\"，这个窗口的大小是可变的。\n\n![ACK](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101458137.png) \n\n## 数据包丢失处理\n\n每个数据包都是带有下一个数据包的编号，如果下一个数据包没有收到，那么 `ACK 的编号就不会改变`。\n\n如果发送方收到三个连续的重复ACK 或者 超时了还没有收到任何ACK，就会确认丢包，通过这个机制，保证了包不丢失。\n\n举例来说，现在收到了4号包，但是没有收到5号包。ACK 就会记录，期待收到5号包。过了一段时间，5号包收到了，那么下一轮 ACK 会更新编号。如果5号包还是没收到，但是收到了6号包或7号包，那么 ACK 里面的编号不会变化，总是显示5号包。这会导致大 量重复内容的 ACK。\n\n![三次重复ACK的重发机制](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101503085.png) \n\n## 参考\n\n[TCP 协议简介 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html)","slug":"TCP-简介","published":1,"updated":"2024-12-17T01:13:50.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyot001lj0kr037u709i","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"TCP-简介\"><a href=\"#TCP-简介\" class=\"headerlink\" title=\"TCP 简介\"></a>TCP 简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>互联网有一整套协议构成，TCP是其中的一层</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101414648.png\"> </p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><ul>\n<li><p>作用：电子信号如何组成数据包（packet），解决了<code>子网内部点对点通信</code></p>\n</li>\n<li><p>缺点：<code>无法连接多个局域网</code>，IP协议解决</p>\n</li>\n</ul>\n<h3 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h3><ul>\n<li>作用：定义一套自己的地址规则，通过<code>路由</code>的形式将各个局域网相连。路由器基于IP协议</li>\n<li>路由器内部有一张路由表，规定 IP 出口，实现数据包转发</li>\n<li>缺点：<code>是地址协议，不能保证数据完整</code>，TCP 协议解决</li>\n</ul>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><ul>\n<li>作用： 保证数据通信的完整性和可靠性，防止丢包</li>\n</ul>\n<h2 id=\"TCP-数据包\"><a href=\"#TCP-数据包\" class=\"headerlink\" title=\"TCP 数据包\"></a>TCP 数据包</h2><p>以太网的数据包 大小固定，最初1518 增加到 1522 字节 。其中头信息（head）22 字节，负载（payload）：1500字节</p>\n<!-- ![image-20220510142252102](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101435080.png)  -->\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101437137.png\" alt=\"数据包\"> </p>\n<p>以太网数据包：1522 字节 </p>\n<ul>\n<li>头信息：22</li>\n<li>负载：1500 <ul>\n<li>IP数据包<ul>\n<li>头信息：20（最少）</li>\n<li>负载：1480<ul>\n<li>TCP 数据包<ul>\n<li>头信息：20 （最少）</li>\n<li>负载：1400 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101434508.png\" alt=\"数据包\"> </p>\n<h2 id=\"TCP-数据包编号（SEQ）\"><a href=\"#TCP-数据包编号（SEQ）\" class=\"headerlink\" title=\"TCP 数据包编号（SEQ）\"></a>TCP 数据包编号（SEQ）</h2><p>TCP 为每个数据包编号<code>（sequence number）</code>，目的是为了接收方按照顺序还原。另外，万一丢包也可知道丢失哪一个包。</p>\n<p>每个数据包都有两个编号</p>\n<ul>\n<li>自身编号：<code>sequence number</code></li>\n<li>下一个包编号：<code>next sequence number</code></li>\n</ul>\n<p>如下图表示：当前包的负载大小为 46183-45943 = 240 字节</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101430165.png\" alt=\"编号 SEQ\"> </p>\n<h2 id=\"TCP-数据包组装\"><a href=\"#TCP-数据包组装\" class=\"headerlink\" title=\"TCP 数据包组装\"></a>TCP 数据包组装</h2><p><code>操作系统</code>持续接收 TCP 数据包，按照顺序<code>组装</code>好。一旦组装完成后，根据数据包中的<code>端口（port）参数</code>，交给监听该端口的应用程序处理。应用程序收到组装好的原始数据，会根据 HTTP 协议中的 <code>Content-Length</code> 字段开始一段段读取数据。其中应用程序需要的数据放在 TCP 数据包中， TCP 原始文件的大小由应用层的协议来规定。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101443017.png\" alt=\"监听端口\"> </p>\n<h2 id=\"慢启动和ACK\"><a href=\"#慢启动和ACK\" class=\"headerlink\" title=\"慢启动和ACK\"></a>慢启动和ACK</h2><blockquote>\n<p> 原因：服务器可能由于带宽小、路由器过热、缓存溢出等情况，导致丢包，因此服务器发包的速度不是越快越好。 </p>\n<p> 作用：服务器为了达到线路的最高速率，获知对方线路的理想速率，使用慢启动。</p>\n</blockquote>\n<p>Linux 内核设计一个 <code>TCP_INIT_CWND</code> 刚开始通信的时候，会一次性发送10个数据包，然后停下来，等待接收方确认，再继续发送。</p>\n<p>接收方每收到两个数据包，就要发送一个确认消息（acknowledgement，ACK）</p>\n<p>ACK两个信息：</p>\n<ul>\n<li>ACK NUM：<code>期待要收到下一个数据包的编号</code></li>\n<li>WINDOW：<code>接收方的接收窗口的剩余容量</code></li>\n</ul>\n<p>发送方有了这两个信息，再加上自己已经发出的<code>数据包的最新编号</code>，就会推测出接收方<code>大概的接收速度</code>，从而降低或增加发送速率。 这被称为”发送窗口”，这个窗口的大小是可变的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101458137.png\" alt=\"ACK\"> </p>\n<h2 id=\"数据包丢失处理\"><a href=\"#数据包丢失处理\" class=\"headerlink\" title=\"数据包丢失处理\"></a>数据包丢失处理</h2><p>每个数据包都是带有下一个数据包的编号，如果下一个数据包没有收到，那么 <code>ACK 的编号就不会改变</code>。</p>\n<p>如果发送方收到三个连续的重复ACK 或者 超时了还没有收到任何ACK，就会确认丢包，通过这个机制，保证了包不丢失。</p>\n<p>举例来说，现在收到了4号包，但是没有收到5号包。ACK 就会记录，期待收到5号包。过了一段时间，5号包收到了，那么下一轮 ACK 会更新编号。如果5号包还是没收到，但是收到了6号包或7号包，那么 ACK 里面的编号不会变化，总是显示5号包。这会导致大 量重复内容的 ACK。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101503085.png\" alt=\"三次重复ACK的重发机制\"> </p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html\">TCP 协议简介 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<h1 id=\"TCP-简介\"><a href=\"#TCP-简介\" class=\"headerlink\" title=\"TCP 简介\"></a>TCP 简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>互联网有一整套协议构成，TCP是其中的一层</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101414648.png\"> </p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><ul>\n<li><p>作用：电子信号如何组成数据包（packet），解决了<code>子网内部点对点通信</code></p>\n</li>\n<li><p>缺点：<code>无法连接多个局域网</code>，IP协议解决</p>\n</li>\n</ul>\n<h3 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h3><ul>\n<li>作用：定义一套自己的地址规则，通过<code>路由</code>的形式将各个局域网相连。路由器基于IP协议</li>\n<li>路由器内部有一张路由表，规定 IP 出口，实现数据包转发</li>\n<li>缺点：<code>是地址协议，不能保证数据完整</code>，TCP 协议解决</li>\n</ul>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><ul>\n<li>作用： 保证数据通信的完整性和可靠性，防止丢包</li>\n</ul>\n<h2 id=\"TCP-数据包\"><a href=\"#TCP-数据包\" class=\"headerlink\" title=\"TCP 数据包\"></a>TCP 数据包</h2><p>以太网的数据包 大小固定，最初1518 增加到 1522 字节 。其中头信息（head）22 字节，负载（payload）：1500字节</p>\n<!-- ![image-20220510142252102](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101435080.png)  -->\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101437137.png\" alt=\"数据包\"> </p>\n<p>以太网数据包：1522 字节 </p>\n<ul>\n<li>头信息：22</li>\n<li>负载：1500 <ul>\n<li>IP数据包<ul>\n<li>头信息：20（最少）</li>\n<li>负载：1480<ul>\n<li>TCP 数据包<ul>\n<li>头信息：20 （最少）</li>\n<li>负载：1400 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101434508.png\" alt=\"数据包\"> </p>\n<h2 id=\"TCP-数据包编号（SEQ）\"><a href=\"#TCP-数据包编号（SEQ）\" class=\"headerlink\" title=\"TCP 数据包编号（SEQ）\"></a>TCP 数据包编号（SEQ）</h2><p>TCP 为每个数据包编号<code>（sequence number）</code>，目的是为了接收方按照顺序还原。另外，万一丢包也可知道丢失哪一个包。</p>\n<p>每个数据包都有两个编号</p>\n<ul>\n<li>自身编号：<code>sequence number</code></li>\n<li>下一个包编号：<code>next sequence number</code></li>\n</ul>\n<p>如下图表示：当前包的负载大小为 46183-45943 = 240 字节</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101430165.png\" alt=\"编号 SEQ\"> </p>\n<h2 id=\"TCP-数据包组装\"><a href=\"#TCP-数据包组装\" class=\"headerlink\" title=\"TCP 数据包组装\"></a>TCP 数据包组装</h2><p><code>操作系统</code>持续接收 TCP 数据包，按照顺序<code>组装</code>好。一旦组装完成后，根据数据包中的<code>端口（port）参数</code>，交给监听该端口的应用程序处理。应用程序收到组装好的原始数据，会根据 HTTP 协议中的 <code>Content-Length</code> 字段开始一段段读取数据。其中应用程序需要的数据放在 TCP 数据包中， TCP 原始文件的大小由应用层的协议来规定。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101443017.png\" alt=\"监听端口\"> </p>\n<h2 id=\"慢启动和ACK\"><a href=\"#慢启动和ACK\" class=\"headerlink\" title=\"慢启动和ACK\"></a>慢启动和ACK</h2><blockquote>\n<p> 原因：服务器可能由于带宽小、路由器过热、缓存溢出等情况，导致丢包，因此服务器发包的速度不是越快越好。 </p>\n<p> 作用：服务器为了达到线路的最高速率，获知对方线路的理想速率，使用慢启动。</p>\n</blockquote>\n<p>Linux 内核设计一个 <code>TCP_INIT_CWND</code> 刚开始通信的时候，会一次性发送10个数据包，然后停下来，等待接收方确认，再继续发送。</p>\n<p>接收方每收到两个数据包，就要发送一个确认消息（acknowledgement，ACK）</p>\n<p>ACK两个信息：</p>\n<ul>\n<li>ACK NUM：<code>期待要收到下一个数据包的编号</code></li>\n<li>WINDOW：<code>接收方的接收窗口的剩余容量</code></li>\n</ul>\n<p>发送方有了这两个信息，再加上自己已经发出的<code>数据包的最新编号</code>，就会推测出接收方<code>大概的接收速度</code>，从而降低或增加发送速率。 这被称为”发送窗口”，这个窗口的大小是可变的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101458137.png\" alt=\"ACK\"> </p>\n<h2 id=\"数据包丢失处理\"><a href=\"#数据包丢失处理\" class=\"headerlink\" title=\"数据包丢失处理\"></a>数据包丢失处理</h2><p>每个数据包都是带有下一个数据包的编号，如果下一个数据包没有收到，那么 <code>ACK 的编号就不会改变</code>。</p>\n<p>如果发送方收到三个连续的重复ACK 或者 超时了还没有收到任何ACK，就会确认丢包，通过这个机制，保证了包不丢失。</p>\n<p>举例来说，现在收到了4号包，但是没有收到5号包。ACK 就会记录，期待收到5号包。过了一段时间，5号包收到了，那么下一轮 ACK 会更新编号。如果5号包还是没收到，但是收到了6号包或7号包，那么 ACK 里面的编号不会变化，总是显示5号包。这会导致大 量重复内容的 ACK。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202205101503085.png\" alt=\"三次重复ACK的重发机制\"> </p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html\">TCP 协议简介 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n"},{"title":"深入解析JVM","cover":true,"coverImg":"/images/post/JVM.jpg","top":true,"summary":"JAVA程序员必练的内功心法","abbrlink":10871,"date":"2022-03-02T05:38:23.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg)\n<!--more-->\n\n\nJVM 的主要作用是什么？\n-------------\n\nJVM 就是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码 （字节码），就可以在不同的平台上运行。\n<!--more-->\n请你描述一下 Java 的内存区域？\n------------------\n\nJVM 在执行 Java 程序的过程中会把它管理的内存分为若干个不同的区域，这些组成部分有些是线程私有的，有些则是线程共享的，Java 内存区域也叫做运行时数据区，它的具体划分如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021541641.jpeg)\n\n\n*   `虚拟机栈` : Java 虚拟机栈是线程私有的数据区，Java 虚拟机栈的生命周期与线程相同，虚拟机栈也是局部变量的存储位置。方法在执行过程中，会在虚拟机栈中创建一个 `栈帧(stack frame)`。每个方法执行的过程就对应了一个入栈和出栈的过程。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542066.jpeg)\n\n* `本地方法栈`: 本地方法栈也是线程私有的数据区，本地方法栈存储的区域主要是 Java 中使用 `native` 关键字修饰的方法所存储的区域。\n\n* `程序计数器`：程序计数器也是线程私有的数据区，这部分区域用于存储线程的指令地址，用于判断线程的分支、循环、跳转、异常、线程切换和恢复等功能，这些都通过程序计数器来完成。\n\n* `方法区`：方法区是各个线程共享的内存区域，它用于存储虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n* `堆`：堆是线程共享的数据区，堆是 JVM 中最大的一块存储区域，所有的对象实例都会分配在堆上。JDK 1.7 后，字符串常量池从永久代中剥离出来，存放在堆中。\n\n  堆空间的内存分配（默认情况下）：\n\n  命令行上执行如下命令，会查看默认的 JVM 参数。\n\n  ```java\n  java -XX:+PrintFlagsFinal -version\n  ```\n  \n  输出的内容非常多，但是只有两行能够反映出上面的内存分配结果\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg)![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032772.jpeg)![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg)\n\n* eden 区：8/10 的年轻代空间\n\n* survivor 0 : 1/10 的年轻代空间\n\n* survivor 1 : 1/10 的年轻代空间\n\n* 老年代 ：三分之二的堆空间\n\n* 年轻代 ：三分之一的堆空间\n\n* `运行时常量池`：运行时常量池又被称为 `Runtime Constant Pool`，这块区域是方法区的一部分，它的名字非常有意思，通常被称为 `非堆`。它并不要求常量一定只有在编译期才能产生，也就是并非编译期间将常量放在常量池中，运行期间也可以将新的常量放入常量池中，String 的 intern 方法就是一个典型的例子。\n\n请你描述一下 Java 中的类加载机制？\n--------------------\n\nJava 虚拟机负责把描述类的数据从 Class 文件加载到系统内存中，并对类的数据进行**校验、转换解析和初始化**，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称之为 Java 的`类加载机制`。\n\n一个类从被加载到虚拟机内存开始，到卸载出内存为止，一共会经历下面这些过程。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544280.jpeg)\n\n类加载机制一共有五个步骤，分别是**加载、链接、初始化、使用和卸载**阶段，这五个阶段的顺序是确定的。\n\n其中链接阶段会细分成三个阶段，分别是验证、准备、解析阶段，这三个阶段的顺序是不确定的，这三个阶段通常交互进行。解析阶段通常会在初始化之后再开始，这是为了支持 Java 语言的运行时绑定特性（也被称为`动态绑定`）。\n\n下面我们就来聊一下这几个过程。\n\n### 加载\n\n关于什么时候开始加载这个过程，《Java 虚拟机规范》并没有强制约束，所以这一点我们可以自由实现。加载是整个类加载过程的第一个阶段，在这个阶段，Java 虚拟机需要完成三件事情：\n\n*   通过一个类的全限定名来获取定义此类的二进制字节流。\n\n*   将这个字节流表示的一种存储结构转换为运行时数据区中方法区的数据结构。\n\n*   在内存中生成一个 Class 对象，这个对象就代表了这个数据结构的访问入口。\n\n《Java 虚拟机规范》并未规定全限定名是如何获取的，所以现在业界有很多获取全限定名的方式：\n\n*   从 ZIP 包中读取，最终会改变为 JAR、EAR、WAR 格式。\n\n*   从网络中获取，最常见的应用就是 Web Applet。\n\n*   运行时动态生成，使用最多的就是动态代理技术。\n\n*   由其他文件生成，比如 JSP 应用场景，由 JSP 文件生成对应的 Class 文件。\n\n*   从数据库中读取，这种场景就比较小了。\n\n*   可以从加密文件中获取，这是典型的防止 Class 文件被反编译的保护措施。\n\n加载阶段既可以使用虚拟机内置的引导类加载器来完成，也可以使用用户自定义的类加载器来完成。程序员可以通过自己定义类加载器来控制字节流的访问方式。\n\n数组的加载不需要通过类加载器来创建，它是直接在内存中分配，但是数组的元素类型（数组去掉所有维度的类型）最终还是要靠类加载器来完成加载。\n\n### 验证\n\n加载过后的下一个阶段就是验证，因为我们上一步讲到在内存中生成了一个 Class 对象，这个对象是访问其代表数据结构的入口，所以这一步验证的工作就是确保 Class 文件的字节流中的内容符合《Java 虚拟机规范》中的要求，保证这些信息被当作代码运行后，它不会威胁到虚拟机的安全。\n\n验证阶段主要分为四个阶段的检验：\n\n*   文件格式验证。\n\n*   元数据验证。\n\n*   字节码验证。\n\n*   符号引用验证。\n\n**文件格式验证**\n\n这一阶段可能会包含下面这些验证点：\n\n*   魔数是否以 `0xCAFEBABE` 开头。\n\n*   主、次版本号是否在当前 Java 虚拟机接受范围之内。\n\n*   常量池的常量中是否有不支持的常量类型。\n\n*   指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n\n*   CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据。\n\n*   Class 文件中各个部分及文件本身是否有被删除的或附加的其他信息。\n\n实际上验证点远远不止有这些，上面这些只是从 HotSpot 源码中摘抄的一小段内容。\n\n**元数据验证**\n\n这一阶段主要是对字节码描述的信息进行语义分析，以确保描述的信息符合《Java 语言规范》，验证点包括\n\n*   验证的类是否有父类（除了 Object 类之外，所有的类都应该有父类）。\n\n*   要验证类的父类是否继承了不允许继承的类。\n\n*   如果这个类不是抽象类，那么这个类是否实现了父类或者接口中要求的所有方法。\n\n*   是否覆盖了 final 字段，是否出现了不符合规定的重载等。\n\n需要记住这一阶段只是对《Java 语言规范》的验证。\n\n**字节码验证**\n\n字节码验证阶段是最复杂的一个阶段，这个阶段主要是确定程序语意是否合法、是否是符合逻辑的。这个阶段主要是对类的方法体（Class 文件中的 Code 属性）进行校验分析。这部分验证包括\n\n*   确保操作数栈的数据类型和实际执行时的数据类型是否一致。\n\n*   保证任何跳转指令不会跳出到方法体外的字节码指令上。\n\n*   保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是不能把父类数据类型赋值给子类等诸如此不安全的类型转换。\n\n*   其他验证。\n\n如果没有通过字节码验证，就说明验证出问题。但是不一定通过了字节码验证，就能保证程序是安全的。\n\n**符号引用验证**\n\n最后一个阶段的校验行为发生在虚拟机将符号引用转换为直接引用的时候，这个转化将在连接的第三个阶段，即解析阶段中发生。符号引用验证可以看作是对类自身以外的各类信息进行匹配性校验，这个验证主要包括\n\n*   符号引用中的字符串全限定名是否能找到对应的类。\n\n*   指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。\n\n*   符号引用的类、字段方法的可访问性是否可被当前类所访问。\n\n*   其他验证。\n\n这一阶段主要是确保解析行为能否正常执行，如果无法通过符号引用验证，就会出现类似 `IllegalAccessError`、`NoSuchFieldError`、`NoSuchMethodError` 等错误。\n\n验证阶段对于虚拟机来说非常重要，如果能通过验证，就说明你的程序在运行时不会产生任何影响。\n\n### 准备\n\n准备阶段是为类中的变量分配内存并设置其初始值的阶段，这些变量所使用的内存都应当在方法区中进行分配，在 JDK 7 之前，HotSpot 使用永久代来实现方法区，是符合这种逻辑概念的。而在 JDK 8 之后，变量则会随着 Class 对象一起存放在 Java 堆中。\n\n下面通常情况下的基本类型和引用类型的初始值\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544012.jpeg)\n\n除了 \"通常情况\" 下，还有一些 \"例外情况\"，如果类字段属性中存在 `ConstantValue` 属性，那就这个变量值在初始阶段就会初始化为 ConstantValue 属性所指定的初始值，比如\n\n```java\npublic static final int value = \"666\";\n```\n\n编译时就会把 value 的值设置为 666。\n\n### 解析\n\n解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n*   `符号引用`：符号引用以一组符号来描述所引用的目标。符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。\n\n*   `直接引用`：直接引用可以直接指向目标的指针、相对便宜量或者一个能间接定位到目标的句柄。直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。如果有了直接引用，那么直接引用的目标一定被加载到了内存中。\n\n这样说你可能还有点不明白，我再换一种说法：\n\n> 在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，所以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。\n\n《Java 虚拟机规范》并未规定解析阶段发生的时间，只要求了在 anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield 和 putstatic 这 17 个用于操作符号引用的字节码指令之前，先对所使用的符号引用进行解析。\n\n解析也分为四个步骤\n\n*   类或接口的解析\n\n*   字段解析\n\n*   方法解析\n\n*   接口方法解析\n\n### 初始化\n\n初始化是类加载过程的最后一个步骤，在之前的阶段中，都是由 Java 虚拟机占主导作用，但是到了这一步，却把主动权移交给应用程序。\n\n对于初始化阶段，《Java 虚拟机规范》严格规定了只有下面这六种情况下才会触发类的初始化。\n\n*   在遇到 new、getstatic、putstatic 或者 invokestatic 这四条字节码指令时，如果没有进行过初始化，那么首先触发初始化。通过这四个字节码的名称可以判断，这四条字节码其实就两个场景，调用 new 关键字的时候进行初始化、读取或者设置一个静态字段的时候、调用静态方法的时候。\n\n*   在初始化类的时候，如果父类还没有初始化，那么就需要先对父类进行初始化。\n\n*   在使用 java.lang.reflect 包的方法进行反射调用的时候。\n\n*   当虚拟机启动时，用户需要指定执行主类的时候，说白了就是虚拟机会先初始化 main 方法这个类。\n\n*   在使用 JDK 7 新加入的动态语言支持时，如果一个 jafva.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getstatic、REF_putstatic、REF_invokeStatic、REF_newInvokeSpecial 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，需要先对其进行初始化。\n\n*   当一个接口中定义了 JDK 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n其实上面只有前四个大家需要知道就好了，后面两个比较冷门。\n\n> 如果说要回答类加载的话，其实聊到这里已经可以了，但是为了完整性，我们索性把后面两个过程也来聊一聊。\n\n### 使用\n\n这个阶段没什么可说的，就是初始化之后的代码由 JVM 来动态调用执行。\n\n### 卸载\n\n当代表一个类的 Class 对象不再被引用，那么 Class 对象的生命周期就结束了，对应的在方法区中的数据也会被卸载。\n\n> ⚠️但是需要注意一点：JVM 自带的类加载器装载的类，是不会卸载的，由用户自定义的类加载器加载的类是可以卸载的。\n\n在 JVM 中，对象是如何创建的？\n-----------------\n\n如果要回答对象是怎么创建的，我们一般想到的回答是直接 `new` 出来就行了，这个回答不仅局限于编程中，也融入在我们生活中的方方面面。\n\n但是遇到面试的时候你只回答一个 \"new 出来就行了\" 显然是不行的，因为面试更趋向于让你解释当程序执行到 new 这条指令时，它的背后发生了什么。\n\n所以你需要从 JVM 的角度来解释这件事情。\n\n当虚拟机遇到一个 new 指令时（其实就是字节码），首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用所代表的类是否已经被加载、解析和初始化。\n\n> 因为此时很可能不知道具体的类是什么，所以这里使用的是符号引用。\n\n如果发现这个类没有经过上面类加载的过程，那么就执行相应的类加载过程。\n\n类检查完成后，接下来虚拟机将会为新生对象**分配内存**，对象所需的大小在类加载完成后便可确定（我会在下面的面试题中介绍）。\n\n分配内存相当于是把一块固定的内存块从堆中划分出来。划分出来之后，虚拟机会将分配到的内存空间都初始化为零值，如果使用了 `TLAB`（本地线程分配缓冲），这一项初始化工作可以提前在 TLAB 分配时进行。这一步操作保证了对象实例字段在 Java 代码中可以不赋值就能直接使用。\n\n接下来，Java 虚拟机还会对对象进行必要的设置，比如确定对象是哪个类的实例、对象的 hashcode、对象的 gc 分代年龄信息。这些信息存放在对象的对象头（Object Header）中。\n\n如果上面的工作都做完后，从虚拟机的角度来说，一个新的对象就创建完毕了；但是对于程序员来说，对象创建才刚刚开始，因为构造函数，即 Class 文件中的 `<init>()` 方法还没有执行，所有字段都为默认的零值。new 指令之后才会执行 `<init>()` 方法，然后按照程序员的意愿对对象进行初始化，这样一个对象才可能被完整的构造出来。\n\n内存分配方式有哪些呢？\n-----------\n\n在类加载完成后，虚拟机需要为新生对象分配内存，为对象分配内存相当于是把一块确定的区域从堆中划分出来，这就涉及到一个问题，**要划分的堆区是否规整**。\n\n假设 Java 堆中内存是规整的，所有使用过的内存放在一边，未使用的内存放在一边，中间放着一个指针，这个指针为分界指示器。那么为新对象分配内存空间就相当于是把指针向空闲的空间挪动对象大小相等的距离，这种内存分配方式叫做`指针碰撞(Bump The Pointer)`。\n\n如果 Java 堆中的内存并不是规整的，已经被使用的内存和未被使用的内存相互交错在一起，这种情况下就没有办法使用指针碰撞，这里就要使用另外一种记录内存使用的方式：`空闲列表(Free List)`，空闲列表维护了一个列表，这个列表记录了哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。\n\n所以，上述两种分配方式选择哪个，取决于 Java 堆是否规整来决定。在一些垃圾收集器的实现中，Serial、ParNew 等带压缩整理过程的收集器，使用的是指针碰撞；而使用 CMS 这种基于清除算法的收集器时，使用的是空闲列表，具体的垃圾收集器我们后面会聊到。\n\n请你说一下对象的内存布局？\n-------------\n\n在 `hotspot` 虚拟机中，对象在内存中的布局分为三块区域：\n\n*   `对象头(Header)`\n\n*   `实例数据(Instance Data)`\n\n*   `对齐填充(Padding)`\n\n这三块区域的内存分布如下图所示\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544691.jpeg)\n\n我们来详细介绍一下上面对象中的内容。\n\n### 对象头 Header\n\n对象头 Header 主要包含 MarkWord 和对象指针 Klass Pointer，如果是数组的话，还要包含数组的长度。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544746.jpeg)\n\n在 32 位的虚拟机中 MarkWord ，Klass Pointer 和数组长度分别占用 32 位，也就是 4 字节。\n\n如果是 64 位虚拟机的话，MarkWord ，Klass Pointer 和数组长度分别占用 64 位，也就是 8 字节。\n\n在 32 位虚拟机和 64 位虚拟机的 Mark Word 所占用的字节大小不一样，32 位虚拟机的 Mark Word 和 Klass Pointer 分别占用 32 bits 的字节，而 64 位虚拟机的 Mark Word 和 Klass Pointer 占用了 64 bits 的字节，下面我们以 32 位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544554.jpeg)\n\n用中文翻译过来就是\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544702.jpeg)\n\n*   无状态也就是`无锁`的时候，对象头开辟 25 bit 的空间用来存储对象的 hashcode ，4 bit 用于存放分代年龄，1 bit 用来存放是否偏向锁的标识位，2 bit 用来存放锁标识位为 01。\n\n*   `偏向锁` 中划分更细，还是开辟 25 bit 的空间，其中 23 bit 用来存放线程 ID，2bit 用来存放 epoch，4bit 存放分代年龄，1 bit 存放是否偏向锁标识， 0 表示无锁，1 表示偏向锁，锁的标识位还是 01。\n\n*   `轻量级锁`中直接开辟 30 bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志位，其标志位为 00。\n\n*   `重量级锁`中和轻量级锁一样，30 bit 的空间用来存放指向重量级锁的指针，2 bit 存放锁的标识位，为 11\n\n*   `GC标记`开辟 30 bit 的内存空间却没有占用，2 bit 空间存放锁标志位为 11。\n\n其中无锁和偏向锁的锁标志位都是 01，只是在前面的 1 bit 区分了这是无锁状态还是偏向锁状态。\n\n关于为什么这么分配的内存，我们可以从 `OpenJDK` 中的 markOop.hpp 类中的枚举窥出端倪\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544018.jpeg)\n\n来解释一下\n\n*   age_bits 就是我们说的分代回收的标识，占用 4 字节\n\n*   lock_bits 是锁的标志位，占用 2 个字节\n\n*   biased_lock_bits 是是否偏向锁的标识，占用 1 个字节。\n\n*   max_hash_bits 是针对无锁计算的 hashcode 占用字节数量，如果是 32 位虚拟机，就是 32 - 4 - 2 -1 = 25 byte，如果是 64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以 64 位的 hashcode 占用 31 byte。\n\n*   hash_bits 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取 31，否则取真实的字节数\n\n*   cms_bits 我觉得应该是不是 64 位虚拟机就占用 0 byte，是 64 位就占用 1byte\n\n*   epoch_bits 就是 epoch 所占用的字节大小，2 字节。\n\n在上面的虚拟机对象头分配表中，我们可以看到有几种锁的状态：无锁（无状态），偏向锁，轻量级锁，重量级锁，其中轻量级锁和偏向锁是 JDK1.6 中对 synchronized 锁进行优化后新增加的，其目的就是为了大大优化锁的性能，所以在 JDK 1.6 中，使用 synchronized 的开销也没那么大了。其实从锁有无锁定来讲，还是只有无锁和重量级锁，偏向锁和轻量级锁的出现就是增加了锁的获取性能而已，并没有出现新的锁。\n\n所以我们的重点放在对 synchronized 重量级锁的研究上，当 monitor 被某个线程持有后，它就会处于锁定状态。在 HotSpot 虚拟机中，monitor 的底层代码是由 `ObjectMonitor` 实现的，其主要数据结构如下（位于 HotSpot 虚拟机源码 ObjectMonitor.hpp 文件，C++ 实现的）\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544172.jpeg)\n\n这段 C++ 中需要注意几个属性：_WaitSet 、 _EntryList 和 _Owner，每个等待获取锁的线程都会被封装称为 `ObjectWaiter` 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544929.jpeg)\n\n_Owner 是指向了 ObjectMonitor 对象的线程，而 _WaitSet 和 _EntryList 就是用来保存每个线程的列表。\n\n> 那么这两个列表有什么区别呢？这个问题我和你聊一下锁的获取流程你就清楚了。\n\n**锁的两个列表**\n\n当多个线程同时访问某段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的 monitor 之后，就会进入 _Owner 区域，并把 ObjectMonitor 对象的 _Owner 指向为当前线程，并使 _count + 1，如果调用了释放锁（比如 wait）的操作，就会释放当前持有的 monitor ，owner = null， _count - 1，同时这个线程会进入到 _WaitSet 列表中等待被唤醒。如果当前线程执行完毕后也会释放 monitor 锁，只不过此时不会进入 _WaitSet 列表了，而是直接复位 _count 的值。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544437.jpeg)\n\nKlass Pointer 表示的是类型指针，也就是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n> 你可能不是很理解指针是个什么概念，你可以简单理解为指针就是指向某个数据的地址。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544199.jpeg)\n\n### 实例数据 Instance Data\n\n实例数据部分是对象真正存储的有效信息，也是代码中定义的各个字段的字节大小，比如一个 byte 占 1 个字节，一个 int 占用 4 个字节。\n\n### 对齐 Padding\n\n对齐不是必须存在的，它只起到了占位符 (%d, %c 等) 的作用。这就是 JVM 的要求了，因为 HotSpot JVM 要求对象的起始地址必须是 8 字节的整数倍，也就是说对象的字节大小是 8 的整数倍，不够的需要使用 Padding 补全。\n\n对象访问定位的方式有哪些？\n-------------\n\n我们创建一个对象的目的当然就是为了使用它，但是，一个对象被创建出来之后，在 JVM 中是如何访问这个对象的呢？一般有两种方式：**通过句柄访问**和 **通过直接指针访问**。\n\n* 如果使用句柄访问方式的话，Java 堆中可能会划分出一块内存作为句柄池，引用（reference）中存储的是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息。如下图所示。\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg)\n\n* 如果使用直接指针访问的话，Java 堆中对象的内存布局就会有所区别，栈区引用指示的是堆中的实例数据的地址，如果只是访问对象本身的话，就不会多一次直接访问的开销，而对象类型数据的指针是存在于方法区中，如果定位的话，需要多一次直接定位开销。如下图所示\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg)\n\n这两种对象访问方式各有各的优势，使用句柄最大的好处就是引用中存储的是句柄地址，对象移动时只需改变句柄的地址就可以，而无需改变对象本身。\n\n使用直接指针来访问速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因为这类的开销也是值得优化的地方。\n\n上面聊到了对象的两种数据，一种是对象的实例数据，这没什么好说的，就是对象实例字段的数据，一种是对象的类型数据，这个数据说的是对象的类型、父类、实现的接口和方法等。\n\n如何判断对象已经死亡？\n-----------\n\n我们大家知道，基本上所有的对象都在堆中分布，当我们不再使用对象的时候，垃圾收集器会对无用对象进行回收♻️，那么 JVM 是如何判断哪些对象已经是 \"无用对象\" 的呢？\n\n这里有两种判断方式，首先我们先来说第一种：**引用计数法**。\n\n引用计数法的判断标准是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就会加一；当引用失效时，计数器的值就会减一；只要任何时刻计数器为零的对象就是不会再被使用的对象。虽然这种判断方式非常简单粗暴，但是往往很有用，不过，在 Java 领域，主流的 Hotspot 虚拟机实现并没有采用这种方式，因为引用计数法不能解决对象之间的循环引用问题。\n\n循环引用问题简单来讲就是两个对象之间互相依赖着对方，除此之外，再无其他引用，这样虚拟机无法判断引用是否为零从而进行垃圾回收操作。\n\n还有一种判断对象无用的方法就是**可达性分析算法**。\n\n当前主流的 JVM 都采用了可达性分析算法来进行判断，这个算法的基本思路就是通过一系列被称为`GC Roots`的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径被称为`引用链`（Reference Chain），如果某个对象到 GC Roots 之间没有任何引用链相连接，或者说从 GC Roots 到这个对象不可达时，则证明此这个对象是无用对象，需要被垃圾回收。\n\n这种引用方式如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg)\n\n如上图所示，从枚举根节点 GC Roots 开始进行遍历，object 1 、2、3、4 是存在引用关系的对象，而 object 5、6、7 之间虽然有关联，但是它们到 GC Roots 之间是不可达的，所以被认为是可以回收的对象。\n\n在 Java 技术体系中，可以作为 GC Roots 进行检索的对象主要有\n\n*   在虚拟机栈（栈帧中的本地变量表）中引用的对象。\n\n*   方法区中类静态属性引用的对象，比如 Java 类的引用类型静态变量。\n\n*   方法区中常量引用的对象，比如字符串常量池中的引用。\n\n*   在本地方法栈中 JNI 引用的对象。\n\n*   JVM 内部的引用，比如基本数据类型对应的 Class 对象，一些异常对象比如 NullPointerException、OutOfMemoryError 等，还有系统类加载器。\n\n*   所有被 synchronized 持有的对象。\n\n*   还有一些 JVM 内部的比如 JMXBean、JVMTI 中注册的回调，本地代码缓存等。\n\n*   根据用户所选的垃圾收集器以及当前回收的内存区域的不同，还可能会有一些对象临时加入，共同构成 GC Roots 集合。\n\n虽然我们上面提到了两种判断对象回收的方法，但无论是引用计数法还是判断 GC Roots 都离不开`引用`这一层关系。\n\n这里涉及到到强引用、软引用、弱引用、虚引用的引用关系，你可以阅读作者的这一篇文章\n\n[小心点，别被当成垃圾回收了。](https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247495968&idx=1&sn=48de091f4fabdf682a9f8b5ddd8db936&chksm=c04ae67ef73d6f68935382dcaa0bd4d538a9e0b45ee49500ee7e2356cc24dba750b197960477&token=1191632986&lang=zh_CN&scene=21#wechat_redirect)\n\n如何判断一个不再使用的类？\n-------------\n\n判断一个类型属于 \"不再使用的类\" 需要满足下面这三个条件\n\n*   这个类所有的实例已经被回收，也就是 Java 堆中不存在该类及其任何这个类字类的实例\n\n*   加载这个类的类加载器已经被回收，但是类加载器一般很难会被回收，除非这个类加载器是为了这个目的设计的，比如 OSGI、JSP 的重加载等，否则通常很难达成。\n\n*   这个类对应的 Class 对象没有任何地方被引用，无法在任何时刻通过反射访问这个类的属性和方法。\n\n虚拟机允许对满足上面这三个条件的无用类进行回收操作。\n\nJVM 分代收集理论有哪些？\n--------------\n\n一般商业的虚拟机，大多数都遵循了**分代收集**的设计思想，分代收集理论主要有两条假说。\n\n第一个是**强分代假说**，强分代假说指的是 JVM 认为绝大多数对象的生存周期都是朝生夕灭的；\n\n第二个是**弱分代假说**，弱分代假说指的是只要熬过越多次垃圾收集过程的对象就越难以回收（看来对象也会长心眼）。\n\n就是基于这两个假说理论，JVM 将`堆`区划分为不同的区域，再将需要回收的对象根据其熬过垃圾回收的次数分配到不同的区域中存储。\n\nJVM 根据这两条分代收集理论，把堆区划分为新生代 (Young Generation) 和老年代 (Old Generation) 这两个区域。在新生代中，每次垃圾收集时都发现有大批对象死去，剩下没有死去的对象会直接晋升到老年代中。\n\n上面这两个假说没有考虑对象的引用关系，而事实情况是，对象之间会存在引用关系，基于此又诞生了第三个假说，即**跨代引用假说 (Intergeneration Reference Hypothesis)**，跨代引用相比较同代引用来说仅占少数。\n\n正常来说存在相互引用的两个对象应该是同生共死的，不过也会存在特例，如果一个新生代对象跨代引用了一个老年代的对象，那么垃圾回收的时候就不会回收这个新生代对象，更不会回收老年代对象，然后这个新生代对象熬过一次垃圾回收进入到老年代中，这时候跨代引用才会消除。\n\n根据跨代引用假说，我们不需要因为老年代中存在少量跨代引用就去直接扫描整个老年代，也不用在老年代中维护一个列表记录有哪些跨代引用，实际上，可以直接在新生代中维护一个**记忆集 (Remembered Set)**，由这个记忆集把老年代划分称为若干小块，标识出老年代的哪一块会存在跨代引用。\n\n记忆集的图示如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545443.jpeg)\n\n从图中我们可以看到，记忆集中的每个元素分别对应内存中的一块连续区域是否有跨代引用对象，如果有，该区域会被标记为 “脏的”（dirty），否则就是 “干净的”（clean）。这样在垃圾回收时，只需要扫描记忆集就可以简单地确定跨代引用的位置，是个典型的空间换时间的思路。\n\n聊一聊 JVM 中的垃圾回收算法？\n-----------------\n\n在聊具体的垃圾回收算法之前，需要明确一点，哪些对象需要被垃圾收集器进行回收？也就是说需要先判断哪些对象是 \"垃圾\"？\n\n判断的标准我在上面**如何判断对象已经死亡**的问题中描述了，有两种方式，一种是引用计数法，这种判断标准就是给对象添加一个引用计数器，引用这个对象会使计数器的值 + 1，引用失效后，计数器的值就会 -1。但是这种技术无法解决对象之间的循环引用问题。\n\n还有一种方式是 GC Roots，GC Roots 这种方式是以 Root 根节点为核心，逐步向下搜索每个对象的引用，搜索走过的路径被称为引用链，如果搜索过后这个对象不存在引用链，那么这个对象就是无用对象，可以被回收。GC Roots 可以解决循环引用问题，所以一般 JVM 都采用的是这种方式。\n\n解决循环引用代码描述：\n\n```java\npublic class test{\n    public static void main(String[]args){\n        A a = new A();\n        B b = new B();\n        a=null;\n        b=null;\n    }\n}\nclass A {\n \n    public B b;\n}\nclass B {\n    public A a;\n}\n\n\n```\n\n基于 GC Roots 的这种思想，发展出了很多垃圾回收算法，下面我们就来聊一聊这些算法。\n\n### 标记 - 清除算法\n\n标记 - 清除 (Mark-Sweep) 这个算法可以说是最早最基础的算法了，标记 - 清除顾名思义分为两个阶段，即标记和清除阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。当然也可以标记存活的对象，回收未被标记的对象。这个标记的过程就是垃圾判定的过程。\n\n后续大部分垃圾回收算法都是基于标记 - 算法思想衍生的，只不过后续的算法弥补了标记 - 清除算法的缺点，那么它有什么缺点呢？主要有两个\n\n*   **执行效率不稳定**，因为假如说堆中存在大量无用对象，而且大部分需要回收的情况下，这时必须进行大量的标记和清除，导致标记和清除这两个过程的执行效率随对象的数量增长而降低。\n\n*   **内存碎片化**，标记 - 清除算法会在堆区产生大量不连续的内存碎片。碎片太多会导致在分配大对象时没有足够的空间，不得不进行一次垃圾回收操作。\n\n标记算法的示意图如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545881.jpeg)\n\n### 标记 - 复制算法\n\n由于标记 - 清除算法极易产生内存碎片，研究人员提出了标记 - 复制算法，标记 - 复制算法也可以简称为复制算法，复制算法是一种**半区复制**，它会将内存大小划分为相等的两块，每次只使用其中的一块，用完一块再用另外一块，然后再把用过的一块进行清除。虽然解决了部分内存碎片的问题，但是复制算法也带来了新的问题，即**复制开销**，不过这种开销是可以降低的，如果内存中大多数对象是无用对象，那么就可以把少数的存活对象进行复制，再回收无用的对象。\n\n不过复制算法的缺陷也是显而易见的，那就是内存空间缩小为原来的一半，空间浪费太明显。标记 - 复制算法示意图如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545639.jpeg)\n\n现在 Java 虚拟机大多数都是用了这种算法来回收新生代，因为经过研究表明，新生代对象 98% 都熬不过第一轮收集，因此不需要按照 1 ：1 的比例来划分新生代的内存空间。\n\n基于此，研究人员提出了一种 Appel 式回收，Appel 式回收的具体做法是把新生代分为一块较大的 _Eden_ 空间和两块 _Survivor_ 空间，每次分配内存都只使用 Eden 和其中的一块 Survivor 空间，发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已使用过的 Survivor 空间。\n\n在主流的 HotSpot 虚拟机中，默认的 Eden 和 Survivor 大小比例是 8：1，也就是每次新生代中可用内存空间为整个新生代容量的 90%，只有一个 Survivor 空间，所以会浪费掉 10% 的空间。这个 8：1 只是一个理论值，也就是说，不能保证每次都有不超过 10% 的对象存活，所以，当进行垃圾回收后如果 Survivor 容纳不了可存活的对象后，就需要其他内存空间来进行**帮助**，这种方式就叫做**内存担保 (Handle Promotion)** ，通常情况下，作为担保的是老年代。\n\n### 标记 - 整理算法\n\n标记 - 复制算法虽然解决了内存碎片问题，但是没有解决复制对象存在大量开销的问题。为了解决复制算法的缺陷，充分利用内存空间，提出了标记 - 整理算法。该算法标记阶段和标记 - 清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545233.jpeg)\n\n什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\n-------------------------\n\n为了解决跨代引用问题，提出了记忆集这个概念，记忆集是一个在新生代中使用的数据结构，它相当于是记录了一些指针的集合，指向了老年代中哪些对象存在跨代引用。\n\n记忆集的实现有不同的粒度\n\n*   **字长精度**：每个记录精确到一个字长，机器字长就是处理器的寻址位数，比如常见的 32 位或者 64 位处理器，这个精度决定了机器访问物理内存地址的指针长度，字中包含跨代指针。\n\n*   **对象精度**：每个记录精确到一个对象，该对象里含有跨代指针。\n\n*   **卡精度**：每个记录精确到一块内存区域，区域内含有跨代指针。\n\n其中卡精度是使用了卡表作为记忆集的实现，关于记忆集和卡表的关系，大家可以想象成是 HashMap 和 Map 的关系。\n\n什么是卡页？\n------\n\n卡表其实就是一个字节数组\n\n```java\nCARD_TABLE[this address >> 9] = 0;\n```\n\n字节数组 CARD_TABLE 的每一个元素都对应着内存区域中一块特定大小的内存块，这个内存块就是**卡页**，一般来说，卡页都是 2 的 N 次幂字节数，通过上面的代码我们可以知道，卡页一般是 2 的 9 次幂，这也是 HotSpot 中使用的卡页，即 512 字节。\n\n一个卡页的内存通常包含不止一个对象，只要卡页中有一个对象的字段存在跨代指针，那就将对应卡表的数组元素的值设置为 1，称之为这个元素变`脏`了，没有标示则为 0 。在垃圾收集时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，然后把他们加入 GC Roots 进行扫描。\n\n所以，卡页和卡表主要用来解决跨代引用问题的。\n\n什么是写屏障？写屏障带来的问题？\n----------------\n\n如果有其他分代区域中对象引用了本区域的对象，那么其对应的卡表元素就会变脏，这个引用说的就是对象赋值，也就是说卡表元素会变脏发生在对象赋值的时候，那么如何在对象赋值的时候更新维护卡表呢？\n\n在 HotSpot 虚拟机中使用的是**写屏障 (Write Barrier)** 来维护卡表状态的，这个写屏障和我们内存屏障完全不同，希望读者不要搞混了。\n\n这个写屏障其实就是一个 Aop 切面，在引用对象进行赋值时会产生一个**环形通知 (Around)**，环形通知就是切面前后分别产生一个通知，因为这个又是写屏障，所以在赋值前的部分写屏障叫做写前屏障，在赋值后的则叫做写后屏障。\n\n写屏障会带来两个问题\n\n**无条件写屏障带来的性能开销**\n\n每次对引用的更新，无论是否更新了老年代对新生代对象的引用，都会进行一次写屏障操作。显然，这会增加一些额外的开销。但是，扫描整个老年代相比较，这个开销就低得多了。\n\n不过，在高并发环境下，写屏障又带来了伪共享（false sharing）问题。\n\n**高并发下伪共享带来的性能开销**\n\n在高并发情况下，频繁的写屏障很容易发生伪共享（false sharing），从而带来性能开销。\n\n假设 CPU 缓存行大小为 64 字节，由于一个卡表项占 1 个字节，这意味着，64 个卡表项将共享同一个缓存行。\n\nHotSpot 每个卡页为 512 字节，那么一个缓存行将对应 64 个卡页一共 64*512 = 32K B。\n\n如果不同线程对对象引用的更新操作，恰好位于同一个 32 KB 区域内，这将导致同时更新卡表的同一个缓存行，从而造成缓存行的写回、无效化或者同步操作，间接影响程序性能。\n\n一个简单的解决方案，就是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表项未被标记过才将其标记为脏的。\n\n这就是 JDK  7 中引入的解决方法，引入了一个新的 JVM 参数 _-XX:+UseCondCardMark_，在执行写屏障之前，先简单的做一下判断。如果卡页已被标识过，则不再进行标识。\n\n简单理解如下：\n\n```java\nif (CARD_TABLE [this address >> 9] != 0)\n  CARD_TABLE [this address >> 9] = 0;\n\n\n```\n\n与原来的实现相比，只是简单的增加了一个判断操作。\n\n虽然开启 _-XX:+UseCondCardMark_ 之后多了一些判断开销，但是却可以避免在高并发情况下可能发生的并发写卡表问题。通过减少并发写操作，进而避免出现伪共享问题（false sharing）。\n\n什么是三色标记法？三色标记法会造成哪些问题？\n----------------------\n\n根据可达性算法的分析可知，如果要找出存活对象，需要从 GC Roots 开始遍历，然后搜索每个对象是否可达，如果对象可达则为存活对象，在 GC Roots 的搜索过程中，按照**对象和其引用是否被访问过**这个条件会分成下面三种颜色：\n\n*   白色：白色表示 GC Roots 的遍历过程中没有被访问过的对象，出现白色显然在可达性分析刚刚开始的阶段，这个时候所有对象都是白色的，如果在分析结束的阶段，仍然是白色的对象，那么代表不可达，可以进行回收。\n\n*   灰色：灰色表示对象已经被访问过，但是这个对象的引用还没有访问完毕。\n\n*   黑色：黑色表示此对象已经被访问过了，而且这个对象的引用也已经被访问了。\n\n> 注：如果标记结束后对象仍为白色，意味着已经 “找不到” 该对象在哪了，不可能会再被重新引用。\n\n现代的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：比如白色 / 黑色集合一般都不会出现（但是有其他体现颜色的地方）、灰色集合可以通过栈 / 队列 / 缓存日志等方式进行实现、遍历方式可以是广度 / 深度遍历等等。\n\n三色标记法会造成两种问题，这两种问题所出现的环境都是由于**用户环境和收集器并行工作造成的** 。当用户线程正在修改引用关系，此时收集器在回收引用关系，此时就会造成把原本已经消亡的对象标记为存活，如果出现这种状况的话，问题不大，下次再让收集器重新收集一波就完了，但是还有一种情况是把存活的对象标记为死亡，这种状况就会造成不可预知的后果。\n\n针对上面这两种对象消失问题，业界有两种处理方式，一种是**增量更新 (Incremental Update)** ，一种是**原是快照 (Snapshot At The Beginning, SATB)**。\n\n请你介绍一波垃圾收集器\n-----------\n\n垃圾收集器是面试的常考，也是必考点，只要涉及到 JVM 的相关问题，都会围绕着垃圾收集器来做一波展开，所以，有必要了解一下这些垃圾收集器。\n\n垃圾收集器有很多，不同商家、不同版本的 JVM 所提供的垃圾收集器可能会有很大差别，我们主要介绍 HotSpot 虚拟机中的垃圾收集器。\n\n垃圾收集器是垃圾回收算法的具体实现，我们上面提到过，垃圾回收算法有标记 - 清除算法、标记 - 整理、标记 - 复制，所以对应的垃圾收集器也有不同的实现方式。\n\n我们知道，HotSpot 虚拟机中的垃圾收集都是分代回收的，所以根据不同的分代，可以把垃圾收集器分为\n\n新生代收集器：Serial、ParNew、Parallel Scavenge；\n\n老年代收集器：Serial Old、Parallel Old、CMS；\n\n整堆收集器：G1；\n\n### Serial 收集器\n\nSerial 收集器是一种新生代的垃圾收集器，它是一个单线程工作的收集器，使用复制算法来进行回收，单线程工作不是说这个垃圾收集器只有一个，而是说这个收集器在工作时，必须暂停其他所有工作线程，这种暴力的暂停方式就是 **Stop The World**，Serial 就好像是寡头垄断一样，只要它一发话，其他所有的小弟（线程）都得给它让路。Serial 收集器的示意图如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545313.jpeg)\n\n> SefePoint 全局安全点：它就是代码中的一段特殊的位置，在所有用户线程到达 SafePoint 之后，用户线程挂起，GC 线程会进行清理工作。\n\n虽然 Serial 有 STW 这种显而易见的缺点，不过，从其他角度来看，Serial 还是很讨喜的，它还有着优于其他收集器的地方，那就是简单而高效，对于内存资源首先的环境，它是所有收集器中额外内存消耗最小的，对于单核处理器或者处理器核心较少的环境来说，Serial 收集器由于没有线程交互开销，所以 Serial 专心做垃圾回收效率比较高。\n\n### ParNew 收集器\n\nParNew 是 Serial 的多线程版本，除了同时使用多条线程外，其他参数和机制（STW、回收策略、对象分配规则）都和 Serial 完全一致，ParNew 收集器的示意图如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545178.jpeg)\n\n虽然 ParNew 使用了多条线程进行垃圾回收，但是在单线程环境下它绝对不会比 Serial 收集效率更高，因为多线程存在线程交互的开销，但是随着可用 CPU 核数的增加，ParNew 的处理效率会比 Serial 更高效。\n\n### Parallel Scavenge 收集器\n\nParallel Scavenge 收集器也是一款新生代收集器，它同样是基于标记 - 复制算法实现的，而且它也能够并行收集，这么看来，表面上 Parallel Scavenge 与 ParNew 非常相似，那么它们之间有什么区别呢？\n\nParallel Scavenge 的关注点主要在**达到一个可控制的吞吐量上面**。吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比。也就是\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg)\n\n这里给大家举一个吞吐量的例子，如果执行用户代码的时间 + 运行垃圾收集的时间总共耗费了 100 分钟，其中垃圾收集耗费掉了 1 分钟，那么吞吐量就是 99%。停顿时间越短就越适合需要与用户交互或需要保证服务响应质量，良好的响应速度可以提升用户体验，而高吞吐量可以最高效率利用处理器资源。\n\n### Serial Old 收集器\n\n前面介绍了一下 Serial，我们知道它是一个新生代的垃圾收集，使用了标记 - 复制算法。而这个 Serial Old 收集器却是 Serial 的老年版本，它同样也是一个单线程收集器，使用的是**标记 - 整理**算法，Serial Old 收集器有两种用途：一种是在 JDK 5 和之前的版本与 Parallel Scavenge 收集器搭配使用，另外一种用法就是作为 `CMS` 收集器的备选，CMS 垃圾收集器我们下面说，Serial Old 的收集流程如下\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/A3ibcic1Xe0iaTTaoE1HA8uE2z8agCUWibYmsr5qnsJKzjvNXjXNCrib8u5HbWlEUWwNPadXLAib7wYHnDL1QP9Gq7jg/640?wx_fmt=jpeg)\n\n### Parallel Old 收集器\n\n前面我们介绍了 Parallel Scavenge 收集器，现在来介绍一下 Parallel Old 收集器，它是 Parallel Scavenge 的老年版本，支持多线程并发收集，基于标记 - 整理算法实现，JDK 6 之后出现，吞吐量优先可以考虑 Parallel Scavenge + Parallel Old 的搭配\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg)\n\n### CMS 收集器\n\n`CMS`收集器的主要目标是获取最短的回收停顿时间，它的全称是 _Concurrent Mark Sweep_，从这个名字就可以知道，这个收集器是基于标记 - 清除算法实现的，而且支持并发收集，它的运行过程要比上面我们提到的收集器复杂一些，它的工作流程如下：\n\n*   初始标记（CMS initial mark）\n\n*   并发标记（CMS concurrent mark）\n\n*   重新标记（CMS remark）\n\n*   并发清除（CMS concurrent sweep）\n\n对于上面这四个步骤，初始标记和并发标记都需要 _Stop The World_，初始标记只是标记一下和 GC Roots 直接关联到的对象，速度较快；并发标记阶段就是从 GC Roots 的直接关联对象开始遍历整个对象图的过程。这个过程时间比较长但是不需要停顿用户线程，也就是说与垃圾收集线程一起并发运行。并发标记的过程中，可能会有错标或者漏标的情况，此时就需要在重新标记一下，最后是并发清除阶段，清理掉标记阶段中判断已经死亡的对象。\n\nCMS 的收集过程如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg)\n\nCMS 是一款非常优秀的垃圾收集器，但是没有任何收集器能够做到完美的程度，CMS 也是一样，CMS 至少有三个缺点：\n\n* CMS 对处理器资源非常敏感，在并发阶段，虽然不会造成用户线程停顿，但是却会因为占用一部分线程而导致应用程序变慢，降低总吞吐量。\n\n* CMS 无法处理**浮动垃圾**，有可能出现 _Concurrent Mode Failure_ 失败进而导致另一次完全 _Stop The World_ 的 _Full GC_ 产生。\n\n  > 什么是浮动垃圾呢？由于并发标记和并发清理阶段，用户线程仍在继续运行，所以程序自然而然就会伴随着新的垃圾不断出现，而且这一部分垃圾出现在标记结束之后，CMS 无法处理这些垃圾，所以只能等到下一次垃圾回收时在进行清理。这一部分垃圾就被称为浮动垃圾。\n\n* CMS 最后一个缺点是并发 - 清除的通病，也就是会有大量的空间碎片出现，这将会给分配大对象带来困难。\n\n### Garbage First 收集器\n\nGarbage First 又被称为 _G1 收集器_，它的出现意味着垃圾收集器走过了一个里程碑，为什么说它是里程碑呢？因为 G1 这个收集器是一种面向局部的垃圾收集器，HotSpot 团队开发这个垃圾收集器为了让它替换掉 CMS 收集器，所以到后来，JDK 9 发布后，G1 取代了 Parallel Scavenge + Parallel Old 组合，成为服务端默认的垃圾收集器，而 CMS 则不再推荐使用。\n\n之前的垃圾收集器存在回收区域的局限性，因为之前这些垃圾收集器的目标范围要么是整个新生代、要么是整个老年代，要么是整个 Java 堆（Full GC），而 G1 跳出了这个框架，它可以面向堆内存的任何部分来组成**回收集 (Collection Set，CSet)**，衡量垃圾收集的不再是哪个分代，这就是 G1 的 _Mixed GC_ 模式。\n\nG1 是基于 Region 来进行回收的，Region 就是堆内存中任意的布局，每一块 Region 都可以根据需要扮演 Eden 空间、Survivor 空间或者老年代空间，收集器能够对不同的 Region 角色采用不同的策略来进行处理。Region 中还有一块特殊的区域，这块区域就是 _Humongous_ 区域，它是专门用来存储大对象的，G1 认为只要大小超过了 Region 容量一半的对象即可判定为大对象。如果超过了 Region 容量的大对象，将会存储在连续的 Humongous Region 中，G1 大多数行为都会把 Humongous Region 作为老年代来看待。\n\nG1 保留了新生代（Eden Suvivor）和老年代的概念，但是新生代和老年代不再是固定的了。它们都是一系列区域的动态集合。\n\nG1 收集器的运作过程可以分为以下四步：\n\n*   初始标记：这个步骤也仅仅是标记一下 GC Roots 能够直接关联到的对象；并修改 TAMS 指针的值（每一个 Region 都有两个 RAMS 指针），使得下一阶段用户并发运行时，能够在可用的 Region 中分配对象，这个阶段需要暂停用户线程，但是时间很短。这个停顿是借用 Minor GC 的时候完成的，所以可以忽略不计。\n\n*   并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆中的对象图，找出要回收的对象。当对象图扫描完成后，重新处理 SATB 记录下的在并发时有引用的对象；\n\n*   最终标记：对用户线程做一个短暂的暂停，用于处理并发阶段结束后遗留下来的少量 _SATB_ 记录（一种原始快照，用来记录并发标记中某些对象）\n\n*   筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择多个 Region 构成回收集，然后把决定要回收的那一部分 Region 存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。这里的操作设计对象的移动，所以必须要暂停用户线程，由多条收集器线程并行收集\n\n从上面这几个步骤可以看出，除了并发标记外，其余三个阶段都需要暂停用户线程，所以，这个 G1 收集器并非追求**低延迟**，官方给出的设计目标是**在延迟可控的情况下尽可能的提高吞吐量**，担任全功能收集器的重任。\n\n下面是 G1 回收的示意图\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg)\n\nG1 收集器同样也有缺点和问题：\n\n*   第一个问题就是 Region 中存在跨代引用的问题，我们之前知道可以用记忆集来解决跨代引用问题，不过 Region 中的跨代引用要复杂很多；\n\n*   第二个问题就是如何保证收集线程与用户线程互不干扰的运行？CMS 使用的是增量更新算法，G1 使用的是原始快照（SATB），G1 为 Region 分配了两块 TAMS 指针，把 Region 中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须在这两个指针位置以上。如果内存回收速度赶不上内存分配速度，G1 收集器也要冻结用户线程执行，导致 Full GC 而产生长时间的 STW。\n\n*   第三个问题是无法建立可预测的停顿模型。\n\nJVM 常用命令介绍\n----------\n\n下面介绍一下 JVM 中常用的调优、故障处理等工具。\n\n1.  _jps_ ：虚拟机进程工具，全称是 _JVM Process Status Tool_，它的功能和 Linux 中的 _ps_ 类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类 _Main Class_ 所在的本地虚拟机唯一 ID，虽然功能比较单一，但是这个命令绝对是使用最高频的一个命令。\n\n2.  _jstat_：虚拟机统计信息工具，用于监视虚拟机各种运行状态的信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。\n\n3.  _jinfo_：Java 配置信息工具，全称是 _Configuration Info for Java_，它的作用是可以实时调整虚拟机各项参数。\n\n4.  _jmap_：Java 内存映像工具，全称是 _Memory Map For Java_，它用于生成转储快照，用来排查内存占用情况\n\n5.  _jhat_：虚拟机堆转储快照分析工具，全称是 _JVM Heap Analysis Tool_，这个指令通常和 jmap 一起搭配使用，jhat 内置了一个 HTTP/Web 服务器，生成转储快照后可以在浏览器中查看。不过，一般还是 jmap 命令使用的频率比较高。\n\n6.  _jstack_：Java 堆栈跟踪工具，全称是 _Stack Trace for Java_ ，顾名思义，这个命令用来追踪堆栈的使用情况，用于虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条正在执行的方法堆栈的集合。\n\n什么是双亲委派模型？\n----------\n\nJVM 类加载默认使用的是**双亲委派模型**，那么什么是双亲委派模型呢？\n\n这里我们需要先介绍一下三种类加载器：\n\n*   启动类加载器，_Bootstrap Class Loader_，这个类加载器是 C++ 实现的，它是 JVM 的一部分，这个类加载器负责加载存放在 _<JAVA_HOME>\\lib_ 目录，启动类加载器无法被 Java 程序直接引用。这也就是说，JDK 中的常用类的加载都是由启动类加载器来完成的。\n\n*   扩展类加载器，_Extension Class Loader_，这个类加载器是 Java 实现的，它负责加载 _<JAVA_HOME>\\lib\\ext_ 目录。\n\n*   应用程序类加载器，_Application Class Loader_，这个类加载器是由 _sum.misc.Launcher$AppClassLoader_ 来实现，它负责加载 _ClassPath_ 上所有的类库，如果应用程序中没有定义自己的类加载器，默认使用就是这个类加载器。\n\n所以，我们的 Java 应用程序都是由这三种类加载器来相互配合完成的，当然，用户也可以自己定义类加载器，即 _User Class Loader_，这几个类加载器的模型如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545247.jpeg)\n\n上面这几类类加载器构成了不同的层次结构，当我们需要加载一个类时，子类加载器并不会马上去加载，而是依次去请求父类加载器加载，一直往上请求到最高类加载器：启动类加载器。当启动类加载器加载不了的时候，依次往下让子类加载器进行加载。这就是双亲委派模型。\n\n双亲委派模型的缺陷？\n----------\n\n在双亲委派模型中，子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。这就导致了双亲委派模型并不能解决所有的类加载器问题。\n\nJava 提供了很多外部接口，这些接口统称为 _Service Provider Interface, SPI_，允许第三方实现这些接口，而这些接口却是 Java 核心类提供的，由 Bootstrap Class Loader 加载，而一般的扩展接口是由 Application Class Loader 加载的，Bootstrap Class Loader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 Application Class Loader，因为它是最顶层的类加载器。\n\n双亲委派机制的三次破坏\n-----------\n\n虽然双亲委派机制是 Java 强烈推荐给开发者们的类加载器的实现方式，但是并没有强制规定你必须就要这么实现，所以，它一样也存在被破坏的情况，实际上，历史上一共出现三次双亲委派机制被破坏的情况：\n\n*   双亲委派机制第一次被破坏发生在双亲委派机制出现之前，由于双亲委派机制 JDK 1.2 之后才引用的，但类加载的概念在 Java 刚出现的时候就有了，所以引用双亲委派机制之前，设计者们必须兼顾开发者们自定义的一些类加载器的代码，所以在 JDK 1.2 之后的 java.lang.ClassLoader 中添加了一个新的 _findClass_ 方法，引导用户编写类加载器逻辑的时候重写这个 findClass 方法，而不是基于 _loadClass_ 编写。\n\n*   双亲委派机制第二次被破坏是由于它自己模型导致的，由于它只能向上（基础）加载，越基础的类越由上层加载器加载，所以如果基础类型又想要调用用户的代码，该怎么办？这也就是我们上面那个问题所说的 SPI 机制。那么 JDK 团队是如何做的呢？它们引用了一个 **线程上下文类加载器 (Thread Context ClassLoader)**，这个类加载器可以通过 java.lang.Thread 类的 _setContextClassLoader_ 进行设置，如果创建时线程还未设置，它将会从父线程中继承，如果全局没有设置类加载器的话，这个 ClassLoader 就是默认的类加载器。这种行为虽然是一种犯规行为，但是 Java 代码中的 **JNDI、JDBC** 等都是使用这种方式来完成的。直到 JDK 6 ，引用了 _java.util.ServiceLoader_，使用 **META-INF/services** + 责任链的设计模式，才解决了 SPI 的这种加载机制。\n\n*   双亲委派机制第三次被破坏是由于用户对程序的动态需求使热加载、热部署的引入所致。由于时代的变化，我们希望 Java 能像鼠标键盘一样实现热部署，即时加载（load class），引入了 OSGI，OSGI 实现热部署的关键在于它自定义类加载器机制的实现，OSGI 中的每一个 _Bundle_ 也就是模块都有一个自己的类加载器。当需要更换 Bundle 时，就直接把 Bundle 连同类加载器一起替换掉就能够实现热加载。在 OSGI 环境下，类加载器不再遵从双亲委派机制，而是使用了一种更复杂的加载机制。\n\n常见的 JVM 调优参数有哪些？\n----------------\n\n*   -Xms256m：初始化堆大小为 256m；\n\n*   -Xmx2g：最大内存为 2g；\n\n*   -Xmn50m：新生代的大小 50m；\n\n*   -XX:+PrintGCDetails 打印 gc 详细信息；\n\n*   -XX:+HeapDumpOnOutOfMemoryError  在发生 OutOfMemoryError 错误时，来 dump 出堆快照；\n\n*   -XX:NewRatio=4    设置年轻的和老年代的内存比例为 1:4；\n\n*   -XX:SurvivorRatio=8 设置新生代 Eden 和 Survivor 比例为 8:2；\n\n*   -XX:+UseSerialGC   新生代和老年代都用串行收集器 Serial + Serial Old\n\n*   -XX:+UseParNewGC 指定使用 ParNew + Serial Old 垃圾回收器组合；\n\n*   -XX:+UseParallelGC  新生代使用 Parallel Scavenge，老年代使用 Serial Old\n\n*   -XX:+UseParallelOldGC：新生代 ParallelScavenge + 老年代 ParallelOld 组合；\n\n*   -XX:+UseConcMarkSweepGC：新生代使用 ParNew，老年代使用 CMS；\n\n*   -XX:NewSize：新生代最小值；\n\n*   -XX:MaxNewSize：新生代最大值\n\n*   -XX:MetaspaceSize 元空间初始化大小\n\n*   -XX:MaxMetaspaceSize 元空间最大值\n\n后记\n--\n\n这篇文章是 JVM 面试题的第二版，新增了很多内容，写的时间也比较长了，如果你觉得文章还不错的话，大家三连走起！另外，分享到朋友圈是对我莫大的支持，感谢！不骗你，看完真的需要一小时。\n","source":"_posts/2022-03-02-深入解析JVM-.md","raw":"---\ntitle: 深入解析JVM\ncover: true\ncoverImg: /images/post/JVM.jpg\ntags: JVM\ncategories: 后端\ntop: true\nsummary: JAVA程序员必练的内功心法\nabbrlink: 10871\ndate: 2022-03-02 13:38:23\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg)\n<!--more-->\n\n\nJVM 的主要作用是什么？\n-------------\n\nJVM 就是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码 （字节码），就可以在不同的平台上运行。\n<!--more-->\n请你描述一下 Java 的内存区域？\n------------------\n\nJVM 在执行 Java 程序的过程中会把它管理的内存分为若干个不同的区域，这些组成部分有些是线程私有的，有些则是线程共享的，Java 内存区域也叫做运行时数据区，它的具体划分如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021541641.jpeg)\n\n\n*   `虚拟机栈` : Java 虚拟机栈是线程私有的数据区，Java 虚拟机栈的生命周期与线程相同，虚拟机栈也是局部变量的存储位置。方法在执行过程中，会在虚拟机栈中创建一个 `栈帧(stack frame)`。每个方法执行的过程就对应了一个入栈和出栈的过程。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542066.jpeg)\n\n* `本地方法栈`: 本地方法栈也是线程私有的数据区，本地方法栈存储的区域主要是 Java 中使用 `native` 关键字修饰的方法所存储的区域。\n\n* `程序计数器`：程序计数器也是线程私有的数据区，这部分区域用于存储线程的指令地址，用于判断线程的分支、循环、跳转、异常、线程切换和恢复等功能，这些都通过程序计数器来完成。\n\n* `方法区`：方法区是各个线程共享的内存区域，它用于存储虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n* `堆`：堆是线程共享的数据区，堆是 JVM 中最大的一块存储区域，所有的对象实例都会分配在堆上。JDK 1.7 后，字符串常量池从永久代中剥离出来，存放在堆中。\n\n  堆空间的内存分配（默认情况下）：\n\n  命令行上执行如下命令，会查看默认的 JVM 参数。\n\n  ```java\n  java -XX:+PrintFlagsFinal -version\n  ```\n  \n  输出的内容非常多，但是只有两行能够反映出上面的内存分配结果\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg)![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032772.jpeg)![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg)\n\n* eden 区：8/10 的年轻代空间\n\n* survivor 0 : 1/10 的年轻代空间\n\n* survivor 1 : 1/10 的年轻代空间\n\n* 老年代 ：三分之二的堆空间\n\n* 年轻代 ：三分之一的堆空间\n\n* `运行时常量池`：运行时常量池又被称为 `Runtime Constant Pool`，这块区域是方法区的一部分，它的名字非常有意思，通常被称为 `非堆`。它并不要求常量一定只有在编译期才能产生，也就是并非编译期间将常量放在常量池中，运行期间也可以将新的常量放入常量池中，String 的 intern 方法就是一个典型的例子。\n\n请你描述一下 Java 中的类加载机制？\n--------------------\n\nJava 虚拟机负责把描述类的数据从 Class 文件加载到系统内存中，并对类的数据进行**校验、转换解析和初始化**，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称之为 Java 的`类加载机制`。\n\n一个类从被加载到虚拟机内存开始，到卸载出内存为止，一共会经历下面这些过程。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544280.jpeg)\n\n类加载机制一共有五个步骤，分别是**加载、链接、初始化、使用和卸载**阶段，这五个阶段的顺序是确定的。\n\n其中链接阶段会细分成三个阶段，分别是验证、准备、解析阶段，这三个阶段的顺序是不确定的，这三个阶段通常交互进行。解析阶段通常会在初始化之后再开始，这是为了支持 Java 语言的运行时绑定特性（也被称为`动态绑定`）。\n\n下面我们就来聊一下这几个过程。\n\n### 加载\n\n关于什么时候开始加载这个过程，《Java 虚拟机规范》并没有强制约束，所以这一点我们可以自由实现。加载是整个类加载过程的第一个阶段，在这个阶段，Java 虚拟机需要完成三件事情：\n\n*   通过一个类的全限定名来获取定义此类的二进制字节流。\n\n*   将这个字节流表示的一种存储结构转换为运行时数据区中方法区的数据结构。\n\n*   在内存中生成一个 Class 对象，这个对象就代表了这个数据结构的访问入口。\n\n《Java 虚拟机规范》并未规定全限定名是如何获取的，所以现在业界有很多获取全限定名的方式：\n\n*   从 ZIP 包中读取，最终会改变为 JAR、EAR、WAR 格式。\n\n*   从网络中获取，最常见的应用就是 Web Applet。\n\n*   运行时动态生成，使用最多的就是动态代理技术。\n\n*   由其他文件生成，比如 JSP 应用场景，由 JSP 文件生成对应的 Class 文件。\n\n*   从数据库中读取，这种场景就比较小了。\n\n*   可以从加密文件中获取，这是典型的防止 Class 文件被反编译的保护措施。\n\n加载阶段既可以使用虚拟机内置的引导类加载器来完成，也可以使用用户自定义的类加载器来完成。程序员可以通过自己定义类加载器来控制字节流的访问方式。\n\n数组的加载不需要通过类加载器来创建，它是直接在内存中分配，但是数组的元素类型（数组去掉所有维度的类型）最终还是要靠类加载器来完成加载。\n\n### 验证\n\n加载过后的下一个阶段就是验证，因为我们上一步讲到在内存中生成了一个 Class 对象，这个对象是访问其代表数据结构的入口，所以这一步验证的工作就是确保 Class 文件的字节流中的内容符合《Java 虚拟机规范》中的要求，保证这些信息被当作代码运行后，它不会威胁到虚拟机的安全。\n\n验证阶段主要分为四个阶段的检验：\n\n*   文件格式验证。\n\n*   元数据验证。\n\n*   字节码验证。\n\n*   符号引用验证。\n\n**文件格式验证**\n\n这一阶段可能会包含下面这些验证点：\n\n*   魔数是否以 `0xCAFEBABE` 开头。\n\n*   主、次版本号是否在当前 Java 虚拟机接受范围之内。\n\n*   常量池的常量中是否有不支持的常量类型。\n\n*   指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n\n*   CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据。\n\n*   Class 文件中各个部分及文件本身是否有被删除的或附加的其他信息。\n\n实际上验证点远远不止有这些，上面这些只是从 HotSpot 源码中摘抄的一小段内容。\n\n**元数据验证**\n\n这一阶段主要是对字节码描述的信息进行语义分析，以确保描述的信息符合《Java 语言规范》，验证点包括\n\n*   验证的类是否有父类（除了 Object 类之外，所有的类都应该有父类）。\n\n*   要验证类的父类是否继承了不允许继承的类。\n\n*   如果这个类不是抽象类，那么这个类是否实现了父类或者接口中要求的所有方法。\n\n*   是否覆盖了 final 字段，是否出现了不符合规定的重载等。\n\n需要记住这一阶段只是对《Java 语言规范》的验证。\n\n**字节码验证**\n\n字节码验证阶段是最复杂的一个阶段，这个阶段主要是确定程序语意是否合法、是否是符合逻辑的。这个阶段主要是对类的方法体（Class 文件中的 Code 属性）进行校验分析。这部分验证包括\n\n*   确保操作数栈的数据类型和实际执行时的数据类型是否一致。\n\n*   保证任何跳转指令不会跳出到方法体外的字节码指令上。\n\n*   保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是不能把父类数据类型赋值给子类等诸如此不安全的类型转换。\n\n*   其他验证。\n\n如果没有通过字节码验证，就说明验证出问题。但是不一定通过了字节码验证，就能保证程序是安全的。\n\n**符号引用验证**\n\n最后一个阶段的校验行为发生在虚拟机将符号引用转换为直接引用的时候，这个转化将在连接的第三个阶段，即解析阶段中发生。符号引用验证可以看作是对类自身以外的各类信息进行匹配性校验，这个验证主要包括\n\n*   符号引用中的字符串全限定名是否能找到对应的类。\n\n*   指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。\n\n*   符号引用的类、字段方法的可访问性是否可被当前类所访问。\n\n*   其他验证。\n\n这一阶段主要是确保解析行为能否正常执行，如果无法通过符号引用验证，就会出现类似 `IllegalAccessError`、`NoSuchFieldError`、`NoSuchMethodError` 等错误。\n\n验证阶段对于虚拟机来说非常重要，如果能通过验证，就说明你的程序在运行时不会产生任何影响。\n\n### 准备\n\n准备阶段是为类中的变量分配内存并设置其初始值的阶段，这些变量所使用的内存都应当在方法区中进行分配，在 JDK 7 之前，HotSpot 使用永久代来实现方法区，是符合这种逻辑概念的。而在 JDK 8 之后，变量则会随着 Class 对象一起存放在 Java 堆中。\n\n下面通常情况下的基本类型和引用类型的初始值\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544012.jpeg)\n\n除了 \"通常情况\" 下，还有一些 \"例外情况\"，如果类字段属性中存在 `ConstantValue` 属性，那就这个变量值在初始阶段就会初始化为 ConstantValue 属性所指定的初始值，比如\n\n```java\npublic static final int value = \"666\";\n```\n\n编译时就会把 value 的值设置为 666。\n\n### 解析\n\n解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n*   `符号引用`：符号引用以一组符号来描述所引用的目标。符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。\n\n*   `直接引用`：直接引用可以直接指向目标的指针、相对便宜量或者一个能间接定位到目标的句柄。直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。如果有了直接引用，那么直接引用的目标一定被加载到了内存中。\n\n这样说你可能还有点不明白，我再换一种说法：\n\n> 在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，所以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。\n\n《Java 虚拟机规范》并未规定解析阶段发生的时间，只要求了在 anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield 和 putstatic 这 17 个用于操作符号引用的字节码指令之前，先对所使用的符号引用进行解析。\n\n解析也分为四个步骤\n\n*   类或接口的解析\n\n*   字段解析\n\n*   方法解析\n\n*   接口方法解析\n\n### 初始化\n\n初始化是类加载过程的最后一个步骤，在之前的阶段中，都是由 Java 虚拟机占主导作用，但是到了这一步，却把主动权移交给应用程序。\n\n对于初始化阶段，《Java 虚拟机规范》严格规定了只有下面这六种情况下才会触发类的初始化。\n\n*   在遇到 new、getstatic、putstatic 或者 invokestatic 这四条字节码指令时，如果没有进行过初始化，那么首先触发初始化。通过这四个字节码的名称可以判断，这四条字节码其实就两个场景，调用 new 关键字的时候进行初始化、读取或者设置一个静态字段的时候、调用静态方法的时候。\n\n*   在初始化类的时候，如果父类还没有初始化，那么就需要先对父类进行初始化。\n\n*   在使用 java.lang.reflect 包的方法进行反射调用的时候。\n\n*   当虚拟机启动时，用户需要指定执行主类的时候，说白了就是虚拟机会先初始化 main 方法这个类。\n\n*   在使用 JDK 7 新加入的动态语言支持时，如果一个 jafva.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getstatic、REF_putstatic、REF_invokeStatic、REF_newInvokeSpecial 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，需要先对其进行初始化。\n\n*   当一个接口中定义了 JDK 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n其实上面只有前四个大家需要知道就好了，后面两个比较冷门。\n\n> 如果说要回答类加载的话，其实聊到这里已经可以了，但是为了完整性，我们索性把后面两个过程也来聊一聊。\n\n### 使用\n\n这个阶段没什么可说的，就是初始化之后的代码由 JVM 来动态调用执行。\n\n### 卸载\n\n当代表一个类的 Class 对象不再被引用，那么 Class 对象的生命周期就结束了，对应的在方法区中的数据也会被卸载。\n\n> ⚠️但是需要注意一点：JVM 自带的类加载器装载的类，是不会卸载的，由用户自定义的类加载器加载的类是可以卸载的。\n\n在 JVM 中，对象是如何创建的？\n-----------------\n\n如果要回答对象是怎么创建的，我们一般想到的回答是直接 `new` 出来就行了，这个回答不仅局限于编程中，也融入在我们生活中的方方面面。\n\n但是遇到面试的时候你只回答一个 \"new 出来就行了\" 显然是不行的，因为面试更趋向于让你解释当程序执行到 new 这条指令时，它的背后发生了什么。\n\n所以你需要从 JVM 的角度来解释这件事情。\n\n当虚拟机遇到一个 new 指令时（其实就是字节码），首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用所代表的类是否已经被加载、解析和初始化。\n\n> 因为此时很可能不知道具体的类是什么，所以这里使用的是符号引用。\n\n如果发现这个类没有经过上面类加载的过程，那么就执行相应的类加载过程。\n\n类检查完成后，接下来虚拟机将会为新生对象**分配内存**，对象所需的大小在类加载完成后便可确定（我会在下面的面试题中介绍）。\n\n分配内存相当于是把一块固定的内存块从堆中划分出来。划分出来之后，虚拟机会将分配到的内存空间都初始化为零值，如果使用了 `TLAB`（本地线程分配缓冲），这一项初始化工作可以提前在 TLAB 分配时进行。这一步操作保证了对象实例字段在 Java 代码中可以不赋值就能直接使用。\n\n接下来，Java 虚拟机还会对对象进行必要的设置，比如确定对象是哪个类的实例、对象的 hashcode、对象的 gc 分代年龄信息。这些信息存放在对象的对象头（Object Header）中。\n\n如果上面的工作都做完后，从虚拟机的角度来说，一个新的对象就创建完毕了；但是对于程序员来说，对象创建才刚刚开始，因为构造函数，即 Class 文件中的 `<init>()` 方法还没有执行，所有字段都为默认的零值。new 指令之后才会执行 `<init>()` 方法，然后按照程序员的意愿对对象进行初始化，这样一个对象才可能被完整的构造出来。\n\n内存分配方式有哪些呢？\n-----------\n\n在类加载完成后，虚拟机需要为新生对象分配内存，为对象分配内存相当于是把一块确定的区域从堆中划分出来，这就涉及到一个问题，**要划分的堆区是否规整**。\n\n假设 Java 堆中内存是规整的，所有使用过的内存放在一边，未使用的内存放在一边，中间放着一个指针，这个指针为分界指示器。那么为新对象分配内存空间就相当于是把指针向空闲的空间挪动对象大小相等的距离，这种内存分配方式叫做`指针碰撞(Bump The Pointer)`。\n\n如果 Java 堆中的内存并不是规整的，已经被使用的内存和未被使用的内存相互交错在一起，这种情况下就没有办法使用指针碰撞，这里就要使用另外一种记录内存使用的方式：`空闲列表(Free List)`，空闲列表维护了一个列表，这个列表记录了哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。\n\n所以，上述两种分配方式选择哪个，取决于 Java 堆是否规整来决定。在一些垃圾收集器的实现中，Serial、ParNew 等带压缩整理过程的收集器，使用的是指针碰撞；而使用 CMS 这种基于清除算法的收集器时，使用的是空闲列表，具体的垃圾收集器我们后面会聊到。\n\n请你说一下对象的内存布局？\n-------------\n\n在 `hotspot` 虚拟机中，对象在内存中的布局分为三块区域：\n\n*   `对象头(Header)`\n\n*   `实例数据(Instance Data)`\n\n*   `对齐填充(Padding)`\n\n这三块区域的内存分布如下图所示\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544691.jpeg)\n\n我们来详细介绍一下上面对象中的内容。\n\n### 对象头 Header\n\n对象头 Header 主要包含 MarkWord 和对象指针 Klass Pointer，如果是数组的话，还要包含数组的长度。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544746.jpeg)\n\n在 32 位的虚拟机中 MarkWord ，Klass Pointer 和数组长度分别占用 32 位，也就是 4 字节。\n\n如果是 64 位虚拟机的话，MarkWord ，Klass Pointer 和数组长度分别占用 64 位，也就是 8 字节。\n\n在 32 位虚拟机和 64 位虚拟机的 Mark Word 所占用的字节大小不一样，32 位虚拟机的 Mark Word 和 Klass Pointer 分别占用 32 bits 的字节，而 64 位虚拟机的 Mark Word 和 Klass Pointer 占用了 64 bits 的字节，下面我们以 32 位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544554.jpeg)\n\n用中文翻译过来就是\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544702.jpeg)\n\n*   无状态也就是`无锁`的时候，对象头开辟 25 bit 的空间用来存储对象的 hashcode ，4 bit 用于存放分代年龄，1 bit 用来存放是否偏向锁的标识位，2 bit 用来存放锁标识位为 01。\n\n*   `偏向锁` 中划分更细，还是开辟 25 bit 的空间，其中 23 bit 用来存放线程 ID，2bit 用来存放 epoch，4bit 存放分代年龄，1 bit 存放是否偏向锁标识， 0 表示无锁，1 表示偏向锁，锁的标识位还是 01。\n\n*   `轻量级锁`中直接开辟 30 bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志位，其标志位为 00。\n\n*   `重量级锁`中和轻量级锁一样，30 bit 的空间用来存放指向重量级锁的指针，2 bit 存放锁的标识位，为 11\n\n*   `GC标记`开辟 30 bit 的内存空间却没有占用，2 bit 空间存放锁标志位为 11。\n\n其中无锁和偏向锁的锁标志位都是 01，只是在前面的 1 bit 区分了这是无锁状态还是偏向锁状态。\n\n关于为什么这么分配的内存，我们可以从 `OpenJDK` 中的 markOop.hpp 类中的枚举窥出端倪\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544018.jpeg)\n\n来解释一下\n\n*   age_bits 就是我们说的分代回收的标识，占用 4 字节\n\n*   lock_bits 是锁的标志位，占用 2 个字节\n\n*   biased_lock_bits 是是否偏向锁的标识，占用 1 个字节。\n\n*   max_hash_bits 是针对无锁计算的 hashcode 占用字节数量，如果是 32 位虚拟机，就是 32 - 4 - 2 -1 = 25 byte，如果是 64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以 64 位的 hashcode 占用 31 byte。\n\n*   hash_bits 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取 31，否则取真实的字节数\n\n*   cms_bits 我觉得应该是不是 64 位虚拟机就占用 0 byte，是 64 位就占用 1byte\n\n*   epoch_bits 就是 epoch 所占用的字节大小，2 字节。\n\n在上面的虚拟机对象头分配表中，我们可以看到有几种锁的状态：无锁（无状态），偏向锁，轻量级锁，重量级锁，其中轻量级锁和偏向锁是 JDK1.6 中对 synchronized 锁进行优化后新增加的，其目的就是为了大大优化锁的性能，所以在 JDK 1.6 中，使用 synchronized 的开销也没那么大了。其实从锁有无锁定来讲，还是只有无锁和重量级锁，偏向锁和轻量级锁的出现就是增加了锁的获取性能而已，并没有出现新的锁。\n\n所以我们的重点放在对 synchronized 重量级锁的研究上，当 monitor 被某个线程持有后，它就会处于锁定状态。在 HotSpot 虚拟机中，monitor 的底层代码是由 `ObjectMonitor` 实现的，其主要数据结构如下（位于 HotSpot 虚拟机源码 ObjectMonitor.hpp 文件，C++ 实现的）\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544172.jpeg)\n\n这段 C++ 中需要注意几个属性：_WaitSet 、 _EntryList 和 _Owner，每个等待获取锁的线程都会被封装称为 `ObjectWaiter` 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544929.jpeg)\n\n_Owner 是指向了 ObjectMonitor 对象的线程，而 _WaitSet 和 _EntryList 就是用来保存每个线程的列表。\n\n> 那么这两个列表有什么区别呢？这个问题我和你聊一下锁的获取流程你就清楚了。\n\n**锁的两个列表**\n\n当多个线程同时访问某段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的 monitor 之后，就会进入 _Owner 区域，并把 ObjectMonitor 对象的 _Owner 指向为当前线程，并使 _count + 1，如果调用了释放锁（比如 wait）的操作，就会释放当前持有的 monitor ，owner = null， _count - 1，同时这个线程会进入到 _WaitSet 列表中等待被唤醒。如果当前线程执行完毕后也会释放 monitor 锁，只不过此时不会进入 _WaitSet 列表了，而是直接复位 _count 的值。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544437.jpeg)\n\nKlass Pointer 表示的是类型指针，也就是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\n\n> 你可能不是很理解指针是个什么概念，你可以简单理解为指针就是指向某个数据的地址。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544199.jpeg)\n\n### 实例数据 Instance Data\n\n实例数据部分是对象真正存储的有效信息，也是代码中定义的各个字段的字节大小，比如一个 byte 占 1 个字节，一个 int 占用 4 个字节。\n\n### 对齐 Padding\n\n对齐不是必须存在的，它只起到了占位符 (%d, %c 等) 的作用。这就是 JVM 的要求了，因为 HotSpot JVM 要求对象的起始地址必须是 8 字节的整数倍，也就是说对象的字节大小是 8 的整数倍，不够的需要使用 Padding 补全。\n\n对象访问定位的方式有哪些？\n-------------\n\n我们创建一个对象的目的当然就是为了使用它，但是，一个对象被创建出来之后，在 JVM 中是如何访问这个对象的呢？一般有两种方式：**通过句柄访问**和 **通过直接指针访问**。\n\n* 如果使用句柄访问方式的话，Java 堆中可能会划分出一块内存作为句柄池，引用（reference）中存储的是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息。如下图所示。\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg)\n\n* 如果使用直接指针访问的话，Java 堆中对象的内存布局就会有所区别，栈区引用指示的是堆中的实例数据的地址，如果只是访问对象本身的话，就不会多一次直接访问的开销，而对象类型数据的指针是存在于方法区中，如果定位的话，需要多一次直接定位开销。如下图所示\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg)\n\n这两种对象访问方式各有各的优势，使用句柄最大的好处就是引用中存储的是句柄地址，对象移动时只需改变句柄的地址就可以，而无需改变对象本身。\n\n使用直接指针来访问速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因为这类的开销也是值得优化的地方。\n\n上面聊到了对象的两种数据，一种是对象的实例数据，这没什么好说的，就是对象实例字段的数据，一种是对象的类型数据，这个数据说的是对象的类型、父类、实现的接口和方法等。\n\n如何判断对象已经死亡？\n-----------\n\n我们大家知道，基本上所有的对象都在堆中分布，当我们不再使用对象的时候，垃圾收集器会对无用对象进行回收♻️，那么 JVM 是如何判断哪些对象已经是 \"无用对象\" 的呢？\n\n这里有两种判断方式，首先我们先来说第一种：**引用计数法**。\n\n引用计数法的判断标准是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就会加一；当引用失效时，计数器的值就会减一；只要任何时刻计数器为零的对象就是不会再被使用的对象。虽然这种判断方式非常简单粗暴，但是往往很有用，不过，在 Java 领域，主流的 Hotspot 虚拟机实现并没有采用这种方式，因为引用计数法不能解决对象之间的循环引用问题。\n\n循环引用问题简单来讲就是两个对象之间互相依赖着对方，除此之外，再无其他引用，这样虚拟机无法判断引用是否为零从而进行垃圾回收操作。\n\n还有一种判断对象无用的方法就是**可达性分析算法**。\n\n当前主流的 JVM 都采用了可达性分析算法来进行判断，这个算法的基本思路就是通过一系列被称为`GC Roots`的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径被称为`引用链`（Reference Chain），如果某个对象到 GC Roots 之间没有任何引用链相连接，或者说从 GC Roots 到这个对象不可达时，则证明此这个对象是无用对象，需要被垃圾回收。\n\n这种引用方式如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg)\n\n如上图所示，从枚举根节点 GC Roots 开始进行遍历，object 1 、2、3、4 是存在引用关系的对象，而 object 5、6、7 之间虽然有关联，但是它们到 GC Roots 之间是不可达的，所以被认为是可以回收的对象。\n\n在 Java 技术体系中，可以作为 GC Roots 进行检索的对象主要有\n\n*   在虚拟机栈（栈帧中的本地变量表）中引用的对象。\n\n*   方法区中类静态属性引用的对象，比如 Java 类的引用类型静态变量。\n\n*   方法区中常量引用的对象，比如字符串常量池中的引用。\n\n*   在本地方法栈中 JNI 引用的对象。\n\n*   JVM 内部的引用，比如基本数据类型对应的 Class 对象，一些异常对象比如 NullPointerException、OutOfMemoryError 等，还有系统类加载器。\n\n*   所有被 synchronized 持有的对象。\n\n*   还有一些 JVM 内部的比如 JMXBean、JVMTI 中注册的回调，本地代码缓存等。\n\n*   根据用户所选的垃圾收集器以及当前回收的内存区域的不同，还可能会有一些对象临时加入，共同构成 GC Roots 集合。\n\n虽然我们上面提到了两种判断对象回收的方法，但无论是引用计数法还是判断 GC Roots 都离不开`引用`这一层关系。\n\n这里涉及到到强引用、软引用、弱引用、虚引用的引用关系，你可以阅读作者的这一篇文章\n\n[小心点，别被当成垃圾回收了。](https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247495968&idx=1&sn=48de091f4fabdf682a9f8b5ddd8db936&chksm=c04ae67ef73d6f68935382dcaa0bd4d538a9e0b45ee49500ee7e2356cc24dba750b197960477&token=1191632986&lang=zh_CN&scene=21#wechat_redirect)\n\n如何判断一个不再使用的类？\n-------------\n\n判断一个类型属于 \"不再使用的类\" 需要满足下面这三个条件\n\n*   这个类所有的实例已经被回收，也就是 Java 堆中不存在该类及其任何这个类字类的实例\n\n*   加载这个类的类加载器已经被回收，但是类加载器一般很难会被回收，除非这个类加载器是为了这个目的设计的，比如 OSGI、JSP 的重加载等，否则通常很难达成。\n\n*   这个类对应的 Class 对象没有任何地方被引用，无法在任何时刻通过反射访问这个类的属性和方法。\n\n虚拟机允许对满足上面这三个条件的无用类进行回收操作。\n\nJVM 分代收集理论有哪些？\n--------------\n\n一般商业的虚拟机，大多数都遵循了**分代收集**的设计思想，分代收集理论主要有两条假说。\n\n第一个是**强分代假说**，强分代假说指的是 JVM 认为绝大多数对象的生存周期都是朝生夕灭的；\n\n第二个是**弱分代假说**，弱分代假说指的是只要熬过越多次垃圾收集过程的对象就越难以回收（看来对象也会长心眼）。\n\n就是基于这两个假说理论，JVM 将`堆`区划分为不同的区域，再将需要回收的对象根据其熬过垃圾回收的次数分配到不同的区域中存储。\n\nJVM 根据这两条分代收集理论，把堆区划分为新生代 (Young Generation) 和老年代 (Old Generation) 这两个区域。在新生代中，每次垃圾收集时都发现有大批对象死去，剩下没有死去的对象会直接晋升到老年代中。\n\n上面这两个假说没有考虑对象的引用关系，而事实情况是，对象之间会存在引用关系，基于此又诞生了第三个假说，即**跨代引用假说 (Intergeneration Reference Hypothesis)**，跨代引用相比较同代引用来说仅占少数。\n\n正常来说存在相互引用的两个对象应该是同生共死的，不过也会存在特例，如果一个新生代对象跨代引用了一个老年代的对象，那么垃圾回收的时候就不会回收这个新生代对象，更不会回收老年代对象，然后这个新生代对象熬过一次垃圾回收进入到老年代中，这时候跨代引用才会消除。\n\n根据跨代引用假说，我们不需要因为老年代中存在少量跨代引用就去直接扫描整个老年代，也不用在老年代中维护一个列表记录有哪些跨代引用，实际上，可以直接在新生代中维护一个**记忆集 (Remembered Set)**，由这个记忆集把老年代划分称为若干小块，标识出老年代的哪一块会存在跨代引用。\n\n记忆集的图示如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545443.jpeg)\n\n从图中我们可以看到，记忆集中的每个元素分别对应内存中的一块连续区域是否有跨代引用对象，如果有，该区域会被标记为 “脏的”（dirty），否则就是 “干净的”（clean）。这样在垃圾回收时，只需要扫描记忆集就可以简单地确定跨代引用的位置，是个典型的空间换时间的思路。\n\n聊一聊 JVM 中的垃圾回收算法？\n-----------------\n\n在聊具体的垃圾回收算法之前，需要明确一点，哪些对象需要被垃圾收集器进行回收？也就是说需要先判断哪些对象是 \"垃圾\"？\n\n判断的标准我在上面**如何判断对象已经死亡**的问题中描述了，有两种方式，一种是引用计数法，这种判断标准就是给对象添加一个引用计数器，引用这个对象会使计数器的值 + 1，引用失效后，计数器的值就会 -1。但是这种技术无法解决对象之间的循环引用问题。\n\n还有一种方式是 GC Roots，GC Roots 这种方式是以 Root 根节点为核心，逐步向下搜索每个对象的引用，搜索走过的路径被称为引用链，如果搜索过后这个对象不存在引用链，那么这个对象就是无用对象，可以被回收。GC Roots 可以解决循环引用问题，所以一般 JVM 都采用的是这种方式。\n\n解决循环引用代码描述：\n\n```java\npublic class test{\n    public static void main(String[]args){\n        A a = new A();\n        B b = new B();\n        a=null;\n        b=null;\n    }\n}\nclass A {\n \n    public B b;\n}\nclass B {\n    public A a;\n}\n\n\n```\n\n基于 GC Roots 的这种思想，发展出了很多垃圾回收算法，下面我们就来聊一聊这些算法。\n\n### 标记 - 清除算法\n\n标记 - 清除 (Mark-Sweep) 这个算法可以说是最早最基础的算法了，标记 - 清除顾名思义分为两个阶段，即标记和清除阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。当然也可以标记存活的对象，回收未被标记的对象。这个标记的过程就是垃圾判定的过程。\n\n后续大部分垃圾回收算法都是基于标记 - 算法思想衍生的，只不过后续的算法弥补了标记 - 清除算法的缺点，那么它有什么缺点呢？主要有两个\n\n*   **执行效率不稳定**，因为假如说堆中存在大量无用对象，而且大部分需要回收的情况下，这时必须进行大量的标记和清除，导致标记和清除这两个过程的执行效率随对象的数量增长而降低。\n\n*   **内存碎片化**，标记 - 清除算法会在堆区产生大量不连续的内存碎片。碎片太多会导致在分配大对象时没有足够的空间，不得不进行一次垃圾回收操作。\n\n标记算法的示意图如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545881.jpeg)\n\n### 标记 - 复制算法\n\n由于标记 - 清除算法极易产生内存碎片，研究人员提出了标记 - 复制算法，标记 - 复制算法也可以简称为复制算法，复制算法是一种**半区复制**，它会将内存大小划分为相等的两块，每次只使用其中的一块，用完一块再用另外一块，然后再把用过的一块进行清除。虽然解决了部分内存碎片的问题，但是复制算法也带来了新的问题，即**复制开销**，不过这种开销是可以降低的，如果内存中大多数对象是无用对象，那么就可以把少数的存活对象进行复制，再回收无用的对象。\n\n不过复制算法的缺陷也是显而易见的，那就是内存空间缩小为原来的一半，空间浪费太明显。标记 - 复制算法示意图如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545639.jpeg)\n\n现在 Java 虚拟机大多数都是用了这种算法来回收新生代，因为经过研究表明，新生代对象 98% 都熬不过第一轮收集，因此不需要按照 1 ：1 的比例来划分新生代的内存空间。\n\n基于此，研究人员提出了一种 Appel 式回收，Appel 式回收的具体做法是把新生代分为一块较大的 _Eden_ 空间和两块 _Survivor_ 空间，每次分配内存都只使用 Eden 和其中的一块 Survivor 空间，发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已使用过的 Survivor 空间。\n\n在主流的 HotSpot 虚拟机中，默认的 Eden 和 Survivor 大小比例是 8：1，也就是每次新生代中可用内存空间为整个新生代容量的 90%，只有一个 Survivor 空间，所以会浪费掉 10% 的空间。这个 8：1 只是一个理论值，也就是说，不能保证每次都有不超过 10% 的对象存活，所以，当进行垃圾回收后如果 Survivor 容纳不了可存活的对象后，就需要其他内存空间来进行**帮助**，这种方式就叫做**内存担保 (Handle Promotion)** ，通常情况下，作为担保的是老年代。\n\n### 标记 - 整理算法\n\n标记 - 复制算法虽然解决了内存碎片问题，但是没有解决复制对象存在大量开销的问题。为了解决复制算法的缺陷，充分利用内存空间，提出了标记 - 整理算法。该算法标记阶段和标记 - 清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545233.jpeg)\n\n什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\n-------------------------\n\n为了解决跨代引用问题，提出了记忆集这个概念，记忆集是一个在新生代中使用的数据结构，它相当于是记录了一些指针的集合，指向了老年代中哪些对象存在跨代引用。\n\n记忆集的实现有不同的粒度\n\n*   **字长精度**：每个记录精确到一个字长，机器字长就是处理器的寻址位数，比如常见的 32 位或者 64 位处理器，这个精度决定了机器访问物理内存地址的指针长度，字中包含跨代指针。\n\n*   **对象精度**：每个记录精确到一个对象，该对象里含有跨代指针。\n\n*   **卡精度**：每个记录精确到一块内存区域，区域内含有跨代指针。\n\n其中卡精度是使用了卡表作为记忆集的实现，关于记忆集和卡表的关系，大家可以想象成是 HashMap 和 Map 的关系。\n\n什么是卡页？\n------\n\n卡表其实就是一个字节数组\n\n```java\nCARD_TABLE[this address >> 9] = 0;\n```\n\n字节数组 CARD_TABLE 的每一个元素都对应着内存区域中一块特定大小的内存块，这个内存块就是**卡页**，一般来说，卡页都是 2 的 N 次幂字节数，通过上面的代码我们可以知道，卡页一般是 2 的 9 次幂，这也是 HotSpot 中使用的卡页，即 512 字节。\n\n一个卡页的内存通常包含不止一个对象，只要卡页中有一个对象的字段存在跨代指针，那就将对应卡表的数组元素的值设置为 1，称之为这个元素变`脏`了，没有标示则为 0 。在垃圾收集时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，然后把他们加入 GC Roots 进行扫描。\n\n所以，卡页和卡表主要用来解决跨代引用问题的。\n\n什么是写屏障？写屏障带来的问题？\n----------------\n\n如果有其他分代区域中对象引用了本区域的对象，那么其对应的卡表元素就会变脏，这个引用说的就是对象赋值，也就是说卡表元素会变脏发生在对象赋值的时候，那么如何在对象赋值的时候更新维护卡表呢？\n\n在 HotSpot 虚拟机中使用的是**写屏障 (Write Barrier)** 来维护卡表状态的，这个写屏障和我们内存屏障完全不同，希望读者不要搞混了。\n\n这个写屏障其实就是一个 Aop 切面，在引用对象进行赋值时会产生一个**环形通知 (Around)**，环形通知就是切面前后分别产生一个通知，因为这个又是写屏障，所以在赋值前的部分写屏障叫做写前屏障，在赋值后的则叫做写后屏障。\n\n写屏障会带来两个问题\n\n**无条件写屏障带来的性能开销**\n\n每次对引用的更新，无论是否更新了老年代对新生代对象的引用，都会进行一次写屏障操作。显然，这会增加一些额外的开销。但是，扫描整个老年代相比较，这个开销就低得多了。\n\n不过，在高并发环境下，写屏障又带来了伪共享（false sharing）问题。\n\n**高并发下伪共享带来的性能开销**\n\n在高并发情况下，频繁的写屏障很容易发生伪共享（false sharing），从而带来性能开销。\n\n假设 CPU 缓存行大小为 64 字节，由于一个卡表项占 1 个字节，这意味着，64 个卡表项将共享同一个缓存行。\n\nHotSpot 每个卡页为 512 字节，那么一个缓存行将对应 64 个卡页一共 64*512 = 32K B。\n\n如果不同线程对对象引用的更新操作，恰好位于同一个 32 KB 区域内，这将导致同时更新卡表的同一个缓存行，从而造成缓存行的写回、无效化或者同步操作，间接影响程序性能。\n\n一个简单的解决方案，就是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表项未被标记过才将其标记为脏的。\n\n这就是 JDK  7 中引入的解决方法，引入了一个新的 JVM 参数 _-XX:+UseCondCardMark_，在执行写屏障之前，先简单的做一下判断。如果卡页已被标识过，则不再进行标识。\n\n简单理解如下：\n\n```java\nif (CARD_TABLE [this address >> 9] != 0)\n  CARD_TABLE [this address >> 9] = 0;\n\n\n```\n\n与原来的实现相比，只是简单的增加了一个判断操作。\n\n虽然开启 _-XX:+UseCondCardMark_ 之后多了一些判断开销，但是却可以避免在高并发情况下可能发生的并发写卡表问题。通过减少并发写操作，进而避免出现伪共享问题（false sharing）。\n\n什么是三色标记法？三色标记法会造成哪些问题？\n----------------------\n\n根据可达性算法的分析可知，如果要找出存活对象，需要从 GC Roots 开始遍历，然后搜索每个对象是否可达，如果对象可达则为存活对象，在 GC Roots 的搜索过程中，按照**对象和其引用是否被访问过**这个条件会分成下面三种颜色：\n\n*   白色：白色表示 GC Roots 的遍历过程中没有被访问过的对象，出现白色显然在可达性分析刚刚开始的阶段，这个时候所有对象都是白色的，如果在分析结束的阶段，仍然是白色的对象，那么代表不可达，可以进行回收。\n\n*   灰色：灰色表示对象已经被访问过，但是这个对象的引用还没有访问完毕。\n\n*   黑色：黑色表示此对象已经被访问过了，而且这个对象的引用也已经被访问了。\n\n> 注：如果标记结束后对象仍为白色，意味着已经 “找不到” 该对象在哪了，不可能会再被重新引用。\n\n现代的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：比如白色 / 黑色集合一般都不会出现（但是有其他体现颜色的地方）、灰色集合可以通过栈 / 队列 / 缓存日志等方式进行实现、遍历方式可以是广度 / 深度遍历等等。\n\n三色标记法会造成两种问题，这两种问题所出现的环境都是由于**用户环境和收集器并行工作造成的** 。当用户线程正在修改引用关系，此时收集器在回收引用关系，此时就会造成把原本已经消亡的对象标记为存活，如果出现这种状况的话，问题不大，下次再让收集器重新收集一波就完了，但是还有一种情况是把存活的对象标记为死亡，这种状况就会造成不可预知的后果。\n\n针对上面这两种对象消失问题，业界有两种处理方式，一种是**增量更新 (Incremental Update)** ，一种是**原是快照 (Snapshot At The Beginning, SATB)**。\n\n请你介绍一波垃圾收集器\n-----------\n\n垃圾收集器是面试的常考，也是必考点，只要涉及到 JVM 的相关问题，都会围绕着垃圾收集器来做一波展开，所以，有必要了解一下这些垃圾收集器。\n\n垃圾收集器有很多，不同商家、不同版本的 JVM 所提供的垃圾收集器可能会有很大差别，我们主要介绍 HotSpot 虚拟机中的垃圾收集器。\n\n垃圾收集器是垃圾回收算法的具体实现，我们上面提到过，垃圾回收算法有标记 - 清除算法、标记 - 整理、标记 - 复制，所以对应的垃圾收集器也有不同的实现方式。\n\n我们知道，HotSpot 虚拟机中的垃圾收集都是分代回收的，所以根据不同的分代，可以把垃圾收集器分为\n\n新生代收集器：Serial、ParNew、Parallel Scavenge；\n\n老年代收集器：Serial Old、Parallel Old、CMS；\n\n整堆收集器：G1；\n\n### Serial 收集器\n\nSerial 收集器是一种新生代的垃圾收集器，它是一个单线程工作的收集器，使用复制算法来进行回收，单线程工作不是说这个垃圾收集器只有一个，而是说这个收集器在工作时，必须暂停其他所有工作线程，这种暴力的暂停方式就是 **Stop The World**，Serial 就好像是寡头垄断一样，只要它一发话，其他所有的小弟（线程）都得给它让路。Serial 收集器的示意图如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545313.jpeg)\n\n> SefePoint 全局安全点：它就是代码中的一段特殊的位置，在所有用户线程到达 SafePoint 之后，用户线程挂起，GC 线程会进行清理工作。\n\n虽然 Serial 有 STW 这种显而易见的缺点，不过，从其他角度来看，Serial 还是很讨喜的，它还有着优于其他收集器的地方，那就是简单而高效，对于内存资源首先的环境，它是所有收集器中额外内存消耗最小的，对于单核处理器或者处理器核心较少的环境来说，Serial 收集器由于没有线程交互开销，所以 Serial 专心做垃圾回收效率比较高。\n\n### ParNew 收集器\n\nParNew 是 Serial 的多线程版本，除了同时使用多条线程外，其他参数和机制（STW、回收策略、对象分配规则）都和 Serial 完全一致，ParNew 收集器的示意图如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545178.jpeg)\n\n虽然 ParNew 使用了多条线程进行垃圾回收，但是在单线程环境下它绝对不会比 Serial 收集效率更高，因为多线程存在线程交互的开销，但是随着可用 CPU 核数的增加，ParNew 的处理效率会比 Serial 更高效。\n\n### Parallel Scavenge 收集器\n\nParallel Scavenge 收集器也是一款新生代收集器，它同样是基于标记 - 复制算法实现的，而且它也能够并行收集，这么看来，表面上 Parallel Scavenge 与 ParNew 非常相似，那么它们之间有什么区别呢？\n\nParallel Scavenge 的关注点主要在**达到一个可控制的吞吐量上面**。吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比。也就是\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg)\n\n这里给大家举一个吞吐量的例子，如果执行用户代码的时间 + 运行垃圾收集的时间总共耗费了 100 分钟，其中垃圾收集耗费掉了 1 分钟，那么吞吐量就是 99%。停顿时间越短就越适合需要与用户交互或需要保证服务响应质量，良好的响应速度可以提升用户体验，而高吞吐量可以最高效率利用处理器资源。\n\n### Serial Old 收集器\n\n前面介绍了一下 Serial，我们知道它是一个新生代的垃圾收集，使用了标记 - 复制算法。而这个 Serial Old 收集器却是 Serial 的老年版本，它同样也是一个单线程收集器，使用的是**标记 - 整理**算法，Serial Old 收集器有两种用途：一种是在 JDK 5 和之前的版本与 Parallel Scavenge 收集器搭配使用，另外一种用法就是作为 `CMS` 收集器的备选，CMS 垃圾收集器我们下面说，Serial Old 的收集流程如下\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/A3ibcic1Xe0iaTTaoE1HA8uE2z8agCUWibYmsr5qnsJKzjvNXjXNCrib8u5HbWlEUWwNPadXLAib7wYHnDL1QP9Gq7jg/640?wx_fmt=jpeg)\n\n### Parallel Old 收集器\n\n前面我们介绍了 Parallel Scavenge 收集器，现在来介绍一下 Parallel Old 收集器，它是 Parallel Scavenge 的老年版本，支持多线程并发收集，基于标记 - 整理算法实现，JDK 6 之后出现，吞吐量优先可以考虑 Parallel Scavenge + Parallel Old 的搭配\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg)\n\n### CMS 收集器\n\n`CMS`收集器的主要目标是获取最短的回收停顿时间，它的全称是 _Concurrent Mark Sweep_，从这个名字就可以知道，这个收集器是基于标记 - 清除算法实现的，而且支持并发收集，它的运行过程要比上面我们提到的收集器复杂一些，它的工作流程如下：\n\n*   初始标记（CMS initial mark）\n\n*   并发标记（CMS concurrent mark）\n\n*   重新标记（CMS remark）\n\n*   并发清除（CMS concurrent sweep）\n\n对于上面这四个步骤，初始标记和并发标记都需要 _Stop The World_，初始标记只是标记一下和 GC Roots 直接关联到的对象，速度较快；并发标记阶段就是从 GC Roots 的直接关联对象开始遍历整个对象图的过程。这个过程时间比较长但是不需要停顿用户线程，也就是说与垃圾收集线程一起并发运行。并发标记的过程中，可能会有错标或者漏标的情况，此时就需要在重新标记一下，最后是并发清除阶段，清理掉标记阶段中判断已经死亡的对象。\n\nCMS 的收集过程如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg)\n\nCMS 是一款非常优秀的垃圾收集器，但是没有任何收集器能够做到完美的程度，CMS 也是一样，CMS 至少有三个缺点：\n\n* CMS 对处理器资源非常敏感，在并发阶段，虽然不会造成用户线程停顿，但是却会因为占用一部分线程而导致应用程序变慢，降低总吞吐量。\n\n* CMS 无法处理**浮动垃圾**，有可能出现 _Concurrent Mode Failure_ 失败进而导致另一次完全 _Stop The World_ 的 _Full GC_ 产生。\n\n  > 什么是浮动垃圾呢？由于并发标记和并发清理阶段，用户线程仍在继续运行，所以程序自然而然就会伴随着新的垃圾不断出现，而且这一部分垃圾出现在标记结束之后，CMS 无法处理这些垃圾，所以只能等到下一次垃圾回收时在进行清理。这一部分垃圾就被称为浮动垃圾。\n\n* CMS 最后一个缺点是并发 - 清除的通病，也就是会有大量的空间碎片出现，这将会给分配大对象带来困难。\n\n### Garbage First 收集器\n\nGarbage First 又被称为 _G1 收集器_，它的出现意味着垃圾收集器走过了一个里程碑，为什么说它是里程碑呢？因为 G1 这个收集器是一种面向局部的垃圾收集器，HotSpot 团队开发这个垃圾收集器为了让它替换掉 CMS 收集器，所以到后来，JDK 9 发布后，G1 取代了 Parallel Scavenge + Parallel Old 组合，成为服务端默认的垃圾收集器，而 CMS 则不再推荐使用。\n\n之前的垃圾收集器存在回收区域的局限性，因为之前这些垃圾收集器的目标范围要么是整个新生代、要么是整个老年代，要么是整个 Java 堆（Full GC），而 G1 跳出了这个框架，它可以面向堆内存的任何部分来组成**回收集 (Collection Set，CSet)**，衡量垃圾收集的不再是哪个分代，这就是 G1 的 _Mixed GC_ 模式。\n\nG1 是基于 Region 来进行回收的，Region 就是堆内存中任意的布局，每一块 Region 都可以根据需要扮演 Eden 空间、Survivor 空间或者老年代空间，收集器能够对不同的 Region 角色采用不同的策略来进行处理。Region 中还有一块特殊的区域，这块区域就是 _Humongous_ 区域，它是专门用来存储大对象的，G1 认为只要大小超过了 Region 容量一半的对象即可判定为大对象。如果超过了 Region 容量的大对象，将会存储在连续的 Humongous Region 中，G1 大多数行为都会把 Humongous Region 作为老年代来看待。\n\nG1 保留了新生代（Eden Suvivor）和老年代的概念，但是新生代和老年代不再是固定的了。它们都是一系列区域的动态集合。\n\nG1 收集器的运作过程可以分为以下四步：\n\n*   初始标记：这个步骤也仅仅是标记一下 GC Roots 能够直接关联到的对象；并修改 TAMS 指针的值（每一个 Region 都有两个 RAMS 指针），使得下一阶段用户并发运行时，能够在可用的 Region 中分配对象，这个阶段需要暂停用户线程，但是时间很短。这个停顿是借用 Minor GC 的时候完成的，所以可以忽略不计。\n\n*   并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆中的对象图，找出要回收的对象。当对象图扫描完成后，重新处理 SATB 记录下的在并发时有引用的对象；\n\n*   最终标记：对用户线程做一个短暂的暂停，用于处理并发阶段结束后遗留下来的少量 _SATB_ 记录（一种原始快照，用来记录并发标记中某些对象）\n\n*   筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择多个 Region 构成回收集，然后把决定要回收的那一部分 Region 存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。这里的操作设计对象的移动，所以必须要暂停用户线程，由多条收集器线程并行收集\n\n从上面这几个步骤可以看出，除了并发标记外，其余三个阶段都需要暂停用户线程，所以，这个 G1 收集器并非追求**低延迟**，官方给出的设计目标是**在延迟可控的情况下尽可能的提高吞吐量**，担任全功能收集器的重任。\n\n下面是 G1 回收的示意图\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg)\n\nG1 收集器同样也有缺点和问题：\n\n*   第一个问题就是 Region 中存在跨代引用的问题，我们之前知道可以用记忆集来解决跨代引用问题，不过 Region 中的跨代引用要复杂很多；\n\n*   第二个问题就是如何保证收集线程与用户线程互不干扰的运行？CMS 使用的是增量更新算法，G1 使用的是原始快照（SATB），G1 为 Region 分配了两块 TAMS 指针，把 Region 中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须在这两个指针位置以上。如果内存回收速度赶不上内存分配速度，G1 收集器也要冻结用户线程执行，导致 Full GC 而产生长时间的 STW。\n\n*   第三个问题是无法建立可预测的停顿模型。\n\nJVM 常用命令介绍\n----------\n\n下面介绍一下 JVM 中常用的调优、故障处理等工具。\n\n1.  _jps_ ：虚拟机进程工具，全称是 _JVM Process Status Tool_，它的功能和 Linux 中的 _ps_ 类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类 _Main Class_ 所在的本地虚拟机唯一 ID，虽然功能比较单一，但是这个命令绝对是使用最高频的一个命令。\n\n2.  _jstat_：虚拟机统计信息工具，用于监视虚拟机各种运行状态的信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。\n\n3.  _jinfo_：Java 配置信息工具，全称是 _Configuration Info for Java_，它的作用是可以实时调整虚拟机各项参数。\n\n4.  _jmap_：Java 内存映像工具，全称是 _Memory Map For Java_，它用于生成转储快照，用来排查内存占用情况\n\n5.  _jhat_：虚拟机堆转储快照分析工具，全称是 _JVM Heap Analysis Tool_，这个指令通常和 jmap 一起搭配使用，jhat 内置了一个 HTTP/Web 服务器，生成转储快照后可以在浏览器中查看。不过，一般还是 jmap 命令使用的频率比较高。\n\n6.  _jstack_：Java 堆栈跟踪工具，全称是 _Stack Trace for Java_ ，顾名思义，这个命令用来追踪堆栈的使用情况，用于虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条正在执行的方法堆栈的集合。\n\n什么是双亲委派模型？\n----------\n\nJVM 类加载默认使用的是**双亲委派模型**，那么什么是双亲委派模型呢？\n\n这里我们需要先介绍一下三种类加载器：\n\n*   启动类加载器，_Bootstrap Class Loader_，这个类加载器是 C++ 实现的，它是 JVM 的一部分，这个类加载器负责加载存放在 _<JAVA_HOME>\\lib_ 目录，启动类加载器无法被 Java 程序直接引用。这也就是说，JDK 中的常用类的加载都是由启动类加载器来完成的。\n\n*   扩展类加载器，_Extension Class Loader_，这个类加载器是 Java 实现的，它负责加载 _<JAVA_HOME>\\lib\\ext_ 目录。\n\n*   应用程序类加载器，_Application Class Loader_，这个类加载器是由 _sum.misc.Launcher$AppClassLoader_ 来实现，它负责加载 _ClassPath_ 上所有的类库，如果应用程序中没有定义自己的类加载器，默认使用就是这个类加载器。\n\n所以，我们的 Java 应用程序都是由这三种类加载器来相互配合完成的，当然，用户也可以自己定义类加载器，即 _User Class Loader_，这几个类加载器的模型如下\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545247.jpeg)\n\n上面这几类类加载器构成了不同的层次结构，当我们需要加载一个类时，子类加载器并不会马上去加载，而是依次去请求父类加载器加载，一直往上请求到最高类加载器：启动类加载器。当启动类加载器加载不了的时候，依次往下让子类加载器进行加载。这就是双亲委派模型。\n\n双亲委派模型的缺陷？\n----------\n\n在双亲委派模型中，子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。这就导致了双亲委派模型并不能解决所有的类加载器问题。\n\nJava 提供了很多外部接口，这些接口统称为 _Service Provider Interface, SPI_，允许第三方实现这些接口，而这些接口却是 Java 核心类提供的，由 Bootstrap Class Loader 加载，而一般的扩展接口是由 Application Class Loader 加载的，Bootstrap Class Loader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 Application Class Loader，因为它是最顶层的类加载器。\n\n双亲委派机制的三次破坏\n-----------\n\n虽然双亲委派机制是 Java 强烈推荐给开发者们的类加载器的实现方式，但是并没有强制规定你必须就要这么实现，所以，它一样也存在被破坏的情况，实际上，历史上一共出现三次双亲委派机制被破坏的情况：\n\n*   双亲委派机制第一次被破坏发生在双亲委派机制出现之前，由于双亲委派机制 JDK 1.2 之后才引用的，但类加载的概念在 Java 刚出现的时候就有了，所以引用双亲委派机制之前，设计者们必须兼顾开发者们自定义的一些类加载器的代码，所以在 JDK 1.2 之后的 java.lang.ClassLoader 中添加了一个新的 _findClass_ 方法，引导用户编写类加载器逻辑的时候重写这个 findClass 方法，而不是基于 _loadClass_ 编写。\n\n*   双亲委派机制第二次被破坏是由于它自己模型导致的，由于它只能向上（基础）加载，越基础的类越由上层加载器加载，所以如果基础类型又想要调用用户的代码，该怎么办？这也就是我们上面那个问题所说的 SPI 机制。那么 JDK 团队是如何做的呢？它们引用了一个 **线程上下文类加载器 (Thread Context ClassLoader)**，这个类加载器可以通过 java.lang.Thread 类的 _setContextClassLoader_ 进行设置，如果创建时线程还未设置，它将会从父线程中继承，如果全局没有设置类加载器的话，这个 ClassLoader 就是默认的类加载器。这种行为虽然是一种犯规行为，但是 Java 代码中的 **JNDI、JDBC** 等都是使用这种方式来完成的。直到 JDK 6 ，引用了 _java.util.ServiceLoader_，使用 **META-INF/services** + 责任链的设计模式，才解决了 SPI 的这种加载机制。\n\n*   双亲委派机制第三次被破坏是由于用户对程序的动态需求使热加载、热部署的引入所致。由于时代的变化，我们希望 Java 能像鼠标键盘一样实现热部署，即时加载（load class），引入了 OSGI，OSGI 实现热部署的关键在于它自定义类加载器机制的实现，OSGI 中的每一个 _Bundle_ 也就是模块都有一个自己的类加载器。当需要更换 Bundle 时，就直接把 Bundle 连同类加载器一起替换掉就能够实现热加载。在 OSGI 环境下，类加载器不再遵从双亲委派机制，而是使用了一种更复杂的加载机制。\n\n常见的 JVM 调优参数有哪些？\n----------------\n\n*   -Xms256m：初始化堆大小为 256m；\n\n*   -Xmx2g：最大内存为 2g；\n\n*   -Xmn50m：新生代的大小 50m；\n\n*   -XX:+PrintGCDetails 打印 gc 详细信息；\n\n*   -XX:+HeapDumpOnOutOfMemoryError  在发生 OutOfMemoryError 错误时，来 dump 出堆快照；\n\n*   -XX:NewRatio=4    设置年轻的和老年代的内存比例为 1:4；\n\n*   -XX:SurvivorRatio=8 设置新生代 Eden 和 Survivor 比例为 8:2；\n\n*   -XX:+UseSerialGC   新生代和老年代都用串行收集器 Serial + Serial Old\n\n*   -XX:+UseParNewGC 指定使用 ParNew + Serial Old 垃圾回收器组合；\n\n*   -XX:+UseParallelGC  新生代使用 Parallel Scavenge，老年代使用 Serial Old\n\n*   -XX:+UseParallelOldGC：新生代 ParallelScavenge + 老年代 ParallelOld 组合；\n\n*   -XX:+UseConcMarkSweepGC：新生代使用 ParNew，老年代使用 CMS；\n\n*   -XX:NewSize：新生代最小值；\n\n*   -XX:MaxNewSize：新生代最大值\n\n*   -XX:MetaspaceSize 元空间初始化大小\n\n*   -XX:MaxMetaspaceSize 元空间最大值\n\n后记\n--\n\n这篇文章是 JVM 面试题的第二版，新增了很多内容，写的时间也比较长了，如果你觉得文章还不错的话，大家三连走起！另外，分享到朋友圈是对我莫大的支持，感谢！不骗你，看完真的需要一小时。\n","slug":"深入解析JVM-","published":1,"updated":"2024-12-17T01:13:50.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyow001pj0kr05lx9r99","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg\" alt=\"题图\"></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"JVM-的主要作用是什么？\"><a href=\"#JVM-的主要作用是什么？\" class=\"headerlink\" title=\"JVM 的主要作用是什么？\"></a>JVM 的主要作用是什么？</h2><p>JVM 就是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码 （字节码），就可以在不同的平台上运行。</p>\n<!--more-->\n<h2 id=\"请你描述一下-Java-的内存区域？\"><a href=\"#请你描述一下-Java-的内存区域？\" class=\"headerlink\" title=\"请你描述一下 Java 的内存区域？\"></a>请你描述一下 Java 的内存区域？</h2><p>JVM 在执行 Java 程序的过程中会把它管理的内存分为若干个不同的区域，这些组成部分有些是线程私有的，有些则是线程共享的，Java 内存区域也叫做运行时数据区，它的具体划分如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021541641.jpeg\"></p>\n<ul>\n<li>  <code>虚拟机栈</code> : Java 虚拟机栈是线程私有的数据区，Java 虚拟机栈的生命周期与线程相同，虚拟机栈也是局部变量的存储位置。方法在执行过程中，会在虚拟机栈中创建一个 <code>栈帧(stack frame)</code>。每个方法执行的过程就对应了一个入栈和出栈的过程。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542066.jpeg\"></p>\n<ul>\n<li><p><code>本地方法栈</code>: 本地方法栈也是线程私有的数据区，本地方法栈存储的区域主要是 Java 中使用 <code>native</code> 关键字修饰的方法所存储的区域。</p>\n</li>\n<li><p><code>程序计数器</code>：程序计数器也是线程私有的数据区，这部分区域用于存储线程的指令地址，用于判断线程的分支、循环、跳转、异常、线程切换和恢复等功能，这些都通过程序计数器来完成。</p>\n</li>\n<li><p><code>方法区</code>：方法区是各个线程共享的内存区域，它用于存储虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n</li>\n<li><p><code>堆</code>：堆是线程共享的数据区，堆是 JVM 中最大的一块存储区域，所有的对象实例都会分配在堆上。JDK 1.7 后，字符串常量池从永久代中剥离出来，存放在堆中。</p>\n<p>堆空间的内存分配（默认情况下）：</p>\n<p>命令行上执行如下命令，会查看默认的 JVM 参数。</p>\n<pre class=\" language-java\"><code class=\"language-java\">java <span class=\"token operator\">-</span>XX<span class=\"token operator\">:</span><span class=\"token operator\">+</span>PrintFlagsFinal <span class=\"token operator\">-</span>version\n</code></pre>\n<p>输出的内容非常多，但是只有两行能够反映出上面的内存分配结果</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032772.jpeg\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg\"></p>\n</li>\n<li><p>eden 区：8/10 的年轻代空间</p>\n</li>\n<li><p>survivor 0 : 1/10 的年轻代空间</p>\n</li>\n<li><p>survivor 1 : 1/10 的年轻代空间</p>\n</li>\n<li><p>老年代 ：三分之二的堆空间</p>\n</li>\n<li><p>年轻代 ：三分之一的堆空间</p>\n</li>\n<li><p><code>运行时常量池</code>：运行时常量池又被称为 <code>Runtime Constant Pool</code>，这块区域是方法区的一部分，它的名字非常有意思，通常被称为 <code>非堆</code>。它并不要求常量一定只有在编译期才能产生，也就是并非编译期间将常量放在常量池中，运行期间也可以将新的常量放入常量池中，String 的 intern 方法就是一个典型的例子。</p>\n</li>\n</ul>\n<h2 id=\"请你描述一下-Java-中的类加载机制？\"><a href=\"#请你描述一下-Java-中的类加载机制？\" class=\"headerlink\" title=\"请你描述一下 Java 中的类加载机制？\"></a>请你描述一下 Java 中的类加载机制？</h2><p>Java 虚拟机负责把描述类的数据从 Class 文件加载到系统内存中，并对类的数据进行<strong>校验、转换解析和初始化</strong>，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称之为 Java 的<code>类加载机制</code>。</p>\n<p>一个类从被加载到虚拟机内存开始，到卸载出内存为止，一共会经历下面这些过程。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544280.jpeg\"></p>\n<p>类加载机制一共有五个步骤，分别是<strong>加载、链接、初始化、使用和卸载</strong>阶段，这五个阶段的顺序是确定的。</p>\n<p>其中链接阶段会细分成三个阶段，分别是验证、准备、解析阶段，这三个阶段的顺序是不确定的，这三个阶段通常交互进行。解析阶段通常会在初始化之后再开始，这是为了支持 Java 语言的运行时绑定特性（也被称为<code>动态绑定</code>）。</p>\n<p>下面我们就来聊一下这几个过程。</p>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><p>关于什么时候开始加载这个过程，《Java 虚拟机规范》并没有强制约束，所以这一点我们可以自由实现。加载是整个类加载过程的第一个阶段，在这个阶段，Java 虚拟机需要完成三件事情：</p>\n<ul>\n<li><p>  通过一个类的全限定名来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>  将这个字节流表示的一种存储结构转换为运行时数据区中方法区的数据结构。</p>\n</li>\n<li><p>  在内存中生成一个 Class 对象，这个对象就代表了这个数据结构的访问入口。</p>\n</li>\n</ul>\n<p>《Java 虚拟机规范》并未规定全限定名是如何获取的，所以现在业界有很多获取全限定名的方式：</p>\n<ul>\n<li><p>  从 ZIP 包中读取，最终会改变为 JAR、EAR、WAR 格式。</p>\n</li>\n<li><p>  从网络中获取，最常见的应用就是 Web Applet。</p>\n</li>\n<li><p>  运行时动态生成，使用最多的就是动态代理技术。</p>\n</li>\n<li><p>  由其他文件生成，比如 JSP 应用场景，由 JSP 文件生成对应的 Class 文件。</p>\n</li>\n<li><p>  从数据库中读取，这种场景就比较小了。</p>\n</li>\n<li><p>  可以从加密文件中获取，这是典型的防止 Class 文件被反编译的保护措施。</p>\n</li>\n</ul>\n<p>加载阶段既可以使用虚拟机内置的引导类加载器来完成，也可以使用用户自定义的类加载器来完成。程序员可以通过自己定义类加载器来控制字节流的访问方式。</p>\n<p>数组的加载不需要通过类加载器来创建，它是直接在内存中分配，但是数组的元素类型（数组去掉所有维度的类型）最终还是要靠类加载器来完成加载。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>加载过后的下一个阶段就是验证，因为我们上一步讲到在内存中生成了一个 Class 对象，这个对象是访问其代表数据结构的入口，所以这一步验证的工作就是确保 Class 文件的字节流中的内容符合《Java 虚拟机规范》中的要求，保证这些信息被当作代码运行后，它不会威胁到虚拟机的安全。</p>\n<p>验证阶段主要分为四个阶段的检验：</p>\n<ul>\n<li><p>  文件格式验证。</p>\n</li>\n<li><p>  元数据验证。</p>\n</li>\n<li><p>  字节码验证。</p>\n</li>\n<li><p>  符号引用验证。</p>\n</li>\n</ul>\n<p><strong>文件格式验证</strong></p>\n<p>这一阶段可能会包含下面这些验证点：</p>\n<ul>\n<li><p>  魔数是否以 <code>0xCAFEBABE</code> 开头。</p>\n</li>\n<li><p>  主、次版本号是否在当前 Java 虚拟机接受范围之内。</p>\n</li>\n<li><p>  常量池的常量中是否有不支持的常量类型。</p>\n</li>\n<li><p>  指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</p>\n</li>\n<li><p>  CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据。</p>\n</li>\n<li><p>  Class 文件中各个部分及文件本身是否有被删除的或附加的其他信息。</p>\n</li>\n</ul>\n<p>实际上验证点远远不止有这些，上面这些只是从 HotSpot 源码中摘抄的一小段内容。</p>\n<p><strong>元数据验证</strong></p>\n<p>这一阶段主要是对字节码描述的信息进行语义分析，以确保描述的信息符合《Java 语言规范》，验证点包括</p>\n<ul>\n<li><p>  验证的类是否有父类（除了 Object 类之外，所有的类都应该有父类）。</p>\n</li>\n<li><p>  要验证类的父类是否继承了不允许继承的类。</p>\n</li>\n<li><p>  如果这个类不是抽象类，那么这个类是否实现了父类或者接口中要求的所有方法。</p>\n</li>\n<li><p>  是否覆盖了 final 字段，是否出现了不符合规定的重载等。</p>\n</li>\n</ul>\n<p>需要记住这一阶段只是对《Java 语言规范》的验证。</p>\n<p><strong>字节码验证</strong></p>\n<p>字节码验证阶段是最复杂的一个阶段，这个阶段主要是确定程序语意是否合法、是否是符合逻辑的。这个阶段主要是对类的方法体（Class 文件中的 Code 属性）进行校验分析。这部分验证包括</p>\n<ul>\n<li><p>  确保操作数栈的数据类型和实际执行时的数据类型是否一致。</p>\n</li>\n<li><p>  保证任何跳转指令不会跳出到方法体外的字节码指令上。</p>\n</li>\n<li><p>  保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是不能把父类数据类型赋值给子类等诸如此不安全的类型转换。</p>\n</li>\n<li><p>  其他验证。</p>\n</li>\n</ul>\n<p>如果没有通过字节码验证，就说明验证出问题。但是不一定通过了字节码验证，就能保证程序是安全的。</p>\n<p><strong>符号引用验证</strong></p>\n<p>最后一个阶段的校验行为发生在虚拟机将符号引用转换为直接引用的时候，这个转化将在连接的第三个阶段，即解析阶段中发生。符号引用验证可以看作是对类自身以外的各类信息进行匹配性校验，这个验证主要包括</p>\n<ul>\n<li><p>  符号引用中的字符串全限定名是否能找到对应的类。</p>\n</li>\n<li><p>  指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</p>\n</li>\n<li><p>  符号引用的类、字段方法的可访问性是否可被当前类所访问。</p>\n</li>\n<li><p>  其他验证。</p>\n</li>\n</ul>\n<p>这一阶段主要是确保解析行为能否正常执行，如果无法通过符号引用验证，就会出现类似 <code>IllegalAccessError</code>、<code>NoSuchFieldError</code>、<code>NoSuchMethodError</code> 等错误。</p>\n<p>验证阶段对于虚拟机来说非常重要，如果能通过验证，就说明你的程序在运行时不会产生任何影响。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>准备阶段是为类中的变量分配内存并设置其初始值的阶段，这些变量所使用的内存都应当在方法区中进行分配，在 JDK 7 之前，HotSpot 使用永久代来实现方法区，是符合这种逻辑概念的。而在 JDK 8 之后，变量则会随着 Class 对象一起存放在 Java 堆中。</p>\n<p>下面通常情况下的基本类型和引用类型的初始值</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544012.jpeg\"></p>\n<p>除了 “通常情况” 下，还有一些 “例外情况”，如果类字段属性中存在 <code>ConstantValue</code> 属性，那就这个变量值在初始阶段就会初始化为 ConstantValue 属性所指定的初始值，比如</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"666\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>编译时就会把 value 的值设置为 666。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<ul>\n<li><p>  <code>符号引用</code>：符号引用以一组符号来描述所引用的目标。符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。</p>\n</li>\n<li><p>  <code>直接引用</code>：直接引用可以直接指向目标的指针、相对便宜量或者一个能间接定位到目标的句柄。直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。如果有了直接引用，那么直接引用的目标一定被加载到了内存中。</p>\n</li>\n</ul>\n<p>这样说你可能还有点不明白，我再换一种说法：</p>\n<blockquote>\n<p>在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，所以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。</p>\n</blockquote>\n<p>《Java 虚拟机规范》并未规定解析阶段发生的时间，只要求了在 anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield 和 putstatic 这 17 个用于操作符号引用的字节码指令之前，先对所使用的符号引用进行解析。</p>\n<p>解析也分为四个步骤</p>\n<ul>\n<li><p>  类或接口的解析</p>\n</li>\n<li><p>  字段解析</p>\n</li>\n<li><p>  方法解析</p>\n</li>\n<li><p>  接口方法解析</p>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化是类加载过程的最后一个步骤，在之前的阶段中，都是由 Java 虚拟机占主导作用，但是到了这一步，却把主动权移交给应用程序。</p>\n<p>对于初始化阶段，《Java 虚拟机规范》严格规定了只有下面这六种情况下才会触发类的初始化。</p>\n<ul>\n<li><p>  在遇到 new、getstatic、putstatic 或者 invokestatic 这四条字节码指令时，如果没有进行过初始化，那么首先触发初始化。通过这四个字节码的名称可以判断，这四条字节码其实就两个场景，调用 new 关键字的时候进行初始化、读取或者设置一个静态字段的时候、调用静态方法的时候。</p>\n</li>\n<li><p>  在初始化类的时候，如果父类还没有初始化，那么就需要先对父类进行初始化。</p>\n</li>\n<li><p>  在使用 java.lang.reflect 包的方法进行反射调用的时候。</p>\n</li>\n<li><p>  当虚拟机启动时，用户需要指定执行主类的时候，说白了就是虚拟机会先初始化 main 方法这个类。</p>\n</li>\n<li><p>  在使用 JDK 7 新加入的动态语言支持时，如果一个 jafva.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getstatic、REF_putstatic、REF_invokeStatic、REF_newInvokeSpecial 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，需要先对其进行初始化。</p>\n</li>\n<li><p>  当一个接口中定义了 JDK 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<p>其实上面只有前四个大家需要知道就好了，后面两个比较冷门。</p>\n<blockquote>\n<p>如果说要回答类加载的话，其实聊到这里已经可以了，但是为了完整性，我们索性把后面两个过程也来聊一聊。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>这个阶段没什么可说的，就是初始化之后的代码由 JVM 来动态调用执行。</p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>当代表一个类的 Class 对象不再被引用，那么 Class 对象的生命周期就结束了，对应的在方法区中的数据也会被卸载。</p>\n<blockquote>\n<p>⚠️但是需要注意一点：JVM 自带的类加载器装载的类，是不会卸载的，由用户自定义的类加载器加载的类是可以卸载的。</p>\n</blockquote>\n<h2 id=\"在-JVM-中，对象是如何创建的？\"><a href=\"#在-JVM-中，对象是如何创建的？\" class=\"headerlink\" title=\"在 JVM 中，对象是如何创建的？\"></a>在 JVM 中，对象是如何创建的？</h2><p>如果要回答对象是怎么创建的，我们一般想到的回答是直接 <code>new</code> 出来就行了，这个回答不仅局限于编程中，也融入在我们生活中的方方面面。</p>\n<p>但是遇到面试的时候你只回答一个 “new 出来就行了” 显然是不行的，因为面试更趋向于让你解释当程序执行到 new 这条指令时，它的背后发生了什么。</p>\n<p>所以你需要从 JVM 的角度来解释这件事情。</p>\n<p>当虚拟机遇到一个 new 指令时（其实就是字节码），首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用所代表的类是否已经被加载、解析和初始化。</p>\n<blockquote>\n<p>因为此时很可能不知道具体的类是什么，所以这里使用的是符号引用。</p>\n</blockquote>\n<p>如果发现这个类没有经过上面类加载的过程，那么就执行相应的类加载过程。</p>\n<p>类检查完成后，接下来虚拟机将会为新生对象<strong>分配内存</strong>，对象所需的大小在类加载完成后便可确定（我会在下面的面试题中介绍）。</p>\n<p>分配内存相当于是把一块固定的内存块从堆中划分出来。划分出来之后，虚拟机会将分配到的内存空间都初始化为零值，如果使用了 <code>TLAB</code>（本地线程分配缓冲），这一项初始化工作可以提前在 TLAB 分配时进行。这一步操作保证了对象实例字段在 Java 代码中可以不赋值就能直接使用。</p>\n<p>接下来，Java 虚拟机还会对对象进行必要的设置，比如确定对象是哪个类的实例、对象的 hashcode、对象的 gc 分代年龄信息。这些信息存放在对象的对象头（Object Header）中。</p>\n<p>如果上面的工作都做完后，从虚拟机的角度来说，一个新的对象就创建完毕了；但是对于程序员来说，对象创建才刚刚开始，因为构造函数，即 Class 文件中的 <code>&lt;init&gt;()</code> 方法还没有执行，所有字段都为默认的零值。new 指令之后才会执行 <code>&lt;init&gt;()</code> 方法，然后按照程序员的意愿对对象进行初始化，这样一个对象才可能被完整的构造出来。</p>\n<h2 id=\"内存分配方式有哪些呢？\"><a href=\"#内存分配方式有哪些呢？\" class=\"headerlink\" title=\"内存分配方式有哪些呢？\"></a>内存分配方式有哪些呢？</h2><p>在类加载完成后，虚拟机需要为新生对象分配内存，为对象分配内存相当于是把一块确定的区域从堆中划分出来，这就涉及到一个问题，<strong>要划分的堆区是否规整</strong>。</p>\n<p>假设 Java 堆中内存是规整的，所有使用过的内存放在一边，未使用的内存放在一边，中间放着一个指针，这个指针为分界指示器。那么为新对象分配内存空间就相当于是把指针向空闲的空间挪动对象大小相等的距离，这种内存分配方式叫做<code>指针碰撞(Bump The Pointer)</code>。</p>\n<p>如果 Java 堆中的内存并不是规整的，已经被使用的内存和未被使用的内存相互交错在一起，这种情况下就没有办法使用指针碰撞，这里就要使用另外一种记录内存使用的方式：<code>空闲列表(Free List)</code>，空闲列表维护了一个列表，这个列表记录了哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。</p>\n<p>所以，上述两种分配方式选择哪个，取决于 Java 堆是否规整来决定。在一些垃圾收集器的实现中，Serial、ParNew 等带压缩整理过程的收集器，使用的是指针碰撞；而使用 CMS 这种基于清除算法的收集器时，使用的是空闲列表，具体的垃圾收集器我们后面会聊到。</p>\n<h2 id=\"请你说一下对象的内存布局？\"><a href=\"#请你说一下对象的内存布局？\" class=\"headerlink\" title=\"请你说一下对象的内存布局？\"></a>请你说一下对象的内存布局？</h2><p>在 <code>hotspot</code> 虚拟机中，对象在内存中的布局分为三块区域：</p>\n<ul>\n<li><p>  <code>对象头(Header)</code></p>\n</li>\n<li><p>  <code>实例数据(Instance Data)</code></p>\n</li>\n<li><p>  <code>对齐填充(Padding)</code></p>\n</li>\n</ul>\n<p>这三块区域的内存分布如下图所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544691.jpeg\"></p>\n<p>我们来详细介绍一下上面对象中的内容。</p>\n<h3 id=\"对象头-Header\"><a href=\"#对象头-Header\" class=\"headerlink\" title=\"对象头 Header\"></a>对象头 Header</h3><p>对象头 Header 主要包含 MarkWord 和对象指针 Klass Pointer，如果是数组的话，还要包含数组的长度。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544746.jpeg\"></p>\n<p>在 32 位的虚拟机中 MarkWord ，Klass Pointer 和数组长度分别占用 32 位，也就是 4 字节。</p>\n<p>如果是 64 位虚拟机的话，MarkWord ，Klass Pointer 和数组长度分别占用 64 位，也就是 8 字节。</p>\n<p>在 32 位虚拟机和 64 位虚拟机的 Mark Word 所占用的字节大小不一样，32 位虚拟机的 Mark Word 和 Klass Pointer 分别占用 32 bits 的字节，而 64 位虚拟机的 Mark Word 和 Klass Pointer 占用了 64 bits 的字节，下面我们以 32 位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544554.jpeg\"></p>\n<p>用中文翻译过来就是</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544702.jpeg\"></p>\n<ul>\n<li><p>  无状态也就是<code>无锁</code>的时候，对象头开辟 25 bit 的空间用来存储对象的 hashcode ，4 bit 用于存放分代年龄，1 bit 用来存放是否偏向锁的标识位，2 bit 用来存放锁标识位为 01。</p>\n</li>\n<li><p>  <code>偏向锁</code> 中划分更细，还是开辟 25 bit 的空间，其中 23 bit 用来存放线程 ID，2bit 用来存放 epoch，4bit 存放分代年龄，1 bit 存放是否偏向锁标识， 0 表示无锁，1 表示偏向锁，锁的标识位还是 01。</p>\n</li>\n<li><p>  <code>轻量级锁</code>中直接开辟 30 bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志位，其标志位为 00。</p>\n</li>\n<li><p>  <code>重量级锁</code>中和轻量级锁一样，30 bit 的空间用来存放指向重量级锁的指针，2 bit 存放锁的标识位，为 11</p>\n</li>\n<li><p>  <code>GC标记</code>开辟 30 bit 的内存空间却没有占用，2 bit 空间存放锁标志位为 11。</p>\n</li>\n</ul>\n<p>其中无锁和偏向锁的锁标志位都是 01，只是在前面的 1 bit 区分了这是无锁状态还是偏向锁状态。</p>\n<p>关于为什么这么分配的内存，我们可以从 <code>OpenJDK</code> 中的 markOop.hpp 类中的枚举窥出端倪</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544018.jpeg\"></p>\n<p>来解释一下</p>\n<ul>\n<li><p>  age_bits 就是我们说的分代回收的标识，占用 4 字节</p>\n</li>\n<li><p>  lock_bits 是锁的标志位，占用 2 个字节</p>\n</li>\n<li><p>  biased_lock_bits 是是否偏向锁的标识，占用 1 个字节。</p>\n</li>\n<li><p>  max_hash_bits 是针对无锁计算的 hashcode 占用字节数量，如果是 32 位虚拟机，就是 32 - 4 - 2 -1 = 25 byte，如果是 64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以 64 位的 hashcode 占用 31 byte。</p>\n</li>\n<li><p>  hash_bits 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取 31，否则取真实的字节数</p>\n</li>\n<li><p>  cms_bits 我觉得应该是不是 64 位虚拟机就占用 0 byte，是 64 位就占用 1byte</p>\n</li>\n<li><p>  epoch_bits 就是 epoch 所占用的字节大小，2 字节。</p>\n</li>\n</ul>\n<p>在上面的虚拟机对象头分配表中，我们可以看到有几种锁的状态：无锁（无状态），偏向锁，轻量级锁，重量级锁，其中轻量级锁和偏向锁是 JDK1.6 中对 synchronized 锁进行优化后新增加的，其目的就是为了大大优化锁的性能，所以在 JDK 1.6 中，使用 synchronized 的开销也没那么大了。其实从锁有无锁定来讲，还是只有无锁和重量级锁，偏向锁和轻量级锁的出现就是增加了锁的获取性能而已，并没有出现新的锁。</p>\n<p>所以我们的重点放在对 synchronized 重量级锁的研究上，当 monitor 被某个线程持有后，它就会处于锁定状态。在 HotSpot 虚拟机中，monitor 的底层代码是由 <code>ObjectMonitor</code> 实现的，其主要数据结构如下（位于 HotSpot 虚拟机源码 ObjectMonitor.hpp 文件，C++ 实现的）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544172.jpeg\"></p>\n<p>这段 C++ 中需要注意几个属性：_WaitSet 、 _EntryList 和 _Owner，每个等待获取锁的线程都会被封装称为 <code>ObjectWaiter</code> 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544929.jpeg\"></p>\n<p>_Owner 是指向了 ObjectMonitor 对象的线程，而 _WaitSet 和 _EntryList 就是用来保存每个线程的列表。</p>\n<blockquote>\n<p>那么这两个列表有什么区别呢？这个问题我和你聊一下锁的获取流程你就清楚了。</p>\n</blockquote>\n<p><strong>锁的两个列表</strong></p>\n<p>当多个线程同时访问某段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的 monitor 之后，就会进入 _Owner 区域，并把 ObjectMonitor 对象的 _Owner 指向为当前线程，并使 _count + 1，如果调用了释放锁（比如 wait）的操作，就会释放当前持有的 monitor ，owner = null， _count - 1，同时这个线程会进入到 _WaitSet 列表中等待被唤醒。如果当前线程执行完毕后也会释放 monitor 锁，只不过此时不会进入 _WaitSet 列表了，而是直接复位 _count 的值。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544437.jpeg\"></p>\n<p>Klass Pointer 表示的是类型指针，也就是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<blockquote>\n<p>你可能不是很理解指针是个什么概念，你可以简单理解为指针就是指向某个数据的地址。</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544199.jpeg\"></p>\n<h3 id=\"实例数据-Instance-Data\"><a href=\"#实例数据-Instance-Data\" class=\"headerlink\" title=\"实例数据 Instance Data\"></a>实例数据 Instance Data</h3><p>实例数据部分是对象真正存储的有效信息，也是代码中定义的各个字段的字节大小，比如一个 byte 占 1 个字节，一个 int 占用 4 个字节。</p>\n<h3 id=\"对齐-Padding\"><a href=\"#对齐-Padding\" class=\"headerlink\" title=\"对齐 Padding\"></a>对齐 Padding</h3><p>对齐不是必须存在的，它只起到了占位符 (%d, %c 等) 的作用。这就是 JVM 的要求了，因为 HotSpot JVM 要求对象的起始地址必须是 8 字节的整数倍，也就是说对象的字节大小是 8 的整数倍，不够的需要使用 Padding 补全。</p>\n<h2 id=\"对象访问定位的方式有哪些？\"><a href=\"#对象访问定位的方式有哪些？\" class=\"headerlink\" title=\"对象访问定位的方式有哪些？\"></a>对象访问定位的方式有哪些？</h2><p>我们创建一个对象的目的当然就是为了使用它，但是，一个对象被创建出来之后，在 JVM 中是如何访问这个对象的呢？一般有两种方式：<strong>通过句柄访问</strong>和 <strong>通过直接指针访问</strong>。</p>\n<ul>\n<li><p>如果使用句柄访问方式的话，Java 堆中可能会划分出一块内存作为句柄池，引用（reference）中存储的是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息。如下图所示。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg\"></p>\n</li>\n<li><p>如果使用直接指针访问的话，Java 堆中对象的内存布局就会有所区别，栈区引用指示的是堆中的实例数据的地址，如果只是访问对象本身的话，就不会多一次直接访问的开销，而对象类型数据的指针是存在于方法区中，如果定位的话，需要多一次直接定位开销。如下图所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg\"></p>\n</li>\n</ul>\n<p>这两种对象访问方式各有各的优势，使用句柄最大的好处就是引用中存储的是句柄地址，对象移动时只需改变句柄的地址就可以，而无需改变对象本身。</p>\n<p>使用直接指针来访问速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因为这类的开销也是值得优化的地方。</p>\n<p>上面聊到了对象的两种数据，一种是对象的实例数据，这没什么好说的，就是对象实例字段的数据，一种是对象的类型数据，这个数据说的是对象的类型、父类、实现的接口和方法等。</p>\n<h2 id=\"如何判断对象已经死亡？\"><a href=\"#如何判断对象已经死亡？\" class=\"headerlink\" title=\"如何判断对象已经死亡？\"></a>如何判断对象已经死亡？</h2><p>我们大家知道，基本上所有的对象都在堆中分布，当我们不再使用对象的时候，垃圾收集器会对无用对象进行回收♻️，那么 JVM 是如何判断哪些对象已经是 “无用对象” 的呢？</p>\n<p>这里有两种判断方式，首先我们先来说第一种：<strong>引用计数法</strong>。</p>\n<p>引用计数法的判断标准是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就会加一；当引用失效时，计数器的值就会减一；只要任何时刻计数器为零的对象就是不会再被使用的对象。虽然这种判断方式非常简单粗暴，但是往往很有用，不过，在 Java 领域，主流的 Hotspot 虚拟机实现并没有采用这种方式，因为引用计数法不能解决对象之间的循环引用问题。</p>\n<p>循环引用问题简单来讲就是两个对象之间互相依赖着对方，除此之外，再无其他引用，这样虚拟机无法判断引用是否为零从而进行垃圾回收操作。</p>\n<p>还有一种判断对象无用的方法就是<strong>可达性分析算法</strong>。</p>\n<p>当前主流的 JVM 都采用了可达性分析算法来进行判断，这个算法的基本思路就是通过一系列被称为<code>GC Roots</code>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径被称为<code>引用链</code>（Reference Chain），如果某个对象到 GC Roots 之间没有任何引用链相连接，或者说从 GC Roots 到这个对象不可达时，则证明此这个对象是无用对象，需要被垃圾回收。</p>\n<p>这种引用方式如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg\"></p>\n<p>如上图所示，从枚举根节点 GC Roots 开始进行遍历，object 1 、2、3、4 是存在引用关系的对象，而 object 5、6、7 之间虽然有关联，但是它们到 GC Roots 之间是不可达的，所以被认为是可以回收的对象。</p>\n<p>在 Java 技术体系中，可以作为 GC Roots 进行检索的对象主要有</p>\n<ul>\n<li><p>  在虚拟机栈（栈帧中的本地变量表）中引用的对象。</p>\n</li>\n<li><p>  方法区中类静态属性引用的对象，比如 Java 类的引用类型静态变量。</p>\n</li>\n<li><p>  方法区中常量引用的对象，比如字符串常量池中的引用。</p>\n</li>\n<li><p>  在本地方法栈中 JNI 引用的对象。</p>\n</li>\n<li><p>  JVM 内部的引用，比如基本数据类型对应的 Class 对象，一些异常对象比如 NullPointerException、OutOfMemoryError 等，还有系统类加载器。</p>\n</li>\n<li><p>  所有被 synchronized 持有的对象。</p>\n</li>\n<li><p>  还有一些 JVM 内部的比如 JMXBean、JVMTI 中注册的回调，本地代码缓存等。</p>\n</li>\n<li><p>  根据用户所选的垃圾收集器以及当前回收的内存区域的不同，还可能会有一些对象临时加入，共同构成 GC Roots 集合。</p>\n</li>\n</ul>\n<p>虽然我们上面提到了两种判断对象回收的方法，但无论是引用计数法还是判断 GC Roots 都离不开<code>引用</code>这一层关系。</p>\n<p>这里涉及到到强引用、软引用、弱引用、虚引用的引用关系，你可以阅读作者的这一篇文章</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247495968&idx=1&sn=48de091f4fabdf682a9f8b5ddd8db936&chksm=c04ae67ef73d6f68935382dcaa0bd4d538a9e0b45ee49500ee7e2356cc24dba750b197960477&token=1191632986&lang=zh_CN&scene=21#wechat_redirect\">小心点，别被当成垃圾回收了。</a></p>\n<h2 id=\"如何判断一个不再使用的类？\"><a href=\"#如何判断一个不再使用的类？\" class=\"headerlink\" title=\"如何判断一个不再使用的类？\"></a>如何判断一个不再使用的类？</h2><p>判断一个类型属于 “不再使用的类” 需要满足下面这三个条件</p>\n<ul>\n<li><p>  这个类所有的实例已经被回收，也就是 Java 堆中不存在该类及其任何这个类字类的实例</p>\n</li>\n<li><p>  加载这个类的类加载器已经被回收，但是类加载器一般很难会被回收，除非这个类加载器是为了这个目的设计的，比如 OSGI、JSP 的重加载等，否则通常很难达成。</p>\n</li>\n<li><p>  这个类对应的 Class 对象没有任何地方被引用，无法在任何时刻通过反射访问这个类的属性和方法。</p>\n</li>\n</ul>\n<p>虚拟机允许对满足上面这三个条件的无用类进行回收操作。</p>\n<h2 id=\"JVM-分代收集理论有哪些？\"><a href=\"#JVM-分代收集理论有哪些？\" class=\"headerlink\" title=\"JVM 分代收集理论有哪些？\"></a>JVM 分代收集理论有哪些？</h2><p>一般商业的虚拟机，大多数都遵循了<strong>分代收集</strong>的设计思想，分代收集理论主要有两条假说。</p>\n<p>第一个是<strong>强分代假说</strong>，强分代假说指的是 JVM 认为绝大多数对象的生存周期都是朝生夕灭的；</p>\n<p>第二个是<strong>弱分代假说</strong>，弱分代假说指的是只要熬过越多次垃圾收集过程的对象就越难以回收（看来对象也会长心眼）。</p>\n<p>就是基于这两个假说理论，JVM 将<code>堆</code>区划分为不同的区域，再将需要回收的对象根据其熬过垃圾回收的次数分配到不同的区域中存储。</p>\n<p>JVM 根据这两条分代收集理论，把堆区划分为新生代 (Young Generation) 和老年代 (Old Generation) 这两个区域。在新生代中，每次垃圾收集时都发现有大批对象死去，剩下没有死去的对象会直接晋升到老年代中。</p>\n<p>上面这两个假说没有考虑对象的引用关系，而事实情况是，对象之间会存在引用关系，基于此又诞生了第三个假说，即**跨代引用假说 (Intergeneration Reference Hypothesis)**，跨代引用相比较同代引用来说仅占少数。</p>\n<p>正常来说存在相互引用的两个对象应该是同生共死的，不过也会存在特例，如果一个新生代对象跨代引用了一个老年代的对象，那么垃圾回收的时候就不会回收这个新生代对象，更不会回收老年代对象，然后这个新生代对象熬过一次垃圾回收进入到老年代中，这时候跨代引用才会消除。</p>\n<p>根据跨代引用假说，我们不需要因为老年代中存在少量跨代引用就去直接扫描整个老年代，也不用在老年代中维护一个列表记录有哪些跨代引用，实际上，可以直接在新生代中维护一个**记忆集 (Remembered Set)**，由这个记忆集把老年代划分称为若干小块，标识出老年代的哪一块会存在跨代引用。</p>\n<p>记忆集的图示如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545443.jpeg\"></p>\n<p>从图中我们可以看到，记忆集中的每个元素分别对应内存中的一块连续区域是否有跨代引用对象，如果有，该区域会被标记为 “脏的”（dirty），否则就是 “干净的”（clean）。这样在垃圾回收时，只需要扫描记忆集就可以简单地确定跨代引用的位置，是个典型的空间换时间的思路。</p>\n<h2 id=\"聊一聊-JVM-中的垃圾回收算法？\"><a href=\"#聊一聊-JVM-中的垃圾回收算法？\" class=\"headerlink\" title=\"聊一聊 JVM 中的垃圾回收算法？\"></a>聊一聊 JVM 中的垃圾回收算法？</h2><p>在聊具体的垃圾回收算法之前，需要明确一点，哪些对象需要被垃圾收集器进行回收？也就是说需要先判断哪些对象是 “垃圾”？</p>\n<p>判断的标准我在上面<strong>如何判断对象已经死亡</strong>的问题中描述了，有两种方式，一种是引用计数法，这种判断标准就是给对象添加一个引用计数器，引用这个对象会使计数器的值 + 1，引用失效后，计数器的值就会 -1。但是这种技术无法解决对象之间的循环引用问题。</p>\n<p>还有一种方式是 GC Roots，GC Roots 这种方式是以 Root 根节点为核心，逐步向下搜索每个对象的引用，搜索走过的路径被称为引用链，如果搜索过后这个对象不存在引用链，那么这个对象就是无用对象，可以被回收。GC Roots 可以解决循环引用问题，所以一般 JVM 都采用的是这种方式。</p>\n<p>解决循环引用代码描述：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">test</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        A a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        B b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> B b<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> A a<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>基于 GC Roots 的这种思想，发展出了很多垃圾回收算法，下面我们就来聊一聊这些算法。</p>\n<h3 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记 - 清除算法\"></a>标记 - 清除算法</h3><p>标记 - 清除 (Mark-Sweep) 这个算法可以说是最早最基础的算法了，标记 - 清除顾名思义分为两个阶段，即标记和清除阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。当然也可以标记存活的对象，回收未被标记的对象。这个标记的过程就是垃圾判定的过程。</p>\n<p>后续大部分垃圾回收算法都是基于标记 - 算法思想衍生的，只不过后续的算法弥补了标记 - 清除算法的缺点，那么它有什么缺点呢？主要有两个</p>\n<ul>\n<li><p>  <strong>执行效率不稳定</strong>，因为假如说堆中存在大量无用对象，而且大部分需要回收的情况下，这时必须进行大量的标记和清除，导致标记和清除这两个过程的执行效率随对象的数量增长而降低。</p>\n</li>\n<li><p>  <strong>内存碎片化</strong>，标记 - 清除算法会在堆区产生大量不连续的内存碎片。碎片太多会导致在分配大对象时没有足够的空间，不得不进行一次垃圾回收操作。</p>\n</li>\n</ul>\n<p>标记算法的示意图如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545881.jpeg\"></p>\n<h3 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记 - 复制算法\"></a>标记 - 复制算法</h3><p>由于标记 - 清除算法极易产生内存碎片，研究人员提出了标记 - 复制算法，标记 - 复制算法也可以简称为复制算法，复制算法是一种<strong>半区复制</strong>，它会将内存大小划分为相等的两块，每次只使用其中的一块，用完一块再用另外一块，然后再把用过的一块进行清除。虽然解决了部分内存碎片的问题，但是复制算法也带来了新的问题，即<strong>复制开销</strong>，不过这种开销是可以降低的，如果内存中大多数对象是无用对象，那么就可以把少数的存活对象进行复制，再回收无用的对象。</p>\n<p>不过复制算法的缺陷也是显而易见的，那就是内存空间缩小为原来的一半，空间浪费太明显。标记 - 复制算法示意图如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545639.jpeg\"></p>\n<p>现在 Java 虚拟机大多数都是用了这种算法来回收新生代，因为经过研究表明，新生代对象 98% 都熬不过第一轮收集，因此不需要按照 1 ：1 的比例来划分新生代的内存空间。</p>\n<p>基于此，研究人员提出了一种 Appel 式回收，Appel 式回收的具体做法是把新生代分为一块较大的 <em>Eden</em> 空间和两块 <em>Survivor</em> 空间，每次分配内存都只使用 Eden 和其中的一块 Survivor 空间，发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已使用过的 Survivor 空间。</p>\n<p>在主流的 HotSpot 虚拟机中，默认的 Eden 和 Survivor 大小比例是 8：1，也就是每次新生代中可用内存空间为整个新生代容量的 90%，只有一个 Survivor 空间，所以会浪费掉 10% 的空间。这个 8：1 只是一个理论值，也就是说，不能保证每次都有不超过 10% 的对象存活，所以，当进行垃圾回收后如果 Survivor 容纳不了可存活的对象后，就需要其他内存空间来进行<strong>帮助</strong>，这种方式就叫做<strong>内存担保 (Handle Promotion)</strong> ，通常情况下，作为担保的是老年代。</p>\n<h3 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记 - 整理算法\"></a>标记 - 整理算法</h3><p>标记 - 复制算法虽然解决了内存碎片问题，但是没有解决复制对象存在大量开销的问题。为了解决复制算法的缺陷，充分利用内存空间，提出了标记 - 整理算法。该算法标记阶段和标记 - 清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545233.jpeg\"></p>\n<h2 id=\"什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\"><a href=\"#什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\" class=\"headerlink\" title=\"什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\"></a>什么是记忆集，什么是卡表？记忆集和卡表有什么关系？</h2><p>为了解决跨代引用问题，提出了记忆集这个概念，记忆集是一个在新生代中使用的数据结构，它相当于是记录了一些指针的集合，指向了老年代中哪些对象存在跨代引用。</p>\n<p>记忆集的实现有不同的粒度</p>\n<ul>\n<li><p>  <strong>字长精度</strong>：每个记录精确到一个字长，机器字长就是处理器的寻址位数，比如常见的 32 位或者 64 位处理器，这个精度决定了机器访问物理内存地址的指针长度，字中包含跨代指针。</p>\n</li>\n<li><p>  <strong>对象精度</strong>：每个记录精确到一个对象，该对象里含有跨代指针。</p>\n</li>\n<li><p>  <strong>卡精度</strong>：每个记录精确到一块内存区域，区域内含有跨代指针。</p>\n</li>\n</ul>\n<p>其中卡精度是使用了卡表作为记忆集的实现，关于记忆集和卡表的关系，大家可以想象成是 HashMap 和 Map 的关系。</p>\n<h2 id=\"什么是卡页？\"><a href=\"#什么是卡页？\" class=\"headerlink\" title=\"什么是卡页？\"></a>什么是卡页？</h2><p>卡表其实就是一个字节数组</p>\n<pre class=\" language-java\"><code class=\"language-java\">CARD_TABLE<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> address <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>字节数组 CARD_TABLE 的每一个元素都对应着内存区域中一块特定大小的内存块，这个内存块就是<strong>卡页</strong>，一般来说，卡页都是 2 的 N 次幂字节数，通过上面的代码我们可以知道，卡页一般是 2 的 9 次幂，这也是 HotSpot 中使用的卡页，即 512 字节。</p>\n<p>一个卡页的内存通常包含不止一个对象，只要卡页中有一个对象的字段存在跨代指针，那就将对应卡表的数组元素的值设置为 1，称之为这个元素变<code>脏</code>了，没有标示则为 0 。在垃圾收集时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，然后把他们加入 GC Roots 进行扫描。</p>\n<p>所以，卡页和卡表主要用来解决跨代引用问题的。</p>\n<h2 id=\"什么是写屏障？写屏障带来的问题？\"><a href=\"#什么是写屏障？写屏障带来的问题？\" class=\"headerlink\" title=\"什么是写屏障？写屏障带来的问题？\"></a>什么是写屏障？写屏障带来的问题？</h2><p>如果有其他分代区域中对象引用了本区域的对象，那么其对应的卡表元素就会变脏，这个引用说的就是对象赋值，也就是说卡表元素会变脏发生在对象赋值的时候，那么如何在对象赋值的时候更新维护卡表呢？</p>\n<p>在 HotSpot 虚拟机中使用的是<strong>写屏障 (Write Barrier)</strong> 来维护卡表状态的，这个写屏障和我们内存屏障完全不同，希望读者不要搞混了。</p>\n<p>这个写屏障其实就是一个 Aop 切面，在引用对象进行赋值时会产生一个**环形通知 (Around)**，环形通知就是切面前后分别产生一个通知，因为这个又是写屏障，所以在赋值前的部分写屏障叫做写前屏障，在赋值后的则叫做写后屏障。</p>\n<p>写屏障会带来两个问题</p>\n<p><strong>无条件写屏障带来的性能开销</strong></p>\n<p>每次对引用的更新，无论是否更新了老年代对新生代对象的引用，都会进行一次写屏障操作。显然，这会增加一些额外的开销。但是，扫描整个老年代相比较，这个开销就低得多了。</p>\n<p>不过，在高并发环境下，写屏障又带来了伪共享（false sharing）问题。</p>\n<p><strong>高并发下伪共享带来的性能开销</strong></p>\n<p>在高并发情况下，频繁的写屏障很容易发生伪共享（false sharing），从而带来性能开销。</p>\n<p>假设 CPU 缓存行大小为 64 字节，由于一个卡表项占 1 个字节，这意味着，64 个卡表项将共享同一个缓存行。</p>\n<p>HotSpot 每个卡页为 512 字节，那么一个缓存行将对应 64 个卡页一共 64*512 = 32K B。</p>\n<p>如果不同线程对对象引用的更新操作，恰好位于同一个 32 KB 区域内，这将导致同时更新卡表的同一个缓存行，从而造成缓存行的写回、无效化或者同步操作，间接影响程序性能。</p>\n<p>一个简单的解决方案，就是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表项未被标记过才将其标记为脏的。</p>\n<p>这就是 JDK  7 中引入的解决方法，引入了一个新的 JVM 参数 _-XX:+UseCondCardMark_，在执行写屏障之前，先简单的做一下判断。如果卡页已被标识过，则不再进行标识。</p>\n<p>简单理解如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CARD_TABLE <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> address <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  CARD_TABLE <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span> address <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>与原来的实现相比，只是简单的增加了一个判断操作。</p>\n<p>虽然开启 <em>-XX:+UseCondCardMark</em> 之后多了一些判断开销，但是却可以避免在高并发情况下可能发生的并发写卡表问题。通过减少并发写操作，进而避免出现伪共享问题（false sharing）。</p>\n<h2 id=\"什么是三色标记法？三色标记法会造成哪些问题？\"><a href=\"#什么是三色标记法？三色标记法会造成哪些问题？\" class=\"headerlink\" title=\"什么是三色标记法？三色标记法会造成哪些问题？\"></a>什么是三色标记法？三色标记法会造成哪些问题？</h2><p>根据可达性算法的分析可知，如果要找出存活对象，需要从 GC Roots 开始遍历，然后搜索每个对象是否可达，如果对象可达则为存活对象，在 GC Roots 的搜索过程中，按照<strong>对象和其引用是否被访问过</strong>这个条件会分成下面三种颜色：</p>\n<ul>\n<li><p>  白色：白色表示 GC Roots 的遍历过程中没有被访问过的对象，出现白色显然在可达性分析刚刚开始的阶段，这个时候所有对象都是白色的，如果在分析结束的阶段，仍然是白色的对象，那么代表不可达，可以进行回收。</p>\n</li>\n<li><p>  灰色：灰色表示对象已经被访问过，但是这个对象的引用还没有访问完毕。</p>\n</li>\n<li><p>  黑色：黑色表示此对象已经被访问过了，而且这个对象的引用也已经被访问了。</p>\n</li>\n</ul>\n<blockquote>\n<p>注：如果标记结束后对象仍为白色，意味着已经 “找不到” 该对象在哪了，不可能会再被重新引用。</p>\n</blockquote>\n<p>现代的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：比如白色 / 黑色集合一般都不会出现（但是有其他体现颜色的地方）、灰色集合可以通过栈 / 队列 / 缓存日志等方式进行实现、遍历方式可以是广度 / 深度遍历等等。</p>\n<p>三色标记法会造成两种问题，这两种问题所出现的环境都是由于<strong>用户环境和收集器并行工作造成的</strong> 。当用户线程正在修改引用关系，此时收集器在回收引用关系，此时就会造成把原本已经消亡的对象标记为存活，如果出现这种状况的话，问题不大，下次再让收集器重新收集一波就完了，但是还有一种情况是把存活的对象标记为死亡，这种状况就会造成不可预知的后果。</p>\n<p>针对上面这两种对象消失问题，业界有两种处理方式，一种是<strong>增量更新 (Incremental Update)</strong> ，一种是**原是快照 (Snapshot At The Beginning, SATB)**。</p>\n<h2 id=\"请你介绍一波垃圾收集器\"><a href=\"#请你介绍一波垃圾收集器\" class=\"headerlink\" title=\"请你介绍一波垃圾收集器\"></a>请你介绍一波垃圾收集器</h2><p>垃圾收集器是面试的常考，也是必考点，只要涉及到 JVM 的相关问题，都会围绕着垃圾收集器来做一波展开，所以，有必要了解一下这些垃圾收集器。</p>\n<p>垃圾收集器有很多，不同商家、不同版本的 JVM 所提供的垃圾收集器可能会有很大差别，我们主要介绍 HotSpot 虚拟机中的垃圾收集器。</p>\n<p>垃圾收集器是垃圾回收算法的具体实现，我们上面提到过，垃圾回收算法有标记 - 清除算法、标记 - 整理、标记 - 复制，所以对应的垃圾收集器也有不同的实现方式。</p>\n<p>我们知道，HotSpot 虚拟机中的垃圾收集都是分代回收的，所以根据不同的分代，可以把垃圾收集器分为</p>\n<p>新生代收集器：Serial、ParNew、Parallel Scavenge；</p>\n<p>老年代收集器：Serial Old、Parallel Old、CMS；</p>\n<p>整堆收集器：G1；</p>\n<h3 id=\"Serial-收集器\"><a href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"></a>Serial 收集器</h3><p>Serial 收集器是一种新生代的垃圾收集器，它是一个单线程工作的收集器，使用复制算法来进行回收，单线程工作不是说这个垃圾收集器只有一个，而是说这个收集器在工作时，必须暂停其他所有工作线程，这种暴力的暂停方式就是 <strong>Stop The World</strong>，Serial 就好像是寡头垄断一样，只要它一发话，其他所有的小弟（线程）都得给它让路。Serial 收集器的示意图如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545313.jpeg\"></p>\n<blockquote>\n<p>SefePoint 全局安全点：它就是代码中的一段特殊的位置，在所有用户线程到达 SafePoint 之后，用户线程挂起，GC 线程会进行清理工作。</p>\n</blockquote>\n<p>虽然 Serial 有 STW 这种显而易见的缺点，不过，从其他角度来看，Serial 还是很讨喜的，它还有着优于其他收集器的地方，那就是简单而高效，对于内存资源首先的环境，它是所有收集器中额外内存消耗最小的，对于单核处理器或者处理器核心较少的环境来说，Serial 收集器由于没有线程交互开销，所以 Serial 专心做垃圾回收效率比较高。</p>\n<h3 id=\"ParNew-收集器\"><a href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"></a>ParNew 收集器</h3><p>ParNew 是 Serial 的多线程版本，除了同时使用多条线程外，其他参数和机制（STW、回收策略、对象分配规则）都和 Serial 完全一致，ParNew 收集器的示意图如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545178.jpeg\"></p>\n<p>虽然 ParNew 使用了多条线程进行垃圾回收，但是在单线程环境下它绝对不会比 Serial 收集效率更高，因为多线程存在线程交互的开销，但是随着可用 CPU 核数的增加，ParNew 的处理效率会比 Serial 更高效。</p>\n<h3 id=\"Parallel-Scavenge-收集器\"><a href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"></a>Parallel Scavenge 收集器</h3><p>Parallel Scavenge 收集器也是一款新生代收集器，它同样是基于标记 - 复制算法实现的，而且它也能够并行收集，这么看来，表面上 Parallel Scavenge 与 ParNew 非常相似，那么它们之间有什么区别呢？</p>\n<p>Parallel Scavenge 的关注点主要在<strong>达到一个可控制的吞吐量上面</strong>。吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比。也就是</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg\"></p>\n<p>这里给大家举一个吞吐量的例子，如果执行用户代码的时间 + 运行垃圾收集的时间总共耗费了 100 分钟，其中垃圾收集耗费掉了 1 分钟，那么吞吐量就是 99%。停顿时间越短就越适合需要与用户交互或需要保证服务响应质量，良好的响应速度可以提升用户体验，而高吞吐量可以最高效率利用处理器资源。</p>\n<h3 id=\"Serial-Old-收集器\"><a href=\"#Serial-Old-收集器\" class=\"headerlink\" title=\"Serial Old 收集器\"></a>Serial Old 收集器</h3><p>前面介绍了一下 Serial，我们知道它是一个新生代的垃圾收集，使用了标记 - 复制算法。而这个 Serial Old 收集器却是 Serial 的老年版本，它同样也是一个单线程收集器，使用的是<strong>标记 - 整理</strong>算法，Serial Old 收集器有两种用途：一种是在 JDK 5 和之前的版本与 Parallel Scavenge 收集器搭配使用，另外一种用法就是作为 <code>CMS</code> 收集器的备选，CMS 垃圾收集器我们下面说，Serial Old 的收集流程如下</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/A3ibcic1Xe0iaTTaoE1HA8uE2z8agCUWibYmsr5qnsJKzjvNXjXNCrib8u5HbWlEUWwNPadXLAib7wYHnDL1QP9Gq7jg/640?wx_fmt=jpeg\"></p>\n<h3 id=\"Parallel-Old-收集器\"><a href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"></a>Parallel Old 收集器</h3><p>前面我们介绍了 Parallel Scavenge 收集器，现在来介绍一下 Parallel Old 收集器，它是 Parallel Scavenge 的老年版本，支持多线程并发收集，基于标记 - 整理算法实现，JDK 6 之后出现，吞吐量优先可以考虑 Parallel Scavenge + Parallel Old 的搭配</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg\"></p>\n<h3 id=\"CMS-收集器\"><a href=\"#CMS-收集器\" class=\"headerlink\" title=\"CMS 收集器\"></a>CMS 收集器</h3><p><code>CMS</code>收集器的主要目标是获取最短的回收停顿时间，它的全称是 _Concurrent Mark Sweep_，从这个名字就可以知道，这个收集器是基于标记 - 清除算法实现的，而且支持并发收集，它的运行过程要比上面我们提到的收集器复杂一些，它的工作流程如下：</p>\n<ul>\n<li><p>  初始标记（CMS initial mark）</p>\n</li>\n<li><p>  并发标记（CMS concurrent mark）</p>\n</li>\n<li><p>  重新标记（CMS remark）</p>\n</li>\n<li><p>  并发清除（CMS concurrent sweep）</p>\n</li>\n</ul>\n<p>对于上面这四个步骤，初始标记和并发标记都需要 _Stop The World_，初始标记只是标记一下和 GC Roots 直接关联到的对象，速度较快；并发标记阶段就是从 GC Roots 的直接关联对象开始遍历整个对象图的过程。这个过程时间比较长但是不需要停顿用户线程，也就是说与垃圾收集线程一起并发运行。并发标记的过程中，可能会有错标或者漏标的情况，此时就需要在重新标记一下，最后是并发清除阶段，清理掉标记阶段中判断已经死亡的对象。</p>\n<p>CMS 的收集过程如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg\"></p>\n<p>CMS 是一款非常优秀的垃圾收集器，但是没有任何收集器能够做到完美的程度，CMS 也是一样，CMS 至少有三个缺点：</p>\n<ul>\n<li><p>CMS 对处理器资源非常敏感，在并发阶段，虽然不会造成用户线程停顿，但是却会因为占用一部分线程而导致应用程序变慢，降低总吞吐量。</p>\n</li>\n<li><p>CMS 无法处理<strong>浮动垃圾</strong>，有可能出现 <em>Concurrent Mode Failure</em> 失败进而导致另一次完全 <em>Stop The World</em> 的 <em>Full GC</em> 产生。</p>\n<blockquote>\n<p>什么是浮动垃圾呢？由于并发标记和并发清理阶段，用户线程仍在继续运行，所以程序自然而然就会伴随着新的垃圾不断出现，而且这一部分垃圾出现在标记结束之后，CMS 无法处理这些垃圾，所以只能等到下一次垃圾回收时在进行清理。这一部分垃圾就被称为浮动垃圾。</p>\n</blockquote>\n</li>\n<li><p>CMS 最后一个缺点是并发 - 清除的通病，也就是会有大量的空间碎片出现，这将会给分配大对象带来困难。</p>\n</li>\n</ul>\n<h3 id=\"Garbage-First-收集器\"><a href=\"#Garbage-First-收集器\" class=\"headerlink\" title=\"Garbage First 收集器\"></a>Garbage First 收集器</h3><p>Garbage First 又被称为 _G1 收集器_，它的出现意味着垃圾收集器走过了一个里程碑，为什么说它是里程碑呢？因为 G1 这个收集器是一种面向局部的垃圾收集器，HotSpot 团队开发这个垃圾收集器为了让它替换掉 CMS 收集器，所以到后来，JDK 9 发布后，G1 取代了 Parallel Scavenge + Parallel Old 组合，成为服务端默认的垃圾收集器，而 CMS 则不再推荐使用。</p>\n<p>之前的垃圾收集器存在回收区域的局限性，因为之前这些垃圾收集器的目标范围要么是整个新生代、要么是整个老年代，要么是整个 Java 堆（Full GC），而 G1 跳出了这个框架，它可以面向堆内存的任何部分来组成**回收集 (Collection Set，CSet)**，衡量垃圾收集的不再是哪个分代，这就是 G1 的 <em>Mixed GC</em> 模式。</p>\n<p>G1 是基于 Region 来进行回收的，Region 就是堆内存中任意的布局，每一块 Region 都可以根据需要扮演 Eden 空间、Survivor 空间或者老年代空间，收集器能够对不同的 Region 角色采用不同的策略来进行处理。Region 中还有一块特殊的区域，这块区域就是 <em>Humongous</em> 区域，它是专门用来存储大对象的，G1 认为只要大小超过了 Region 容量一半的对象即可判定为大对象。如果超过了 Region 容量的大对象，将会存储在连续的 Humongous Region 中，G1 大多数行为都会把 Humongous Region 作为老年代来看待。</p>\n<p>G1 保留了新生代（Eden Suvivor）和老年代的概念，但是新生代和老年代不再是固定的了。它们都是一系列区域的动态集合。</p>\n<p>G1 收集器的运作过程可以分为以下四步：</p>\n<ul>\n<li><p>  初始标记：这个步骤也仅仅是标记一下 GC Roots 能够直接关联到的对象；并修改 TAMS 指针的值（每一个 Region 都有两个 RAMS 指针），使得下一阶段用户并发运行时，能够在可用的 Region 中分配对象，这个阶段需要暂停用户线程，但是时间很短。这个停顿是借用 Minor GC 的时候完成的，所以可以忽略不计。</p>\n</li>\n<li><p>  并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆中的对象图，找出要回收的对象。当对象图扫描完成后，重新处理 SATB 记录下的在并发时有引用的对象；</p>\n</li>\n<li><p>  最终标记：对用户线程做一个短暂的暂停，用于处理并发阶段结束后遗留下来的少量 <em>SATB</em> 记录（一种原始快照，用来记录并发标记中某些对象）</p>\n</li>\n<li><p>  筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择多个 Region 构成回收集，然后把决定要回收的那一部分 Region 存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。这里的操作设计对象的移动，所以必须要暂停用户线程，由多条收集器线程并行收集</p>\n</li>\n</ul>\n<p>从上面这几个步骤可以看出，除了并发标记外，其余三个阶段都需要暂停用户线程，所以，这个 G1 收集器并非追求<strong>低延迟</strong>，官方给出的设计目标是<strong>在延迟可控的情况下尽可能的提高吞吐量</strong>，担任全功能收集器的重任。</p>\n<p>下面是 G1 回收的示意图</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg\"></p>\n<p>G1 收集器同样也有缺点和问题：</p>\n<ul>\n<li><p>  第一个问题就是 Region 中存在跨代引用的问题，我们之前知道可以用记忆集来解决跨代引用问题，不过 Region 中的跨代引用要复杂很多；</p>\n</li>\n<li><p>  第二个问题就是如何保证收集线程与用户线程互不干扰的运行？CMS 使用的是增量更新算法，G1 使用的是原始快照（SATB），G1 为 Region 分配了两块 TAMS 指针，把 Region 中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须在这两个指针位置以上。如果内存回收速度赶不上内存分配速度，G1 收集器也要冻结用户线程执行，导致 Full GC 而产生长时间的 STW。</p>\n</li>\n<li><p>  第三个问题是无法建立可预测的停顿模型。</p>\n</li>\n</ul>\n<h2 id=\"JVM-常用命令介绍\"><a href=\"#JVM-常用命令介绍\" class=\"headerlink\" title=\"JVM 常用命令介绍\"></a>JVM 常用命令介绍</h2><p>下面介绍一下 JVM 中常用的调优、故障处理等工具。</p>\n<ol>\n<li><p> <em>jps</em> ：虚拟机进程工具，全称是 _JVM Process Status Tool_，它的功能和 Linux 中的 <em>ps</em> 类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类 <em>Main Class</em> 所在的本地虚拟机唯一 ID，虽然功能比较单一，但是这个命令绝对是使用最高频的一个命令。</p>\n</li>\n<li><p> _jstat_：虚拟机统计信息工具，用于监视虚拟机各种运行状态的信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p>\n</li>\n<li><p> _jinfo_：Java 配置信息工具，全称是 _Configuration Info for Java_，它的作用是可以实时调整虚拟机各项参数。</p>\n</li>\n<li><p> _jmap_：Java 内存映像工具，全称是 _Memory Map For Java_，它用于生成转储快照，用来排查内存占用情况</p>\n</li>\n<li><p> _jhat_：虚拟机堆转储快照分析工具，全称是 _JVM Heap Analysis Tool_，这个指令通常和 jmap 一起搭配使用，jhat 内置了一个 HTTP/Web 服务器，生成转储快照后可以在浏览器中查看。不过，一般还是 jmap 命令使用的频率比较高。</p>\n</li>\n<li><p> _jstack_：Java 堆栈跟踪工具，全称是 <em>Stack Trace for Java</em> ，顾名思义，这个命令用来追踪堆栈的使用情况，用于虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条正在执行的方法堆栈的集合。</p>\n</li>\n</ol>\n<h2 id=\"什么是双亲委派模型？\"><a href=\"#什么是双亲委派模型？\" class=\"headerlink\" title=\"什么是双亲委派模型？\"></a>什么是双亲委派模型？</h2><p>JVM 类加载默认使用的是<strong>双亲委派模型</strong>，那么什么是双亲委派模型呢？</p>\n<p>这里我们需要先介绍一下三种类加载器：</p>\n<ul>\n<li><p>  启动类加载器，_Bootstrap Class Loader_，这个类加载器是 C++ 实现的，它是 JVM 的一部分，这个类加载器负责加载存放在 <em><JAVA_HOME>\\lib</em> 目录，启动类加载器无法被 Java 程序直接引用。这也就是说，JDK 中的常用类的加载都是由启动类加载器来完成的。</p>\n</li>\n<li><p>  扩展类加载器，_Extension Class Loader_，这个类加载器是 Java 实现的，它负责加载 <em><JAVA_HOME>\\lib\\ext</em> 目录。</p>\n</li>\n<li><p>  应用程序类加载器，_Application Class Loader_，这个类加载器是由 <em>sum.misc.Launcher$AppClassLoader</em> 来实现，它负责加载 <em>ClassPath</em> 上所有的类库，如果应用程序中没有定义自己的类加载器，默认使用就是这个类加载器。</p>\n</li>\n</ul>\n<p>所以，我们的 Java 应用程序都是由这三种类加载器来相互配合完成的，当然，用户也可以自己定义类加载器，即 _User Class Loader_，这几个类加载器的模型如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545247.jpeg\"></p>\n<p>上面这几类类加载器构成了不同的层次结构，当我们需要加载一个类时，子类加载器并不会马上去加载，而是依次去请求父类加载器加载，一直往上请求到最高类加载器：启动类加载器。当启动类加载器加载不了的时候，依次往下让子类加载器进行加载。这就是双亲委派模型。</p>\n<h2 id=\"双亲委派模型的缺陷？\"><a href=\"#双亲委派模型的缺陷？\" class=\"headerlink\" title=\"双亲委派模型的缺陷？\"></a>双亲委派模型的缺陷？</h2><p>在双亲委派模型中，子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。这就导致了双亲委派模型并不能解决所有的类加载器问题。</p>\n<p>Java 提供了很多外部接口，这些接口统称为 _Service Provider Interface, SPI_，允许第三方实现这些接口，而这些接口却是 Java 核心类提供的，由 Bootstrap Class Loader 加载，而一般的扩展接口是由 Application Class Loader 加载的，Bootstrap Class Loader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 Application Class Loader，因为它是最顶层的类加载器。</p>\n<h2 id=\"双亲委派机制的三次破坏\"><a href=\"#双亲委派机制的三次破坏\" class=\"headerlink\" title=\"双亲委派机制的三次破坏\"></a>双亲委派机制的三次破坏</h2><p>虽然双亲委派机制是 Java 强烈推荐给开发者们的类加载器的实现方式，但是并没有强制规定你必须就要这么实现，所以，它一样也存在被破坏的情况，实际上，历史上一共出现三次双亲委派机制被破坏的情况：</p>\n<ul>\n<li><p>  双亲委派机制第一次被破坏发生在双亲委派机制出现之前，由于双亲委派机制 JDK 1.2 之后才引用的，但类加载的概念在 Java 刚出现的时候就有了，所以引用双亲委派机制之前，设计者们必须兼顾开发者们自定义的一些类加载器的代码，所以在 JDK 1.2 之后的 java.lang.ClassLoader 中添加了一个新的 <em>findClass</em> 方法，引导用户编写类加载器逻辑的时候重写这个 findClass 方法，而不是基于 <em>loadClass</em> 编写。</p>\n</li>\n<li><p>  双亲委派机制第二次被破坏是由于它自己模型导致的，由于它只能向上（基础）加载，越基础的类越由上层加载器加载，所以如果基础类型又想要调用用户的代码，该怎么办？这也就是我们上面那个问题所说的 SPI 机制。那么 JDK 团队是如何做的呢？它们引用了一个 **线程上下文类加载器 (Thread Context ClassLoader)**，这个类加载器可以通过 java.lang.Thread 类的 <em>setContextClassLoader</em> 进行设置，如果创建时线程还未设置，它将会从父线程中继承，如果全局没有设置类加载器的话，这个 ClassLoader 就是默认的类加载器。这种行为虽然是一种犯规行为，但是 Java 代码中的 <strong>JNDI、JDBC</strong> 等都是使用这种方式来完成的。直到 JDK 6 ，引用了 _java.util.ServiceLoader_，使用 <strong>META-INF/services</strong> + 责任链的设计模式，才解决了 SPI 的这种加载机制。</p>\n</li>\n<li><p>  双亲委派机制第三次被破坏是由于用户对程序的动态需求使热加载、热部署的引入所致。由于时代的变化，我们希望 Java 能像鼠标键盘一样实现热部署，即时加载（load class），引入了 OSGI，OSGI 实现热部署的关键在于它自定义类加载器机制的实现，OSGI 中的每一个 <em>Bundle</em> 也就是模块都有一个自己的类加载器。当需要更换 Bundle 时，就直接把 Bundle 连同类加载器一起替换掉就能够实现热加载。在 OSGI 环境下，类加载器不再遵从双亲委派机制，而是使用了一种更复杂的加载机制。</p>\n</li>\n</ul>\n<h2 id=\"常见的-JVM-调优参数有哪些？\"><a href=\"#常见的-JVM-调优参数有哪些？\" class=\"headerlink\" title=\"常见的 JVM 调优参数有哪些？\"></a>常见的 JVM 调优参数有哪些？</h2><ul>\n<li><p>  -Xms256m：初始化堆大小为 256m；</p>\n</li>\n<li><p>  -Xmx2g：最大内存为 2g；</p>\n</li>\n<li><p>  -Xmn50m：新生代的大小 50m；</p>\n</li>\n<li><p>  -XX:+PrintGCDetails 打印 gc 详细信息；</p>\n</li>\n<li><p>  -XX:+HeapDumpOnOutOfMemoryError  在发生 OutOfMemoryError 错误时，来 dump 出堆快照；</p>\n</li>\n<li><p>  -XX:NewRatio=4    设置年轻的和老年代的内存比例为 1:4；</p>\n</li>\n<li><p>  -XX:SurvivorRatio=8 设置新生代 Eden 和 Survivor 比例为 8:2；</p>\n</li>\n<li><p>  -XX:+UseSerialGC   新生代和老年代都用串行收集器 Serial + Serial Old</p>\n</li>\n<li><p>  -XX:+UseParNewGC 指定使用 ParNew + Serial Old 垃圾回收器组合；</p>\n</li>\n<li><p>  -XX:+UseParallelGC  新生代使用 Parallel Scavenge，老年代使用 Serial Old</p>\n</li>\n<li><p>  -XX:+UseParallelOldGC：新生代 ParallelScavenge + 老年代 ParallelOld 组合；</p>\n</li>\n<li><p>  -XX:+UseConcMarkSweepGC：新生代使用 ParNew，老年代使用 CMS；</p>\n</li>\n<li><p>  -XX:NewSize：新生代最小值；</p>\n</li>\n<li><p>  -XX:MaxNewSize：新生代最大值</p>\n</li>\n<li><p>  -XX:MetaspaceSize 元空间初始化大小</p>\n</li>\n<li><p>  -XX:MaxMetaspaceSize 元空间最大值</p>\n</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这篇文章是 JVM 面试题的第二版，新增了很多内容，写的时间也比较长了，如果你觉得文章还不错的话，大家三连走起！另外，分享到朋友圈是对我莫大的支持，感谢！不骗你，看完真的需要一小时。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg\" alt=\"题图\"></p>","more":"<h2 id=\"JVM-的主要作用是什么？\"><a href=\"#JVM-的主要作用是什么？\" class=\"headerlink\" title=\"JVM 的主要作用是什么？\"></a>JVM 的主要作用是什么？</h2><p>JVM 就是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码 （字节码），就可以在不同的平台上运行。</p>\n<!--more-->\n<h2 id=\"请你描述一下-Java-的内存区域？\"><a href=\"#请你描述一下-Java-的内存区域？\" class=\"headerlink\" title=\"请你描述一下 Java 的内存区域？\"></a>请你描述一下 Java 的内存区域？</h2><p>JVM 在执行 Java 程序的过程中会把它管理的内存分为若干个不同的区域，这些组成部分有些是线程私有的，有些则是线程共享的，Java 内存区域也叫做运行时数据区，它的具体划分如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021541641.jpeg\"></p>\n<ul>\n<li>  <code>虚拟机栈</code> : Java 虚拟机栈是线程私有的数据区，Java 虚拟机栈的生命周期与线程相同，虚拟机栈也是局部变量的存储位置。方法在执行过程中，会在虚拟机栈中创建一个 <code>栈帧(stack frame)</code>。每个方法执行的过程就对应了一个入栈和出栈的过程。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542066.jpeg\"></p>\n<ul>\n<li><p><code>本地方法栈</code>: 本地方法栈也是线程私有的数据区，本地方法栈存储的区域主要是 Java 中使用 <code>native</code> 关键字修饰的方法所存储的区域。</p>\n</li>\n<li><p><code>程序计数器</code>：程序计数器也是线程私有的数据区，这部分区域用于存储线程的指令地址，用于判断线程的分支、循环、跳转、异常、线程切换和恢复等功能，这些都通过程序计数器来完成。</p>\n</li>\n<li><p><code>方法区</code>：方法区是各个线程共享的内存区域，它用于存储虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n</li>\n<li><p><code>堆</code>：堆是线程共享的数据区，堆是 JVM 中最大的一块存储区域，所有的对象实例都会分配在堆上。JDK 1.7 后，字符串常量池从永久代中剥离出来，存放在堆中。</p>\n<p>堆空间的内存分配（默认情况下）：</p>\n<p>命令行上执行如下命令，会查看默认的 JVM 参数。</p>\n<pre><code class=\"java\">java -XX:+PrintFlagsFinal -version\n</code></pre>\n<p>输出的内容非常多，但是只有两行能够反映出上面的内存分配结果</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032217.jpeg\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031032772.jpeg\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021542355.jpeg\"></p>\n</li>\n<li><p>eden 区：8/10 的年轻代空间</p>\n</li>\n<li><p>survivor 0 : 1/10 的年轻代空间</p>\n</li>\n<li><p>survivor 1 : 1/10 的年轻代空间</p>\n</li>\n<li><p>老年代 ：三分之二的堆空间</p>\n</li>\n<li><p>年轻代 ：三分之一的堆空间</p>\n</li>\n<li><p><code>运行时常量池</code>：运行时常量池又被称为 <code>Runtime Constant Pool</code>，这块区域是方法区的一部分，它的名字非常有意思，通常被称为 <code>非堆</code>。它并不要求常量一定只有在编译期才能产生，也就是并非编译期间将常量放在常量池中，运行期间也可以将新的常量放入常量池中，String 的 intern 方法就是一个典型的例子。</p>\n</li>\n</ul>\n<h2 id=\"请你描述一下-Java-中的类加载机制？\"><a href=\"#请你描述一下-Java-中的类加载机制？\" class=\"headerlink\" title=\"请你描述一下 Java 中的类加载机制？\"></a>请你描述一下 Java 中的类加载机制？</h2><p>Java 虚拟机负责把描述类的数据从 Class 文件加载到系统内存中，并对类的数据进行<strong>校验、转换解析和初始化</strong>，最终形成可以被虚拟机直接使用的 Java 类型，这个过程被称之为 Java 的<code>类加载机制</code>。</p>\n<p>一个类从被加载到虚拟机内存开始，到卸载出内存为止，一共会经历下面这些过程。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544280.jpeg\"></p>\n<p>类加载机制一共有五个步骤，分别是<strong>加载、链接、初始化、使用和卸载</strong>阶段，这五个阶段的顺序是确定的。</p>\n<p>其中链接阶段会细分成三个阶段，分别是验证、准备、解析阶段，这三个阶段的顺序是不确定的，这三个阶段通常交互进行。解析阶段通常会在初始化之后再开始，这是为了支持 Java 语言的运行时绑定特性（也被称为<code>动态绑定</code>）。</p>\n<p>下面我们就来聊一下这几个过程。</p>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><p>关于什么时候开始加载这个过程，《Java 虚拟机规范》并没有强制约束，所以这一点我们可以自由实现。加载是整个类加载过程的第一个阶段，在这个阶段，Java 虚拟机需要完成三件事情：</p>\n<ul>\n<li><p>  通过一个类的全限定名来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>  将这个字节流表示的一种存储结构转换为运行时数据区中方法区的数据结构。</p>\n</li>\n<li><p>  在内存中生成一个 Class 对象，这个对象就代表了这个数据结构的访问入口。</p>\n</li>\n</ul>\n<p>《Java 虚拟机规范》并未规定全限定名是如何获取的，所以现在业界有很多获取全限定名的方式：</p>\n<ul>\n<li><p>  从 ZIP 包中读取，最终会改变为 JAR、EAR、WAR 格式。</p>\n</li>\n<li><p>  从网络中获取，最常见的应用就是 Web Applet。</p>\n</li>\n<li><p>  运行时动态生成，使用最多的就是动态代理技术。</p>\n</li>\n<li><p>  由其他文件生成，比如 JSP 应用场景，由 JSP 文件生成对应的 Class 文件。</p>\n</li>\n<li><p>  从数据库中读取，这种场景就比较小了。</p>\n</li>\n<li><p>  可以从加密文件中获取，这是典型的防止 Class 文件被反编译的保护措施。</p>\n</li>\n</ul>\n<p>加载阶段既可以使用虚拟机内置的引导类加载器来完成，也可以使用用户自定义的类加载器来完成。程序员可以通过自己定义类加载器来控制字节流的访问方式。</p>\n<p>数组的加载不需要通过类加载器来创建，它是直接在内存中分配，但是数组的元素类型（数组去掉所有维度的类型）最终还是要靠类加载器来完成加载。</p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>加载过后的下一个阶段就是验证，因为我们上一步讲到在内存中生成了一个 Class 对象，这个对象是访问其代表数据结构的入口，所以这一步验证的工作就是确保 Class 文件的字节流中的内容符合《Java 虚拟机规范》中的要求，保证这些信息被当作代码运行后，它不会威胁到虚拟机的安全。</p>\n<p>验证阶段主要分为四个阶段的检验：</p>\n<ul>\n<li><p>  文件格式验证。</p>\n</li>\n<li><p>  元数据验证。</p>\n</li>\n<li><p>  字节码验证。</p>\n</li>\n<li><p>  符号引用验证。</p>\n</li>\n</ul>\n<p><strong>文件格式验证</strong></p>\n<p>这一阶段可能会包含下面这些验证点：</p>\n<ul>\n<li><p>  魔数是否以 <code>0xCAFEBABE</code> 开头。</p>\n</li>\n<li><p>  主、次版本号是否在当前 Java 虚拟机接受范围之内。</p>\n</li>\n<li><p>  常量池的常量中是否有不支持的常量类型。</p>\n</li>\n<li><p>  指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</p>\n</li>\n<li><p>  CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据。</p>\n</li>\n<li><p>  Class 文件中各个部分及文件本身是否有被删除的或附加的其他信息。</p>\n</li>\n</ul>\n<p>实际上验证点远远不止有这些，上面这些只是从 HotSpot 源码中摘抄的一小段内容。</p>\n<p><strong>元数据验证</strong></p>\n<p>这一阶段主要是对字节码描述的信息进行语义分析，以确保描述的信息符合《Java 语言规范》，验证点包括</p>\n<ul>\n<li><p>  验证的类是否有父类（除了 Object 类之外，所有的类都应该有父类）。</p>\n</li>\n<li><p>  要验证类的父类是否继承了不允许继承的类。</p>\n</li>\n<li><p>  如果这个类不是抽象类，那么这个类是否实现了父类或者接口中要求的所有方法。</p>\n</li>\n<li><p>  是否覆盖了 final 字段，是否出现了不符合规定的重载等。</p>\n</li>\n</ul>\n<p>需要记住这一阶段只是对《Java 语言规范》的验证。</p>\n<p><strong>字节码验证</strong></p>\n<p>字节码验证阶段是最复杂的一个阶段，这个阶段主要是确定程序语意是否合法、是否是符合逻辑的。这个阶段主要是对类的方法体（Class 文件中的 Code 属性）进行校验分析。这部分验证包括</p>\n<ul>\n<li><p>  确保操作数栈的数据类型和实际执行时的数据类型是否一致。</p>\n</li>\n<li><p>  保证任何跳转指令不会跳出到方法体外的字节码指令上。</p>\n</li>\n<li><p>  保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是不能把父类数据类型赋值给子类等诸如此不安全的类型转换。</p>\n</li>\n<li><p>  其他验证。</p>\n</li>\n</ul>\n<p>如果没有通过字节码验证，就说明验证出问题。但是不一定通过了字节码验证，就能保证程序是安全的。</p>\n<p><strong>符号引用验证</strong></p>\n<p>最后一个阶段的校验行为发生在虚拟机将符号引用转换为直接引用的时候，这个转化将在连接的第三个阶段，即解析阶段中发生。符号引用验证可以看作是对类自身以外的各类信息进行匹配性校验，这个验证主要包括</p>\n<ul>\n<li><p>  符号引用中的字符串全限定名是否能找到对应的类。</p>\n</li>\n<li><p>  指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</p>\n</li>\n<li><p>  符号引用的类、字段方法的可访问性是否可被当前类所访问。</p>\n</li>\n<li><p>  其他验证。</p>\n</li>\n</ul>\n<p>这一阶段主要是确保解析行为能否正常执行，如果无法通过符号引用验证，就会出现类似 <code>IllegalAccessError</code>、<code>NoSuchFieldError</code>、<code>NoSuchMethodError</code> 等错误。</p>\n<p>验证阶段对于虚拟机来说非常重要，如果能通过验证，就说明你的程序在运行时不会产生任何影响。</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>准备阶段是为类中的变量分配内存并设置其初始值的阶段，这些变量所使用的内存都应当在方法区中进行分配，在 JDK 7 之前，HotSpot 使用永久代来实现方法区，是符合这种逻辑概念的。而在 JDK 8 之后，变量则会随着 Class 对象一起存放在 Java 堆中。</p>\n<p>下面通常情况下的基本类型和引用类型的初始值</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544012.jpeg\"></p>\n<p>除了 “通常情况” 下，还有一些 “例外情况”，如果类字段属性中存在 <code>ConstantValue</code> 属性，那就这个变量值在初始阶段就会初始化为 ConstantValue 属性所指定的初始值，比如</p>\n<pre><code class=\"java\">public static final int value = &quot;666&quot;;\n</code></pre>\n<p>编译时就会把 value 的值设置为 666。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>解析阶段是 Java 虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<ul>\n<li><p>  <code>符号引用</code>：符号引用以一组符号来描述所引用的目标。符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可，符号引用和虚拟机的布局无关。</p>\n</li>\n<li><p>  <code>直接引用</code>：直接引用可以直接指向目标的指针、相对便宜量或者一个能间接定位到目标的句柄。直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。如果有了直接引用，那么直接引用的目标一定被加载到了内存中。</p>\n</li>\n</ul>\n<p>这样说你可能还有点不明白，我再换一种说法：</p>\n<blockquote>\n<p>在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，所以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化成为真正的地址的阶段。</p>\n</blockquote>\n<p>《Java 虚拟机规范》并未规定解析阶段发生的时间，只要求了在 anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield 和 putstatic 这 17 个用于操作符号引用的字节码指令之前，先对所使用的符号引用进行解析。</p>\n<p>解析也分为四个步骤</p>\n<ul>\n<li><p>  类或接口的解析</p>\n</li>\n<li><p>  字段解析</p>\n</li>\n<li><p>  方法解析</p>\n</li>\n<li><p>  接口方法解析</p>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化是类加载过程的最后一个步骤，在之前的阶段中，都是由 Java 虚拟机占主导作用，但是到了这一步，却把主动权移交给应用程序。</p>\n<p>对于初始化阶段，《Java 虚拟机规范》严格规定了只有下面这六种情况下才会触发类的初始化。</p>\n<ul>\n<li><p>  在遇到 new、getstatic、putstatic 或者 invokestatic 这四条字节码指令时，如果没有进行过初始化，那么首先触发初始化。通过这四个字节码的名称可以判断，这四条字节码其实就两个场景，调用 new 关键字的时候进行初始化、读取或者设置一个静态字段的时候、调用静态方法的时候。</p>\n</li>\n<li><p>  在初始化类的时候，如果父类还没有初始化，那么就需要先对父类进行初始化。</p>\n</li>\n<li><p>  在使用 java.lang.reflect 包的方法进行反射调用的时候。</p>\n</li>\n<li><p>  当虚拟机启动时，用户需要指定执行主类的时候，说白了就是虚拟机会先初始化 main 方法这个类。</p>\n</li>\n<li><p>  在使用 JDK 7 新加入的动态语言支持时，如果一个 jafva.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getstatic、REF_putstatic、REF_invokeStatic、REF_newInvokeSpecial 四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，需要先对其进行初始化。</p>\n</li>\n<li><p>  当一个接口中定义了 JDK 8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<p>其实上面只有前四个大家需要知道就好了，后面两个比较冷门。</p>\n<blockquote>\n<p>如果说要回答类加载的话，其实聊到这里已经可以了，但是为了完整性，我们索性把后面两个过程也来聊一聊。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>这个阶段没什么可说的，就是初始化之后的代码由 JVM 来动态调用执行。</p>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>当代表一个类的 Class 对象不再被引用，那么 Class 对象的生命周期就结束了，对应的在方法区中的数据也会被卸载。</p>\n<blockquote>\n<p>⚠️但是需要注意一点：JVM 自带的类加载器装载的类，是不会卸载的，由用户自定义的类加载器加载的类是可以卸载的。</p>\n</blockquote>\n<h2 id=\"在-JVM-中，对象是如何创建的？\"><a href=\"#在-JVM-中，对象是如何创建的？\" class=\"headerlink\" title=\"在 JVM 中，对象是如何创建的？\"></a>在 JVM 中，对象是如何创建的？</h2><p>如果要回答对象是怎么创建的，我们一般想到的回答是直接 <code>new</code> 出来就行了，这个回答不仅局限于编程中，也融入在我们生活中的方方面面。</p>\n<p>但是遇到面试的时候你只回答一个 “new 出来就行了” 显然是不行的，因为面试更趋向于让你解释当程序执行到 new 这条指令时，它的背后发生了什么。</p>\n<p>所以你需要从 JVM 的角度来解释这件事情。</p>\n<p>当虚拟机遇到一个 new 指令时（其实就是字节码），首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用所代表的类是否已经被加载、解析和初始化。</p>\n<blockquote>\n<p>因为此时很可能不知道具体的类是什么，所以这里使用的是符号引用。</p>\n</blockquote>\n<p>如果发现这个类没有经过上面类加载的过程，那么就执行相应的类加载过程。</p>\n<p>类检查完成后，接下来虚拟机将会为新生对象<strong>分配内存</strong>，对象所需的大小在类加载完成后便可确定（我会在下面的面试题中介绍）。</p>\n<p>分配内存相当于是把一块固定的内存块从堆中划分出来。划分出来之后，虚拟机会将分配到的内存空间都初始化为零值，如果使用了 <code>TLAB</code>（本地线程分配缓冲），这一项初始化工作可以提前在 TLAB 分配时进行。这一步操作保证了对象实例字段在 Java 代码中可以不赋值就能直接使用。</p>\n<p>接下来，Java 虚拟机还会对对象进行必要的设置，比如确定对象是哪个类的实例、对象的 hashcode、对象的 gc 分代年龄信息。这些信息存放在对象的对象头（Object Header）中。</p>\n<p>如果上面的工作都做完后，从虚拟机的角度来说，一个新的对象就创建完毕了；但是对于程序员来说，对象创建才刚刚开始，因为构造函数，即 Class 文件中的 <code>&lt;init&gt;()</code> 方法还没有执行，所有字段都为默认的零值。new 指令之后才会执行 <code>&lt;init&gt;()</code> 方法，然后按照程序员的意愿对对象进行初始化，这样一个对象才可能被完整的构造出来。</p>\n<h2 id=\"内存分配方式有哪些呢？\"><a href=\"#内存分配方式有哪些呢？\" class=\"headerlink\" title=\"内存分配方式有哪些呢？\"></a>内存分配方式有哪些呢？</h2><p>在类加载完成后，虚拟机需要为新生对象分配内存，为对象分配内存相当于是把一块确定的区域从堆中划分出来，这就涉及到一个问题，<strong>要划分的堆区是否规整</strong>。</p>\n<p>假设 Java 堆中内存是规整的，所有使用过的内存放在一边，未使用的内存放在一边，中间放着一个指针，这个指针为分界指示器。那么为新对象分配内存空间就相当于是把指针向空闲的空间挪动对象大小相等的距离，这种内存分配方式叫做<code>指针碰撞(Bump The Pointer)</code>。</p>\n<p>如果 Java 堆中的内存并不是规整的，已经被使用的内存和未被使用的内存相互交错在一起，这种情况下就没有办法使用指针碰撞，这里就要使用另外一种记录内存使用的方式：<code>空闲列表(Free List)</code>，空闲列表维护了一个列表，这个列表记录了哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。</p>\n<p>所以，上述两种分配方式选择哪个，取决于 Java 堆是否规整来决定。在一些垃圾收集器的实现中，Serial、ParNew 等带压缩整理过程的收集器，使用的是指针碰撞；而使用 CMS 这种基于清除算法的收集器时，使用的是空闲列表，具体的垃圾收集器我们后面会聊到。</p>\n<h2 id=\"请你说一下对象的内存布局？\"><a href=\"#请你说一下对象的内存布局？\" class=\"headerlink\" title=\"请你说一下对象的内存布局？\"></a>请你说一下对象的内存布局？</h2><p>在 <code>hotspot</code> 虚拟机中，对象在内存中的布局分为三块区域：</p>\n<ul>\n<li><p>  <code>对象头(Header)</code></p>\n</li>\n<li><p>  <code>实例数据(Instance Data)</code></p>\n</li>\n<li><p>  <code>对齐填充(Padding)</code></p>\n</li>\n</ul>\n<p>这三块区域的内存分布如下图所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544691.jpeg\"></p>\n<p>我们来详细介绍一下上面对象中的内容。</p>\n<h3 id=\"对象头-Header\"><a href=\"#对象头-Header\" class=\"headerlink\" title=\"对象头 Header\"></a>对象头 Header</h3><p>对象头 Header 主要包含 MarkWord 和对象指针 Klass Pointer，如果是数组的话，还要包含数组的长度。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544746.jpeg\"></p>\n<p>在 32 位的虚拟机中 MarkWord ，Klass Pointer 和数组长度分别占用 32 位，也就是 4 字节。</p>\n<p>如果是 64 位虚拟机的话，MarkWord ，Klass Pointer 和数组长度分别占用 64 位，也就是 8 字节。</p>\n<p>在 32 位虚拟机和 64 位虚拟机的 Mark Word 所占用的字节大小不一样，32 位虚拟机的 Mark Word 和 Klass Pointer 分别占用 32 bits 的字节，而 64 位虚拟机的 Mark Word 和 Klass Pointer 占用了 64 bits 的字节，下面我们以 32 位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544554.jpeg\"></p>\n<p>用中文翻译过来就是</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544702.jpeg\"></p>\n<ul>\n<li><p>  无状态也就是<code>无锁</code>的时候，对象头开辟 25 bit 的空间用来存储对象的 hashcode ，4 bit 用于存放分代年龄，1 bit 用来存放是否偏向锁的标识位，2 bit 用来存放锁标识位为 01。</p>\n</li>\n<li><p>  <code>偏向锁</code> 中划分更细，还是开辟 25 bit 的空间，其中 23 bit 用来存放线程 ID，2bit 用来存放 epoch，4bit 存放分代年龄，1 bit 存放是否偏向锁标识， 0 表示无锁，1 表示偏向锁，锁的标识位还是 01。</p>\n</li>\n<li><p>  <code>轻量级锁</code>中直接开辟 30 bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志位，其标志位为 00。</p>\n</li>\n<li><p>  <code>重量级锁</code>中和轻量级锁一样，30 bit 的空间用来存放指向重量级锁的指针，2 bit 存放锁的标识位，为 11</p>\n</li>\n<li><p>  <code>GC标记</code>开辟 30 bit 的内存空间却没有占用，2 bit 空间存放锁标志位为 11。</p>\n</li>\n</ul>\n<p>其中无锁和偏向锁的锁标志位都是 01，只是在前面的 1 bit 区分了这是无锁状态还是偏向锁状态。</p>\n<p>关于为什么这么分配的内存，我们可以从 <code>OpenJDK</code> 中的 markOop.hpp 类中的枚举窥出端倪</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544018.jpeg\"></p>\n<p>来解释一下</p>\n<ul>\n<li><p>  age_bits 就是我们说的分代回收的标识，占用 4 字节</p>\n</li>\n<li><p>  lock_bits 是锁的标志位，占用 2 个字节</p>\n</li>\n<li><p>  biased_lock_bits 是是否偏向锁的标识，占用 1 个字节。</p>\n</li>\n<li><p>  max_hash_bits 是针对无锁计算的 hashcode 占用字节数量，如果是 32 位虚拟机，就是 32 - 4 - 2 -1 = 25 byte，如果是 64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以 64 位的 hashcode 占用 31 byte。</p>\n</li>\n<li><p>  hash_bits 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取 31，否则取真实的字节数</p>\n</li>\n<li><p>  cms_bits 我觉得应该是不是 64 位虚拟机就占用 0 byte，是 64 位就占用 1byte</p>\n</li>\n<li><p>  epoch_bits 就是 epoch 所占用的字节大小，2 字节。</p>\n</li>\n</ul>\n<p>在上面的虚拟机对象头分配表中，我们可以看到有几种锁的状态：无锁（无状态），偏向锁，轻量级锁，重量级锁，其中轻量级锁和偏向锁是 JDK1.6 中对 synchronized 锁进行优化后新增加的，其目的就是为了大大优化锁的性能，所以在 JDK 1.6 中，使用 synchronized 的开销也没那么大了。其实从锁有无锁定来讲，还是只有无锁和重量级锁，偏向锁和轻量级锁的出现就是增加了锁的获取性能而已，并没有出现新的锁。</p>\n<p>所以我们的重点放在对 synchronized 重量级锁的研究上，当 monitor 被某个线程持有后，它就会处于锁定状态。在 HotSpot 虚拟机中，monitor 的底层代码是由 <code>ObjectMonitor</code> 实现的，其主要数据结构如下（位于 HotSpot 虚拟机源码 ObjectMonitor.hpp 文件，C++ 实现的）</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544172.jpeg\"></p>\n<p>这段 C++ 中需要注意几个属性：_WaitSet 、 _EntryList 和 _Owner，每个等待获取锁的线程都会被封装称为 <code>ObjectWaiter</code> 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544929.jpeg\"></p>\n<p>_Owner 是指向了 ObjectMonitor 对象的线程，而 _WaitSet 和 _EntryList 就是用来保存每个线程的列表。</p>\n<blockquote>\n<p>那么这两个列表有什么区别呢？这个问题我和你聊一下锁的获取流程你就清楚了。</p>\n</blockquote>\n<p><strong>锁的两个列表</strong></p>\n<p>当多个线程同时访问某段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的 monitor 之后，就会进入 _Owner 区域，并把 ObjectMonitor 对象的 _Owner 指向为当前线程，并使 _count + 1，如果调用了释放锁（比如 wait）的操作，就会释放当前持有的 monitor ，owner = null， _count - 1，同时这个线程会进入到 _WaitSet 列表中等待被唤醒。如果当前线程执行完毕后也会释放 monitor 锁，只不过此时不会进入 _WaitSet 列表了，而是直接复位 _count 的值。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544437.jpeg\"></p>\n<p>Klass Pointer 表示的是类型指针，也就是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>\n<blockquote>\n<p>你可能不是很理解指针是个什么概念，你可以简单理解为指针就是指向某个数据的地址。</p>\n</blockquote>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021544199.jpeg\"></p>\n<h3 id=\"实例数据-Instance-Data\"><a href=\"#实例数据-Instance-Data\" class=\"headerlink\" title=\"实例数据 Instance Data\"></a>实例数据 Instance Data</h3><p>实例数据部分是对象真正存储的有效信息，也是代码中定义的各个字段的字节大小，比如一个 byte 占 1 个字节，一个 int 占用 4 个字节。</p>\n<h3 id=\"对齐-Padding\"><a href=\"#对齐-Padding\" class=\"headerlink\" title=\"对齐 Padding\"></a>对齐 Padding</h3><p>对齐不是必须存在的，它只起到了占位符 (%d, %c 等) 的作用。这就是 JVM 的要求了，因为 HotSpot JVM 要求对象的起始地址必须是 8 字节的整数倍，也就是说对象的字节大小是 8 的整数倍，不够的需要使用 Padding 补全。</p>\n<h2 id=\"对象访问定位的方式有哪些？\"><a href=\"#对象访问定位的方式有哪些？\" class=\"headerlink\" title=\"对象访问定位的方式有哪些？\"></a>对象访问定位的方式有哪些？</h2><p>我们创建一个对象的目的当然就是为了使用它，但是，一个对象被创建出来之后，在 JVM 中是如何访问这个对象的呢？一般有两种方式：<strong>通过句柄访问</strong>和 <strong>通过直接指针访问</strong>。</p>\n<ul>\n<li><p>如果使用句柄访问方式的话，Java 堆中可能会划分出一块内存作为句柄池，引用（reference）中存储的是对象的句柄地址，而句柄中包含了对象的实例数据与类型数据各自具体的地址信息。如下图所示。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545142.jpeg\"></p>\n</li>\n<li><p>如果使用直接指针访问的话，Java 堆中对象的内存布局就会有所区别，栈区引用指示的是堆中的实例数据的地址，如果只是访问对象本身的话，就不会多一次直接访问的开销，而对象类型数据的指针是存在于方法区中，如果定位的话，需要多一次直接定位开销。如下图所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545927.jpeg\"></p>\n</li>\n</ul>\n<p>这两种对象访问方式各有各的优势，使用句柄最大的好处就是引用中存储的是句柄地址，对象移动时只需改变句柄的地址就可以，而无需改变对象本身。</p>\n<p>使用直接指针来访问速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因为这类的开销也是值得优化的地方。</p>\n<p>上面聊到了对象的两种数据，一种是对象的实例数据，这没什么好说的，就是对象实例字段的数据，一种是对象的类型数据，这个数据说的是对象的类型、父类、实现的接口和方法等。</p>\n<h2 id=\"如何判断对象已经死亡？\"><a href=\"#如何判断对象已经死亡？\" class=\"headerlink\" title=\"如何判断对象已经死亡？\"></a>如何判断对象已经死亡？</h2><p>我们大家知道，基本上所有的对象都在堆中分布，当我们不再使用对象的时候，垃圾收集器会对无用对象进行回收♻️，那么 JVM 是如何判断哪些对象已经是 “无用对象” 的呢？</p>\n<p>这里有两种判断方式，首先我们先来说第一种：<strong>引用计数法</strong>。</p>\n<p>引用计数法的判断标准是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就会加一；当引用失效时，计数器的值就会减一；只要任何时刻计数器为零的对象就是不会再被使用的对象。虽然这种判断方式非常简单粗暴，但是往往很有用，不过，在 Java 领域，主流的 Hotspot 虚拟机实现并没有采用这种方式，因为引用计数法不能解决对象之间的循环引用问题。</p>\n<p>循环引用问题简单来讲就是两个对象之间互相依赖着对方，除此之外，再无其他引用，这样虚拟机无法判断引用是否为零从而进行垃圾回收操作。</p>\n<p>还有一种判断对象无用的方法就是<strong>可达性分析算法</strong>。</p>\n<p>当前主流的 JVM 都采用了可达性分析算法来进行判断，这个算法的基本思路就是通过一系列被称为<code>GC Roots</code>的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程走过的路径被称为<code>引用链</code>（Reference Chain），如果某个对象到 GC Roots 之间没有任何引用链相连接，或者说从 GC Roots 到这个对象不可达时，则证明此这个对象是无用对象，需要被垃圾回收。</p>\n<p>这种引用方式如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545756.jpeg\"></p>\n<p>如上图所示，从枚举根节点 GC Roots 开始进行遍历，object 1 、2、3、4 是存在引用关系的对象，而 object 5、6、7 之间虽然有关联，但是它们到 GC Roots 之间是不可达的，所以被认为是可以回收的对象。</p>\n<p>在 Java 技术体系中，可以作为 GC Roots 进行检索的对象主要有</p>\n<ul>\n<li><p>  在虚拟机栈（栈帧中的本地变量表）中引用的对象。</p>\n</li>\n<li><p>  方法区中类静态属性引用的对象，比如 Java 类的引用类型静态变量。</p>\n</li>\n<li><p>  方法区中常量引用的对象，比如字符串常量池中的引用。</p>\n</li>\n<li><p>  在本地方法栈中 JNI 引用的对象。</p>\n</li>\n<li><p>  JVM 内部的引用，比如基本数据类型对应的 Class 对象，一些异常对象比如 NullPointerException、OutOfMemoryError 等，还有系统类加载器。</p>\n</li>\n<li><p>  所有被 synchronized 持有的对象。</p>\n</li>\n<li><p>  还有一些 JVM 内部的比如 JMXBean、JVMTI 中注册的回调，本地代码缓存等。</p>\n</li>\n<li><p>  根据用户所选的垃圾收集器以及当前回收的内存区域的不同，还可能会有一些对象临时加入，共同构成 GC Roots 集合。</p>\n</li>\n</ul>\n<p>虽然我们上面提到了两种判断对象回收的方法，但无论是引用计数法还是判断 GC Roots 都离不开<code>引用</code>这一层关系。</p>\n<p>这里涉及到到强引用、软引用、弱引用、虚引用的引用关系，你可以阅读作者的这一篇文章</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247495968&idx=1&sn=48de091f4fabdf682a9f8b5ddd8db936&chksm=c04ae67ef73d6f68935382dcaa0bd4d538a9e0b45ee49500ee7e2356cc24dba750b197960477&token=1191632986&lang=zh_CN&scene=21#wechat_redirect\">小心点，别被当成垃圾回收了。</a></p>\n<h2 id=\"如何判断一个不再使用的类？\"><a href=\"#如何判断一个不再使用的类？\" class=\"headerlink\" title=\"如何判断一个不再使用的类？\"></a>如何判断一个不再使用的类？</h2><p>判断一个类型属于 “不再使用的类” 需要满足下面这三个条件</p>\n<ul>\n<li><p>  这个类所有的实例已经被回收，也就是 Java 堆中不存在该类及其任何这个类字类的实例</p>\n</li>\n<li><p>  加载这个类的类加载器已经被回收，但是类加载器一般很难会被回收，除非这个类加载器是为了这个目的设计的，比如 OSGI、JSP 的重加载等，否则通常很难达成。</p>\n</li>\n<li><p>  这个类对应的 Class 对象没有任何地方被引用，无法在任何时刻通过反射访问这个类的属性和方法。</p>\n</li>\n</ul>\n<p>虚拟机允许对满足上面这三个条件的无用类进行回收操作。</p>\n<h2 id=\"JVM-分代收集理论有哪些？\"><a href=\"#JVM-分代收集理论有哪些？\" class=\"headerlink\" title=\"JVM 分代收集理论有哪些？\"></a>JVM 分代收集理论有哪些？</h2><p>一般商业的虚拟机，大多数都遵循了<strong>分代收集</strong>的设计思想，分代收集理论主要有两条假说。</p>\n<p>第一个是<strong>强分代假说</strong>，强分代假说指的是 JVM 认为绝大多数对象的生存周期都是朝生夕灭的；</p>\n<p>第二个是<strong>弱分代假说</strong>，弱分代假说指的是只要熬过越多次垃圾收集过程的对象就越难以回收（看来对象也会长心眼）。</p>\n<p>就是基于这两个假说理论，JVM 将<code>堆</code>区划分为不同的区域，再将需要回收的对象根据其熬过垃圾回收的次数分配到不同的区域中存储。</p>\n<p>JVM 根据这两条分代收集理论，把堆区划分为新生代 (Young Generation) 和老年代 (Old Generation) 这两个区域。在新生代中，每次垃圾收集时都发现有大批对象死去，剩下没有死去的对象会直接晋升到老年代中。</p>\n<p>上面这两个假说没有考虑对象的引用关系，而事实情况是，对象之间会存在引用关系，基于此又诞生了第三个假说，即**跨代引用假说 (Intergeneration Reference Hypothesis)**，跨代引用相比较同代引用来说仅占少数。</p>\n<p>正常来说存在相互引用的两个对象应该是同生共死的，不过也会存在特例，如果一个新生代对象跨代引用了一个老年代的对象，那么垃圾回收的时候就不会回收这个新生代对象，更不会回收老年代对象，然后这个新生代对象熬过一次垃圾回收进入到老年代中，这时候跨代引用才会消除。</p>\n<p>根据跨代引用假说，我们不需要因为老年代中存在少量跨代引用就去直接扫描整个老年代，也不用在老年代中维护一个列表记录有哪些跨代引用，实际上，可以直接在新生代中维护一个**记忆集 (Remembered Set)**，由这个记忆集把老年代划分称为若干小块，标识出老年代的哪一块会存在跨代引用。</p>\n<p>记忆集的图示如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545443.jpeg\"></p>\n<p>从图中我们可以看到，记忆集中的每个元素分别对应内存中的一块连续区域是否有跨代引用对象，如果有，该区域会被标记为 “脏的”（dirty），否则就是 “干净的”（clean）。这样在垃圾回收时，只需要扫描记忆集就可以简单地确定跨代引用的位置，是个典型的空间换时间的思路。</p>\n<h2 id=\"聊一聊-JVM-中的垃圾回收算法？\"><a href=\"#聊一聊-JVM-中的垃圾回收算法？\" class=\"headerlink\" title=\"聊一聊 JVM 中的垃圾回收算法？\"></a>聊一聊 JVM 中的垃圾回收算法？</h2><p>在聊具体的垃圾回收算法之前，需要明确一点，哪些对象需要被垃圾收集器进行回收？也就是说需要先判断哪些对象是 “垃圾”？</p>\n<p>判断的标准我在上面<strong>如何判断对象已经死亡</strong>的问题中描述了，有两种方式，一种是引用计数法，这种判断标准就是给对象添加一个引用计数器，引用这个对象会使计数器的值 + 1，引用失效后，计数器的值就会 -1。但是这种技术无法解决对象之间的循环引用问题。</p>\n<p>还有一种方式是 GC Roots，GC Roots 这种方式是以 Root 根节点为核心，逐步向下搜索每个对象的引用，搜索走过的路径被称为引用链，如果搜索过后这个对象不存在引用链，那么这个对象就是无用对象，可以被回收。GC Roots 可以解决循环引用问题，所以一般 JVM 都采用的是这种方式。</p>\n<p>解决循环引用代码描述：</p>\n<pre><code class=\"java\">public class test&#123;\n    public static void main(String[]args)&#123;\n        A a = new A();\n        B b = new B();\n        a=null;\n        b=null;\n    &#125;\n&#125;\nclass A &#123;\n \n    public B b;\n&#125;\nclass B &#123;\n    public A a;\n&#125;\n\n</code></pre>\n<p>基于 GC Roots 的这种思想，发展出了很多垃圾回收算法，下面我们就来聊一聊这些算法。</p>\n<h3 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记 - 清除算法\"></a>标记 - 清除算法</h3><p>标记 - 清除 (Mark-Sweep) 这个算法可以说是最早最基础的算法了，标记 - 清除顾名思义分为两个阶段，即标记和清除阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。当然也可以标记存活的对象，回收未被标记的对象。这个标记的过程就是垃圾判定的过程。</p>\n<p>后续大部分垃圾回收算法都是基于标记 - 算法思想衍生的，只不过后续的算法弥补了标记 - 清除算法的缺点，那么它有什么缺点呢？主要有两个</p>\n<ul>\n<li><p>  <strong>执行效率不稳定</strong>，因为假如说堆中存在大量无用对象，而且大部分需要回收的情况下，这时必须进行大量的标记和清除，导致标记和清除这两个过程的执行效率随对象的数量增长而降低。</p>\n</li>\n<li><p>  <strong>内存碎片化</strong>，标记 - 清除算法会在堆区产生大量不连续的内存碎片。碎片太多会导致在分配大对象时没有足够的空间，不得不进行一次垃圾回收操作。</p>\n</li>\n</ul>\n<p>标记算法的示意图如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545881.jpeg\"></p>\n<h3 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记 - 复制算法\"></a>标记 - 复制算法</h3><p>由于标记 - 清除算法极易产生内存碎片，研究人员提出了标记 - 复制算法，标记 - 复制算法也可以简称为复制算法，复制算法是一种<strong>半区复制</strong>，它会将内存大小划分为相等的两块，每次只使用其中的一块，用完一块再用另外一块，然后再把用过的一块进行清除。虽然解决了部分内存碎片的问题，但是复制算法也带来了新的问题，即<strong>复制开销</strong>，不过这种开销是可以降低的，如果内存中大多数对象是无用对象，那么就可以把少数的存活对象进行复制，再回收无用的对象。</p>\n<p>不过复制算法的缺陷也是显而易见的，那就是内存空间缩小为原来的一半，空间浪费太明显。标记 - 复制算法示意图如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545639.jpeg\"></p>\n<p>现在 Java 虚拟机大多数都是用了这种算法来回收新生代，因为经过研究表明，新生代对象 98% 都熬不过第一轮收集，因此不需要按照 1 ：1 的比例来划分新生代的内存空间。</p>\n<p>基于此，研究人员提出了一种 Appel 式回收，Appel 式回收的具体做法是把新生代分为一块较大的 <em>Eden</em> 空间和两块 <em>Survivor</em> 空间，每次分配内存都只使用 Eden 和其中的一块 Survivor 空间，发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已使用过的 Survivor 空间。</p>\n<p>在主流的 HotSpot 虚拟机中，默认的 Eden 和 Survivor 大小比例是 8：1，也就是每次新生代中可用内存空间为整个新生代容量的 90%，只有一个 Survivor 空间，所以会浪费掉 10% 的空间。这个 8：1 只是一个理论值，也就是说，不能保证每次都有不超过 10% 的对象存活，所以，当进行垃圾回收后如果 Survivor 容纳不了可存活的对象后，就需要其他内存空间来进行<strong>帮助</strong>，这种方式就叫做<strong>内存担保 (Handle Promotion)</strong> ，通常情况下，作为担保的是老年代。</p>\n<h3 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记 - 整理算法\"></a>标记 - 整理算法</h3><p>标记 - 复制算法虽然解决了内存碎片问题，但是没有解决复制对象存在大量开销的问题。为了解决复制算法的缺陷，充分利用内存空间，提出了标记 - 整理算法。该算法标记阶段和标记 - 清除一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。具体过程如下图所示：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545233.jpeg\"></p>\n<h2 id=\"什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\"><a href=\"#什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\" class=\"headerlink\" title=\"什么是记忆集，什么是卡表？记忆集和卡表有什么关系？\"></a>什么是记忆集，什么是卡表？记忆集和卡表有什么关系？</h2><p>为了解决跨代引用问题，提出了记忆集这个概念，记忆集是一个在新生代中使用的数据结构，它相当于是记录了一些指针的集合，指向了老年代中哪些对象存在跨代引用。</p>\n<p>记忆集的实现有不同的粒度</p>\n<ul>\n<li><p>  <strong>字长精度</strong>：每个记录精确到一个字长，机器字长就是处理器的寻址位数，比如常见的 32 位或者 64 位处理器，这个精度决定了机器访问物理内存地址的指针长度，字中包含跨代指针。</p>\n</li>\n<li><p>  <strong>对象精度</strong>：每个记录精确到一个对象，该对象里含有跨代指针。</p>\n</li>\n<li><p>  <strong>卡精度</strong>：每个记录精确到一块内存区域，区域内含有跨代指针。</p>\n</li>\n</ul>\n<p>其中卡精度是使用了卡表作为记忆集的实现，关于记忆集和卡表的关系，大家可以想象成是 HashMap 和 Map 的关系。</p>\n<h2 id=\"什么是卡页？\"><a href=\"#什么是卡页？\" class=\"headerlink\" title=\"什么是卡页？\"></a>什么是卡页？</h2><p>卡表其实就是一个字节数组</p>\n<pre><code class=\"java\">CARD_TABLE[this address &gt;&gt; 9] = 0;\n</code></pre>\n<p>字节数组 CARD_TABLE 的每一个元素都对应着内存区域中一块特定大小的内存块，这个内存块就是<strong>卡页</strong>，一般来说，卡页都是 2 的 N 次幂字节数，通过上面的代码我们可以知道，卡页一般是 2 的 9 次幂，这也是 HotSpot 中使用的卡页，即 512 字节。</p>\n<p>一个卡页的内存通常包含不止一个对象，只要卡页中有一个对象的字段存在跨代指针，那就将对应卡表的数组元素的值设置为 1，称之为这个元素变<code>脏</code>了，没有标示则为 0 。在垃圾收集时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，然后把他们加入 GC Roots 进行扫描。</p>\n<p>所以，卡页和卡表主要用来解决跨代引用问题的。</p>\n<h2 id=\"什么是写屏障？写屏障带来的问题？\"><a href=\"#什么是写屏障？写屏障带来的问题？\" class=\"headerlink\" title=\"什么是写屏障？写屏障带来的问题？\"></a>什么是写屏障？写屏障带来的问题？</h2><p>如果有其他分代区域中对象引用了本区域的对象，那么其对应的卡表元素就会变脏，这个引用说的就是对象赋值，也就是说卡表元素会变脏发生在对象赋值的时候，那么如何在对象赋值的时候更新维护卡表呢？</p>\n<p>在 HotSpot 虚拟机中使用的是<strong>写屏障 (Write Barrier)</strong> 来维护卡表状态的，这个写屏障和我们内存屏障完全不同，希望读者不要搞混了。</p>\n<p>这个写屏障其实就是一个 Aop 切面，在引用对象进行赋值时会产生一个**环形通知 (Around)**，环形通知就是切面前后分别产生一个通知，因为这个又是写屏障，所以在赋值前的部分写屏障叫做写前屏障，在赋值后的则叫做写后屏障。</p>\n<p>写屏障会带来两个问题</p>\n<p><strong>无条件写屏障带来的性能开销</strong></p>\n<p>每次对引用的更新，无论是否更新了老年代对新生代对象的引用，都会进行一次写屏障操作。显然，这会增加一些额外的开销。但是，扫描整个老年代相比较，这个开销就低得多了。</p>\n<p>不过，在高并发环境下，写屏障又带来了伪共享（false sharing）问题。</p>\n<p><strong>高并发下伪共享带来的性能开销</strong></p>\n<p>在高并发情况下，频繁的写屏障很容易发生伪共享（false sharing），从而带来性能开销。</p>\n<p>假设 CPU 缓存行大小为 64 字节，由于一个卡表项占 1 个字节，这意味着，64 个卡表项将共享同一个缓存行。</p>\n<p>HotSpot 每个卡页为 512 字节，那么一个缓存行将对应 64 个卡页一共 64*512 = 32K B。</p>\n<p>如果不同线程对对象引用的更新操作，恰好位于同一个 32 KB 区域内，这将导致同时更新卡表的同一个缓存行，从而造成缓存行的写回、无效化或者同步操作，间接影响程序性能。</p>\n<p>一个简单的解决方案，就是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表项未被标记过才将其标记为脏的。</p>\n<p>这就是 JDK  7 中引入的解决方法，引入了一个新的 JVM 参数 _-XX:+UseCondCardMark_，在执行写屏障之前，先简单的做一下判断。如果卡页已被标识过，则不再进行标识。</p>\n<p>简单理解如下：</p>\n<pre><code class=\"java\">if (CARD_TABLE [this address &gt;&gt; 9] != 0)\n  CARD_TABLE [this address &gt;&gt; 9] = 0;\n\n</code></pre>\n<p>与原来的实现相比，只是简单的增加了一个判断操作。</p>\n<p>虽然开启 <em>-XX:+UseCondCardMark</em> 之后多了一些判断开销，但是却可以避免在高并发情况下可能发生的并发写卡表问题。通过减少并发写操作，进而避免出现伪共享问题（false sharing）。</p>\n<h2 id=\"什么是三色标记法？三色标记法会造成哪些问题？\"><a href=\"#什么是三色标记法？三色标记法会造成哪些问题？\" class=\"headerlink\" title=\"什么是三色标记法？三色标记法会造成哪些问题？\"></a>什么是三色标记法？三色标记法会造成哪些问题？</h2><p>根据可达性算法的分析可知，如果要找出存活对象，需要从 GC Roots 开始遍历，然后搜索每个对象是否可达，如果对象可达则为存活对象，在 GC Roots 的搜索过程中，按照<strong>对象和其引用是否被访问过</strong>这个条件会分成下面三种颜色：</p>\n<ul>\n<li><p>  白色：白色表示 GC Roots 的遍历过程中没有被访问过的对象，出现白色显然在可达性分析刚刚开始的阶段，这个时候所有对象都是白色的，如果在分析结束的阶段，仍然是白色的对象，那么代表不可达，可以进行回收。</p>\n</li>\n<li><p>  灰色：灰色表示对象已经被访问过，但是这个对象的引用还没有访问完毕。</p>\n</li>\n<li><p>  黑色：黑色表示此对象已经被访问过了，而且这个对象的引用也已经被访问了。</p>\n</li>\n</ul>\n<blockquote>\n<p>注：如果标记结束后对象仍为白色，意味着已经 “找不到” 该对象在哪了，不可能会再被重新引用。</p>\n</blockquote>\n<p>现代的垃圾回收器几乎都借鉴了三色标记的算法思想，尽管实现的方式不尽相同：比如白色 / 黑色集合一般都不会出现（但是有其他体现颜色的地方）、灰色集合可以通过栈 / 队列 / 缓存日志等方式进行实现、遍历方式可以是广度 / 深度遍历等等。</p>\n<p>三色标记法会造成两种问题，这两种问题所出现的环境都是由于<strong>用户环境和收集器并行工作造成的</strong> 。当用户线程正在修改引用关系，此时收集器在回收引用关系，此时就会造成把原本已经消亡的对象标记为存活，如果出现这种状况的话，问题不大，下次再让收集器重新收集一波就完了，但是还有一种情况是把存活的对象标记为死亡，这种状况就会造成不可预知的后果。</p>\n<p>针对上面这两种对象消失问题，业界有两种处理方式，一种是<strong>增量更新 (Incremental Update)</strong> ，一种是**原是快照 (Snapshot At The Beginning, SATB)**。</p>\n<h2 id=\"请你介绍一波垃圾收集器\"><a href=\"#请你介绍一波垃圾收集器\" class=\"headerlink\" title=\"请你介绍一波垃圾收集器\"></a>请你介绍一波垃圾收集器</h2><p>垃圾收集器是面试的常考，也是必考点，只要涉及到 JVM 的相关问题，都会围绕着垃圾收集器来做一波展开，所以，有必要了解一下这些垃圾收集器。</p>\n<p>垃圾收集器有很多，不同商家、不同版本的 JVM 所提供的垃圾收集器可能会有很大差别，我们主要介绍 HotSpot 虚拟机中的垃圾收集器。</p>\n<p>垃圾收集器是垃圾回收算法的具体实现，我们上面提到过，垃圾回收算法有标记 - 清除算法、标记 - 整理、标记 - 复制，所以对应的垃圾收集器也有不同的实现方式。</p>\n<p>我们知道，HotSpot 虚拟机中的垃圾收集都是分代回收的，所以根据不同的分代，可以把垃圾收集器分为</p>\n<p>新生代收集器：Serial、ParNew、Parallel Scavenge；</p>\n<p>老年代收集器：Serial Old、Parallel Old、CMS；</p>\n<p>整堆收集器：G1；</p>\n<h3 id=\"Serial-收集器\"><a href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"></a>Serial 收集器</h3><p>Serial 收集器是一种新生代的垃圾收集器，它是一个单线程工作的收集器，使用复制算法来进行回收，单线程工作不是说这个垃圾收集器只有一个，而是说这个收集器在工作时，必须暂停其他所有工作线程，这种暴力的暂停方式就是 <strong>Stop The World</strong>，Serial 就好像是寡头垄断一样，只要它一发话，其他所有的小弟（线程）都得给它让路。Serial 收集器的示意图如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545313.jpeg\"></p>\n<blockquote>\n<p>SefePoint 全局安全点：它就是代码中的一段特殊的位置，在所有用户线程到达 SafePoint 之后，用户线程挂起，GC 线程会进行清理工作。</p>\n</blockquote>\n<p>虽然 Serial 有 STW 这种显而易见的缺点，不过，从其他角度来看，Serial 还是很讨喜的，它还有着优于其他收集器的地方，那就是简单而高效，对于内存资源首先的环境，它是所有收集器中额外内存消耗最小的，对于单核处理器或者处理器核心较少的环境来说，Serial 收集器由于没有线程交互开销，所以 Serial 专心做垃圾回收效率比较高。</p>\n<h3 id=\"ParNew-收集器\"><a href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"></a>ParNew 收集器</h3><p>ParNew 是 Serial 的多线程版本，除了同时使用多条线程外，其他参数和机制（STW、回收策略、对象分配规则）都和 Serial 完全一致，ParNew 收集器的示意图如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545178.jpeg\"></p>\n<p>虽然 ParNew 使用了多条线程进行垃圾回收，但是在单线程环境下它绝对不会比 Serial 收集效率更高，因为多线程存在线程交互的开销，但是随着可用 CPU 核数的增加，ParNew 的处理效率会比 Serial 更高效。</p>\n<h3 id=\"Parallel-Scavenge-收集器\"><a href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"></a>Parallel Scavenge 收集器</h3><p>Parallel Scavenge 收集器也是一款新生代收集器，它同样是基于标记 - 复制算法实现的，而且它也能够并行收集，这么看来，表面上 Parallel Scavenge 与 ParNew 非常相似，那么它们之间有什么区别呢？</p>\n<p>Parallel Scavenge 的关注点主要在<strong>达到一个可控制的吞吐量上面</strong>。吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比。也就是</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545539.jpeg\"></p>\n<p>这里给大家举一个吞吐量的例子，如果执行用户代码的时间 + 运行垃圾收集的时间总共耗费了 100 分钟，其中垃圾收集耗费掉了 1 分钟，那么吞吐量就是 99%。停顿时间越短就越适合需要与用户交互或需要保证服务响应质量，良好的响应速度可以提升用户体验，而高吞吐量可以最高效率利用处理器资源。</p>\n<h3 id=\"Serial-Old-收集器\"><a href=\"#Serial-Old-收集器\" class=\"headerlink\" title=\"Serial Old 收集器\"></a>Serial Old 收集器</h3><p>前面介绍了一下 Serial，我们知道它是一个新生代的垃圾收集，使用了标记 - 复制算法。而这个 Serial Old 收集器却是 Serial 的老年版本，它同样也是一个单线程收集器，使用的是<strong>标记 - 整理</strong>算法，Serial Old 收集器有两种用途：一种是在 JDK 5 和之前的版本与 Parallel Scavenge 收集器搭配使用，另外一种用法就是作为 <code>CMS</code> 收集器的备选，CMS 垃圾收集器我们下面说，Serial Old 的收集流程如下</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/A3ibcic1Xe0iaTTaoE1HA8uE2z8agCUWibYmsr5qnsJKzjvNXjXNCrib8u5HbWlEUWwNPadXLAib7wYHnDL1QP9Gq7jg/640?wx_fmt=jpeg\"></p>\n<h3 id=\"Parallel-Old-收集器\"><a href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"></a>Parallel Old 收集器</h3><p>前面我们介绍了 Parallel Scavenge 收集器，现在来介绍一下 Parallel Old 收集器，它是 Parallel Scavenge 的老年版本，支持多线程并发收集，基于标记 - 整理算法实现，JDK 6 之后出现，吞吐量优先可以考虑 Parallel Scavenge + Parallel Old 的搭配</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545344.jpeg\"></p>\n<h3 id=\"CMS-收集器\"><a href=\"#CMS-收集器\" class=\"headerlink\" title=\"CMS 收集器\"></a>CMS 收集器</h3><p><code>CMS</code>收集器的主要目标是获取最短的回收停顿时间，它的全称是 _Concurrent Mark Sweep_，从这个名字就可以知道，这个收集器是基于标记 - 清除算法实现的，而且支持并发收集，它的运行过程要比上面我们提到的收集器复杂一些，它的工作流程如下：</p>\n<ul>\n<li><p>  初始标记（CMS initial mark）</p>\n</li>\n<li><p>  并发标记（CMS concurrent mark）</p>\n</li>\n<li><p>  重新标记（CMS remark）</p>\n</li>\n<li><p>  并发清除（CMS concurrent sweep）</p>\n</li>\n</ul>\n<p>对于上面这四个步骤，初始标记和并发标记都需要 _Stop The World_，初始标记只是标记一下和 GC Roots 直接关联到的对象，速度较快；并发标记阶段就是从 GC Roots 的直接关联对象开始遍历整个对象图的过程。这个过程时间比较长但是不需要停顿用户线程，也就是说与垃圾收集线程一起并发运行。并发标记的过程中，可能会有错标或者漏标的情况，此时就需要在重新标记一下，最后是并发清除阶段，清理掉标记阶段中判断已经死亡的对象。</p>\n<p>CMS 的收集过程如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545859.jpeg\"></p>\n<p>CMS 是一款非常优秀的垃圾收集器，但是没有任何收集器能够做到完美的程度，CMS 也是一样，CMS 至少有三个缺点：</p>\n<ul>\n<li><p>CMS 对处理器资源非常敏感，在并发阶段，虽然不会造成用户线程停顿，但是却会因为占用一部分线程而导致应用程序变慢，降低总吞吐量。</p>\n</li>\n<li><p>CMS 无法处理<strong>浮动垃圾</strong>，有可能出现 <em>Concurrent Mode Failure</em> 失败进而导致另一次完全 <em>Stop The World</em> 的 <em>Full GC</em> 产生。</p>\n<blockquote>\n<p>什么是浮动垃圾呢？由于并发标记和并发清理阶段，用户线程仍在继续运行，所以程序自然而然就会伴随着新的垃圾不断出现，而且这一部分垃圾出现在标记结束之后，CMS 无法处理这些垃圾，所以只能等到下一次垃圾回收时在进行清理。这一部分垃圾就被称为浮动垃圾。</p>\n</blockquote>\n</li>\n<li><p>CMS 最后一个缺点是并发 - 清除的通病，也就是会有大量的空间碎片出现，这将会给分配大对象带来困难。</p>\n</li>\n</ul>\n<h3 id=\"Garbage-First-收集器\"><a href=\"#Garbage-First-收集器\" class=\"headerlink\" title=\"Garbage First 收集器\"></a>Garbage First 收集器</h3><p>Garbage First 又被称为 _G1 收集器_，它的出现意味着垃圾收集器走过了一个里程碑，为什么说它是里程碑呢？因为 G1 这个收集器是一种面向局部的垃圾收集器，HotSpot 团队开发这个垃圾收集器为了让它替换掉 CMS 收集器，所以到后来，JDK 9 发布后，G1 取代了 Parallel Scavenge + Parallel Old 组合，成为服务端默认的垃圾收集器，而 CMS 则不再推荐使用。</p>\n<p>之前的垃圾收集器存在回收区域的局限性，因为之前这些垃圾收集器的目标范围要么是整个新生代、要么是整个老年代，要么是整个 Java 堆（Full GC），而 G1 跳出了这个框架，它可以面向堆内存的任何部分来组成**回收集 (Collection Set，CSet)**，衡量垃圾收集的不再是哪个分代，这就是 G1 的 <em>Mixed GC</em> 模式。</p>\n<p>G1 是基于 Region 来进行回收的，Region 就是堆内存中任意的布局，每一块 Region 都可以根据需要扮演 Eden 空间、Survivor 空间或者老年代空间，收集器能够对不同的 Region 角色采用不同的策略来进行处理。Region 中还有一块特殊的区域，这块区域就是 <em>Humongous</em> 区域，它是专门用来存储大对象的，G1 认为只要大小超过了 Region 容量一半的对象即可判定为大对象。如果超过了 Region 容量的大对象，将会存储在连续的 Humongous Region 中，G1 大多数行为都会把 Humongous Region 作为老年代来看待。</p>\n<p>G1 保留了新生代（Eden Suvivor）和老年代的概念，但是新生代和老年代不再是固定的了。它们都是一系列区域的动态集合。</p>\n<p>G1 收集器的运作过程可以分为以下四步：</p>\n<ul>\n<li><p>  初始标记：这个步骤也仅仅是标记一下 GC Roots 能够直接关联到的对象；并修改 TAMS 指针的值（每一个 Region 都有两个 RAMS 指针），使得下一阶段用户并发运行时，能够在可用的 Region 中分配对象，这个阶段需要暂停用户线程，但是时间很短。这个停顿是借用 Minor GC 的时候完成的，所以可以忽略不计。</p>\n</li>\n<li><p>  并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆中的对象图，找出要回收的对象。当对象图扫描完成后，重新处理 SATB 记录下的在并发时有引用的对象；</p>\n</li>\n<li><p>  最终标记：对用户线程做一个短暂的暂停，用于处理并发阶段结束后遗留下来的少量 <em>SATB</em> 记录（一种原始快照，用来记录并发标记中某些对象）</p>\n</li>\n<li><p>  筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择多个 Region 构成回收集，然后把决定要回收的那一部分 Region 存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。这里的操作设计对象的移动，所以必须要暂停用户线程，由多条收集器线程并行收集</p>\n</li>\n</ul>\n<p>从上面这几个步骤可以看出，除了并发标记外，其余三个阶段都需要暂停用户线程，所以，这个 G1 收集器并非追求<strong>低延迟</strong>，官方给出的设计目标是<strong>在延迟可控的情况下尽可能的提高吞吐量</strong>，担任全功能收集器的重任。</p>\n<p>下面是 G1 回收的示意图</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545455.jpeg\"></p>\n<p>G1 收集器同样也有缺点和问题：</p>\n<ul>\n<li><p>  第一个问题就是 Region 中存在跨代引用的问题，我们之前知道可以用记忆集来解决跨代引用问题，不过 Region 中的跨代引用要复杂很多；</p>\n</li>\n<li><p>  第二个问题就是如何保证收集线程与用户线程互不干扰的运行？CMS 使用的是增量更新算法，G1 使用的是原始快照（SATB），G1 为 Region 分配了两块 TAMS 指针，把 Region 中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须在这两个指针位置以上。如果内存回收速度赶不上内存分配速度，G1 收集器也要冻结用户线程执行，导致 Full GC 而产生长时间的 STW。</p>\n</li>\n<li><p>  第三个问题是无法建立可预测的停顿模型。</p>\n</li>\n</ul>\n<h2 id=\"JVM-常用命令介绍\"><a href=\"#JVM-常用命令介绍\" class=\"headerlink\" title=\"JVM 常用命令介绍\"></a>JVM 常用命令介绍</h2><p>下面介绍一下 JVM 中常用的调优、故障处理等工具。</p>\n<ol>\n<li><p> <em>jps</em> ：虚拟机进程工具，全称是 _JVM Process Status Tool_，它的功能和 Linux 中的 <em>ps</em> 类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类 <em>Main Class</em> 所在的本地虚拟机唯一 ID，虽然功能比较单一，但是这个命令绝对是使用最高频的一个命令。</p>\n</li>\n<li><p> _jstat_：虚拟机统计信息工具，用于监视虚拟机各种运行状态的信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p>\n</li>\n<li><p> _jinfo_：Java 配置信息工具，全称是 _Configuration Info for Java_，它的作用是可以实时调整虚拟机各项参数。</p>\n</li>\n<li><p> _jmap_：Java 内存映像工具，全称是 _Memory Map For Java_，它用于生成转储快照，用来排查内存占用情况</p>\n</li>\n<li><p> _jhat_：虚拟机堆转储快照分析工具，全称是 _JVM Heap Analysis Tool_，这个指令通常和 jmap 一起搭配使用，jhat 内置了一个 HTTP/Web 服务器，生成转储快照后可以在浏览器中查看。不过，一般还是 jmap 命令使用的频率比较高。</p>\n</li>\n<li><p> _jstack_：Java 堆栈跟踪工具，全称是 <em>Stack Trace for Java</em> ，顾名思义，这个命令用来追踪堆栈的使用情况，用于虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条正在执行的方法堆栈的集合。</p>\n</li>\n</ol>\n<h2 id=\"什么是双亲委派模型？\"><a href=\"#什么是双亲委派模型？\" class=\"headerlink\" title=\"什么是双亲委派模型？\"></a>什么是双亲委派模型？</h2><p>JVM 类加载默认使用的是<strong>双亲委派模型</strong>，那么什么是双亲委派模型呢？</p>\n<p>这里我们需要先介绍一下三种类加载器：</p>\n<ul>\n<li><p>  启动类加载器，_Bootstrap Class Loader_，这个类加载器是 C++ 实现的，它是 JVM 的一部分，这个类加载器负责加载存放在 <em><JAVA_HOME>\\lib</em> 目录，启动类加载器无法被 Java 程序直接引用。这也就是说，JDK 中的常用类的加载都是由启动类加载器来完成的。</p>\n</li>\n<li><p>  扩展类加载器，_Extension Class Loader_，这个类加载器是 Java 实现的，它负责加载 <em><JAVA_HOME>\\lib\\ext</em> 目录。</p>\n</li>\n<li><p>  应用程序类加载器，_Application Class Loader_，这个类加载器是由 <em>sum.misc.Launcher$AppClassLoader</em> 来实现，它负责加载 <em>ClassPath</em> 上所有的类库，如果应用程序中没有定义自己的类加载器，默认使用就是这个类加载器。</p>\n</li>\n</ul>\n<p>所以，我们的 Java 应用程序都是由这三种类加载器来相互配合完成的，当然，用户也可以自己定义类加载器，即 _User Class Loader_，这几个类加载器的模型如下</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021545247.jpeg\"></p>\n<p>上面这几类类加载器构成了不同的层次结构，当我们需要加载一个类时，子类加载器并不会马上去加载，而是依次去请求父类加载器加载，一直往上请求到最高类加载器：启动类加载器。当启动类加载器加载不了的时候，依次往下让子类加载器进行加载。这就是双亲委派模型。</p>\n<h2 id=\"双亲委派模型的缺陷？\"><a href=\"#双亲委派模型的缺陷？\" class=\"headerlink\" title=\"双亲委派模型的缺陷？\"></a>双亲委派模型的缺陷？</h2><p>在双亲委派模型中，子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。这就导致了双亲委派模型并不能解决所有的类加载器问题。</p>\n<p>Java 提供了很多外部接口，这些接口统称为 _Service Provider Interface, SPI_，允许第三方实现这些接口，而这些接口却是 Java 核心类提供的，由 Bootstrap Class Loader 加载，而一般的扩展接口是由 Application Class Loader 加载的，Bootstrap Class Loader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 Application Class Loader，因为它是最顶层的类加载器。</p>\n<h2 id=\"双亲委派机制的三次破坏\"><a href=\"#双亲委派机制的三次破坏\" class=\"headerlink\" title=\"双亲委派机制的三次破坏\"></a>双亲委派机制的三次破坏</h2><p>虽然双亲委派机制是 Java 强烈推荐给开发者们的类加载器的实现方式，但是并没有强制规定你必须就要这么实现，所以，它一样也存在被破坏的情况，实际上，历史上一共出现三次双亲委派机制被破坏的情况：</p>\n<ul>\n<li><p>  双亲委派机制第一次被破坏发生在双亲委派机制出现之前，由于双亲委派机制 JDK 1.2 之后才引用的，但类加载的概念在 Java 刚出现的时候就有了，所以引用双亲委派机制之前，设计者们必须兼顾开发者们自定义的一些类加载器的代码，所以在 JDK 1.2 之后的 java.lang.ClassLoader 中添加了一个新的 <em>findClass</em> 方法，引导用户编写类加载器逻辑的时候重写这个 findClass 方法，而不是基于 <em>loadClass</em> 编写。</p>\n</li>\n<li><p>  双亲委派机制第二次被破坏是由于它自己模型导致的，由于它只能向上（基础）加载，越基础的类越由上层加载器加载，所以如果基础类型又想要调用用户的代码，该怎么办？这也就是我们上面那个问题所说的 SPI 机制。那么 JDK 团队是如何做的呢？它们引用了一个 **线程上下文类加载器 (Thread Context ClassLoader)**，这个类加载器可以通过 java.lang.Thread 类的 <em>setContextClassLoader</em> 进行设置，如果创建时线程还未设置，它将会从父线程中继承，如果全局没有设置类加载器的话，这个 ClassLoader 就是默认的类加载器。这种行为虽然是一种犯规行为，但是 Java 代码中的 <strong>JNDI、JDBC</strong> 等都是使用这种方式来完成的。直到 JDK 6 ，引用了 _java.util.ServiceLoader_，使用 <strong>META-INF/services</strong> + 责任链的设计模式，才解决了 SPI 的这种加载机制。</p>\n</li>\n<li><p>  双亲委派机制第三次被破坏是由于用户对程序的动态需求使热加载、热部署的引入所致。由于时代的变化，我们希望 Java 能像鼠标键盘一样实现热部署，即时加载（load class），引入了 OSGI，OSGI 实现热部署的关键在于它自定义类加载器机制的实现，OSGI 中的每一个 <em>Bundle</em> 也就是模块都有一个自己的类加载器。当需要更换 Bundle 时，就直接把 Bundle 连同类加载器一起替换掉就能够实现热加载。在 OSGI 环境下，类加载器不再遵从双亲委派机制，而是使用了一种更复杂的加载机制。</p>\n</li>\n</ul>\n<h2 id=\"常见的-JVM-调优参数有哪些？\"><a href=\"#常见的-JVM-调优参数有哪些？\" class=\"headerlink\" title=\"常见的 JVM 调优参数有哪些？\"></a>常见的 JVM 调优参数有哪些？</h2><ul>\n<li><p>  -Xms256m：初始化堆大小为 256m；</p>\n</li>\n<li><p>  -Xmx2g：最大内存为 2g；</p>\n</li>\n<li><p>  -Xmn50m：新生代的大小 50m；</p>\n</li>\n<li><p>  -XX:+PrintGCDetails 打印 gc 详细信息；</p>\n</li>\n<li><p>  -XX:+HeapDumpOnOutOfMemoryError  在发生 OutOfMemoryError 错误时，来 dump 出堆快照；</p>\n</li>\n<li><p>  -XX:NewRatio=4    设置年轻的和老年代的内存比例为 1:4；</p>\n</li>\n<li><p>  -XX:SurvivorRatio=8 设置新生代 Eden 和 Survivor 比例为 8:2；</p>\n</li>\n<li><p>  -XX:+UseSerialGC   新生代和老年代都用串行收集器 Serial + Serial Old</p>\n</li>\n<li><p>  -XX:+UseParNewGC 指定使用 ParNew + Serial Old 垃圾回收器组合；</p>\n</li>\n<li><p>  -XX:+UseParallelGC  新生代使用 Parallel Scavenge，老年代使用 Serial Old</p>\n</li>\n<li><p>  -XX:+UseParallelOldGC：新生代 ParallelScavenge + 老年代 ParallelOld 组合；</p>\n</li>\n<li><p>  -XX:+UseConcMarkSweepGC：新生代使用 ParNew，老年代使用 CMS；</p>\n</li>\n<li><p>  -XX:NewSize：新生代最小值；</p>\n</li>\n<li><p>  -XX:MaxNewSize：新生代最大值</p>\n</li>\n<li><p>  -XX:MetaspaceSize 元空间初始化大小</p>\n</li>\n<li><p>  -XX:MaxMetaspaceSize 元空间最大值</p>\n</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这篇文章是 JVM 面试题的第二版，新增了很多内容，写的时间也比较长了，如果你觉得文章还不错的话，大家三连走起！另外，分享到朋友圈是对我莫大的支持，感谢！不骗你，看完真的需要一小时。</p>"},{"title":"东航MU5735客机坠毁事故","summary":"3.21 东航MU5735航班事故","abbrlink":11612,"date":"2022-03-27T03:30:29.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n ![哀悼](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203271140856.png)\n\n# 为MU5735遇难同胞默哀\n\n​\t2022年3月21日14时38分许 [106] ，一架[东航](https://baike.baidu.com/item/东航/2223912)[波音737-800](https://baike.baidu.com/item/波音737-800/5936248)客机在[广西壮族自治区](https://baike.baidu.com/item/广西壮族自治区/163178)[梧州市](https://baike.baidu.com/item/梧州市/7260153)藤县[埌南镇](https://baike.baidu.com/item/埌南镇/4205916)[莫埌村](https://baike.baidu.com/item/莫埌村/60337306)神塘表附近山林坠毁 [26] ，并引发山火。救援队伍随即集结靠近 [1] [29] 。[MU5735](https://baike.baidu.com/item/MU5735/60336077)原计划于3月21日13时10分在[昆明](https://baike.baidu.com/item/昆明/161012)长水机场起飞，14时52分到达[广州白云国际机场](https://baike.baidu.com/item/广州白云国际机场/6848077) [9] 。\n\n​\t2022年3月21日16时，民航局发文已确认该飞机坠毁。机上人员共132人，其中旅客123人、机组9人。民航局已启动应急机制，派出工作组赶赴现场 [5-6] [20] 。3月23日16时30分左右，搜寻到的两部飞行记录器中的一部，经初步判断为[驾驶舱话音记录器](https://baike.baidu.com/item/驾驶舱话音记录器/14215556)*（CVR）*，已连夜发往北京 [191] [195] [211-212] 。3月27日上午9时20分许，第二个黑匣子已找到。 [319] 每日的搜救工作结束后，消防救援人员都会列队肃立，向着坠机地点，深深鞠躬 [284] 。\n\n​\t2022年3月26日晚，“3·21”东航MU5735航空器飞行事故国家应急处置指挥部现场副总指挥、民航局副局长胡振江在发布会上说，“3·21”东航MU5735航班机上123名乘客和9名机组人员已全部遇难。发布会现场，全体起立为机上遇难人员默哀\n\n​\t致哀，愿世间再无空难，同胞们一路走好。\n\n","source":"_posts/2022-03-27-东航MU5732客机坠毁事故.md","raw":"---\ntitle: 东航MU5735客机坠毁事故\ntags:\n  - 空难\n  - 哀悼\ncategories: 生活\nsummary: 3.21 东航MU5735航班事故\nabbrlink: 11612\ndate: 2022-03-27 11:30:29\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n ![哀悼](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203271140856.png)\n\n# 为MU5735遇难同胞默哀\n\n​\t2022年3月21日14时38分许 [106] ，一架[东航](https://baike.baidu.com/item/东航/2223912)[波音737-800](https://baike.baidu.com/item/波音737-800/5936248)客机在[广西壮族自治区](https://baike.baidu.com/item/广西壮族自治区/163178)[梧州市](https://baike.baidu.com/item/梧州市/7260153)藤县[埌南镇](https://baike.baidu.com/item/埌南镇/4205916)[莫埌村](https://baike.baidu.com/item/莫埌村/60337306)神塘表附近山林坠毁 [26] ，并引发山火。救援队伍随即集结靠近 [1] [29] 。[MU5735](https://baike.baidu.com/item/MU5735/60336077)原计划于3月21日13时10分在[昆明](https://baike.baidu.com/item/昆明/161012)长水机场起飞，14时52分到达[广州白云国际机场](https://baike.baidu.com/item/广州白云国际机场/6848077) [9] 。\n\n​\t2022年3月21日16时，民航局发文已确认该飞机坠毁。机上人员共132人，其中旅客123人、机组9人。民航局已启动应急机制，派出工作组赶赴现场 [5-6] [20] 。3月23日16时30分左右，搜寻到的两部飞行记录器中的一部，经初步判断为[驾驶舱话音记录器](https://baike.baidu.com/item/驾驶舱话音记录器/14215556)*（CVR）*，已连夜发往北京 [191] [195] [211-212] 。3月27日上午9时20分许，第二个黑匣子已找到。 [319] 每日的搜救工作结束后，消防救援人员都会列队肃立，向着坠机地点，深深鞠躬 [284] 。\n\n​\t2022年3月26日晚，“3·21”东航MU5735航空器飞行事故国家应急处置指挥部现场副总指挥、民航局副局长胡振江在发布会上说，“3·21”东航MU5735航班机上123名乘客和9名机组人员已全部遇难。发布会现场，全体起立为机上遇难人员默哀\n\n​\t致哀，愿世间再无空难，同胞们一路走好。\n\n","slug":"东航MU5732客机坠毁事故","published":1,"updated":"2024-12-16T12:11:11.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyoz001sj0kr1bof4fbu","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203271140856.png\" alt=\"哀悼\"></p>\n<h1 id=\"为MU5735遇难同胞默哀\"><a href=\"#为MU5735遇难同胞默哀\" class=\"headerlink\" title=\"为MU5735遇难同胞默哀\"></a>为MU5735遇难同胞默哀</h1><p>​    2022年3月21日14时38分许 [106] ，一架<a href=\"https://baike.baidu.com/item/%E4%B8%9C%E8%88%AA/2223912\">东航</a><a href=\"https://baike.baidu.com/item/%E6%B3%A2%E9%9F%B3737-800/5936248\">波音737-800</a>客机在<a href=\"https://baike.baidu.com/item/%E5%B9%BF%E8%A5%BF%E5%A3%AE%E6%97%8F%E8%87%AA%E6%B2%BB%E5%8C%BA/163178\">广西壮族自治区</a><a href=\"https://baike.baidu.com/item/%E6%A2%A7%E5%B7%9E%E5%B8%82/7260153\">梧州市</a>藤县<a href=\"https://baike.baidu.com/item/%E5%9F%8C%E5%8D%97%E9%95%87/4205916\">埌南镇</a><a href=\"https://baike.baidu.com/item/%E8%8E%AB%E5%9F%8C%E6%9D%91/60337306\">莫埌村</a>神塘表附近山林坠毁 [26] ，并引发山火。救援队伍随即集结靠近 [1] [29] 。<a href=\"https://baike.baidu.com/item/MU5735/60336077\">MU5735</a>原计划于3月21日13时10分在<a href=\"https://baike.baidu.com/item/%E6%98%86%E6%98%8E/161012\">昆明</a>长水机场起飞，14时52分到达<a href=\"https://baike.baidu.com/item/%E5%B9%BF%E5%B7%9E%E7%99%BD%E4%BA%91%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA/6848077\">广州白云国际机场</a> [9] 。</p>\n<p>​    2022年3月21日16时，民航局发文已确认该飞机坠毁。机上人员共132人，其中旅客123人、机组9人。民航局已启动应急机制，派出工作组赶赴现场 [5-6] [20] 。3月23日16时30分左右，搜寻到的两部飞行记录器中的一部，经初步判断为<a href=\"https://baike.baidu.com/item/%E9%A9%BE%E9%A9%B6%E8%88%B1%E8%AF%9D%E9%9F%B3%E8%AE%B0%E5%BD%95%E5%99%A8/14215556\">驾驶舱话音记录器</a><em>（CVR）</em>，已连夜发往北京 [191] [195] [211-212] 。3月27日上午9时20分许，第二个黑匣子已找到。 [319] 每日的搜救工作结束后，消防救援人员都会列队肃立，向着坠机地点，深深鞠躬 [284] 。</p>\n<p>​    2022年3月26日晚，“3·21”东航MU5735航空器飞行事故国家应急处置指挥部现场副总指挥、民航局副局长胡振江在发布会上说，“3·21”东航MU5735航班机上123名乘客和9名机组人员已全部遇难。发布会现场，全体起立为机上遇难人员默哀</p>\n<p>​    致哀，愿世间再无空难，同胞们一路走好。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p> <img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203271140856.png\" alt=\"哀悼\"></p>\n<h1 id=\"为MU5735遇难同胞默哀\"><a href=\"#为MU5735遇难同胞默哀\" class=\"headerlink\" title=\"为MU5735遇难同胞默哀\"></a>为MU5735遇难同胞默哀</h1><p>​    2022年3月21日14时38分许 [106] ，一架<a href=\"https://baike.baidu.com/item/%E4%B8%9C%E8%88%AA/2223912\">东航</a><a href=\"https://baike.baidu.com/item/%E6%B3%A2%E9%9F%B3737-800/5936248\">波音737-800</a>客机在<a href=\"https://baike.baidu.com/item/%E5%B9%BF%E8%A5%BF%E5%A3%AE%E6%97%8F%E8%87%AA%E6%B2%BB%E5%8C%BA/163178\">广西壮族自治区</a><a href=\"https://baike.baidu.com/item/%E6%A2%A7%E5%B7%9E%E5%B8%82/7260153\">梧州市</a>藤县<a href=\"https://baike.baidu.com/item/%E5%9F%8C%E5%8D%97%E9%95%87/4205916\">埌南镇</a><a href=\"https://baike.baidu.com/item/%E8%8E%AB%E5%9F%8C%E6%9D%91/60337306\">莫埌村</a>神塘表附近山林坠毁 [26] ，并引发山火。救援队伍随即集结靠近 [1] [29] 。<a href=\"https://baike.baidu.com/item/MU5735/60336077\">MU5735</a>原计划于3月21日13时10分在<a href=\"https://baike.baidu.com/item/%E6%98%86%E6%98%8E/161012\">昆明</a>长水机场起飞，14时52分到达<a href=\"https://baike.baidu.com/item/%E5%B9%BF%E5%B7%9E%E7%99%BD%E4%BA%91%E5%9B%BD%E9%99%85%E6%9C%BA%E5%9C%BA/6848077\">广州白云国际机场</a> [9] 。</p>\n<p>​    2022年3月21日16时，民航局发文已确认该飞机坠毁。机上人员共132人，其中旅客123人、机组9人。民航局已启动应急机制，派出工作组赶赴现场 [5-6] [20] 。3月23日16时30分左右，搜寻到的两部飞行记录器中的一部，经初步判断为<a href=\"https://baike.baidu.com/item/%E9%A9%BE%E9%A9%B6%E8%88%B1%E8%AF%9D%E9%9F%B3%E8%AE%B0%E5%BD%95%E5%99%A8/14215556\">驾驶舱话音记录器</a><em>（CVR）</em>，已连夜发往北京 [191] [195] [211-212] 。3月27日上午9时20分许，第二个黑匣子已找到。 [319] 每日的搜救工作结束后，消防救援人员都会列队肃立，向着坠机地点，深深鞠躬 [284] 。</p>\n<p>​    2022年3月26日晚，“3·21”东航MU5735航空器飞行事故国家应急处置指挥部现场副总指挥、民航局副局长胡振江在发布会上说，“3·21”东航MU5735航班机上123名乘客和9名机组人员已全部遇难。发布会现场，全体起立为机上遇难人员默哀</p>\n<p>​    致哀，愿世间再无空难，同胞们一路走好。</p>\n"},{"title":"面试官对线","summary":"3y对线面试日常系列","abbrlink":38260,"date":"2022-06-25T02:09:36.000Z","_content":"\n# 注解\n## 注解是什么\n\n​\tJDK1.5注解机制；代码中的特殊标记，标记可以在编译、类加载、运行时被读取，并执行相对应的处理\n\n## 项目用到的注解\n\n- Spring 注解：`@Controller `/ `@Param `/ `@Select` \n\n- lombok 注解：`@Slf4j` / `@Data`\n\n- Java 原生：`@Overried` / `@Deprecated` / `@FunctionalInterface` 大多用于标记和检查\n- 元注解：修饰注解；`@Retention` /  `@Target`\n  - `@Retention`：简单的理解为注解的生命周期\n  - `@Target`：表示直接可以修饰的哪些地方\n\n## 实现一个注解\n\n### @Retention\n\n#### 定义\n\n- 修饰自定义注解的生命周期\n- `RententionPolicy` 枚举，三个常量 `SOURCE`、`CLASS` 、`RUNTIME`\n  - SOURCE：注解保留在源级别中，由编译器忽略\n  - CLASS：注解在编译时由编译器保留，但是 `JVM` 会忽略\n  - RUNTIME：注解会由 `JVM` 保留，运行时环境可以使用它，只有该注解可以通过反射获取到注解\n  - 了解 `.java` 文件到 `class` 被 `JVM` 加载的过程；**注解抽象语法树**，这里会去解析注解，然后做处理的逻辑![image-20220902094734043](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08loading-process.png)\n\n#### SOUCE 和 CLASS 级别处理\n\n- 如果想在编译器处理注解相关的逻辑，需要继承 `AbstractProcessor` 并实现 `process` 方法\n\n- 自定义注解中 `@Retention` 注解设置为 `SOURCE` 和 `CLASS` 级别，就需要继承并是实现\n- lombok 实现原理：`lombok` 就用 `AnnotationProcessor` 继承了  `AbstractProcessor` ，这就是为什么使用了 @Data 这样的注解就能 set/get 了\n- 一般自定义注解都是 `RUNTIME` 级别的，大多数情况都是运行时环境去做处理\n\n#### 获取自定义注解相关注解信息\n\n​\t接口 `java.lang.reflect.AnnotatedElement` 提供了该功能\n\n> ​\t反射获取运行时信息的重要手段，注解处理是通过 `JAVA` 反射来处理的。反射相关的类 `Class`、`Method`、`Field` 都实现了 `AnnotatedElement` 接口\n\n![image-20220902102456681](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08annotationElememt.png)\n\n\n\n> 反射处理，只要我们通过反射拿到 【`Class、Method、Field`】类，就能通过 `getAnnotation(Class)` 拿到我们想要的注解并取值。\n\n![image-20220902102525599](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08AnnotatedElement-Func.png)\n\n## 案例\n\n假如定义一个注解，它用在自读那上，并且可以通过反射获取到，功能是要来描述字段的长度和作用。\n\n```java\n@Target(ElementType.Field)  //注解用于字段上\n@Retention(RetentionPolicy.RUNTIME) //保留到运行时，可以通过注解获取\npublic @interface MyFeild(){\n    String desc();\n    int length();\n}\n```\n\n### 示例一\n\n通过反射获取注解\n\n```java\npublic class MyFeildTest{\n\t@MyFeild(desc=\"用户名\",length=12)\n    private String username;\n    @Test\n    public void testMyFeild(){\n        Class c = MyFeildTest.class;\n        \n        for(Field f: c.getDeclaredFields()){\n            if(f.isAnnotationPresent(MyField.class)){\n                MyField annotation = f.getAnnotation(MyField.class);\n            \tSystem.out.println(\"字段：【\"+f.getName()+\"】，描述：【\"+annotation.desc() +\"】，长度：【\"+ annotation.length() + \"】\")\n            }\n        }\n    }\n}\n```\n\n### 示例二\n\n自定义注解 + 拦截器 实现登录校验\n\n```java\n\n```\n\n","source":"_posts/2022-08-25-面试官对线.md","raw":"---\ntitle: 面试官对线\ntags: 面试\ncategories: 对线\nsummary: 3y对线面试日常系列\nabbrlink: 38260\ndate: 2022-06-25 10:09:36\n---\n\n# 注解\n## 注解是什么\n\n​\tJDK1.5注解机制；代码中的特殊标记，标记可以在编译、类加载、运行时被读取，并执行相对应的处理\n\n## 项目用到的注解\n\n- Spring 注解：`@Controller `/ `@Param `/ `@Select` \n\n- lombok 注解：`@Slf4j` / `@Data`\n\n- Java 原生：`@Overried` / `@Deprecated` / `@FunctionalInterface` 大多用于标记和检查\n- 元注解：修饰注解；`@Retention` /  `@Target`\n  - `@Retention`：简单的理解为注解的生命周期\n  - `@Target`：表示直接可以修饰的哪些地方\n\n## 实现一个注解\n\n### @Retention\n\n#### 定义\n\n- 修饰自定义注解的生命周期\n- `RententionPolicy` 枚举，三个常量 `SOURCE`、`CLASS` 、`RUNTIME`\n  - SOURCE：注解保留在源级别中，由编译器忽略\n  - CLASS：注解在编译时由编译器保留，但是 `JVM` 会忽略\n  - RUNTIME：注解会由 `JVM` 保留，运行时环境可以使用它，只有该注解可以通过反射获取到注解\n  - 了解 `.java` 文件到 `class` 被 `JVM` 加载的过程；**注解抽象语法树**，这里会去解析注解，然后做处理的逻辑![image-20220902094734043](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08loading-process.png)\n\n#### SOUCE 和 CLASS 级别处理\n\n- 如果想在编译器处理注解相关的逻辑，需要继承 `AbstractProcessor` 并实现 `process` 方法\n\n- 自定义注解中 `@Retention` 注解设置为 `SOURCE` 和 `CLASS` 级别，就需要继承并是实现\n- lombok 实现原理：`lombok` 就用 `AnnotationProcessor` 继承了  `AbstractProcessor` ，这就是为什么使用了 @Data 这样的注解就能 set/get 了\n- 一般自定义注解都是 `RUNTIME` 级别的，大多数情况都是运行时环境去做处理\n\n#### 获取自定义注解相关注解信息\n\n​\t接口 `java.lang.reflect.AnnotatedElement` 提供了该功能\n\n> ​\t反射获取运行时信息的重要手段，注解处理是通过 `JAVA` 反射来处理的。反射相关的类 `Class`、`Method`、`Field` 都实现了 `AnnotatedElement` 接口\n\n![image-20220902102456681](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08annotationElememt.png)\n\n\n\n> 反射处理，只要我们通过反射拿到 【`Class、Method、Field`】类，就能通过 `getAnnotation(Class)` 拿到我们想要的注解并取值。\n\n![image-20220902102525599](https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08AnnotatedElement-Func.png)\n\n## 案例\n\n假如定义一个注解，它用在自读那上，并且可以通过反射获取到，功能是要来描述字段的长度和作用。\n\n```java\n@Target(ElementType.Field)  //注解用于字段上\n@Retention(RetentionPolicy.RUNTIME) //保留到运行时，可以通过注解获取\npublic @interface MyFeild(){\n    String desc();\n    int length();\n}\n```\n\n### 示例一\n\n通过反射获取注解\n\n```java\npublic class MyFeildTest{\n\t@MyFeild(desc=\"用户名\",length=12)\n    private String username;\n    @Test\n    public void testMyFeild(){\n        Class c = MyFeildTest.class;\n        \n        for(Field f: c.getDeclaredFields()){\n            if(f.isAnnotationPresent(MyField.class)){\n                MyField annotation = f.getAnnotation(MyField.class);\n            \tSystem.out.println(\"字段：【\"+f.getName()+\"】，描述：【\"+annotation.desc() +\"】，长度：【\"+ annotation.length() + \"】\")\n            }\n        }\n    }\n}\n```\n\n### 示例二\n\n自定义注解 + 拦截器 实现登录校验\n\n```java\n\n```\n\n","slug":"面试官对线","published":1,"updated":"2024-12-16T12:11:11.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyp2001vj0kr0jw55491","content":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"注解是什么\"><a href=\"#注解是什么\" class=\"headerlink\" title=\"注解是什么\"></a>注解是什么</h2><p>​    JDK1.5注解机制；代码中的特殊标记，标记可以在编译、类加载、运行时被读取，并执行相对应的处理</p>\n<h2 id=\"项目用到的注解\"><a href=\"#项目用到的注解\" class=\"headerlink\" title=\"项目用到的注解\"></a>项目用到的注解</h2><ul>\n<li><p>Spring 注解：<code>@Controller </code>/ <code>@Param </code>/ <code>@Select</code> </p>\n</li>\n<li><p>lombok 注解：<code>@Slf4j</code> / <code>@Data</code></p>\n</li>\n<li><p>Java 原生：<code>@Overried</code> / <code>@Deprecated</code> / <code>@FunctionalInterface</code> 大多用于标记和检查</p>\n</li>\n<li><p>元注解：修饰注解；<code>@Retention</code> /  <code>@Target</code></p>\n<ul>\n<li><code>@Retention</code>：简单的理解为注解的生命周期</li>\n<li><code>@Target</code>：表示直接可以修饰的哪些地方</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现一个注解\"><a href=\"#实现一个注解\" class=\"headerlink\" title=\"实现一个注解\"></a>实现一个注解</h2><h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>修饰自定义注解的生命周期</li>\n<li><code>RententionPolicy</code> 枚举，三个常量 <code>SOURCE</code>、<code>CLASS</code> 、<code>RUNTIME</code><ul>\n<li>SOURCE：注解保留在源级别中，由编译器忽略</li>\n<li>CLASS：注解在编译时由编译器保留，但是 <code>JVM</code> 会忽略</li>\n<li>RUNTIME：注解会由 <code>JVM</code> 保留，运行时环境可以使用它，只有该注解可以通过反射获取到注解</li>\n<li>了解 <code>.java</code> 文件到 <code>class</code> 被 <code>JVM</code> 加载的过程；<strong>注解抽象语法树</strong>，这里会去解析注解，然后做处理的逻辑<img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08loading-process.png\" alt=\"image-20220902094734043\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"SOUCE-和-CLASS-级别处理\"><a href=\"#SOUCE-和-CLASS-级别处理\" class=\"headerlink\" title=\"SOUCE 和 CLASS 级别处理\"></a>SOUCE 和 CLASS 级别处理</h4><ul>\n<li><p>如果想在编译器处理注解相关的逻辑，需要继承 <code>AbstractProcessor</code> 并实现 <code>process</code> 方法</p>\n</li>\n<li><p>自定义注解中 <code>@Retention</code> 注解设置为 <code>SOURCE</code> 和 <code>CLASS</code> 级别，就需要继承并是实现</p>\n</li>\n<li><p>lombok 实现原理：<code>lombok</code> 就用 <code>AnnotationProcessor</code> 继承了  <code>AbstractProcessor</code> ，这就是为什么使用了 @Data 这样的注解就能 set/get 了</p>\n</li>\n<li><p>一般自定义注解都是 <code>RUNTIME</code> 级别的，大多数情况都是运行时环境去做处理</p>\n</li>\n</ul>\n<h4 id=\"获取自定义注解相关注解信息\"><a href=\"#获取自定义注解相关注解信息\" class=\"headerlink\" title=\"获取自定义注解相关注解信息\"></a>获取自定义注解相关注解信息</h4><p>​    接口 <code>java.lang.reflect.AnnotatedElement</code> 提供了该功能</p>\n<blockquote>\n<p>​    反射获取运行时信息的重要手段，注解处理是通过 <code>JAVA</code> 反射来处理的。反射相关的类 <code>Class</code>、<code>Method</code>、<code>Field</code> 都实现了 <code>AnnotatedElement</code> 接口</p>\n</blockquote>\n<p><img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08annotationElememt.png\" alt=\"image-20220902102456681\"></p>\n<blockquote>\n<p>反射处理，只要我们通过反射拿到 【<code>Class、Method、Field</code>】类，就能通过 <code>getAnnotation(Class)</code> 拿到我们想要的注解并取值。</p>\n</blockquote>\n<p><img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08AnnotatedElement-Func.png\" alt=\"image-20220902102525599\"></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>假如定义一个注解，它用在自读那上，并且可以通过反射获取到，功能是要来描述字段的长度和作用。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>ElementType<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">//注解用于字段上</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//保留到运行时，可以通过注解获取</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyFeild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    String <span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"示例一\"><a href=\"#示例一\" class=\"headerlink\" title=\"示例一\"></a>示例一</h3><p>通过反射获取注解</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFeildTest</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@MyFeild</span><span class=\"token punctuation\">(</span>desc<span class=\"token operator\">=</span><span class=\"token string\">\"用户名\"</span><span class=\"token punctuation\">,</span>length<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String username<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMyFeild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Class <span class=\"token class-name\">c</span> <span class=\"token operator\">=</span> MyFeildTest<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>Field f<span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>MyField<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                MyField annotation <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>MyField<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字段：【\"</span><span class=\"token operator\">+</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"】，描述：【\"</span><span class=\"token operator\">+</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】，长度：【\"</span><span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"示例二\"><a href=\"#示例二\" class=\"headerlink\" title=\"示例二\"></a>示例二</h3><p>自定义注解 + 拦截器 实现登录校验</p>\n<pre class=\" language-java\"><code class=\"language-java\">\n</code></pre>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"注解是什么\"><a href=\"#注解是什么\" class=\"headerlink\" title=\"注解是什么\"></a>注解是什么</h2><p>​    JDK1.5注解机制；代码中的特殊标记，标记可以在编译、类加载、运行时被读取，并执行相对应的处理</p>\n<h2 id=\"项目用到的注解\"><a href=\"#项目用到的注解\" class=\"headerlink\" title=\"项目用到的注解\"></a>项目用到的注解</h2><ul>\n<li><p>Spring 注解：<code>@Controller </code>/ <code>@Param </code>/ <code>@Select</code> </p>\n</li>\n<li><p>lombok 注解：<code>@Slf4j</code> / <code>@Data</code></p>\n</li>\n<li><p>Java 原生：<code>@Overried</code> / <code>@Deprecated</code> / <code>@FunctionalInterface</code> 大多用于标记和检查</p>\n</li>\n<li><p>元注解：修饰注解；<code>@Retention</code> /  <code>@Target</code></p>\n<ul>\n<li><code>@Retention</code>：简单的理解为注解的生命周期</li>\n<li><code>@Target</code>：表示直接可以修饰的哪些地方</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现一个注解\"><a href=\"#实现一个注解\" class=\"headerlink\" title=\"实现一个注解\"></a>实现一个注解</h2><h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>修饰自定义注解的生命周期</li>\n<li><code>RententionPolicy</code> 枚举，三个常量 <code>SOURCE</code>、<code>CLASS</code> 、<code>RUNTIME</code><ul>\n<li>SOURCE：注解保留在源级别中，由编译器忽略</li>\n<li>CLASS：注解在编译时由编译器保留，但是 <code>JVM</code> 会忽略</li>\n<li>RUNTIME：注解会由 <code>JVM</code> 保留，运行时环境可以使用它，只有该注解可以通过反射获取到注解</li>\n<li>了解 <code>.java</code> 文件到 <code>class</code> 被 <code>JVM</code> 加载的过程；<strong>注解抽象语法树</strong>，这里会去解析注解，然后做处理的逻辑<img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08loading-process.png\" alt=\"image-20220902094734043\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"SOUCE-和-CLASS-级别处理\"><a href=\"#SOUCE-和-CLASS-级别处理\" class=\"headerlink\" title=\"SOUCE 和 CLASS 级别处理\"></a>SOUCE 和 CLASS 级别处理</h4><ul>\n<li><p>如果想在编译器处理注解相关的逻辑，需要继承 <code>AbstractProcessor</code> 并实现 <code>process</code> 方法</p>\n</li>\n<li><p>自定义注解中 <code>@Retention</code> 注解设置为 <code>SOURCE</code> 和 <code>CLASS</code> 级别，就需要继承并是实现</p>\n</li>\n<li><p>lombok 实现原理：<code>lombok</code> 就用 <code>AnnotationProcessor</code> 继承了  <code>AbstractProcessor</code> ，这就是为什么使用了 @Data 这样的注解就能 set/get 了</p>\n</li>\n<li><p>一般自定义注解都是 <code>RUNTIME</code> 级别的，大多数情况都是运行时环境去做处理</p>\n</li>\n</ul>\n<h4 id=\"获取自定义注解相关注解信息\"><a href=\"#获取自定义注解相关注解信息\" class=\"headerlink\" title=\"获取自定义注解相关注解信息\"></a>获取自定义注解相关注解信息</h4><p>​    接口 <code>java.lang.reflect.AnnotatedElement</code> 提供了该功能</p>\n<blockquote>\n<p>​    反射获取运行时信息的重要手段，注解处理是通过 <code>JAVA</code> 反射来处理的。反射相关的类 <code>Class</code>、<code>Method</code>、<code>Field</code> 都实现了 <code>AnnotatedElement</code> 接口</p>\n</blockquote>\n<p><img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08annotationElememt.png\" alt=\"image-20220902102456681\"></p>\n<blockquote>\n<p>反射处理，只要我们通过反射拿到 【<code>Class、Method、Field</code>】类，就能通过 <code>getAnnotation(Class)</code> 拿到我们想要的注解并取值。</p>\n</blockquote>\n<p><img src=\"https://potato-blog.oss-cn-hangzhou.aliyuncs.com/img/08AnnotatedElement-Func.png\" alt=\"image-20220902102525599\"></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>假如定义一个注解，它用在自读那上，并且可以通过反射获取到，功能是要来描述字段的长度和作用。</p>\n<pre><code class=\"java\">@Target(ElementType.Field)  //注解用于字段上\n@Retention(RetentionPolicy.RUNTIME) //保留到运行时，可以通过注解获取\npublic @interface MyFeild()&#123;\n    String desc();\n    int length();\n&#125;\n</code></pre>\n<h3 id=\"示例一\"><a href=\"#示例一\" class=\"headerlink\" title=\"示例一\"></a>示例一</h3><p>通过反射获取注解</p>\n<pre><code class=\"java\">public class MyFeildTest&#123;\n    @MyFeild(desc=&quot;用户名&quot;,length=12)\n    private String username;\n    @Test\n    public void testMyFeild()&#123;\n        Class c = MyFeildTest.class;\n        \n        for(Field f: c.getDeclaredFields())&#123;\n            if(f.isAnnotationPresent(MyField.class))&#123;\n                MyField annotation = f.getAnnotation(MyField.class);\n                System.out.println(&quot;字段：【&quot;+f.getName()+&quot;】，描述：【&quot;+annotation.desc() +&quot;】，长度：【&quot;+ annotation.length() + &quot;】&quot;)\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"示例二\"><a href=\"#示例二\" class=\"headerlink\" title=\"示例二\"></a>示例二</h3><p>自定义注解 + 拦截器 实现登录校验</p>\n<pre><code class=\"java\">\n</code></pre>\n"},{"title":"面试系列 | Spring Cloud 核心知识总结","summary":"Spring Cloud 微服务知识扫盲","abbrlink":65045,"date":"2022-08-25T02:09:36.000Z","_content":"面试系列 | Spring Cloud 核心知识总结\n---\n\n    下面是一张 Spring Cloud 核心组件关系图：\n    从这张图中，其实我们是可以获取很多信息的，希望大家细细品尝。\n\n![Spring Cloud 架构组件](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08/image-20220825165728905.png) \n\n<!--more-->\n\n连环炮走起\n-----\n\n### 1、什么是 Spring Cloud ？\n\n`Spring Cloud` 流应用程序启动器是基于 `Spring Boot` 的 `Spring` 集成应用程序，提供与外部系统的集成。\n\n`Spring Cloud Task`，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。\n\n### 2、什么是微服务？\n\n​\t微服务架构是一种【**架构模式**】或者说是一种【**架构风格**】，它提倡将单一应用程序划分为【**一组**】小的服务，每个服务运行在其独立的自己的进程中，服务之间【**相互协调、互相配合**】，为用户提供最终价值。\n\n​\t服务之间采用轻量级的通信机制互相沟通（通常是基于 `HTTP` 的 `RESTful API`）, 每个服务都围绕着【**具体的业务**】进行构建，并且能够被独立的构建在生产环境、类生产环境等。\n\n​\t另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。\n\n**通俗地来讲：**\n\n​\t微服务就是一个【**独立**】的职责单一的服务应用程序。在 `IDEA` 工具里面就是用 `maven` 开发的一个个【**独立module**】，具体就是使用 `SpringBoot` 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。\n\n​\t微服务强调的是服务大小，关注的是某一个点，具体解决某一个问题 / 落地对应的一个服务应用，可以看做是 idea 里面一个 module。\n\n### 3、Spring Cloud 有什么优势\n\n使用 Spring Boot 开发分布式微服务时，我们面临以下问题\n\n*   **复杂性**：网络问题，延迟开销，带宽问题，安全问题\n    \n*   **服务发现**：服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。如`eureka、nacos`\n    \n*   **冗余**：分布式系统中的冗余问题。\n    \n*   **负载平衡**：负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。\n    \n*   **性能**：问题 由于各种运营开销导致的性能问题。\n    \n*   **部署**：复杂性 Devops 技能的要求。\n\n### 4、微服务之间如何独立通讯的?\n\n- 同步通信：`dobbo` 通过 `RPC` 远程过程调用、`SpringCloud` 通过 `REST`  接口 `json` 调用等。\n\n- 异步：MQ 消息队列，如：`RabbitMq`、`RocketMQ`、`ActiveM`、`Kafka`等消息队列。\n\n### 5、 **什么是服务熔断？什么是服务降级？**\n\n - **熔断机制**：应对雪崩效应的一种【**微服务链路保护机制**】。\n - **服务降级**：当某个微服务【**不可用**】或者【**响应时间太长**】时，会进行服务降级，进而熔断该节点微服务的调用，快速返回 【“**错误**”】 的响应信息。\n    - 当检测到该节点微服务调用响应正常后**恢复调用链路**。在 `Spring Cloud` 框架里熔断机制通过 `Hystrix` 实现。\n    - `Hystrix` 会**监控**微服务间调用的状况，当失败的调用到一定【**阈值**】，缺省是 【**5 秒内调用 20 次**】，如果失败，就会启动熔断机制。\n    - 服务降级，一般是从【**整体负荷考虑**】。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个【本地的 `fallback` 回调】，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。\n    - `Hystrix`相关注解 `@EnableHystrix`：开启熔断 `@HystrixCommand(fallbackMethod=”XXX”)`，声明一个失败回滚处理函数`XXX`，当被注解的方法执行超时（默认是 1000 毫秒），就会执行`fallback`函数，返回错误提示。\n\n### 6、 请说说 Eureka 和 zookeeper 的区别？\n\n- Zookeeper 保证了 CP，Eureka 保证了 AP。\n\n> A：高可用\n>\n> C：一致性\n>\n> P：分区容错性\n\n1. 当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的信息，但不能容忍直接 down 掉不可用。也就是说，服务注册功能对高可用性要求比较高，但 zk 会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新选 leader。问题在于，选取 leader 时间过长，30 ~ 120s，且选取期间 zk 集群都不可用，这样就会导致选取期间注册服务瘫痪。在云部署的环境下，因网络问题使得 zk 集群失去 master 节点是较大概率会发生的事，虽然服务能够恢复，但是漫长的选取时间导致的注册长期不可用是不能容忍的。\n\n2.Eureka 保证了可用性，Eureka 各个节点是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点仍然可以提供注册和查询服务。而 Eureka 的客户端向某个 Eureka 注册或发现时发生连接失败，则会自动切换到其他节点，只要有一台 Eureka 还在，就能保证注册服务可用，只是查到的信息可能不是最新的。除此之外，Eureka 还有自我保护机制，如果在 15 分钟内超过 85% 的节点没有正常的心跳，那么 Eureka 就认为客户端与注册中心发生了网络故障，此时会出现以下几种情况：\n\n①、Eureka 不在从注册列表中移除因为长时间没有收到心跳而应该过期的服务。\n\n②、Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点仍然可用）\n\n③、当网络稳定时，当前实例新的注册信息会被同步到其他节点。\n\n因此，Eureka 可以很好地应对因网络故障导致部分节点失去联系的情况，而不会像 Zookeeper 那样使整个微服务瘫痪\n\n### 7、SpringBoot 和 SpringCloud 的区别？\n\nSpringBoot 专注于快速方便得开发单个个体微服务。\n\nSpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务整合并管理起来，\n\n为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务\n\nSpringBoot 可以离开 SpringCloud 独立使用开发项目， 但是 SpringCloud 离不开 SpringBoot ，属于依赖的关系.\n\nSpringBoot 专注于快速、方便得开发单个微服务个体，SpringCloud 关注全局的服务治理框架。\n\n### 8、负载平衡的意义什么？\n\n在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源 的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。\n\n### 9、什么是 Hystrix？它如何实现容错？\n\nHystrix 是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。\n\n通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。\n\n思考一下微服务：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix)\n\n假设如果上图中的微服务 9 失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。\n\n随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达 1000. 这是 hystrix 出现的地方 我们将使用 Hystrix 在这种情况下的 Fallback 方法功能。我们有两个服务 employee-consumer 使用由 employee-consumer 公开的服务。\n\n简化图如下所示\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix2)\n\n现在假设由于某种原因，employee-producer 公开的服务会抛出异常。我们在这种情况下使用 Hystrix 定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。\n\n### 10、什么是 Hystrix 断路器？我们需要它吗？\n\n由于某些原因，employee-consumer 公开服务会引发异常。在这种情况下使用 Hystrix 我们定义了一个回退方法。如果在公开服务中发生异常，则回退方法返回一些默认值。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix3)\n\n  \n\n如果 firstPage method() 中的异常继续发生，则 Hystrix 电路将中断，并且员工使用者将一起跳过 firtsPage 方法，并直接调用回退方法。断路器的目的是给第一页方法或第一页方法可能调用的其他方法留出时间，并导致异常恢复。可能发生的情况是，在负载较小的情况下，导致异常的问题有更好的恢复机会 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix4)\n\n  \n\n### 11、说说 RPC 的实现原理\n\n首先需要有处理网络连接通讯的模块，负责连接建立、管理和消息的传输。其次需要有编 解码的模块，因为网络通讯都是传输的字节码，需要将我们使用的对象序列化和反序列 化。剩下的就是客户端和服务器端的部分，服务器端暴露要开放的服务接口，客户调用服 务接口的一个代理实现，这个代理实现负责收集数据、编码并传输给服务器然后等待结果 返回。\n\n### 12，eureka 自我保护机制是什么?\n\n当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。\n\n### 13，什么是 Ribbon？\n\nribbon 是一个负载均衡客户端，可以很好地控制 htt 和 tcp 的一些行为。`feign默认集成了ribbon`。\n\n### 14，什么是 Netflix Feign？它的优点是什么？\n\nFeign 是受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 java 客户端联编程序。\n\nFeign 的第一个目标是将约束分母的复杂性统一到 http apis，而不考虑其稳定性。\n\n特点：\n\n*   Feign 采用的是基于接口的注解\n    \n*   Feign 整合了 ribbon，具有负载均衡的能力\n    \n*   整合了 Hystrix，具有熔断的能力\n    \n\n使用方式\n\n*   添加 pom 依赖。\n    \n*   启动类添加`@EnableFeignClients`\n    \n*   定义一个接口`@FeignClient(name=“xxx”)`指定调用哪个服务\n    \n\n### 15， Ribbon 和 Feign 的区别？\n\n1.Ribbon 都是调用其他服务的，但方式不同。2. 启动类注解不同，Ribbon 是 @RibbonClient feign 的是 @EnableFeignClients 3. 服务指定的位置不同，Ribbon 是在 @RibbonClient 注解上声明，Feign 则是在定义抽象方法的接口中使用 @FeignClient 声明。4. 调用方式不同，Ribbon 需要自己构建 http 请求，模拟 http 请求。\n\n### 16、Spring Cloud 的核心组件有哪些？\n\n*   Eureka：服务注册于发现。\n    \n*   Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。\n    \n*   Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。\n    \n*   Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。\n    \n*   Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。\n    \n\n### 17、说说 Spring Boot 和 Spring Cloud 的关系\n\nSpring Boot 是 Spring 推出用于解决传统框架配置文件冗余, 装配组件繁杂的基于 Maven 的解决方案, 旨在快速搭建单个微服务 而 Spring Cloud 专注于解决各个微服务之间的协调与配置, 服务之间的通信, 熔断, 负载均衡等 技术维度并相同, 并且 Spring Cloud 是依赖于 Spring Boot 的, 而 Spring Boot 并不是依赖与 Spring Cloud, 甚至还可以和 Dubbo 进行优秀的整合开发\n\n总结\n\n*   SpringBoot 专注于快速方便的开发单个个体的微服务\n    \n*   SpringCloud 是关注全局的微服务协调整理治理框架, 整合并管理各个微服务, 为各个微服务之间提供, 配置管理, 服务发现, 断路器, 路由, 事件总线等集成服务\n    \n*   Spring Boot 不依赖于 Spring Cloud，Spring Cloud 依赖于 Spring Boot, 属于依赖关系\n    \n*   Spring Boot 专注于快速, 方便的开发单个的微服务个体, Spring Cloud 关注全局的服务治理框架\n    \n\n### 18、说说微服务之间是如何独立通讯的？\n\n#### 远程过程调用（Remote Procedure Invocation）\n\n也就是我们常说的服务的注册与发现，直接通过远程过程调用来访问别的 service。\n\n**优点**：简单，常见, 因为没有中间件代理，系统更简单\n\n**缺点**：只支持请求 / 响应的模式，不支持别的，比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应，降低了可用性，因为客户端和服务端在请求过程中必须都是可用的。\n\n#### 消息\n\n使用异步消息来做服务间通信。服务间通过消息管道来交换消息，从而通信。\n\n**优点**：把客户端和服务端解耦，更松耦合，提高可用性，因为消息中间件缓存了消息，直到消费者可以消费，       支持很多通信机制比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应。\n\n**缺点**：消息中间件有额外的复杂。\n\n### 19、Spring Cloud 如何实现服务的注册?\n\n服务发布时，指定对应的服务名，将服务注册到 注册中心 (`Eureka 、Zookeeper)`。\n\n注册中心加`@EnableEurekaServer`，服务用`@EnableDiscoveryClient`，然后用 ribbon 或 feign 进行服务直接的调用发现。\n\n此题偏向于向实战，就看你是不是背面试题的，没有实战的人是不知道的。\n\n### 20、什么是服务熔断？\n\n在复杂的分布式系统中, 微服务之间的相互调用, 有可能出现各种各样的原因导致服务的阻塞, 在高并发场景下, 服务的阻塞意味着线程的阻塞, 导致当前线程不可用, 服务器的线程全部阻塞, 导致服务器崩溃, 由于服务之间的调用关系是同步的, 会对整个微服务系统造成服务雪崩\n\n为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就需要进行服务熔断和服务降级处理。\n\n所谓的服务熔断指的是某个服务故障或异常一起类似显示世界中的 “保险丝 \" 当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。\n\n服务熔断就是相当于我们电闸的保险丝, 一旦发生服务雪崩的, 就会熔断整个服务, 通过维护一个自己的线程池, 当线程达到阈值的时候就启动服务降级, 如果其他请求继续访问就直接返回 fallback 的默认值\n\n### 21、了解 Eureka 自我保护机制吗？\n\n当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。\n\n### 22、熟悉 Spring Cloud Bus 吗?\n\nspring cloud bus 将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。\n\n### 23、Spring Cloud 断路器有什么作用?\n\n当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应，当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）。一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象，这时候断路器完全打开 那么下次请求就不会请求到该服务。\n\n半开：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭。关闭：当服务一直处于正常状态 能正常调用。\n\n### 24、了解 Spring Cloud Config 吗?\n\n在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件`Spring Cloud Config`，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。\n\n在`Spring Cloud Config` 组件中，分两个角色，一是 config server，二是 config client。\n\n使用方式：\n\n*   添加 pom 依赖\n    \n*   配置文件添加相关配置\n    \n*   启动类添加注解 @EnableConfigServer\n    \n\n### 25、说说你对 Spring Cloud Gateway 的理解\n\nSpring Cloud Gateway 是 Spring Cloud 官方推出的第二代网关框架，取代 Zuul 网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。\n\n使用了一个 RouteLocatorBuilder 的 bean 去创建路由，除了创建路由 RouteLocatorBuilder 可以让你添加各种 predicates 和 filters，predicates 断言的意思，顾名思义就是根据具体的请求的规则，由具体的 route 去处理，filters 是各种过滤器，用来对请求做各种判断和修改。\n\n参考；http://1pgqu.cn/M0NZo\n\n总结\n--\n\nSpring Cloud 目前相当的火热，也差不多是 java 开发者必备技能之一了。面试的时候被问，那也是正常不过了，很多人可能用来很久，但是没有去了解过原理，面试照样挂掉。背面试题，在很大层面上还是很有用的。但从长远角度来说，希望大家更深层次去学习、去实践。只有自己真的掌握，那才叫 NB。\n","source":"_posts/2022-08-25-Spring-Cloud-核心知识总结.md","raw":"---\ntitle: 面试系列 | Spring Cloud 核心知识总结\ntags: Spring Cloud\ncategories: Spring Cloud\nsummary: Spring Cloud 微服务知识扫盲\nabbrlink: 65045\ndate: 2022-08-25 10:09:36\n---\n面试系列 | Spring Cloud 核心知识总结\n---\n\n    下面是一张 Spring Cloud 核心组件关系图：\n    从这张图中，其实我们是可以获取很多信息的，希望大家细细品尝。\n\n![Spring Cloud 架构组件](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08/image-20220825165728905.png) \n\n<!--more-->\n\n连环炮走起\n-----\n\n### 1、什么是 Spring Cloud ？\n\n`Spring Cloud` 流应用程序启动器是基于 `Spring Boot` 的 `Spring` 集成应用程序，提供与外部系统的集成。\n\n`Spring Cloud Task`，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。\n\n### 2、什么是微服务？\n\n​\t微服务架构是一种【**架构模式**】或者说是一种【**架构风格**】，它提倡将单一应用程序划分为【**一组**】小的服务，每个服务运行在其独立的自己的进程中，服务之间【**相互协调、互相配合**】，为用户提供最终价值。\n\n​\t服务之间采用轻量级的通信机制互相沟通（通常是基于 `HTTP` 的 `RESTful API`）, 每个服务都围绕着【**具体的业务**】进行构建，并且能够被独立的构建在生产环境、类生产环境等。\n\n​\t另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。\n\n**通俗地来讲：**\n\n​\t微服务就是一个【**独立**】的职责单一的服务应用程序。在 `IDEA` 工具里面就是用 `maven` 开发的一个个【**独立module**】，具体就是使用 `SpringBoot` 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。\n\n​\t微服务强调的是服务大小，关注的是某一个点，具体解决某一个问题 / 落地对应的一个服务应用，可以看做是 idea 里面一个 module。\n\n### 3、Spring Cloud 有什么优势\n\n使用 Spring Boot 开发分布式微服务时，我们面临以下问题\n\n*   **复杂性**：网络问题，延迟开销，带宽问题，安全问题\n    \n*   **服务发现**：服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。如`eureka、nacos`\n    \n*   **冗余**：分布式系统中的冗余问题。\n    \n*   **负载平衡**：负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。\n    \n*   **性能**：问题 由于各种运营开销导致的性能问题。\n    \n*   **部署**：复杂性 Devops 技能的要求。\n\n### 4、微服务之间如何独立通讯的?\n\n- 同步通信：`dobbo` 通过 `RPC` 远程过程调用、`SpringCloud` 通过 `REST`  接口 `json` 调用等。\n\n- 异步：MQ 消息队列，如：`RabbitMq`、`RocketMQ`、`ActiveM`、`Kafka`等消息队列。\n\n### 5、 **什么是服务熔断？什么是服务降级？**\n\n - **熔断机制**：应对雪崩效应的一种【**微服务链路保护机制**】。\n - **服务降级**：当某个微服务【**不可用**】或者【**响应时间太长**】时，会进行服务降级，进而熔断该节点微服务的调用，快速返回 【“**错误**”】 的响应信息。\n    - 当检测到该节点微服务调用响应正常后**恢复调用链路**。在 `Spring Cloud` 框架里熔断机制通过 `Hystrix` 实现。\n    - `Hystrix` 会**监控**微服务间调用的状况，当失败的调用到一定【**阈值**】，缺省是 【**5 秒内调用 20 次**】，如果失败，就会启动熔断机制。\n    - 服务降级，一般是从【**整体负荷考虑**】。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个【本地的 `fallback` 回调】，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。\n    - `Hystrix`相关注解 `@EnableHystrix`：开启熔断 `@HystrixCommand(fallbackMethod=”XXX”)`，声明一个失败回滚处理函数`XXX`，当被注解的方法执行超时（默认是 1000 毫秒），就会执行`fallback`函数，返回错误提示。\n\n### 6、 请说说 Eureka 和 zookeeper 的区别？\n\n- Zookeeper 保证了 CP，Eureka 保证了 AP。\n\n> A：高可用\n>\n> C：一致性\n>\n> P：分区容错性\n\n1. 当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的信息，但不能容忍直接 down 掉不可用。也就是说，服务注册功能对高可用性要求比较高，但 zk 会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新选 leader。问题在于，选取 leader 时间过长，30 ~ 120s，且选取期间 zk 集群都不可用，这样就会导致选取期间注册服务瘫痪。在云部署的环境下，因网络问题使得 zk 集群失去 master 节点是较大概率会发生的事，虽然服务能够恢复，但是漫长的选取时间导致的注册长期不可用是不能容忍的。\n\n2.Eureka 保证了可用性，Eureka 各个节点是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点仍然可以提供注册和查询服务。而 Eureka 的客户端向某个 Eureka 注册或发现时发生连接失败，则会自动切换到其他节点，只要有一台 Eureka 还在，就能保证注册服务可用，只是查到的信息可能不是最新的。除此之外，Eureka 还有自我保护机制，如果在 15 分钟内超过 85% 的节点没有正常的心跳，那么 Eureka 就认为客户端与注册中心发生了网络故障，此时会出现以下几种情况：\n\n①、Eureka 不在从注册列表中移除因为长时间没有收到心跳而应该过期的服务。\n\n②、Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点仍然可用）\n\n③、当网络稳定时，当前实例新的注册信息会被同步到其他节点。\n\n因此，Eureka 可以很好地应对因网络故障导致部分节点失去联系的情况，而不会像 Zookeeper 那样使整个微服务瘫痪\n\n### 7、SpringBoot 和 SpringCloud 的区别？\n\nSpringBoot 专注于快速方便得开发单个个体微服务。\n\nSpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务整合并管理起来，\n\n为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务\n\nSpringBoot 可以离开 SpringCloud 独立使用开发项目， 但是 SpringCloud 离不开 SpringBoot ，属于依赖的关系.\n\nSpringBoot 专注于快速、方便得开发单个微服务个体，SpringCloud 关注全局的服务治理框架。\n\n### 8、负载平衡的意义什么？\n\n在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源 的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。\n\n### 9、什么是 Hystrix？它如何实现容错？\n\nHystrix 是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。\n\n通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。\n\n思考一下微服务：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix)\n\n假设如果上图中的微服务 9 失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。\n\n随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达 1000. 这是 hystrix 出现的地方 我们将使用 Hystrix 在这种情况下的 Fallback 方法功能。我们有两个服务 employee-consumer 使用由 employee-consumer 公开的服务。\n\n简化图如下所示\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix2)\n\n现在假设由于某种原因，employee-producer 公开的服务会抛出异常。我们在这种情况下使用 Hystrix 定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。\n\n### 10、什么是 Hystrix 断路器？我们需要它吗？\n\n由于某些原因，employee-consumer 公开服务会引发异常。在这种情况下使用 Hystrix 我们定义了一个回退方法。如果在公开服务中发生异常，则回退方法返回一些默认值。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix3)\n\n  \n\n如果 firstPage method() 中的异常继续发生，则 Hystrix 电路将中断，并且员工使用者将一起跳过 firtsPage 方法，并直接调用回退方法。断路器的目的是给第一页方法或第一页方法可能调用的其他方法留出时间，并导致异常恢复。可能发生的情况是，在负载较小的情况下，导致异常的问题有更好的恢复机会 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix4)\n\n  \n\n### 11、说说 RPC 的实现原理\n\n首先需要有处理网络连接通讯的模块，负责连接建立、管理和消息的传输。其次需要有编 解码的模块，因为网络通讯都是传输的字节码，需要将我们使用的对象序列化和反序列 化。剩下的就是客户端和服务器端的部分，服务器端暴露要开放的服务接口，客户调用服 务接口的一个代理实现，这个代理实现负责收集数据、编码并传输给服务器然后等待结果 返回。\n\n### 12，eureka 自我保护机制是什么?\n\n当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。\n\n### 13，什么是 Ribbon？\n\nribbon 是一个负载均衡客户端，可以很好地控制 htt 和 tcp 的一些行为。`feign默认集成了ribbon`。\n\n### 14，什么是 Netflix Feign？它的优点是什么？\n\nFeign 是受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 java 客户端联编程序。\n\nFeign 的第一个目标是将约束分母的复杂性统一到 http apis，而不考虑其稳定性。\n\n特点：\n\n*   Feign 采用的是基于接口的注解\n    \n*   Feign 整合了 ribbon，具有负载均衡的能力\n    \n*   整合了 Hystrix，具有熔断的能力\n    \n\n使用方式\n\n*   添加 pom 依赖。\n    \n*   启动类添加`@EnableFeignClients`\n    \n*   定义一个接口`@FeignClient(name=“xxx”)`指定调用哪个服务\n    \n\n### 15， Ribbon 和 Feign 的区别？\n\n1.Ribbon 都是调用其他服务的，但方式不同。2. 启动类注解不同，Ribbon 是 @RibbonClient feign 的是 @EnableFeignClients 3. 服务指定的位置不同，Ribbon 是在 @RibbonClient 注解上声明，Feign 则是在定义抽象方法的接口中使用 @FeignClient 声明。4. 调用方式不同，Ribbon 需要自己构建 http 请求，模拟 http 请求。\n\n### 16、Spring Cloud 的核心组件有哪些？\n\n*   Eureka：服务注册于发现。\n    \n*   Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。\n    \n*   Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。\n    \n*   Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。\n    \n*   Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。\n    \n\n### 17、说说 Spring Boot 和 Spring Cloud 的关系\n\nSpring Boot 是 Spring 推出用于解决传统框架配置文件冗余, 装配组件繁杂的基于 Maven 的解决方案, 旨在快速搭建单个微服务 而 Spring Cloud 专注于解决各个微服务之间的协调与配置, 服务之间的通信, 熔断, 负载均衡等 技术维度并相同, 并且 Spring Cloud 是依赖于 Spring Boot 的, 而 Spring Boot 并不是依赖与 Spring Cloud, 甚至还可以和 Dubbo 进行优秀的整合开发\n\n总结\n\n*   SpringBoot 专注于快速方便的开发单个个体的微服务\n    \n*   SpringCloud 是关注全局的微服务协调整理治理框架, 整合并管理各个微服务, 为各个微服务之间提供, 配置管理, 服务发现, 断路器, 路由, 事件总线等集成服务\n    \n*   Spring Boot 不依赖于 Spring Cloud，Spring Cloud 依赖于 Spring Boot, 属于依赖关系\n    \n*   Spring Boot 专注于快速, 方便的开发单个的微服务个体, Spring Cloud 关注全局的服务治理框架\n    \n\n### 18、说说微服务之间是如何独立通讯的？\n\n#### 远程过程调用（Remote Procedure Invocation）\n\n也就是我们常说的服务的注册与发现，直接通过远程过程调用来访问别的 service。\n\n**优点**：简单，常见, 因为没有中间件代理，系统更简单\n\n**缺点**：只支持请求 / 响应的模式，不支持别的，比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应，降低了可用性，因为客户端和服务端在请求过程中必须都是可用的。\n\n#### 消息\n\n使用异步消息来做服务间通信。服务间通过消息管道来交换消息，从而通信。\n\n**优点**：把客户端和服务端解耦，更松耦合，提高可用性，因为消息中间件缓存了消息，直到消费者可以消费，       支持很多通信机制比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应。\n\n**缺点**：消息中间件有额外的复杂。\n\n### 19、Spring Cloud 如何实现服务的注册?\n\n服务发布时，指定对应的服务名，将服务注册到 注册中心 (`Eureka 、Zookeeper)`。\n\n注册中心加`@EnableEurekaServer`，服务用`@EnableDiscoveryClient`，然后用 ribbon 或 feign 进行服务直接的调用发现。\n\n此题偏向于向实战，就看你是不是背面试题的，没有实战的人是不知道的。\n\n### 20、什么是服务熔断？\n\n在复杂的分布式系统中, 微服务之间的相互调用, 有可能出现各种各样的原因导致服务的阻塞, 在高并发场景下, 服务的阻塞意味着线程的阻塞, 导致当前线程不可用, 服务器的线程全部阻塞, 导致服务器崩溃, 由于服务之间的调用关系是同步的, 会对整个微服务系统造成服务雪崩\n\n为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就需要进行服务熔断和服务降级处理。\n\n所谓的服务熔断指的是某个服务故障或异常一起类似显示世界中的 “保险丝 \" 当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。\n\n服务熔断就是相当于我们电闸的保险丝, 一旦发生服务雪崩的, 就会熔断整个服务, 通过维护一个自己的线程池, 当线程达到阈值的时候就启动服务降级, 如果其他请求继续访问就直接返回 fallback 的默认值\n\n### 21、了解 Eureka 自我保护机制吗？\n\n当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。\n\n### 22、熟悉 Spring Cloud Bus 吗?\n\nspring cloud bus 将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。\n\n### 23、Spring Cloud 断路器有什么作用?\n\n当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应，当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）。一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象，这时候断路器完全打开 那么下次请求就不会请求到该服务。\n\n半开：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭。关闭：当服务一直处于正常状态 能正常调用。\n\n### 24、了解 Spring Cloud Config 吗?\n\n在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件`Spring Cloud Config`，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。\n\n在`Spring Cloud Config` 组件中，分两个角色，一是 config server，二是 config client。\n\n使用方式：\n\n*   添加 pom 依赖\n    \n*   配置文件添加相关配置\n    \n*   启动类添加注解 @EnableConfigServer\n    \n\n### 25、说说你对 Spring Cloud Gateway 的理解\n\nSpring Cloud Gateway 是 Spring Cloud 官方推出的第二代网关框架，取代 Zuul 网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。\n\n使用了一个 RouteLocatorBuilder 的 bean 去创建路由，除了创建路由 RouteLocatorBuilder 可以让你添加各种 predicates 和 filters，predicates 断言的意思，顾名思义就是根据具体的请求的规则，由具体的 route 去处理，filters 是各种过滤器，用来对请求做各种判断和修改。\n\n参考；http://1pgqu.cn/M0NZo\n\n总结\n--\n\nSpring Cloud 目前相当的火热，也差不多是 java 开发者必备技能之一了。面试的时候被问，那也是正常不过了，很多人可能用来很久，但是没有去了解过原理，面试照样挂掉。背面试题，在很大层面上还是很有用的。但从长远角度来说，希望大家更深层次去学习、去实践。只有自己真的掌握，那才叫 NB。\n","slug":"Spring-Cloud-核心知识总结","published":1,"updated":"2024-12-16T12:11:11.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyp5001zj0krc4wh6g7p","content":"<h2 id=\"面试系列-Spring-Cloud-核心知识总结\"><a href=\"#面试系列-Spring-Cloud-核心知识总结\" class=\"headerlink\" title=\"面试系列 | Spring Cloud 核心知识总结\"></a>面试系列 | Spring Cloud 核心知识总结</h2><pre><code>下面是一张 Spring Cloud 核心组件关系图：\n从这张图中，其实我们是可以获取很多信息的，希望大家细细品尝。\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08/image-20220825165728905.png\" alt=\"Spring Cloud 架构组件\"> </p>\n<span id=\"more\"></span>\n\n<h2 id=\"连环炮走起\"><a href=\"#连环炮走起\" class=\"headerlink\" title=\"连环炮走起\"></a>连环炮走起</h2><h3 id=\"1、什么是-Spring-Cloud-？\"><a href=\"#1、什么是-Spring-Cloud-？\" class=\"headerlink\" title=\"1、什么是 Spring Cloud ？\"></a>1、什么是 Spring Cloud ？</h3><p><code>Spring Cloud</code> 流应用程序启动器是基于 <code>Spring Boot</code> 的 <code>Spring</code> 集成应用程序，提供与外部系统的集成。</p>\n<p><code>Spring Cloud Task</code>，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。</p>\n<h3 id=\"2、什么是微服务？\"><a href=\"#2、什么是微服务？\" class=\"headerlink\" title=\"2、什么是微服务？\"></a>2、什么是微服务？</h3><p>​    微服务架构是一种【<strong>架构模式</strong>】或者说是一种【<strong>架构风格</strong>】，它提倡将单一应用程序划分为【<strong>一组</strong>】小的服务，每个服务运行在其独立的自己的进程中，服务之间【<strong>相互协调、互相配合</strong>】，为用户提供最终价值。</p>\n<p>​    服务之间采用轻量级的通信机制互相沟通（通常是基于 <code>HTTP</code> 的 <code>RESTful API</code>）, 每个服务都围绕着【<strong>具体的业务</strong>】进行构建，并且能够被独立的构建在生产环境、类生产环境等。</p>\n<p>​    另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>\n<p><strong>通俗地来讲：</strong></p>\n<p>​    微服务就是一个【<strong>独立</strong>】的职责单一的服务应用程序。在 <code>IDEA</code> 工具里面就是用 <code>maven</code> 开发的一个个【<strong>独立module</strong>】，具体就是使用 <code>SpringBoot</code> 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。</p>\n<p>​    微服务强调的是服务大小，关注的是某一个点，具体解决某一个问题 / 落地对应的一个服务应用，可以看做是 idea 里面一个 module。</p>\n<h3 id=\"3、Spring-Cloud-有什么优势\"><a href=\"#3、Spring-Cloud-有什么优势\" class=\"headerlink\" title=\"3、Spring Cloud 有什么优势\"></a>3、Spring Cloud 有什么优势</h3><p>使用 Spring Boot 开发分布式微服务时，我们面临以下问题</p>\n<ul>\n<li><strong>复杂性</strong>：网络问题，延迟开销，带宽问题，安全问题</li>\n<li><strong>服务发现</strong>：服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。如<code>eureka、nacos</code></li>\n<li><strong>冗余</strong>：分布式系统中的冗余问题。</li>\n<li><strong>负载平衡</strong>：负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。</li>\n<li><strong>性能</strong>：问题 由于各种运营开销导致的性能问题。</li>\n<li>  <strong>部署</strong>：复杂性 Devops 技能的要求。</li>\n</ul>\n<h3 id=\"4、微服务之间如何独立通讯的\"><a href=\"#4、微服务之间如何独立通讯的\" class=\"headerlink\" title=\"4、微服务之间如何独立通讯的?\"></a>4、微服务之间如何独立通讯的?</h3><ul>\n<li><p>同步通信：<code>dobbo</code> 通过 <code>RPC</code> 远程过程调用、<code>SpringCloud</code> 通过 <code>REST</code>  接口 <code>json</code> 调用等。</p>\n</li>\n<li><p>异步：MQ 消息队列，如：<code>RabbitMq</code>、<code>RocketMQ</code>、<code>ActiveM</code>、<code>Kafka</code>等消息队列。</p>\n</li>\n</ul>\n<h3 id=\"5、-什么是服务熔断？什么是服务降级？\"><a href=\"#5、-什么是服务熔断？什么是服务降级？\" class=\"headerlink\" title=\"5、 什么是服务熔断？什么是服务降级？\"></a>5、 <strong>什么是服务熔断？什么是服务降级？</strong></h3><ul>\n<li><strong>熔断机制</strong>：应对雪崩效应的一种【<strong>微服务链路保护机制</strong>】。</li>\n<li><strong>服务降级</strong>：当某个微服务【<strong>不可用</strong>】或者【<strong>响应时间太长</strong>】时，会进行服务降级，进而熔断该节点微服务的调用，快速返回 【“<strong>错误</strong>”】 的响应信息。<ul>\n<li>当检测到该节点微服务调用响应正常后<strong>恢复调用链路</strong>。在 <code>Spring Cloud</code> 框架里熔断机制通过 <code>Hystrix</code> 实现。</li>\n<li><code>Hystrix</code> 会<strong>监控</strong>微服务间调用的状况，当失败的调用到一定【<strong>阈值</strong>】，缺省是 【<strong>5 秒内调用 20 次</strong>】，如果失败，就会启动熔断机制。</li>\n<li>服务降级，一般是从【<strong>整体负荷考虑</strong>】。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个【本地的 <code>fallback</code> 回调】，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。</li>\n<li><code>Hystrix</code>相关注解 <code>@EnableHystrix</code>：开启熔断 <code>@HystrixCommand(fallbackMethod=”XXX”)</code>，声明一个失败回滚处理函数<code>XXX</code>，当被注解的方法执行超时（默认是 1000 毫秒），就会执行<code>fallback</code>函数，返回错误提示。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6、-请说说-Eureka-和-zookeeper-的区别？\"><a href=\"#6、-请说说-Eureka-和-zookeeper-的区别？\" class=\"headerlink\" title=\"6、 请说说 Eureka 和 zookeeper 的区别？\"></a>6、 请说说 Eureka 和 zookeeper 的区别？</h3><ul>\n<li>Zookeeper 保证了 CP，Eureka 保证了 AP。</li>\n</ul>\n<blockquote>\n<p>A：高可用</p>\n<p>C：一致性</p>\n<p>P：分区容错性</p>\n</blockquote>\n<ol>\n<li>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的信息，但不能容忍直接 down 掉不可用。也就是说，服务注册功能对高可用性要求比较高，但 zk 会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新选 leader。问题在于，选取 leader 时间过长，30 ~ 120s，且选取期间 zk 集群都不可用，这样就会导致选取期间注册服务瘫痪。在云部署的环境下，因网络问题使得 zk 集群失去 master 节点是较大概率会发生的事，虽然服务能够恢复，但是漫长的选取时间导致的注册长期不可用是不能容忍的。</li>\n</ol>\n<p>2.Eureka 保证了可用性，Eureka 各个节点是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点仍然可以提供注册和查询服务。而 Eureka 的客户端向某个 Eureka 注册或发现时发生连接失败，则会自动切换到其他节点，只要有一台 Eureka 还在，就能保证注册服务可用，只是查到的信息可能不是最新的。除此之外，Eureka 还有自我保护机制，如果在 15 分钟内超过 85% 的节点没有正常的心跳，那么 Eureka 就认为客户端与注册中心发生了网络故障，此时会出现以下几种情况：</p>\n<p>①、Eureka 不在从注册列表中移除因为长时间没有收到心跳而应该过期的服务。</p>\n<p>②、Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点仍然可用）</p>\n<p>③、当网络稳定时，当前实例新的注册信息会被同步到其他节点。</p>\n<p>因此，Eureka 可以很好地应对因网络故障导致部分节点失去联系的情况，而不会像 Zookeeper 那样使整个微服务瘫痪</p>\n<h3 id=\"7、SpringBoot-和-SpringCloud-的区别？\"><a href=\"#7、SpringBoot-和-SpringCloud-的区别？\" class=\"headerlink\" title=\"7、SpringBoot 和 SpringCloud 的区别？\"></a>7、SpringBoot 和 SpringCloud 的区别？</h3><p>SpringBoot 专注于快速方便得开发单个个体微服务。</p>\n<p>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务整合并管理起来，</p>\n<p>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p>\n<p>SpringBoot 可以离开 SpringCloud 独立使用开发项目， 但是 SpringCloud 离不开 SpringBoot ，属于依赖的关系.</p>\n<p>SpringBoot 专注于快速、方便得开发单个微服务个体，SpringCloud 关注全局的服务治理框架。</p>\n<h3 id=\"8、负载平衡的意义什么？\"><a href=\"#8、负载平衡的意义什么？\" class=\"headerlink\" title=\"8、负载平衡的意义什么？\"></a>8、负载平衡的意义什么？</h3><p>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源 的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</p>\n<h3 id=\"9、什么是-Hystrix？它如何实现容错？\"><a href=\"#9、什么是-Hystrix？它如何实现容错？\" class=\"headerlink\" title=\"9、什么是 Hystrix？它如何实现容错？\"></a>9、什么是 Hystrix？它如何实现容错？</h3><p>Hystrix 是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。</p>\n<p>通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。</p>\n<p>思考一下微服务：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix\"></p>\n<p>假设如果上图中的微服务 9 失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。</p>\n<p>随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达 1000. 这是 hystrix 出现的地方 我们将使用 Hystrix 在这种情况下的 Fallback 方法功能。我们有两个服务 employee-consumer 使用由 employee-consumer 公开的服务。</p>\n<p>简化图如下所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix2\"></p>\n<p>现在假设由于某种原因，employee-producer 公开的服务会抛出异常。我们在这种情况下使用 Hystrix 定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。</p>\n<h3 id=\"10、什么是-Hystrix-断路器？我们需要它吗？\"><a href=\"#10、什么是-Hystrix-断路器？我们需要它吗？\" class=\"headerlink\" title=\"10、什么是 Hystrix 断路器？我们需要它吗？\"></a>10、什么是 Hystrix 断路器？我们需要它吗？</h3><p>由于某些原因，employee-consumer 公开服务会引发异常。在这种情况下使用 Hystrix 我们定义了一个回退方法。如果在公开服务中发生异常，则回退方法返回一些默认值。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix3\"></p>\n<p>如果 firstPage method() 中的异常继续发生，则 Hystrix 电路将中断，并且员工使用者将一起跳过 firtsPage 方法，并直接调用回退方法。断路器的目的是给第一页方法或第一页方法可能调用的其他方法留出时间，并导致异常恢复。可能发生的情况是，在负载较小的情况下，导致异常的问题有更好的恢复机会 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix4\"></p>\n<h3 id=\"11、说说-RPC-的实现原理\"><a href=\"#11、说说-RPC-的实现原理\" class=\"headerlink\" title=\"11、说说 RPC 的实现原理\"></a>11、说说 RPC 的实现原理</h3><p>首先需要有处理网络连接通讯的模块，负责连接建立、管理和消息的传输。其次需要有编 解码的模块，因为网络通讯都是传输的字节码，需要将我们使用的对象序列化和反序列 化。剩下的就是客户端和服务器端的部分，服务器端暴露要开放的服务接口，客户调用服 务接口的一个代理实现，这个代理实现负责收集数据、编码并传输给服务器然后等待结果 返回。</p>\n<h3 id=\"12，eureka-自我保护机制是什么\"><a href=\"#12，eureka-自我保护机制是什么\" class=\"headerlink\" title=\"12，eureka 自我保护机制是什么?\"></a>12，eureka 自我保护机制是什么?</h3><p>当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</p>\n<h3 id=\"13，什么是-Ribbon？\"><a href=\"#13，什么是-Ribbon？\" class=\"headerlink\" title=\"13，什么是 Ribbon？\"></a>13，什么是 Ribbon？</h3><p>ribbon 是一个负载均衡客户端，可以很好地控制 htt 和 tcp 的一些行为。<code>feign默认集成了ribbon</code>。</p>\n<h3 id=\"14，什么是-Netflix-Feign？它的优点是什么？\"><a href=\"#14，什么是-Netflix-Feign？它的优点是什么？\" class=\"headerlink\" title=\"14，什么是 Netflix Feign？它的优点是什么？\"></a>14，什么是 Netflix Feign？它的优点是什么？</h3><p>Feign 是受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 java 客户端联编程序。</p>\n<p>Feign 的第一个目标是将约束分母的复杂性统一到 http apis，而不考虑其稳定性。</p>\n<p>特点：</p>\n<ul>\n<li>Feign 采用的是基于接口的注解</li>\n<li>Feign 整合了 ribbon，具有负载均衡的能力</li>\n<li>整合了 Hystrix，具有熔断的能力</li>\n</ul>\n<p>使用方式</p>\n<ul>\n<li>添加 pom 依赖。</li>\n<li>启动类添加<code>@EnableFeignClients</code></li>\n<li>定义一个接口<code>@FeignClient(name=“xxx”)</code>指定调用哪个服务</li>\n</ul>\n<h3 id=\"15，-Ribbon-和-Feign-的区别？\"><a href=\"#15，-Ribbon-和-Feign-的区别？\" class=\"headerlink\" title=\"15， Ribbon 和 Feign 的区别？\"></a>15， Ribbon 和 Feign 的区别？</h3><p>1.Ribbon 都是调用其他服务的，但方式不同。2. 启动类注解不同，Ribbon 是 @RibbonClient feign 的是 @EnableFeignClients 3. 服务指定的位置不同，Ribbon 是在 @RibbonClient 注解上声明，Feign 则是在定义抽象方法的接口中使用 @FeignClient 声明。4. 调用方式不同，Ribbon 需要自己构建 http 请求，模拟 http 请求。</p>\n<h3 id=\"16、Spring-Cloud-的核心组件有哪些？\"><a href=\"#16、Spring-Cloud-的核心组件有哪些？\" class=\"headerlink\" title=\"16、Spring Cloud 的核心组件有哪些？\"></a>16、Spring Cloud 的核心组件有哪些？</h3><ul>\n<li>Eureka：服务注册于发现。</li>\n<li>Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。</li>\n<li>Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。</li>\n<li>Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。</li>\n<li>Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</li>\n</ul>\n<h3 id=\"17、说说-Spring-Boot-和-Spring-Cloud-的关系\"><a href=\"#17、说说-Spring-Boot-和-Spring-Cloud-的关系\" class=\"headerlink\" title=\"17、说说 Spring Boot 和 Spring Cloud 的关系\"></a>17、说说 Spring Boot 和 Spring Cloud 的关系</h3><p>Spring Boot 是 Spring 推出用于解决传统框架配置文件冗余, 装配组件繁杂的基于 Maven 的解决方案, 旨在快速搭建单个微服务 而 Spring Cloud 专注于解决各个微服务之间的协调与配置, 服务之间的通信, 熔断, 负载均衡等 技术维度并相同, 并且 Spring Cloud 是依赖于 Spring Boot 的, 而 Spring Boot 并不是依赖与 Spring Cloud, 甚至还可以和 Dubbo 进行优秀的整合开发</p>\n<p>总结</p>\n<ul>\n<li>SpringBoot 专注于快速方便的开发单个个体的微服务</li>\n<li>SpringCloud 是关注全局的微服务协调整理治理框架, 整合并管理各个微服务, 为各个微服务之间提供, 配置管理, 服务发现, 断路器, 路由, 事件总线等集成服务</li>\n<li>Spring Boot 不依赖于 Spring Cloud，Spring Cloud 依赖于 Spring Boot, 属于依赖关系</li>\n<li>Spring Boot 专注于快速, 方便的开发单个的微服务个体, Spring Cloud 关注全局的服务治理框架</li>\n</ul>\n<h3 id=\"18、说说微服务之间是如何独立通讯的？\"><a href=\"#18、说说微服务之间是如何独立通讯的？\" class=\"headerlink\" title=\"18、说说微服务之间是如何独立通讯的？\"></a>18、说说微服务之间是如何独立通讯的？</h3><h4 id=\"远程过程调用（Remote-Procedure-Invocation）\"><a href=\"#远程过程调用（Remote-Procedure-Invocation）\" class=\"headerlink\" title=\"远程过程调用（Remote Procedure Invocation）\"></a>远程过程调用（Remote Procedure Invocation）</h4><p>也就是我们常说的服务的注册与发现，直接通过远程过程调用来访问别的 service。</p>\n<p><strong>优点</strong>：简单，常见, 因为没有中间件代理，系统更简单</p>\n<p><strong>缺点</strong>：只支持请求 / 响应的模式，不支持别的，比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应，降低了可用性，因为客户端和服务端在请求过程中必须都是可用的。</p>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>使用异步消息来做服务间通信。服务间通过消息管道来交换消息，从而通信。</p>\n<p><strong>优点</strong>：把客户端和服务端解耦，更松耦合，提高可用性，因为消息中间件缓存了消息，直到消费者可以消费，       支持很多通信机制比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应。</p>\n<p><strong>缺点</strong>：消息中间件有额外的复杂。</p>\n<h3 id=\"19、Spring-Cloud-如何实现服务的注册\"><a href=\"#19、Spring-Cloud-如何实现服务的注册\" class=\"headerlink\" title=\"19、Spring Cloud 如何实现服务的注册?\"></a>19、Spring Cloud 如何实现服务的注册?</h3><p>服务发布时，指定对应的服务名，将服务注册到 注册中心 (<code>Eureka 、Zookeeper)</code>。</p>\n<p>注册中心加<code>@EnableEurekaServer</code>，服务用<code>@EnableDiscoveryClient</code>，然后用 ribbon 或 feign 进行服务直接的调用发现。</p>\n<p>此题偏向于向实战，就看你是不是背面试题的，没有实战的人是不知道的。</p>\n<h3 id=\"20、什么是服务熔断？\"><a href=\"#20、什么是服务熔断？\" class=\"headerlink\" title=\"20、什么是服务熔断？\"></a>20、什么是服务熔断？</h3><p>在复杂的分布式系统中, 微服务之间的相互调用, 有可能出现各种各样的原因导致服务的阻塞, 在高并发场景下, 服务的阻塞意味着线程的阻塞, 导致当前线程不可用, 服务器的线程全部阻塞, 导致服务器崩溃, 由于服务之间的调用关系是同步的, 会对整个微服务系统造成服务雪崩</p>\n<p>为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就需要进行服务熔断和服务降级处理。</p>\n<p>所谓的服务熔断指的是某个服务故障或异常一起类似显示世界中的 “保险丝 “ 当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。</p>\n<p>服务熔断就是相当于我们电闸的保险丝, 一旦发生服务雪崩的, 就会熔断整个服务, 通过维护一个自己的线程池, 当线程达到阈值的时候就启动服务降级, 如果其他请求继续访问就直接返回 fallback 的默认值</p>\n<h3 id=\"21、了解-Eureka-自我保护机制吗？\"><a href=\"#21、了解-Eureka-自我保护机制吗？\" class=\"headerlink\" title=\"21、了解 Eureka 自我保护机制吗？\"></a>21、了解 Eureka 自我保护机制吗？</h3><p>当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</p>\n<h3 id=\"22、熟悉-Spring-Cloud-Bus-吗\"><a href=\"#22、熟悉-Spring-Cloud-Bus-吗\" class=\"headerlink\" title=\"22、熟悉 Spring Cloud Bus 吗?\"></a>22、熟悉 Spring Cloud Bus 吗?</h3><p>spring cloud bus 将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。</p>\n<h3 id=\"23、Spring-Cloud-断路器有什么作用\"><a href=\"#23、Spring-Cloud-断路器有什么作用\" class=\"headerlink\" title=\"23、Spring Cloud 断路器有什么作用?\"></a>23、Spring Cloud 断路器有什么作用?</h3><p>当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应，当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）。一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象，这时候断路器完全打开 那么下次请求就不会请求到该服务。</p>\n<p>半开：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭。关闭：当服务一直处于正常状态 能正常调用。</p>\n<h3 id=\"24、了解-Spring-Cloud-Config-吗\"><a href=\"#24、了解-Spring-Cloud-Config-吗\" class=\"headerlink\" title=\"24、了解 Spring Cloud Config 吗?\"></a>24、了解 Spring Cloud Config 吗?</h3><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件<code>Spring Cloud Config</code>，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。</p>\n<p>在<code>Spring Cloud Config</code> 组件中，分两个角色，一是 config server，二是 config client。</p>\n<p>使用方式：</p>\n<ul>\n<li>添加 pom 依赖</li>\n<li>配置文件添加相关配置</li>\n<li>启动类添加注解 @EnableConfigServer</li>\n</ul>\n<h3 id=\"25、说说你对-Spring-Cloud-Gateway-的理解\"><a href=\"#25、说说你对-Spring-Cloud-Gateway-的理解\" class=\"headerlink\" title=\"25、说说你对 Spring Cloud Gateway 的理解\"></a>25、说说你对 Spring Cloud Gateway 的理解</h3><p>Spring Cloud Gateway 是 Spring Cloud 官方推出的第二代网关框架，取代 Zuul 网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。</p>\n<p>使用了一个 RouteLocatorBuilder 的 bean 去创建路由，除了创建路由 RouteLocatorBuilder 可以让你添加各种 predicates 和 filters，predicates 断言的意思，顾名思义就是根据具体的请求的规则，由具体的 route 去处理，filters 是各种过滤器，用来对请求做各种判断和修改。</p>\n<p>参考；<a href=\"http://1pgqu.cn/M0NZo\">http://1pgqu.cn/M0NZo</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Spring Cloud 目前相当的火热，也差不多是 java 开发者必备技能之一了。面试的时候被问，那也是正常不过了，很多人可能用来很久，但是没有去了解过原理，面试照样挂掉。背面试题，在很大层面上还是很有用的。但从长远角度来说，希望大家更深层次去学习、去实践。只有自己真的掌握，那才叫 NB。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<h2 id=\"面试系列-Spring-Cloud-核心知识总结\"><a href=\"#面试系列-Spring-Cloud-核心知识总结\" class=\"headerlink\" title=\"面试系列 | Spring Cloud 核心知识总结\"></a>面试系列 | Spring Cloud 核心知识总结</h2><pre><code>下面是一张 Spring Cloud 核心组件关系图：\n从这张图中，其实我们是可以获取很多信息的，希望大家细细品尝。\n</code></pre>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08/image-20220825165728905.png\" alt=\"Spring Cloud 架构组件\"> </p>","more":"<h2 id=\"连环炮走起\"><a href=\"#连环炮走起\" class=\"headerlink\" title=\"连环炮走起\"></a>连环炮走起</h2><h3 id=\"1、什么是-Spring-Cloud-？\"><a href=\"#1、什么是-Spring-Cloud-？\" class=\"headerlink\" title=\"1、什么是 Spring Cloud ？\"></a>1、什么是 Spring Cloud ？</h3><p><code>Spring Cloud</code> 流应用程序启动器是基于 <code>Spring Boot</code> 的 <code>Spring</code> 集成应用程序，提供与外部系统的集成。</p>\n<p><code>Spring Cloud Task</code>，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。</p>\n<h3 id=\"2、什么是微服务？\"><a href=\"#2、什么是微服务？\" class=\"headerlink\" title=\"2、什么是微服务？\"></a>2、什么是微服务？</h3><p>​    微服务架构是一种【<strong>架构模式</strong>】或者说是一种【<strong>架构风格</strong>】，它提倡将单一应用程序划分为【<strong>一组</strong>】小的服务，每个服务运行在其独立的自己的进程中，服务之间【<strong>相互协调、互相配合</strong>】，为用户提供最终价值。</p>\n<p>​    服务之间采用轻量级的通信机制互相沟通（通常是基于 <code>HTTP</code> 的 <code>RESTful API</code>）, 每个服务都围绕着【<strong>具体的业务</strong>】进行构建，并且能够被独立的构建在生产环境、类生产环境等。</p>\n<p>​    另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>\n<p><strong>通俗地来讲：</strong></p>\n<p>​    微服务就是一个【<strong>独立</strong>】的职责单一的服务应用程序。在 <code>IDEA</code> 工具里面就是用 <code>maven</code> 开发的一个个【<strong>独立module</strong>】，具体就是使用 <code>SpringBoot</code> 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。</p>\n<p>​    微服务强调的是服务大小，关注的是某一个点，具体解决某一个问题 / 落地对应的一个服务应用，可以看做是 idea 里面一个 module。</p>\n<h3 id=\"3、Spring-Cloud-有什么优势\"><a href=\"#3、Spring-Cloud-有什么优势\" class=\"headerlink\" title=\"3、Spring Cloud 有什么优势\"></a>3、Spring Cloud 有什么优势</h3><p>使用 Spring Boot 开发分布式微服务时，我们面临以下问题</p>\n<ul>\n<li><strong>复杂性</strong>：网络问题，延迟开销，带宽问题，安全问题</li>\n<li><strong>服务发现</strong>：服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。如<code>eureka、nacos</code></li>\n<li><strong>冗余</strong>：分布式系统中的冗余问题。</li>\n<li><strong>负载平衡</strong>：负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。</li>\n<li><strong>性能</strong>：问题 由于各种运营开销导致的性能问题。</li>\n<li>  <strong>部署</strong>：复杂性 Devops 技能的要求。</li>\n</ul>\n<h3 id=\"4、微服务之间如何独立通讯的\"><a href=\"#4、微服务之间如何独立通讯的\" class=\"headerlink\" title=\"4、微服务之间如何独立通讯的?\"></a>4、微服务之间如何独立通讯的?</h3><ul>\n<li><p>同步通信：<code>dobbo</code> 通过 <code>RPC</code> 远程过程调用、<code>SpringCloud</code> 通过 <code>REST</code>  接口 <code>json</code> 调用等。</p>\n</li>\n<li><p>异步：MQ 消息队列，如：<code>RabbitMq</code>、<code>RocketMQ</code>、<code>ActiveM</code>、<code>Kafka</code>等消息队列。</p>\n</li>\n</ul>\n<h3 id=\"5、-什么是服务熔断？什么是服务降级？\"><a href=\"#5、-什么是服务熔断？什么是服务降级？\" class=\"headerlink\" title=\"5、 什么是服务熔断？什么是服务降级？\"></a>5、 <strong>什么是服务熔断？什么是服务降级？</strong></h3><ul>\n<li><strong>熔断机制</strong>：应对雪崩效应的一种【<strong>微服务链路保护机制</strong>】。</li>\n<li><strong>服务降级</strong>：当某个微服务【<strong>不可用</strong>】或者【<strong>响应时间太长</strong>】时，会进行服务降级，进而熔断该节点微服务的调用，快速返回 【“<strong>错误</strong>”】 的响应信息。<ul>\n<li>当检测到该节点微服务调用响应正常后<strong>恢复调用链路</strong>。在 <code>Spring Cloud</code> 框架里熔断机制通过 <code>Hystrix</code> 实现。</li>\n<li><code>Hystrix</code> 会<strong>监控</strong>微服务间调用的状况，当失败的调用到一定【<strong>阈值</strong>】，缺省是 【<strong>5 秒内调用 20 次</strong>】，如果失败，就会启动熔断机制。</li>\n<li>服务降级，一般是从【<strong>整体负荷考虑</strong>】。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个【本地的 <code>fallback</code> 回调】，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。</li>\n<li><code>Hystrix</code>相关注解 <code>@EnableHystrix</code>：开启熔断 <code>@HystrixCommand(fallbackMethod=”XXX”)</code>，声明一个失败回滚处理函数<code>XXX</code>，当被注解的方法执行超时（默认是 1000 毫秒），就会执行<code>fallback</code>函数，返回错误提示。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6、-请说说-Eureka-和-zookeeper-的区别？\"><a href=\"#6、-请说说-Eureka-和-zookeeper-的区别？\" class=\"headerlink\" title=\"6、 请说说 Eureka 和 zookeeper 的区别？\"></a>6、 请说说 Eureka 和 zookeeper 的区别？</h3><ul>\n<li>Zookeeper 保证了 CP，Eureka 保证了 AP。</li>\n</ul>\n<blockquote>\n<p>A：高可用</p>\n<p>C：一致性</p>\n<p>P：分区容错性</p>\n</blockquote>\n<ol>\n<li>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的信息，但不能容忍直接 down 掉不可用。也就是说，服务注册功能对高可用性要求比较高，但 zk 会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新选 leader。问题在于，选取 leader 时间过长，30 ~ 120s，且选取期间 zk 集群都不可用，这样就会导致选取期间注册服务瘫痪。在云部署的环境下，因网络问题使得 zk 集群失去 master 节点是较大概率会发生的事，虽然服务能够恢复，但是漫长的选取时间导致的注册长期不可用是不能容忍的。</li>\n</ol>\n<p>2.Eureka 保证了可用性，Eureka 各个节点是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点仍然可以提供注册和查询服务。而 Eureka 的客户端向某个 Eureka 注册或发现时发生连接失败，则会自动切换到其他节点，只要有一台 Eureka 还在，就能保证注册服务可用，只是查到的信息可能不是最新的。除此之外，Eureka 还有自我保护机制，如果在 15 分钟内超过 85% 的节点没有正常的心跳，那么 Eureka 就认为客户端与注册中心发生了网络故障，此时会出现以下几种情况：</p>\n<p>①、Eureka 不在从注册列表中移除因为长时间没有收到心跳而应该过期的服务。</p>\n<p>②、Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点仍然可用）</p>\n<p>③、当网络稳定时，当前实例新的注册信息会被同步到其他节点。</p>\n<p>因此，Eureka 可以很好地应对因网络故障导致部分节点失去联系的情况，而不会像 Zookeeper 那样使整个微服务瘫痪</p>\n<h3 id=\"7、SpringBoot-和-SpringCloud-的区别？\"><a href=\"#7、SpringBoot-和-SpringCloud-的区别？\" class=\"headerlink\" title=\"7、SpringBoot 和 SpringCloud 的区别？\"></a>7、SpringBoot 和 SpringCloud 的区别？</h3><p>SpringBoot 专注于快速方便得开发单个个体微服务。</p>\n<p>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务整合并管理起来，</p>\n<p>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p>\n<p>SpringBoot 可以离开 SpringCloud 独立使用开发项目， 但是 SpringCloud 离不开 SpringBoot ，属于依赖的关系.</p>\n<p>SpringBoot 专注于快速、方便得开发单个微服务个体，SpringCloud 关注全局的服务治理框架。</p>\n<h3 id=\"8、负载平衡的意义什么？\"><a href=\"#8、负载平衡的意义什么？\" class=\"headerlink\" title=\"8、负载平衡的意义什么？\"></a>8、负载平衡的意义什么？</h3><p>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源 的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</p>\n<h3 id=\"9、什么是-Hystrix？它如何实现容错？\"><a href=\"#9、什么是-Hystrix？它如何实现容错？\" class=\"headerlink\" title=\"9、什么是 Hystrix？它如何实现容错？\"></a>9、什么是 Hystrix？它如何实现容错？</h3><p>Hystrix 是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。</p>\n<p>通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。</p>\n<p>思考一下微服务：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix\"></p>\n<p>假设如果上图中的微服务 9 失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。</p>\n<p>随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达 1000. 这是 hystrix 出现的地方 我们将使用 Hystrix 在这种情况下的 Fallback 方法功能。我们有两个服务 employee-consumer 使用由 employee-consumer 公开的服务。</p>\n<p>简化图如下所示</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix2\"></p>\n<p>现在假设由于某种原因，employee-producer 公开的服务会抛出异常。我们在这种情况下使用 Hystrix 定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。</p>\n<h3 id=\"10、什么是-Hystrix-断路器？我们需要它吗？\"><a href=\"#10、什么是-Hystrix-断路器？我们需要它吗？\" class=\"headerlink\" title=\"10、什么是 Hystrix 断路器？我们需要它吗？\"></a>10、什么是 Hystrix 断路器？我们需要它吗？</h3><p>由于某些原因，employee-consumer 公开服务会引发异常。在这种情况下使用 Hystrix 我们定义了一个回退方法。如果在公开服务中发生异常，则回退方法返回一些默认值。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix3\"></p>\n<p>如果 firstPage method() 中的异常继续发生，则 Hystrix 电路将中断，并且员工使用者将一起跳过 firtsPage 方法，并直接调用回退方法。断路器的目的是给第一页方法或第一页方法可能调用的其他方法留出时间，并导致异常恢复。可能发生的情况是，在负载较小的情况下，导致异常的问题有更好的恢复机会 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/08hystrix4\"></p>\n<h3 id=\"11、说说-RPC-的实现原理\"><a href=\"#11、说说-RPC-的实现原理\" class=\"headerlink\" title=\"11、说说 RPC 的实现原理\"></a>11、说说 RPC 的实现原理</h3><p>首先需要有处理网络连接通讯的模块，负责连接建立、管理和消息的传输。其次需要有编 解码的模块，因为网络通讯都是传输的字节码，需要将我们使用的对象序列化和反序列 化。剩下的就是客户端和服务器端的部分，服务器端暴露要开放的服务接口，客户调用服 务接口的一个代理实现，这个代理实现负责收集数据、编码并传输给服务器然后等待结果 返回。</p>\n<h3 id=\"12，eureka-自我保护机制是什么\"><a href=\"#12，eureka-自我保护机制是什么\" class=\"headerlink\" title=\"12，eureka 自我保护机制是什么?\"></a>12，eureka 自我保护机制是什么?</h3><p>当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</p>\n<h3 id=\"13，什么是-Ribbon？\"><a href=\"#13，什么是-Ribbon？\" class=\"headerlink\" title=\"13，什么是 Ribbon？\"></a>13，什么是 Ribbon？</h3><p>ribbon 是一个负载均衡客户端，可以很好地控制 htt 和 tcp 的一些行为。<code>feign默认集成了ribbon</code>。</p>\n<h3 id=\"14，什么是-Netflix-Feign？它的优点是什么？\"><a href=\"#14，什么是-Netflix-Feign？它的优点是什么？\" class=\"headerlink\" title=\"14，什么是 Netflix Feign？它的优点是什么？\"></a>14，什么是 Netflix Feign？它的优点是什么？</h3><p>Feign 是受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 java 客户端联编程序。</p>\n<p>Feign 的第一个目标是将约束分母的复杂性统一到 http apis，而不考虑其稳定性。</p>\n<p>特点：</p>\n<ul>\n<li>Feign 采用的是基于接口的注解</li>\n<li>Feign 整合了 ribbon，具有负载均衡的能力</li>\n<li>整合了 Hystrix，具有熔断的能力</li>\n</ul>\n<p>使用方式</p>\n<ul>\n<li>添加 pom 依赖。</li>\n<li>启动类添加<code>@EnableFeignClients</code></li>\n<li>定义一个接口<code>@FeignClient(name=“xxx”)</code>指定调用哪个服务</li>\n</ul>\n<h3 id=\"15，-Ribbon-和-Feign-的区别？\"><a href=\"#15，-Ribbon-和-Feign-的区别？\" class=\"headerlink\" title=\"15， Ribbon 和 Feign 的区别？\"></a>15， Ribbon 和 Feign 的区别？</h3><p>1.Ribbon 都是调用其他服务的，但方式不同。2. 启动类注解不同，Ribbon 是 @RibbonClient feign 的是 @EnableFeignClients 3. 服务指定的位置不同，Ribbon 是在 @RibbonClient 注解上声明，Feign 则是在定义抽象方法的接口中使用 @FeignClient 声明。4. 调用方式不同，Ribbon 需要自己构建 http 请求，模拟 http 请求。</p>\n<h3 id=\"16、Spring-Cloud-的核心组件有哪些？\"><a href=\"#16、Spring-Cloud-的核心组件有哪些？\" class=\"headerlink\" title=\"16、Spring Cloud 的核心组件有哪些？\"></a>16、Spring Cloud 的核心组件有哪些？</h3><ul>\n<li>Eureka：服务注册于发现。</li>\n<li>Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。</li>\n<li>Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。</li>\n<li>Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。</li>\n<li>Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</li>\n</ul>\n<h3 id=\"17、说说-Spring-Boot-和-Spring-Cloud-的关系\"><a href=\"#17、说说-Spring-Boot-和-Spring-Cloud-的关系\" class=\"headerlink\" title=\"17、说说 Spring Boot 和 Spring Cloud 的关系\"></a>17、说说 Spring Boot 和 Spring Cloud 的关系</h3><p>Spring Boot 是 Spring 推出用于解决传统框架配置文件冗余, 装配组件繁杂的基于 Maven 的解决方案, 旨在快速搭建单个微服务 而 Spring Cloud 专注于解决各个微服务之间的协调与配置, 服务之间的通信, 熔断, 负载均衡等 技术维度并相同, 并且 Spring Cloud 是依赖于 Spring Boot 的, 而 Spring Boot 并不是依赖与 Spring Cloud, 甚至还可以和 Dubbo 进行优秀的整合开发</p>\n<p>总结</p>\n<ul>\n<li>SpringBoot 专注于快速方便的开发单个个体的微服务</li>\n<li>SpringCloud 是关注全局的微服务协调整理治理框架, 整合并管理各个微服务, 为各个微服务之间提供, 配置管理, 服务发现, 断路器, 路由, 事件总线等集成服务</li>\n<li>Spring Boot 不依赖于 Spring Cloud，Spring Cloud 依赖于 Spring Boot, 属于依赖关系</li>\n<li>Spring Boot 专注于快速, 方便的开发单个的微服务个体, Spring Cloud 关注全局的服务治理框架</li>\n</ul>\n<h3 id=\"18、说说微服务之间是如何独立通讯的？\"><a href=\"#18、说说微服务之间是如何独立通讯的？\" class=\"headerlink\" title=\"18、说说微服务之间是如何独立通讯的？\"></a>18、说说微服务之间是如何独立通讯的？</h3><h4 id=\"远程过程调用（Remote-Procedure-Invocation）\"><a href=\"#远程过程调用（Remote-Procedure-Invocation）\" class=\"headerlink\" title=\"远程过程调用（Remote Procedure Invocation）\"></a>远程过程调用（Remote Procedure Invocation）</h4><p>也就是我们常说的服务的注册与发现，直接通过远程过程调用来访问别的 service。</p>\n<p><strong>优点</strong>：简单，常见, 因为没有中间件代理，系统更简单</p>\n<p><strong>缺点</strong>：只支持请求 / 响应的模式，不支持别的，比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应，降低了可用性，因为客户端和服务端在请求过程中必须都是可用的。</p>\n<h4 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h4><p>使用异步消息来做服务间通信。服务间通过消息管道来交换消息，从而通信。</p>\n<p><strong>优点</strong>：把客户端和服务端解耦，更松耦合，提高可用性，因为消息中间件缓存了消息，直到消费者可以消费，       支持很多通信机制比如通知、请求 / 异步响应、发布 / 订阅、发布 / 异步响应。</p>\n<p><strong>缺点</strong>：消息中间件有额外的复杂。</p>\n<h3 id=\"19、Spring-Cloud-如何实现服务的注册\"><a href=\"#19、Spring-Cloud-如何实现服务的注册\" class=\"headerlink\" title=\"19、Spring Cloud 如何实现服务的注册?\"></a>19、Spring Cloud 如何实现服务的注册?</h3><p>服务发布时，指定对应的服务名，将服务注册到 注册中心 (<code>Eureka 、Zookeeper)</code>。</p>\n<p>注册中心加<code>@EnableEurekaServer</code>，服务用<code>@EnableDiscoveryClient</code>，然后用 ribbon 或 feign 进行服务直接的调用发现。</p>\n<p>此题偏向于向实战，就看你是不是背面试题的，没有实战的人是不知道的。</p>\n<h3 id=\"20、什么是服务熔断？\"><a href=\"#20、什么是服务熔断？\" class=\"headerlink\" title=\"20、什么是服务熔断？\"></a>20、什么是服务熔断？</h3><p>在复杂的分布式系统中, 微服务之间的相互调用, 有可能出现各种各样的原因导致服务的阻塞, 在高并发场景下, 服务的阻塞意味着线程的阻塞, 导致当前线程不可用, 服务器的线程全部阻塞, 导致服务器崩溃, 由于服务之间的调用关系是同步的, 会对整个微服务系统造成服务雪崩</p>\n<p>为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就需要进行服务熔断和服务降级处理。</p>\n<p>所谓的服务熔断指的是某个服务故障或异常一起类似显示世界中的 “保险丝 “ 当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。</p>\n<p>服务熔断就是相当于我们电闸的保险丝, 一旦发生服务雪崩的, 就会熔断整个服务, 通过维护一个自己的线程池, 当线程达到阈值的时候就启动服务降级, 如果其他请求继续访问就直接返回 fallback 的默认值</p>\n<h3 id=\"21、了解-Eureka-自我保护机制吗？\"><a href=\"#21、了解-Eureka-自我保护机制吗？\" class=\"headerlink\" title=\"21、了解 Eureka 自我保护机制吗？\"></a>21、了解 Eureka 自我保护机制吗？</h3><p>当 Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</p>\n<h3 id=\"22、熟悉-Spring-Cloud-Bus-吗\"><a href=\"#22、熟悉-Spring-Cloud-Bus-吗\" class=\"headerlink\" title=\"22、熟悉 Spring Cloud Bus 吗?\"></a>22、熟悉 Spring Cloud Bus 吗?</h3><p>spring cloud bus 将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。</p>\n<h3 id=\"23、Spring-Cloud-断路器有什么作用\"><a href=\"#23、Spring-Cloud-断路器有什么作用\" class=\"headerlink\" title=\"23、Spring Cloud 断路器有什么作用?\"></a>23、Spring Cloud 断路器有什么作用?</h3><p>当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应，当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）。一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象，这时候断路器完全打开 那么下次请求就不会请求到该服务。</p>\n<p>半开：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭。关闭：当服务一直处于正常状态 能正常调用。</p>\n<h3 id=\"24、了解-Spring-Cloud-Config-吗\"><a href=\"#24、了解-Spring-Cloud-Config-吗\" class=\"headerlink\" title=\"24、了解 Spring Cloud Config 吗?\"></a>24、了解 Spring Cloud Config 吗?</h3><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件<code>Spring Cloud Config</code>，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。</p>\n<p>在<code>Spring Cloud Config</code> 组件中，分两个角色，一是 config server，二是 config client。</p>\n<p>使用方式：</p>\n<ul>\n<li>添加 pom 依赖</li>\n<li>配置文件添加相关配置</li>\n<li>启动类添加注解 @EnableConfigServer</li>\n</ul>\n<h3 id=\"25、说说你对-Spring-Cloud-Gateway-的理解\"><a href=\"#25、说说你对-Spring-Cloud-Gateway-的理解\" class=\"headerlink\" title=\"25、说说你对 Spring Cloud Gateway 的理解\"></a>25、说说你对 Spring Cloud Gateway 的理解</h3><p>Spring Cloud Gateway 是 Spring Cloud 官方推出的第二代网关框架，取代 Zuul 网关。网关作为流量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。</p>\n<p>使用了一个 RouteLocatorBuilder 的 bean 去创建路由，除了创建路由 RouteLocatorBuilder 可以让你添加各种 predicates 和 filters，predicates 断言的意思，顾名思义就是根据具体的请求的规则，由具体的 route 去处理，filters 是各种过滤器，用来对请求做各种判断和修改。</p>\n<p>参考；<a href=\"http://1pgqu.cn/M0NZo\">http://1pgqu.cn/M0NZo</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Spring Cloud 目前相当的火热，也差不多是 java 开发者必备技能之一了。面试的时候被问，那也是正常不过了，很多人可能用来很久，但是没有去了解过原理，面试照样挂掉。背面试题，在很大层面上还是很有用的。但从长远角度来说，希望大家更深层次去学习、去实践。只有自己真的掌握，那才叫 NB。</p>"},{"title":"JAVA多线程","abbrlink":61685,"date":"2022-09-09T09:46:22.000Z","description":null,"_content":"\n","source":"_posts/2022-09-09-JAVA多线程.md","raw":"---\ntitle: JAVA多线程\ntags: 多线程\nabbrlink: 61685\ndate: 2022-09-09 17:46:22\ncategories:\ndescription:\n---\n\n","slug":"JAVA多线程","published":1,"updated":"2024-12-16T12:11:11.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyp70021j0kr7fftdjho","content":"","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":""},{"title":"Hexo 第一篇文章","date":"2021-09-16T02:24:28.000Z","description":"hexo 命令使用介绍、快速上手hexo使用","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![dog-5146351_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021731523.jpg)\n\n<!-- more -->\n\n## 这是Hexo 的第一篇文章\n\n> 之后会在这里输出工作，生活，技术相关的内容     \n> 欢迎访问 [Hexo](https://hexo.io/)! 这是你的第一篇文章。 访问 [Hexo文档](https://hexo.io/docs/) 查询更多消息. 使用Hexo如有任何问题, 可以在 [Hexo提问](https://hexo.io/docs/troubleshooting.html) 或者可以在 [GitHub](https://github.com/hexojs/hexo/issues)提问.\n\n## 快速开始\n\n### 创建一个新的文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息: [写作](https://hexo.io/docs/writing.html)\n\n\n### 运行服务\n\n``` bash\n$ hexo server\n```\n\n更多信息: [运行服务](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息: [生成](https://hexo.io/docs/generating.html)\n\n### 部署到远端站点\n\n``` bash\n$ hexo deploy\n```\n\n更多信息: [部署](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/2021-09-16-My-New-Post.md","raw":"---\ntitle: Hexo 第一篇文章\ndate: 2021-09-16 10:24:28\ntags: \n  - Hexo\n  - Post\ncategories: Hexo\ndescription: hexo 命令使用介绍、快速上手hexo使用 # 起到摘要的作用，避免整篇文章展示\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![dog-5146351_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021731523.jpg)\n\n<!-- more -->\n\n## 这是Hexo 的第一篇文章\n\n> 之后会在这里输出工作，生活，技术相关的内容     \n> 欢迎访问 [Hexo](https://hexo.io/)! 这是你的第一篇文章。 访问 [Hexo文档](https://hexo.io/docs/) 查询更多消息. 使用Hexo如有任何问题, 可以在 [Hexo提问](https://hexo.io/docs/troubleshooting.html) 或者可以在 [GitHub](https://github.com/hexojs/hexo/issues)提问.\n\n## 快速开始\n\n### 创建一个新的文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息: [写作](https://hexo.io/docs/writing.html)\n\n\n### 运行服务\n\n``` bash\n$ hexo server\n```\n\n更多信息: [运行服务](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息: [生成](https://hexo.io/docs/generating.html)\n\n### 部署到远端站点\n\n``` bash\n$ hexo deploy\n```\n\n更多信息: [部署](https://hexo.io/docs/one-command-deployment.html)\n","slug":"My-New-Post","published":0,"updated":"2024-12-15T14:28:27.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypi0025j0kr55fybua1","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021731523.jpg\" alt=\"dog-5146351_1920\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"这是Hexo-的第一篇文章\"><a href=\"#这是Hexo-的第一篇文章\" class=\"headerlink\" title=\"这是Hexo 的第一篇文章\"></a>这是Hexo 的第一篇文章</h2><blockquote>\n<p>之后会在这里输出工作，生活，技术相关的内容<br>欢迎访问 <a href=\"https://hexo.io/\">Hexo</a>! 这是你的第一篇文章。 访问 <a href=\"https://hexo.io/docs/\">Hexo文档</a> 查询更多消息. 使用Hexo如有任何问题, 可以在 <a href=\"https://hexo.io/docs/troubleshooting.html\">Hexo提问</a> 或者可以在 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>提问.</p>\n</blockquote>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一个新的文章\"><a href=\"#创建一个新的文章\" class=\"headerlink\" title=\"创建一个新的文章\"></a>创建一个新的文章</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n<h3 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/server.html\">运行服务</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/generating.html\">生成</a></p>\n<h3 id=\"部署到远端站点\"><a href=\"#部署到远端站点\" class=\"headerlink\" title=\"部署到远端站点\"></a>部署到远端站点</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/one-command-deployment.html\">部署</a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021731523.jpg\" alt=\"dog-5146351_1920\"></p>","more":"<h2 id=\"这是Hexo-的第一篇文章\"><a href=\"#这是Hexo-的第一篇文章\" class=\"headerlink\" title=\"这是Hexo 的第一篇文章\"></a>这是Hexo 的第一篇文章</h2><blockquote>\n<p>之后会在这里输出工作，生活，技术相关的内容<br>欢迎访问 <a href=\"https://hexo.io/\">Hexo</a>! 这是你的第一篇文章。 访问 <a href=\"https://hexo.io/docs/\">Hexo文档</a> 查询更多消息. 使用Hexo如有任何问题, 可以在 <a href=\"https://hexo.io/docs/troubleshooting.html\">Hexo提问</a> 或者可以在 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>提问.</p>\n</blockquote>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一个新的文章\"><a href=\"#创建一个新的文章\" class=\"headerlink\" title=\"创建一个新的文章\"></a>创建一个新的文章</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/writing.html\">写作</a></p>\n<h3 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/server.html\">运行服务</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/generating.html\">生成</a></p>\n<h3 id=\"部署到远端站点\"><a href=\"#部署到远端站点\" class=\"headerlink\" title=\"部署到远端站点\"></a>部署到远端站点</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>更多信息: <a href=\"https://hexo.io/docs/one-command-deployment.html\">部署</a></p>"},{"title":"Java 基础","author":"potato","summary":"万丈高楼拔地起，根深方能入云霄","abbrlink":4321,"date":"2021-09-18T02:29:39.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n# Java系列 | Java基础（一)| 基础语法\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n=========\n\n### 1. 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### 2.Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* 面向对象（封装，继承，多态）；\n* 平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。\n* 支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；\n* 编译与解释并存；\n\n### 3.JVM、JDK 和 JRE 有什么区别？\n\n**JVM**：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\n**JRE**：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\n**JDK**: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n简单来说，JDK 包含 JRE，JRE 包含 JVM。\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 4. 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。\n\n### 5. 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)\n* **解释**：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。\n\n### 6. 为什么说 Java 语言 “编译与解释并存”？\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。\n\n比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。\n\nJava 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（`\\*.class` 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n========\n\n### 7.Java 有哪些数据类型？\n\n**定义：**Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\nJava 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型（byte、short、long）\n* 浮点类型（float、long）\n* 字符型（char）\n* 布尔型（boolean）\n\nJava 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（class）\n* 接口（interface）\n* 数组 ([])\n\n### 8. 自动类型转换、强制类型转换？看看这几行代码？\n\nJava 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。\n\n而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。\n\n### 9. 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\nJava 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n\n\n```\n\n### 10.& 和 && 有什么区别？\n\n& 运算符有两种用法：`短路与`、`逻辑与`。\n\n&& 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。\n\n&& 之所以称为短路运算是因为，如果 && 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 && 而不是 &。\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为`username != null &&!username.equals(\"\")`，二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### 11.switch 是否能作用在 byte/long/String 上？\n\nJava5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。\n\n从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n\n### 12.break ,continue ,return 的区别及作用？\n\n* break 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* continue 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* return 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png)\n\n### 13. 用最有效率的方法计算 2 乘以 8？\n\n2 << 3。**位运算**，数字的二进制位左移三位相当于乘以 2 的三次方。\n\n### 14. 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（--）。\n\n++ 和 -- 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\nPS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。\n\n面向对象\n========\n\n### 15. ⾯向对象和⾯向过程的区别?\n\n* **⾯向过程** ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。\n* **⾯向对象** ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。\n\n用一个比喻：面向过程是编年体；面向对象是纪传体。\n\n![面向对象和面向过程的区别](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png)\n\n### 16. 面向对象有哪些特性\n\n![面向对象三大特征](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png)\n\n* **封装**\n\n  封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。\n* **继承**\n\n  继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。\n\n> 关于继承有以下三个要点：\n\n1. ⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。\n2. ⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。\n3. ⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。\n\n* **多态**\n\n  所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。\n\n  在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。\n\n### 17. 重载（overload）和重写（override）的区别？\n\n方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\n\n* 重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；\n* 重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\n\n方法重载的规则：\n\n1. 方法名一致，参数列表中参数的顺序，类型，个数不同。\n2. 重载与方法的返回值无关，存在于父类和子类，同类中。\n3. 可以抛出不同的异常，可以有不同修饰符。\n\n### 18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\n\nJava 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n* **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。\n* **private** : 在同一类内可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**\n* **public** : 对所有类可见。可以修饰类、接口、变量、方法\n* **protected** : 对同一包内的类和所有子类可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**。\n\n![访问修饰符和可见性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png)\n\n### 19.this 关键字有什么作用？\n\nthis 是自身的一个对象，代表对象本身，可以理解为：**指向对象本身的一个指针**。\n\nthis 的用法在 Java 中大体可以分为 3 种：\n\n1. 普通的直接引用，this 相当于是指向当前对象本身\n2. 形参与成员变量名字重名，用 this 来区分：\n\n```java\npublic Person(String name,int age){\n    this.name=name;\n    this.age=age;\n}\n```\n\n3. 引用本类的构造函数\n\n### 20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\n\n1. 接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。\n2. 接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。\n3. ⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。\n4. 接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。\n5. 从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。\n\n> 1. 在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。\n> 2. jdk9 的接⼝被允许定义私有⽅法 。\n\n总结⼀下 jdk7~jdk9 Java 中接⼝的变化：\n\n1. 在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。\n2. jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。\n3. jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。\n\n### 21. 成员变量与局部变量的区别有哪些？\n\n1. **从语法形式上看**：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n2. **从变量在内存中的存储⽅式来看**：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。\n3. **从变量在内存中的⽣存时间上看**：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。\n4. **成员变量如果没有被赋初值**：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。\n\n### 22. 静态变量和实例变量的区别？静态方法、实例方法呢？\n\n> 静态变量和实例变量的区别？\n\n**静态变量:** 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。\n\n**实例变量:** 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。\n\n> 静态⽅法和实例⽅法有何不同?\n\n类似地。\n\n**静态方法**：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ \" **类名. ⽅法名** \"的⽅式，也可以使⽤\" **对象名. ⽅法名** \" 的⽅式。静态方法里不能访问类的非静态成员变量和方法。\n\n**实例⽅法**：依存于类的实例，需要使用 \" **对象名. ⽅法名** \" 的⽅式调用；可以访问类的所有成员变量和方法。\n\n### 24.final 关键字有什么作用？\n\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n\n* 被 final 修饰的类不可以被继承\n* 被 final 修饰的方法不可以被重写\n* 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n  例如：\n\n  ```java\n          final StringBuilder sb = new StringBuilder(\"abc\");\n          sb.append(\"d\");\n          System.out.println(sb);  //abcd\n  ```\n\n  一张图说明：\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png)final 修饰变量\n\n### 25.final、finally、finalize 的区别？\n\n* final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。\n* finally 作为异常处理的一部分，它只能在 `try/catch` 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，`System.exit (0)` 可以阻断 finally 执行。\n* finalize 是在 `java.lang.Object` 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 `gc` 启动，该对象被回收的时候被调用。\n\n  一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。\n\n### 26.== 和 equals 的区别？\n\n**==** : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 **== **比较的是值，引⽤数据类型** ==** 比较的是内存地址)。\n\n**equals()** : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：\n\n* 默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。\n* 自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。\n\n举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：\n\n```java\npublic class Person {\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &&\n                Objects.equals(name, person.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(no, name);\n    }\n}\n\n\n```\n\n### 27.hashCode 与 equals?\n\n这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”\n\n> 什么是 HashCode？\n\nhashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。\n\n```java\npublic native int hashCode();\n```\n\n哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！\n\n> 为什么要有 hashCode？\n\n上面已经讲了，主要是在哈希表这种结构中用的到。\n\n例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：[面渣逆袭：Java 集合连环三十问](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect)\n\n> 为什么重写 quals 时必须重写 hashCode ⽅法？\n\n如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，**equals** ⽅法被覆盖过，则 **hashCode** ⽅法也必须被覆盖。\n\nhashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）\n\n> 为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？\n\n因为可能会**碰撞**， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。\n\n### 28.Java 是值传递，还是引用传递？\n\nJava 语言是**值传递**。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。\n\nJVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。\n\n而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png)Java 引用数据值传递示意图\n\n### 29. 深拷贝和浅拷贝?\n\n* **浅拷贝**：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。\n* **深拷贝**：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。\n\n例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png)浅拷贝和深拷贝示意图\n\n因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。\n\n> 浅拷贝如何实现呢？\n\nObject 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。\n\n> 深拷贝如何实现呢？\n\n* 重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。\n* 序列化：可以先讲原对象序列化，再反序列化成拷贝对象。\n\n### 30.Java 创建对象有哪几种方式？\n\nJava 中有以下四种创建对象的方式:\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png)Java 创建对象的四种方式\n\n* new 创建新对象\n* 通过反射机制\n* 采用 clone 机制\n* 通过序列化机制\n\n前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。\n\n常用类\n======\n\nString\n------\n\n### 31.String 是 Java 基本数据类型吗？可以被继承吗？\n\n> String 是 Java 基本数据类型吗？\n\n不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。\n\nString 是一个比较特殊的引用数据类型。\n\n> String 类可以继承吗？\n\n不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。\n\n### 32.String 和 StringBuilder、StringBuffer 的区别？\n\n* String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\n* StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\n* StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n\n### 33.String str1 = new String(\"abc\") 和 String str2 = \"abc\" 和  区别？\n\n两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png)堆与常量池中的 String\n\n但是不同的是，String str1 = new String(\"abc\") 还会通过 new String() 在堆里创建一个 \"abc\" 字符串对象实例。所以后者可以理解为被前者包含。\n\n> String s = new String(\"abc\") 创建了几个对象？\n\n很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。\n\n当字符创常量池没有 “abc”，此时会创建如下两个对象：\n\n* 一个是字符串字面量 \"abc\" 所对应的、字符串常量池中的实例\n* 另一个是通过 new String() 创建并初始化的，内容与 \"abc\" 相同的实例，在堆中。\n\n### 34.String 不是不可变类吗？字符串拼接是如何实现的？\n\nString 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。\n\n例如：\n\n```\nString a = \"hello \";\nString b = \"world!\";\nString ab = a + b;\n\n\n```\n\n在 **jdk1.8 之前**，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。\n\n内存如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png)jdk1.8 之前的字符串拼接\n\n在 **Java8 时** JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。\n\n下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。\n\n```java\nstack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n\n```\n\n也就是说其实上面的代码其实相当于：\n\n```java\nString a = \"hello \";\nString b = \"world!\";\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n\n```\n\n此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。\n\n当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。\n\n### 35.intern 方法有什么作用？\n\nJDK 源码里已经对这个方法进行了说明：\n\n```java\n     * <p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * <p>\n\n\n```\n\n意思也很好懂：\n\n* 如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串\n* 否则，将此 String 对象添加到池中，并返回 String 对象的引用\n\nInteger\n-------\n\n### 36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\n\n答案是 a 和 b 相等，c 和 d 不相等。\n\n* 对于基本数据类型 == 比较的值\n* 对于引用数据类型 == 比较的是地址\n\nInteger a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。\n\n如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false\n\n```java\n    public static void main(String[] args) {\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    }\n\n\n```\n\n> 什么是 Integer 缓存？\n\n因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置`JVM-XX:AutoBoxCacheMax=`来修改缓存的最大值，最小值改不了。\n\n实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png)Integer.valueOf\n\n很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。\n\nIntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。\n\n```java\n private static class IntegerCache {\n     ……\n     static {\n            //创建Integer对象存储\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     } \n }\n\n\n```\n\n### 37.String 怎么转成 Integer 的？原理？\n\nPS: 这道题印象中在一些面经中出场过几次。\n\nString 转成 Integer，主要有两个方法：\n\n* Integer.parseInt(String s)\n* Integer.valueOf(String s)\n\n不管哪一种，最终还是会调用 Integer 类内中的`parseInt(String s, int radix)`方法。\n\n抛去一些边界之类的看看核心代码：\n\n```\npublic static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len > 0) {\n            …… \n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            }\n        } \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    }\n\n\n\n```\n\n去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png)parseInt 示意图\n\nObject\n------\n\n### 38.Object 类的常见方法?\n\nObject 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png)Object 类的方法\n\n**对象比较**：\n\n* public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。\n* public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。\n\n**对象拷贝**：\n\n* protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。\n\n**对象转字符串：**\n\n* public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n\n**多线程调度：**\n\n* public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n* public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n* public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。\n* public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。\n* public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念\n\n**反射：**\n\n* public final native Class<?> getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n\n**垃圾回收：**\n\n* protected void finalize() throws Throwable ：通知垃圾收集器回收对象。\n\n异常处理\n========\n\n### 39.Java 中异常处理体系?\n\nJava 的异常体系是分为多层的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png)Java 异常体系\n\n`Throwable`是 Java 语言中所有错误或异常的基类。Throwable 又分为`Error`和`Exception`，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。`Exception`是程序问题导致的异常，又分为两种：\n\n* CheckedException 受检异常：编译器会强制检查并要求处理的异常。\n* RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等\n\n### 40. 异常的处理方式？\n\n针对异常的处理主要有两种方式：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png)异常处理\n\n* **遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）**\n\n抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。\n\nthrows 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。\n\n* **try catch 捕获异常**\n\n在 catch 语句块中补货发生的异常，并进行处理。\n\n```java\n       try {\n            //包含可能会出现异常的代码以及声明异常的方法\n        }catch(Exception e) {\n            //捕获异常并进行处理\n        }finally {                                                       }\n            //可选，必执行的代码\n        }\n\n\n```\n\ntry-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。\n\n### 41. 三道经典异常处理代码题\n\n> 题目 1\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test());\n    }\n    public static int test() {\n        try {\n            return 1;\n        } catch (Exception e) {\n            return 2;\n        } finally {\n            System.out.print(\"3\");\n        }\n    }\n}\n\n\n```\n\n执行结果：31。\n\ntry、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。\n\n> 题目 2\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        try {\n            return 2;\n        } finally {\n            return 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：3。\n\ntry 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。\n\nfinally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。\n\n> 题目 3\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        int i = 0;\n        try {\n            i = 2;\n            return i;\n        } finally {\n            i = 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：2。\n\n大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？\n\n但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。\n\nI/O\n===\n\n### 42.Java 中 IO 流分为几种?\n\n流按照不同的特点，有很多种划分方式。\n\n* 按照流的流向分，可以分为**输入流**和**输出流**；\n* 按照操作单元划分，可以划分为**字节流**和**字符流**；\n* 按照流的角色划分为**节点流**和**处理流**\n\nJava Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n* **InputStream**/**Reader**: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n* **OutputStream**/**Writer**: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg)IO - 操作方式分类 - 图片来源参考 [2]\n\n> IO 流用到了什么设计模式？\n\n其实，Java 的 IO 流体系还用到了一个设计模式——**装饰器模式**。\n\nInputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png)Java IO 流用到装饰器模式\n\n### 43. 既然有了字节流, 为什么还要有字符流?\n\n其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。\n\n所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n### 44.BIO、NIO、AIO？\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png)BIO、NIO、AIO\n\n**BIO**(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即**客户端有连接请求时服务器端就需要启动一个线程进行处理**，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png)BIO、NIO、AIO\n\nBIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。\n\n**NIO** ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。\n\nNIO 是**同步非阻塞**的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png)NIO 线程\n\nNIO 的数据是面向**缓冲区 Buffer** 的，必须从 Buffer 中读取或写入。\n\n所以完整的 NIO 示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png)NIO 完整示意图\n\n可以看出，NIO 的运行机制：\n\n* 每个 Channel 对应一个 Buffer。\n* Selector 对应一个线程，一个线程对应多个 Channel。\n* Selector 会根据不同的事件，在各个通道上切换。\n* Buffer 是内存块，底层是数据。\n\n**AIO**：JDK 7 引入了 Asynchronous I/O，是**异步不阻塞**的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\nPS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：[面试字节，被操作系统问挂了](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect)\n\n序列化\n======\n\n### 45. 什么是序列化？什么是反序列化？\n\n什么是序列化，序列化就是**把 Java 对象转为二进制流**，方便存储和传输。\n\n所以**反序列化就是把二进制流恢复成对象**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png)序列化和反序列化\n\n类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。\n\n> Serializable 接口有什么用？\n\n这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。\n\n> serialVersionUID 又有什么用？\n\nserialVersionUID 就是起验证作用。\n\n```\nprivate static final long serialVersionUID = 1L;\n\n\n```\n\n我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。\n\n这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。\n\n如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。\n\n所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。\n\n因为类的结构变了，所以 serialVersionUID 就不一致。\n\n> Java 序列化不包含静态变量？\n\n序列化的时候是不包含静态变量的。\n\n> 如果有些变量不想序列化，怎么办？\n\n对于不想进行序列化的变量，使用`transient`关键字修饰。\n\n`transient` 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 `transient` 修饰的变量值不会被持久化和恢复。`transient` 只能修饰变量，不能修饰类和方法。\n\n### 46. 说说有几种序列化方式？\n\nJava 序列化方式有很多，常见的有三种：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png)Java 常见序列化方式\n\n* Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 `ObjectOutputStream`和对象输入流`ObjectI叩utStream`。\n* Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。\n* ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。\n\n泛型\n====\n\n### 47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\n\n> 什么是泛型？\n\nJava 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n```\nList<Integer> list = new ArrayList<>();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(\"a\");\nClass<? extends List> clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(\"add\", Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, \"kl\");\n\nSystem.out.println(list);\n\n\n```\n\n泛型一般有三种使用方式: **泛型类**、**泛型接口**、**泛型方法**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png)泛型类、泛型接口、泛型方法\n\n**1. 泛型类**：\n\n```\n//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n\n\n```\n\n如何实例化泛型类：\n\n```\nGeneric<Integer> genericInteger = new Generic<Integer>(123456);\n\n\n```\n\n**2. 泛型接口** ：\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n\n\n```\n\n实现泛型接口，指定类型：\n\n```\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n\n\n```\n\n**3. 泛型方法** ：\n\n```\n   public static < E > void printArray( E[] inputArray )\n   {\n         for ( E element : inputArray ){\n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n\n\n```\n\n使用：\n\n```\n// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n\n\n```\n\n> 泛型常用的通配符有哪些？\n\n**常用的通配符为：T，E，K，V，？**\n\n* ？表示不确定的 java 类型\n* T (type) 表示具体的一个 java 类型\n* K V (key value) 分别代表 java 键值中的 Key Value\n* E (element) 代表 Element\n\n> 什么是泛型擦除？\n\n所谓的泛型擦除，官方名叫 “类型擦除”。\n\nJava 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。\n\n也就是说，在运行的时候是没有泛型的。\n\n例如这段代码，往一群猫里放条狗：\n\n```\nLinkedList<Cat> cats = new LinkedList<Cat>();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n\n```\n\n因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java **运行**环境）看来和下面这段没区别：\n\n```\nLinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n\n```\n\n为什么要类型擦除呢？\n\n主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。\n\n注解\n====\n\n### 48. 说一下你对注解的理解？\n\n**Java 注解本质上是一个标记**，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png)Java 注解和帽子\n\n注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。\n\n有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。\n\n例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。\n\n注解生命周期有三大类，分别是：\n\n* RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件\n* RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了\n* RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息\n\n所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。\n\n像常见的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png)Override 注解\n\n就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。\n\n再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以**在运行的时候可以通过反射得到注解的信息**，还能拿到标记的值 required 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png)Autowired 注解\n\n反射\n====\n\n### 49. 什么是反射？应用？原理？\n\n> 什么是反射？\n\n我们通常都是利用`new`方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。\n\n而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到**反射**。\n\n通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n\n反射最核心的四个类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png)Java 反射相关类\n\n> 反射的应用场景？\n\n一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。\n\n但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\n\n像 Spring 里的很多 **注解** ，它真正的功能实现就是利用反射。\n\n就像为什么我们使用 Spring 的时候 ，一个`@Component`注解就声明了一个类为 Spring Bean 呢？为什么通过一个 `@Value`注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\n\n这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。\n\n> 反射的原理？\n\n我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。\n\nJDK1.8 新特性\n=============\n\nJDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。\n\n### 50.JDK1.8 都有哪些新特性？\n\nJDK1.8 有不少新特性，我们经常接触到的新特性如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png)JDK1.8 主要新特性\n\n* 接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可\n* Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。\n* Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。\n\n  Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。\n\n  简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\n* 日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。\n* Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。\n\n### 51.Lambda 表达式了解多少？\n\nLambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。\n\n比如我们以前使用 Runnable 创建并运行线程：\n\n```\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Thread is running before Java8!\");\n            }\n        }).start();\n\n\n```\n\n这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：\n\n```\nnew Thread( () -> System.out.println(\"Thread is running since Java8!\") ).start();\n\n\n```\n\n当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\n\n所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\n\n> Java8 有哪些内置函数式接口？\n\nJDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 **Comparator** 和 **Runnable**，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。\n\n除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。\n\n### 52.Optional 了解吗？\n\n`Optional`是用于防范`NullPointerException`。\n\n可以将 `Optional` 看做是包装对象（可能是 `null`, 也有可能非 `null`）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 `Optional` 来包装它，这也是在 Java 8 被推荐使用的做法。\n\n```\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n\n\n```\n\n### 53.Stream 流用过吗？\n\n`Stream` 流，简单来说，使用 `java.util.Stream` 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 _中间操作_ 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 `Stream` 流。\n\nStream 流一般用于集合，我们对一个集合做几个常见操作：\n\n```\nList<String> stringCollection = new ArrayList<>();\nstringCollection.add(\"ddd2\");\nstringCollection.add(\"aaa2\");\nstringCollection.add(\"bbb1\");\nstringCollection.add(\"aaa1\");\nstringCollection.add(\"bbb3\");\nstringCollection.add(\"ccc\");\nstringCollection.add(\"bbb2\");\nstringCollection.add(\"ddd1\");\n\n\n```\n\n* **Filter 过滤**\n\n```\nstringCollection\n    .stream()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa2\", \"aaa1\"\n\n\n\n```\n\n* **Sorted 排序**\n\n```\nstringCollection\n    .stream()\n    .sorted()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa1\", \"aaa2\"\n\n\n```\n\n* **Map 转换**\n\n```\nstringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -> b.compareTo(a))\n    .forEach(System.out::println);\n\n// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\"\n\n\n```\n\n* **Match 匹配**\n\n```\n// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -> s.startsWith(\"z\"));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n\n```\n\n* **Count 计数**\n\n`count` 是一个终端操作，它能够统计 `stream` 流中的元素总数，返回值是 `long` 类型。\n\n```\n// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -> s.startsWith(\"b\"))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n\n```\n\n* **Reduce**\n\n`Reduce` 中文翻译为：_减少、缩小_。通过入参的 `Function`，我们能够将 `list` 归约成一个值。它的返回类型是 `Optional` 类型。\n\n```\nOptional<String> reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -> s1 + \"#\" + s2);\n\nreduced.ifPresent(System.out::println);\n// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\"\n\n\n```\n\n以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png)Java Stream 流\n\n> 简单事情重复做，重复事情认真做，认真事情有创造性地做。\n>\n> 我是**三分恶**，一个能文能武的程序员，**点赞**、**关注**不迷路，咱们下期见！\n\n**参考：**\n\n* [1]. Java 基础高频面试题（2021 年最新版）：https://blog.csdn.net/v123411739/article/details/115364158\n* [2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：https://segmentfault.com/a/1190000039897611\n* [3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：https://blog.csdn.net/wo541075754/article/details/108604389\n* [4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：https://cloud.tencent.com/developer/article/1686226\n* [5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：https://hello.blog.csdn.net/article/details/108374856\n* [6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：https://juejin.cn/post/6938224339347046408#heading-12\n* [7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：https://juejin.cn/post/6844904125700784136\n* [8]. Java 基础知识面试题（2020 最新版）：https://thinkwon.blog.csdn.net/article/details/104390612\n* [9].Java 基础面试题（2021 最新版）：https://www.jianshu.com/p/7687559d29a3\n* [10]. 干货 | Java8 新特性教程 ：https://juejin.cn/post/6844903761547100168#heading-5\n* [11]. 面向对象和面向过程分别是什么？：https://www.zhihu.com/question/28790424)\n* [12]. 《疯狂 Java 讲义》\n* [13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：https://segmentfault.com/a/1190000021047883\n* [14]. 什么是泛型擦除？：https://www.zhihu.com/question/452958728/answer/1817841881\n* [15]. 学会反射后，我被录取了（干货）：https://www.cnblogs.com/cxuanBlog/p/13551797.html\n\n··········  END  ··············\n\n公众号\n\n专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 [**JavaGuide 知识星球**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect)。这是星球的详细介绍以及加入方法：[**JavaGuide 知识星球详细介绍**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect) （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。\n\n如果本文对你有帮助的话，欢迎**点赞** & **在看** & **分享**，这对我继续分享 & 创作优质文章非常重要。感谢🙏🏻\n\n[![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png)](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect)\n","source":"_posts/Java系列 Java基础（一）基础语法.md","raw":"---\ntitle: Java 基础\ntags:\n  - JAVA\n  - JVM\n  - JAVA基础\ncategories: JAVA\nauthor: potato\nsummary: 万丈高楼拔地起，根深方能入云霄\nabbrlink: 4321\ndate: 2021-09-18 10:29:39\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg)\n\n# Java系列 | Java基础（一)| 基础语法\n\n今天让我们回到梦开始的地方——**Java 基础**，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！\n\nJava 概述\n=========\n\n### 1. 什么是 Java？\n\nJava 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。\n\n### 2.Java 语言有哪些特点？\n\nJava 语言有很多优秀（可吹）的特点，以下几个是比较突出的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png)**Java 语言特点**\n\n* 面向对象（封装，继承，多态）；\n* 平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。\n* 支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；\n* 编译与解释并存；\n\n### 3.JVM、JDK 和 JRE 有什么区别？\n\n**JVM**：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\n**JRE**：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\n**JDK**: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n简单来说，JDK 包含 JRE，JRE 包含 JVM。\n\n![JDK、JRE、JVM 关系](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png)\n\n### 4. 说说什么是跨平台性？原理是什么\n\n所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。\n\n实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。\n\n### 5. 什么是字节码？采用字节码的好处是什么?\n\n所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。\n\n**Java** 程序从源代码到运行主要有三步：\n\n* **编译**：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)\n* **解释**：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码\n* **执行**：对应的机器执行二进制机器码\n\n![Java 程序执行过程](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png)\n\n只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。\n\n### 6. 为什么说 Java 语言 “编译与解释并存”？\n\n高级编程语言按照程序的执行方式分为**编译型**和**解释型**两种。\n\n简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。\n\n比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。\n\nJava 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（`\\*.class` 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言**编译**与**解释**并存。\n\n![编译与解释](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png)\n\n基础语法\n========\n\n### 7.Java 有哪些数据类型？\n\n**定义：**Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。\n\nJava 语言数据类型分为两种：**基本数据类型**和**引用数据类型**。\n\n![Java 数据类型](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png)\n\n**基本数据类型：**\n\n* 数值型\n* 整数类型（byte、short、long）\n* 浮点类型（float、long）\n* 字符型（char）\n* 布尔型（boolean）\n\nJava 基本数据类型范围和默认值：\n\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n**引用数据类型：**\n\n* 类（class）\n* 接口（interface）\n* 数组 ([])\n\n### 8. 自动类型转换、强制类型转换？看看这几行代码？\n\nJava 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。\n\n![Java 自动类型转换方向](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png)\n\n这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。\n\n> `float f=3.4`，对吗？\n\n不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换`float f =(float)3.4;`或者写成`float f =3.4F`\n\n> `short s1 = 1; s1 = s1 + 1；`对吗？`short s1 = 1; s1 += 1;`对吗？\n\n对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。\n\n而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。\n\n### 9. 什么是自动拆箱 / 封箱？\n\n* **装箱**：将基本类型用它们对应的引用类型包装起来；\n* **拆箱**：将包装类型转换为基本数据类型；\n\nJava 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。\n\n![装箱和拆箱](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png)\n\n举例：\n\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n\n\n```\n\n### 10.& 和 && 有什么区别？\n\n& 运算符有两种用法：`短路与`、`逻辑与`。\n\n&& 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。\n\n&& 之所以称为短路运算是因为，如果 && 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 && 而不是 &。\n\n例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为`username != null &&!username.equals(\"\")`，二者的顺序不能交换，更不能用 & 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。\n\n**注意**：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。\n\n### 11.switch 是否能作用在 byte/long/String 上？\n\nJava5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。\n\n从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。\n\n从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。\n\n### 12.break ,continue ,return 的区别及作用？\n\n* break 跳出整个循环，不再执行循环 (**结束当前的循环体**)\n* continue 跳出本次循环，继续执行下次循环 (**结束正在执行的循环 进入下一个循环条件**)\n* return 程序返回，不再执行下面的代码 (**结束当前的方法 直接返回**)\n\n![break 、continue 、return](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png)\n\n### 13. 用最有效率的方法计算 2 乘以 8？\n\n2 << 3。**位运算**，数字的二进制位左移三位相当于乘以 2 的三次方。\n\n### 14. 说说自增自减运算？看下这几个代码运行结果？\n\n在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（--）。\n\n++ 和 -- 运算符可以放在变量之前，也可以放在变量之后。\n\n当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。\n\n例如，当 `b = ++a` 时，先自增（自己增加 1），再赋值（赋值给 b）；当 `b = a++` 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。\n\n用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。\n\n> 看一下这段代码运行结果？\n\n```java\nint i  = 1;\ni = i++;\nSystem.out.println(i);\n```\n\n答案是 1。有点离谱对不对。\n\n对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。\n\n相当于这样的代码：\n\n```java\nint i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n```\n\n> 这段代码会输出什么？\n\n```java\nint count = 0;\nfor(int i = 0;i < 100;i++)\n{\n    count = count++;\n}\nSystem.out.println(\"count = \"+count);\n```\n\n答案是 0。\n\n和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。\n\n```java\nint autoAdd(int count)\n{\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n\nPS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。\n\n面向对象\n========\n\n### 15. ⾯向对象和⾯向过程的区别?\n\n* **⾯向过程** ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。\n* **⾯向对象** ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。\n\n用一个比喻：面向过程是编年体；面向对象是纪传体。\n\n![面向对象和面向过程的区别](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png)\n\n### 16. 面向对象有哪些特性\n\n![面向对象三大特征](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png)\n\n* **封装**\n\n  封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。\n* **继承**\n\n  继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。\n\n> 关于继承有以下三个要点：\n\n1. ⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。\n2. ⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。\n3. ⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。\n\n* **多态**\n\n  所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。\n\n  在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。\n\n### 17. 重载（overload）和重写（override）的区别？\n\n方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。\n\n* 重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；\n* 重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。\n\n方法重载的规则：\n\n1. 方法名一致，参数列表中参数的顺序，类型，个数不同。\n2. 重载与方法的返回值无关，存在于父类和子类，同类中。\n3. 可以抛出不同的异常，可以有不同修饰符。\n\n### 18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\n\nJava 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n* **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。\n* **private** : 在同一类内可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**\n* **public** : 对所有类可见。可以修饰类、接口、变量、方法\n* **protected** : 对同一包内的类和所有子类可见。可以修饰变量、方法。**注意：不能修饰类（外部类）**。\n\n![访问修饰符和可见性](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png)\n\n### 19.this 关键字有什么作用？\n\nthis 是自身的一个对象，代表对象本身，可以理解为：**指向对象本身的一个指针**。\n\nthis 的用法在 Java 中大体可以分为 3 种：\n\n1. 普通的直接引用，this 相当于是指向当前对象本身\n2. 形参与成员变量名字重名，用 this 来区分：\n\n```java\npublic Person(String name,int age){\n    this.name=name;\n    this.age=age;\n}\n```\n\n3. 引用本类的构造函数\n\n### 20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\n\n1. 接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。\n2. 接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。\n3. ⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。\n4. 接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。\n5. 从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。\n\n> 1. 在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。\n> 2. jdk9 的接⼝被允许定义私有⽅法 。\n\n总结⼀下 jdk7~jdk9 Java 中接⼝的变化：\n\n1. 在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。\n2. jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。\n3. jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。\n\n### 21. 成员变量与局部变量的区别有哪些？\n\n1. **从语法形式上看**：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n2. **从变量在内存中的存储⽅式来看**：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。\n3. **从变量在内存中的⽣存时间上看**：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。\n4. **成员变量如果没有被赋初值**：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。\n\n### 22. 静态变量和实例变量的区别？静态方法、实例方法呢？\n\n> 静态变量和实例变量的区别？\n\n**静态变量:** 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。\n\n**实例变量:** 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。\n\n> 静态⽅法和实例⽅法有何不同?\n\n类似地。\n\n**静态方法**：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ \" **类名. ⽅法名** \"的⽅式，也可以使⽤\" **对象名. ⽅法名** \" 的⽅式。静态方法里不能访问类的非静态成员变量和方法。\n\n**实例⽅法**：依存于类的实例，需要使用 \" **对象名. ⽅法名** \" 的⽅式调用；可以访问类的所有成员变量和方法。\n\n### 24.final 关键字有什么作用？\n\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n\n* 被 final 修饰的类不可以被继承\n* 被 final 修饰的方法不可以被重写\n* 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n  例如：\n\n  ```java\n          final StringBuilder sb = new StringBuilder(\"abc\");\n          sb.append(\"d\");\n          System.out.println(sb);  //abcd\n  ```\n\n  一张图说明：\n\n  ![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png)final 修饰变量\n\n### 25.final、finally、finalize 的区别？\n\n* final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。\n* finally 作为异常处理的一部分，它只能在 `try/catch` 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，`System.exit (0)` 可以阻断 finally 执行。\n* finalize 是在 `java.lang.Object` 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 `gc` 启动，该对象被回收的时候被调用。\n\n  一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。\n\n### 26.== 和 equals 的区别？\n\n**==** : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 **== **比较的是值，引⽤数据类型** ==** 比较的是内存地址)。\n\n**equals()** : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：\n\n* 默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。\n* 自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。\n\n举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：\n\n```java\npublic class Person {\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &&\n                Objects.equals(name, person.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(no, name);\n    }\n}\n\n\n```\n\n### 27.hashCode 与 equals?\n\n这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”\n\n> 什么是 HashCode？\n\nhashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。\n\n```java\npublic native int hashCode();\n```\n\n哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！\n\n> 为什么要有 hashCode？\n\n上面已经讲了，主要是在哈希表这种结构中用的到。\n\n例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：[面渣逆袭：Java 集合连环三十问](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect)\n\n> 为什么重写 quals 时必须重写 hashCode ⽅法？\n\n如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，**equals** ⽅法被覆盖过，则 **hashCode** ⽅法也必须被覆盖。\n\nhashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）\n\n> 为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？\n\n因为可能会**碰撞**， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。\n\n### 28.Java 是值传递，还是引用传递？\n\nJava 语言是**值传递**。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。\n\nJVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。\n\n而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png)Java 引用数据值传递示意图\n\n### 29. 深拷贝和浅拷贝?\n\n* **浅拷贝**：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。\n* **深拷贝**：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。\n\n例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png)浅拷贝和深拷贝示意图\n\n因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。\n\n> 浅拷贝如何实现呢？\n\nObject 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。\n\n> 深拷贝如何实现呢？\n\n* 重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。\n* 序列化：可以先讲原对象序列化，再反序列化成拷贝对象。\n\n### 30.Java 创建对象有哪几种方式？\n\nJava 中有以下四种创建对象的方式:\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png)Java 创建对象的四种方式\n\n* new 创建新对象\n* 通过反射机制\n* 采用 clone 机制\n* 通过序列化机制\n\n前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。\n\n常用类\n======\n\nString\n------\n\n### 31.String 是 Java 基本数据类型吗？可以被继承吗？\n\n> String 是 Java 基本数据类型吗？\n\n不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。\n\nString 是一个比较特殊的引用数据类型。\n\n> String 类可以继承吗？\n\n不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。\n\n### 32.String 和 StringBuilder、StringBuffer 的区别？\n\n* String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\n* StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\n* StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n\n### 33.String str1 = new String(\"abc\") 和 String str2 = \"abc\" 和  区别？\n\n两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png)堆与常量池中的 String\n\n但是不同的是，String str1 = new String(\"abc\") 还会通过 new String() 在堆里创建一个 \"abc\" 字符串对象实例。所以后者可以理解为被前者包含。\n\n> String s = new String(\"abc\") 创建了几个对象？\n\n很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。\n\n当字符创常量池没有 “abc”，此时会创建如下两个对象：\n\n* 一个是字符串字面量 \"abc\" 所对应的、字符串常量池中的实例\n* 另一个是通过 new String() 创建并初始化的，内容与 \"abc\" 相同的实例，在堆中。\n\n### 34.String 不是不可变类吗？字符串拼接是如何实现的？\n\nString 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。\n\n例如：\n\n```\nString a = \"hello \";\nString b = \"world!\";\nString ab = a + b;\n\n\n```\n\n在 **jdk1.8 之前**，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。\n\n内存如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png)jdk1.8 之前的字符串拼接\n\n在 **Java8 时** JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。\n\n下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。\n\n```java\nstack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n\n```\n\n也就是说其实上面的代码其实相当于：\n\n```java\nString a = \"hello \";\nString b = \"world!\";\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n\n```\n\n此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。\n\n当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。\n\n### 35.intern 方法有什么作用？\n\nJDK 源码里已经对这个方法进行了说明：\n\n```java\n     * <p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * <p>\n\n\n```\n\n意思也很好懂：\n\n* 如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串\n* 否则，将此 String 对象添加到池中，并返回 String 对象的引用\n\nInteger\n-------\n\n### 36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\n\n答案是 a 和 b 相等，c 和 d 不相等。\n\n* 对于基本数据类型 == 比较的值\n* 对于引用数据类型 == 比较的是地址\n\nInteger a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。\n\n如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false\n\n```java\n    public static void main(String[] args) {\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    }\n\n\n```\n\n> 什么是 Integer 缓存？\n\n因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置`JVM-XX:AutoBoxCacheMax=`来修改缓存的最大值，最小值改不了。\n\n实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png)Integer.valueOf\n\n很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。\n\nIntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。\n\n```java\n private static class IntegerCache {\n     ……\n     static {\n            //创建Integer对象存储\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     } \n }\n\n\n```\n\n### 37.String 怎么转成 Integer 的？原理？\n\nPS: 这道题印象中在一些面经中出场过几次。\n\nString 转成 Integer，主要有两个方法：\n\n* Integer.parseInt(String s)\n* Integer.valueOf(String s)\n\n不管哪一种，最终还是会调用 Integer 类内中的`parseInt(String s, int radix)`方法。\n\n抛去一些边界之类的看看核心代码：\n\n```\npublic static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len > 0) {\n            …… \n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            }\n        } \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    }\n\n\n\n```\n\n去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png)parseInt 示意图\n\nObject\n------\n\n### 38.Object 类的常见方法?\n\nObject 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png)Object 类的方法\n\n**对象比较**：\n\n* public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。\n* public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。\n\n**对象拷贝**：\n\n* protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。\n\n**对象转字符串：**\n\n* public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n\n**多线程调度：**\n\n* public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n* public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n* public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。\n* public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。\n* public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念\n\n**反射：**\n\n* public final native Class<?> getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n\n**垃圾回收：**\n\n* protected void finalize() throws Throwable ：通知垃圾收集器回收对象。\n\n异常处理\n========\n\n### 39.Java 中异常处理体系?\n\nJava 的异常体系是分为多层的。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png)Java 异常体系\n\n`Throwable`是 Java 语言中所有错误或异常的基类。Throwable 又分为`Error`和`Exception`，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。`Exception`是程序问题导致的异常，又分为两种：\n\n* CheckedException 受检异常：编译器会强制检查并要求处理的异常。\n* RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等\n\n### 40. 异常的处理方式？\n\n针对异常的处理主要有两种方式：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png)异常处理\n\n* **遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）**\n\n抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。\n\nthrows 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。\n\n* **try catch 捕获异常**\n\n在 catch 语句块中补货发生的异常，并进行处理。\n\n```java\n       try {\n            //包含可能会出现异常的代码以及声明异常的方法\n        }catch(Exception e) {\n            //捕获异常并进行处理\n        }finally {                                                       }\n            //可选，必执行的代码\n        }\n\n\n```\n\ntry-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。\n\n### 41. 三道经典异常处理代码题\n\n> 题目 1\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test());\n    }\n    public static int test() {\n        try {\n            return 1;\n        } catch (Exception e) {\n            return 2;\n        } finally {\n            System.out.print(\"3\");\n        }\n    }\n}\n\n\n```\n\n执行结果：31。\n\ntry、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。\n\n> 题目 2\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        try {\n            return 2;\n        } finally {\n            return 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：3。\n\ntry 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。\n\nfinally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。\n\n> 题目 3\n\n```java\npublic class TryDemo {\n    public static void main(String[] args) {\n        System.out.println(test1());\n    }\n    public static int test1() {\n        int i = 0;\n        try {\n            i = 2;\n            return i;\n        } finally {\n            i = 3;\n        }\n    }\n}\n\n\n```\n\n执行结果：2。\n\n大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？\n\n但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。\n\nI/O\n===\n\n### 42.Java 中 IO 流分为几种?\n\n流按照不同的特点，有很多种划分方式。\n\n* 按照流的流向分，可以分为**输入流**和**输出流**；\n* 按照操作单元划分，可以划分为**字节流**和**字符流**；\n* 按照流的角色划分为**节点流**和**处理流**\n\nJava Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n* **InputStream**/**Reader**: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n* **OutputStream**/**Writer**: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg)IO - 操作方式分类 - 图片来源参考 [2]\n\n> IO 流用到了什么设计模式？\n\n其实，Java 的 IO 流体系还用到了一个设计模式——**装饰器模式**。\n\nInputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png)Java IO 流用到装饰器模式\n\n### 43. 既然有了字节流, 为什么还要有字符流?\n\n其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。\n\n所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n### 44.BIO、NIO、AIO？\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png)BIO、NIO、AIO\n\n**BIO**(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即**客户端有连接请求时服务器端就需要启动一个线程进行处理**，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png)BIO、NIO、AIO\n\nBIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。\n\n**NIO** ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。\n\nNIO 是**同步非阻塞**的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png)NIO 线程\n\nNIO 的数据是面向**缓冲区 Buffer** 的，必须从 Buffer 中读取或写入。\n\n所以完整的 NIO 示意图：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png)NIO 完整示意图\n\n可以看出，NIO 的运行机制：\n\n* 每个 Channel 对应一个 Buffer。\n* Selector 对应一个线程，一个线程对应多个 Channel。\n* Selector 会根据不同的事件，在各个通道上切换。\n* Buffer 是内存块，底层是数据。\n\n**AIO**：JDK 7 引入了 Asynchronous I/O，是**异步不阻塞**的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。\n\nPS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：[面试字节，被操作系统问挂了](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect)\n\n序列化\n======\n\n### 45. 什么是序列化？什么是反序列化？\n\n什么是序列化，序列化就是**把 Java 对象转为二进制流**，方便存储和传输。\n\n所以**反序列化就是把二进制流恢复成对象**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png)序列化和反序列化\n\n类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。\n\n> Serializable 接口有什么用？\n\n这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。\n\n> serialVersionUID 又有什么用？\n\nserialVersionUID 就是起验证作用。\n\n```\nprivate static final long serialVersionUID = 1L;\n\n\n```\n\n我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。\n\n这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。\n\n如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。\n\n所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。\n\n因为类的结构变了，所以 serialVersionUID 就不一致。\n\n> Java 序列化不包含静态变量？\n\n序列化的时候是不包含静态变量的。\n\n> 如果有些变量不想序列化，怎么办？\n\n对于不想进行序列化的变量，使用`transient`关键字修饰。\n\n`transient` 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 `transient` 修饰的变量值不会被持久化和恢复。`transient` 只能修饰变量，不能修饰类和方法。\n\n### 46. 说说有几种序列化方式？\n\nJava 序列化方式有很多，常见的有三种：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png)Java 常见序列化方式\n\n* Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 `ObjectOutputStream`和对象输入流`ObjectI叩utStream`。\n* Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。\n* ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。\n\n泛型\n====\n\n### 47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\n\n> 什么是泛型？\n\nJava 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n```\nList<Integer> list = new ArrayList<>();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(\"a\");\nClass<? extends List> clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(\"add\", Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, \"kl\");\n\nSystem.out.println(list);\n\n\n```\n\n泛型一般有三种使用方式: **泛型类**、**泛型接口**、**泛型方法**。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png)泛型类、泛型接口、泛型方法\n\n**1. 泛型类**：\n\n```\n//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n\n\n```\n\n如何实例化泛型类：\n\n```\nGeneric<Integer> genericInteger = new Generic<Integer>(123456);\n\n\n```\n\n**2. 泛型接口** ：\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n\n\n```\n\n实现泛型接口，指定类型：\n\n```\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n\n\n```\n\n**3. 泛型方法** ：\n\n```\n   public static < E > void printArray( E[] inputArray )\n   {\n         for ( E element : inputArray ){\n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n\n\n```\n\n使用：\n\n```\n// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n\n\n```\n\n> 泛型常用的通配符有哪些？\n\n**常用的通配符为：T，E，K，V，？**\n\n* ？表示不确定的 java 类型\n* T (type) 表示具体的一个 java 类型\n* K V (key value) 分别代表 java 键值中的 Key Value\n* E (element) 代表 Element\n\n> 什么是泛型擦除？\n\n所谓的泛型擦除，官方名叫 “类型擦除”。\n\nJava 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。\n\n也就是说，在运行的时候是没有泛型的。\n\n例如这段代码，往一群猫里放条狗：\n\n```\nLinkedList<Cat> cats = new LinkedList<Cat>();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n\n```\n\n因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java **运行**环境）看来和下面这段没区别：\n\n```\nLinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n\n```\n\n为什么要类型擦除呢？\n\n主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。\n\n注解\n====\n\n### 48. 说一下你对注解的理解？\n\n**Java 注解本质上是一个标记**，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png)Java 注解和帽子\n\n注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。\n\n有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。\n\n例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。\n\n注解生命周期有三大类，分别是：\n\n* RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件\n* RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了\n* RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息\n\n所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。\n\n像常见的：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png)Override 注解\n\n就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。\n\n再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以**在运行的时候可以通过反射得到注解的信息**，还能拿到标记的值 required 。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png)Autowired 注解\n\n反射\n====\n\n### 49. 什么是反射？应用？原理？\n\n> 什么是反射？\n\n我们通常都是利用`new`方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。\n\n而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到**反射**。\n\n通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n\n反射最核心的四个类：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png)Java 反射相关类\n\n> 反射的应用场景？\n\n一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。\n\n但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\n\n像 Spring 里的很多 **注解** ，它真正的功能实现就是利用反射。\n\n就像为什么我们使用 Spring 的时候 ，一个`@Component`注解就声明了一个类为 Spring Bean 呢？为什么通过一个 `@Value`注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\n\n这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。\n\n> 反射的原理？\n\n我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。\n\nJDK1.8 新特性\n=============\n\nJDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。\n\n### 50.JDK1.8 都有哪些新特性？\n\nJDK1.8 有不少新特性，我们经常接触到的新特性如下：\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png)JDK1.8 主要新特性\n\n* 接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可\n* Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。\n* Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。\n\n  Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。\n\n  简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。\n* 日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。\n* Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。\n\n### 51.Lambda 表达式了解多少？\n\nLambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。\n\n比如我们以前使用 Runnable 创建并运行线程：\n\n```\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Thread is running before Java8!\");\n            }\n        }).start();\n\n\n```\n\n这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：\n\n```\nnew Thread( () -> System.out.println(\"Thread is running since Java8!\") ).start();\n\n\n```\n\n当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。\n\n所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。\n\n> Java8 有哪些内置函数式接口？\n\nJDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 **Comparator** 和 **Runnable**，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。\n\n除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。\n\n### 52.Optional 了解吗？\n\n`Optional`是用于防范`NullPointerException`。\n\n可以将 `Optional` 看做是包装对象（可能是 `null`, 也有可能非 `null`）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 `Optional` 来包装它，这也是在 Java 8 被推荐使用的做法。\n\n```\nOptional<String> optional = Optional.of(\"bam\");\n\noptional.isPresent();           // true\noptional.get();                 // \"bam\"\noptional.orElse(\"fallback\");    // \"bam\"\n\noptional.ifPresent((s) -> System.out.println(s.charAt(0)));     // \"b\"\n\n\n```\n\n### 53.Stream 流用过吗？\n\n`Stream` 流，简单来说，使用 `java.util.Stream` 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 _中间操作_ 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 `Stream` 流。\n\nStream 流一般用于集合，我们对一个集合做几个常见操作：\n\n```\nList<String> stringCollection = new ArrayList<>();\nstringCollection.add(\"ddd2\");\nstringCollection.add(\"aaa2\");\nstringCollection.add(\"bbb1\");\nstringCollection.add(\"aaa1\");\nstringCollection.add(\"bbb3\");\nstringCollection.add(\"ccc\");\nstringCollection.add(\"bbb2\");\nstringCollection.add(\"ddd1\");\n\n\n```\n\n* **Filter 过滤**\n\n```\nstringCollection\n    .stream()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa2\", \"aaa1\"\n\n\n\n```\n\n* **Sorted 排序**\n\n```\nstringCollection\n    .stream()\n    .sorted()\n    .filter((s) -> s.startsWith(\"a\"))\n    .forEach(System.out::println);\n\n// \"aaa1\", \"aaa2\"\n\n\n```\n\n* **Map 转换**\n\n```\nstringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -> b.compareTo(a))\n    .forEach(System.out::println);\n\n// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\"\n\n\n```\n\n* **Match 匹配**\n\n```\n// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -> s.startsWith(\"a\"));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -> s.startsWith(\"z\"));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n\n```\n\n* **Count 计数**\n\n`count` 是一个终端操作，它能够统计 `stream` 流中的元素总数，返回值是 `long` 类型。\n\n```\n// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -> s.startsWith(\"b\"))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n\n```\n\n* **Reduce**\n\n`Reduce` 中文翻译为：_减少、缩小_。通过入参的 `Function`，我们能够将 `list` 归约成一个值。它的返回类型是 `Optional` 类型。\n\n```\nOptional<String> reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -> s1 + \"#\" + s2);\n\nreduced.ifPresent(System.out::println);\n// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\"\n\n\n```\n\n以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。\n\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png)Java Stream 流\n\n> 简单事情重复做，重复事情认真做，认真事情有创造性地做。\n>\n> 我是**三分恶**，一个能文能武的程序员，**点赞**、**关注**不迷路，咱们下期见！\n\n**参考：**\n\n* [1]. Java 基础高频面试题（2021 年最新版）：https://blog.csdn.net/v123411739/article/details/115364158\n* [2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：https://segmentfault.com/a/1190000039897611\n* [3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：https://blog.csdn.net/wo541075754/article/details/108604389\n* [4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：https://cloud.tencent.com/developer/article/1686226\n* [5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：https://hello.blog.csdn.net/article/details/108374856\n* [6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：https://juejin.cn/post/6938224339347046408#heading-12\n* [7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：https://juejin.cn/post/6844904125700784136\n* [8]. Java 基础知识面试题（2020 最新版）：https://thinkwon.blog.csdn.net/article/details/104390612\n* [9].Java 基础面试题（2021 最新版）：https://www.jianshu.com/p/7687559d29a3\n* [10]. 干货 | Java8 新特性教程 ：https://juejin.cn/post/6844903761547100168#heading-5\n* [11]. 面向对象和面向过程分别是什么？：https://www.zhihu.com/question/28790424)\n* [12]. 《疯狂 Java 讲义》\n* [13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：https://segmentfault.com/a/1190000021047883\n* [14]. 什么是泛型擦除？：https://www.zhihu.com/question/452958728/answer/1817841881\n* [15]. 学会反射后，我被录取了（干货）：https://www.cnblogs.com/cxuanBlog/p/13551797.html\n\n··········  END  ··············\n\n公众号\n\n专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 [**JavaGuide 知识星球**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect)。这是星球的详细介绍以及加入方法：[**JavaGuide 知识星球详细介绍**](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect) （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。\n\n如果本文对你有帮助的话，欢迎**点赞** & **在看** & **分享**，这对我继续分享 & 创作优质文章非常重要。感谢🙏🏻\n\n[![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png)](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect)\n","slug":"Java系列-Java基础（一）基础语法","published":1,"updated":"2024-12-17T12:33:12.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypj0026j0kran5f217j","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<h1 id=\"Java系列-Java基础（一-基础语法\"><a href=\"#Java系列-Java基础（一-基础语法\" class=\"headerlink\" title=\"Java系列 | Java基础（一)| 基础语法\"></a>Java系列 | Java基础（一)| 基础语法</h1><p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！</p>\n<h1 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h1><h3 id=\"1-什么是-Java？\"><a href=\"#1-什么是-Java？\" class=\"headerlink\" title=\"1. 什么是 Java？\"></a>1. 什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"2-Java-语言有哪些特点？\"><a href=\"#2-Java-语言有哪些特点？\" class=\"headerlink\" title=\"2.Java 语言有哪些特点？\"></a>2.Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li>\n<li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"3-JVM、JDK-和-JRE-有什么区别？\"><a href=\"#3-JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"3.JVM、JDK 和 JRE 有什么区别？\"></a>3.JVM、JDK 和 JRE 有什么区别？</h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p><strong>JRE</strong>：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"4-说说什么是跨平台性？原理是什么\"><a href=\"#4-说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"4. 说说什么是跨平台性？原理是什么\"></a>4. 说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p>\n<h3 id=\"5-什么是字节码？采用字节码的好处是什么\"><a href=\"#5-什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"5. 什么是字节码？采用字节码的好处是什么?\"></a>5. 什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)</li>\n<li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p>\n<h3 id=\"6-为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#6-为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"6. 为什么说 Java 语言 “编译与解释并存”？\"></a>6. 为什么说 Java 语言 “编译与解释并存”？</h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p>\n<p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p>\n<p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"7-Java-有哪些数据类型？\"><a href=\"#7-Java-有哪些数据类型？\" class=\"headerlink\" title=\"7.Java 有哪些数据类型？\"></a>7.Java 有哪些数据类型？</h3><p><strong>定义：</strong>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型（byte、short、long）</li>\n<li>浮点类型（float、long）</li>\n<li>字符型（char）</li>\n<li>布尔型（boolean）</li>\n</ul>\n<p>Java 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（class）</li>\n<li>接口（interface）</li>\n<li>数组 ([])</li>\n</ul>\n<h3 id=\"8-自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#8-自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"8. 自动类型转换、强制类型转换？看看这几行代码？\"></a>8. 自动类型转换、强制类型转换？看看这几行代码？</h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>\n<p>而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。</p>\n<h3 id=\"9-什么是自动拆箱-封箱？\"><a href=\"#9-什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"9. 什么是自动拆箱 / 封箱？\"></a>9. 什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n\n</code></pre>\n<h3 id=\"10-amp-和-amp-amp-有什么区别？\"><a href=\"#10-amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"10.&amp; 和 &amp;&amp; 有什么区别？\"></a>10.&amp; 和 &amp;&amp; 有什么区别？</h3><p>&amp; 运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p>\n<p>&amp;&amp; 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p>\n<p>&amp;&amp; 之所以称为短路运算是因为，如果 &amp;&amp; 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 &amp;&amp; 而不是 &amp;。</p>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"11-switch-是否能作用在-byte-long-String-上？\"><a href=\"#11-switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"11.switch 是否能作用在 byte/long/String 上？\"></a>11.switch 是否能作用在 byte/long/String 上？</h3><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n<p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p>\n<p>从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n<h3 id=\"12-break-continue-return-的区别及作用？\"><a href=\"#12-break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"12.break ,continue ,return 的区别及作用？\"></a>12.break ,continue ,return 的区别及作用？</h3><ul>\n<li>break 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li>continue 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li>return 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"></p>\n<h3 id=\"13-用最有效率的方法计算-2-乘以-8？\"><a href=\"#13-用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"13. 用最有效率的方法计算 2 乘以 8？\"></a>13. 用最有效率的方法计算 2 乘以 8？</h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p>\n<h3 id=\"14-说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#14-说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"14. 说说自增自减运算？看下这几个代码运行结果？\"></a>14. 说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（–）。</p>\n<p>++ 和 – 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>；\n<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\ni<span class=\"token operator\">++</span>；\ni <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count = \"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">autoAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> coutn <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h3 id=\"15-⾯向对象和⾯向过程的区别\"><a href=\"#15-⾯向对象和⾯向过程的区别\" class=\"headerlink\" title=\"15. ⾯向对象和⾯向过程的区别?\"></a>15. ⾯向对象和⾯向过程的区别?</h3><ul>\n<li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li>\n<li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li>\n</ul>\n<p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png\" alt=\"面向对象和面向过程的区别\"></p>\n<h3 id=\"16-面向对象有哪些特性\"><a href=\"#16-面向对象有哪些特性\" class=\"headerlink\" title=\"16. 面向对象有哪些特性\"></a>16. 面向对象有哪些特性</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png\" alt=\"面向对象三大特征\"></p>\n<ul>\n<li><p><strong>封装</strong></p>\n<p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p>\n</li>\n<li><p><strong>继承</strong></p>\n<p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p>\n</li>\n</ul>\n<blockquote>\n<p>关于继承有以下三个要点：</p>\n</blockquote>\n<ol>\n<li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</li>\n<li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</li>\n<li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</li>\n</ol>\n<ul>\n<li><p><strong>多态</strong></p>\n<p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p>\n<p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p>\n</li>\n</ul>\n<h3 id=\"17-重载（overload）和重写（override）的区别？\"><a href=\"#17-重载（overload）和重写（override）的区别？\" class=\"headerlink\" title=\"17. 重载（overload）和重写（override）的区别？\"></a>17. 重载（overload）和重写（override）的区别？</h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p>\n<ul>\n<li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li>\n<li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</li>\n</ul>\n<p>方法重载的规则：</p>\n<ol>\n<li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li>\n<li>重载与方法的返回值无关，存在于父类和子类，同类中。</li>\n<li>可以抛出不同的异常，可以有不同修饰符。</li>\n</ol>\n<h3 id=\"18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\"><a href=\"#18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\" class=\"headerlink\" title=\"18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\"></a>18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？</h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png\" alt=\"访问修饰符和可见性\"></p>\n<h3 id=\"19-this-关键字有什么作用？\"><a href=\"#19-this-关键字有什么作用？\" class=\"headerlink\" title=\"19.this 关键字有什么作用？\"></a>19.this 关键字有什么作用？</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p>\n<p>this 的用法在 Java 中大体可以分为 3 种：</p>\n<ol>\n<li>普通的直接引用，this 相当于是指向当前对象本身</li>\n<li>形参与成员变量名字重名，用 this 来区分：</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"3\">\n<li>引用本类的构造函数</li>\n</ol>\n<h3 id=\"20-抽象类-abstract-class-和接口-interface-有什么区别？\"><a href=\"#20-抽象类-abstract-class-和接口-interface-有什么区别？\" class=\"headerlink\" title=\"20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\"></a>20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？</h3><ol>\n<li>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</li>\n<li>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</li>\n<li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</li>\n<li>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</li>\n<li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</li>\n</ol>\n<blockquote>\n<ol>\n<li>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</li>\n<li>jdk9 的接⼝被允许定义私有⽅法 。</li>\n</ol>\n</blockquote>\n<p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p>\n<ol>\n<li>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</li>\n<li>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</li>\n<li>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li>\n</ol>\n<h3 id=\"21-成员变量与局部变量的区别有哪些？\"><a href=\"#21-成员变量与局部变量的区别有哪些？\" class=\"headerlink\" title=\"21. 成员变量与局部变量的区别有哪些？\"></a>21. 成员变量与局部变量的区别有哪些？</h3><ol>\n<li><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</li>\n<li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li>\n<li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li>\n</ol>\n<h3 id=\"22-静态变量和实例变量的区别？静态方法、实例方法呢？\"><a href=\"#22-静态变量和实例变量的区别？静态方法、实例方法呢？\" class=\"headerlink\" title=\"22. 静态变量和实例变量的区别？静态方法、实例方法呢？\"></a>22. 静态变量和实例变量的区别？静态方法、实例方法呢？</h3><blockquote>\n<p>静态变量和实例变量的区别？</p>\n</blockquote>\n<p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p>\n<p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p>\n<blockquote>\n<p>静态⽅法和实例⽅法有何不同?</p>\n</blockquote>\n<p>类似地。</p>\n<p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ “ <strong>类名. ⽅法名</strong> “的⽅式，也可以使⽤” <strong>对象名. ⽅法名</strong> “ 的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p>\n<p><strong>实例⽅法</strong>：依存于类的实例，需要使用 “ <strong>对象名. ⽅法名</strong> “ 的⽅式调用；可以访问类的所有成员变量和方法。</p>\n<h3 id=\"24-final-关键字有什么作用？\"><a href=\"#24-final-关键字有什么作用？\" class=\"headerlink\" title=\"24.final 关键字有什么作用？\"></a>24.final 关键字有什么作用？</h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n<p>例如：</p>\n<pre class=\" language-java\"><code class=\"language-java\">        <span class=\"token keyword\">final</span> StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//abcd</span>\n</code></pre>\n<p>一张图说明：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png\">final 修饰变量</p>\n</li>\n</ul>\n<h3 id=\"25-final、finally、finalize-的区别？\"><a href=\"#25-final、finally、finalize-的区别？\" class=\"headerlink\" title=\"25.final、finally、finalize 的区别？\"></a>25.final、finally、finalize 的区别？</h3><ul>\n<li><p>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p>\n</li>\n<li><p>finally 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p>\n</li>\n<li><p>finalize 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p>\n<p>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p>\n</li>\n</ul>\n<h3 id=\"26-和-equals-的区别？\"><a href=\"#26-和-equals-的区别？\" class=\"headerlink\" title=\"26.== 和 equals 的区别？\"></a>26.== 和 equals 的区别？</h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 <strong>== <strong>比较的是值，引⽤数据类型</strong> ==</strong> 比较的是内存地址)。</p>\n<p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：</p>\n<ul>\n<li>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。</li>\n<li>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</li>\n</ul>\n<p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String no<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                Objects<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Objects<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"27-hashCode-与-equals\"><a href=\"#27-hashCode-与-equals\" class=\"headerlink\" title=\"27.hashCode 与 equals?\"></a>27.hashCode 与 equals?</h3><p>这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p>\n<blockquote>\n<p>什么是 HashCode？</p>\n</blockquote>\n<p>hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p>\n<blockquote>\n<p>为什么要有 hashCode？</p>\n</blockquote>\n<p>上面已经讲了，主要是在哈希表这种结构中用的到。</p>\n<p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect\">面渣逆袭：Java 集合连环三十问</a></p>\n<blockquote>\n<p>为什么重写 quals 时必须重写 hashCode ⽅法？</p>\n</blockquote>\n<p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p>\n<p>hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<blockquote>\n<p>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</p>\n</blockquote>\n<p>因为可能会<strong>碰撞</strong>， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。</p>\n<h3 id=\"28-Java-是值传递，还是引用传递？\"><a href=\"#28-Java-是值传递，还是引用传递？\" class=\"headerlink\" title=\"28.Java 是值传递，还是引用传递？\"></a>28.Java 是值传递，还是引用传递？</h3><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p>\n<p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p>\n<p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png\">Java 引用数据值传递示意图</p>\n<h3 id=\"29-深拷贝和浅拷贝\"><a href=\"#29-深拷贝和浅拷贝\" class=\"headerlink\" title=\"29. 深拷贝和浅拷贝?\"></a>29. 深拷贝和浅拷贝?</h3><ul>\n<li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li>\n<li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li>\n</ul>\n<p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png\">浅拷贝和深拷贝示意图</p>\n<p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p>\n<blockquote>\n<p>浅拷贝如何实现呢？</p>\n</blockquote>\n<p>Object 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。</p>\n<blockquote>\n<p>深拷贝如何实现呢？</p>\n</blockquote>\n<ul>\n<li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li>\n<li>序列化：可以先讲原对象序列化，再反序列化成拷贝对象。</li>\n</ul>\n<h3 id=\"30-Java-创建对象有哪几种方式？\"><a href=\"#30-Java-创建对象有哪几种方式？\" class=\"headerlink\" title=\"30.Java 创建对象有哪几种方式？\"></a>30.Java 创建对象有哪几种方式？</h3><p>Java 中有以下四种创建对象的方式:</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png\">Java 创建对象的四种方式</p>\n<ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<p>前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p>\n<h1 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"31-String-是-Java-基本数据类型吗？可以被继承吗？\"><a href=\"#31-String-是-Java-基本数据类型吗？可以被继承吗？\" class=\"headerlink\" title=\"31.String 是 Java 基本数据类型吗？可以被继承吗？\"></a>31.String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote>\n<p>String 是 Java 基本数据类型吗？</p>\n</blockquote>\n<p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p>\n<p>String 是一个比较特殊的引用数据类型。</p>\n<blockquote>\n<p>String 类可以继承吗？</p>\n</blockquote>\n<p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p>\n<h3 id=\"32-String-和-StringBuilder、StringBuffer-的区别？\"><a href=\"#32-String-和-StringBuilder、StringBuffer-的区别？\" class=\"headerlink\" title=\"32.String 和 StringBuilder、StringBuffer 的区别？\"></a>32.String 和 StringBuilder、StringBuffer 的区别？</h3><ul>\n<li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li>\n<li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li>\n<li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</li>\n</ul>\n<h3 id=\"33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\"><a href=\"#33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\" class=\"headerlink\" title=\"33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？\"></a>33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png\">堆与常量池中的 String</p>\n<p>但是不同的是，String str1 = new String(“abc”) 还会通过 new String() 在堆里创建一个 “abc” 字符串对象实例。所以后者可以理解为被前者包含。</p>\n<blockquote>\n<p>String s = new String(“abc”) 创建了几个对象？</p>\n</blockquote>\n<p>很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。</p>\n<p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p>\n<ul>\n<li>一个是字符串字面量 “abc” 所对应的、字符串常量池中的实例</li>\n<li>另一个是通过 new String() 创建并初始化的，内容与 “abc” 相同的实例，在堆中。</li>\n</ul>\n<h3 id=\"34-String-不是不可变类吗？字符串拼接是如何实现的？\"><a href=\"#34-String-不是不可变类吗？字符串拼接是如何实现的？\" class=\"headerlink\" title=\"34.String 不是不可变类吗？字符串拼接是如何实现的？\"></a>34.String 不是不可变类吗？字符串拼接是如何实现的？</h3><p>String 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。</p>\n<p>例如：</p>\n<pre><code>String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nString ab = a + b;\n\n</code></pre>\n<p>在 <strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p>\n<p>内存如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png\">jdk1.8 之前的字符串拼接</p>\n<p>在 <strong>Java8 时</strong> JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。</p>\n<p>下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。</p>\n<pre class=\" language-java\"><code class=\"language-java\">stack<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n     <span class=\"token number\">0</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">2</span>                  <span class=\"token comment\" spellcheck=\"true\">// String hello</span>\n     <span class=\"token number\">2</span><span class=\"token operator\">:</span> astore_1\n     <span class=\"token number\">3</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">3</span>                  <span class=\"token comment\" spellcheck=\"true\">// String world!</span>\n     <span class=\"token number\">5</span><span class=\"token operator\">:</span> astore_2\n     <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span>           #<span class=\"token number\">4</span>                  <span class=\"token comment\" spellcheck=\"true\">// class java/lang/StringBuilder</span>\n     <span class=\"token number\">9</span><span class=\"token operator\">:</span> dup\n    <span class=\"token number\">10</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">5</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.\"&lt;init>\":()V</span>\n    <span class=\"token number\">13</span><span class=\"token operator\">:</span> aload_1\n    <span class=\"token number\">14</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">6</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>\n    <span class=\"token number\">17</span><span class=\"token operator\">:</span> aload_2\n    <span class=\"token number\">18</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">6</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>\n    <span class=\"token number\">21</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">7</span>                  <span class=\"token comment\" spellcheck=\"true\">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>\n    <span class=\"token number\">24</span><span class=\"token operator\">:</span> astore_3\n    <span class=\"token number\">25</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n\n\n</code></pre>\n<p>也就是说其实上面的代码其实相当于：</p>\n<pre class=\" language-java\"><code class=\"language-java\">String a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">;</span>\nString b <span class=\"token operator\">=</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span>\nStringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString ab <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。</p>\n<p>当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。</p>\n<h3 id=\"35-intern-方法有什么作用？\"><a href=\"#35-intern-方法有什么作用？\" class=\"headerlink\" title=\"35.intern 方法有什么作用？\"></a>35.intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p>\n<pre class=\" language-java\"><code class=\"language-java\">     <span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n     <span class=\"token operator\">*</span> When the intern method is invoked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> the pool already contains a\n     <span class=\"token operator\">*</span> string equal to <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object as determined by\n     <span class=\"token operator\">*</span> the <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@link</span> #<span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> method<span class=\"token punctuation\">,</span> then the string from the pool is\n     <span class=\"token operator\">*</span> returned<span class=\"token punctuation\">.</span> Otherwise<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object is added to the\n     <span class=\"token operator\">*</span> pool and a reference to <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token annotation punctuation\">@code</span> String<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> object is returned<span class=\"token punctuation\">.</span>\n     <span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n\n</code></pre>\n<p>意思也很好懂：</p>\n<ul>\n<li>如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li>\n<li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li>\n</ul>\n<h2 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h2><h3 id=\"36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\"><a href=\"#36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\" class=\"headerlink\" title=\"36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\"></a>36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h3><p>答案是 a 和 b 相等，c 和 d 不相等。</p>\n<ul>\n<li>对于基本数据类型 == 比较的值</li>\n<li>对于引用数据类型 == 比较的是地址</li>\n</ul>\n<p>Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。</p>\n<p>如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false</p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Integer a <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        Integer b <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        Integer b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//false</span>\n\n        Integer c <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        Integer d <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//false</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<blockquote>\n<p>什么是 Integer 缓存？</p>\n</blockquote>\n<p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p>\n<p>实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png\">Integer.valueOf</p>\n<p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。</p>\n<p>IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。</p>\n<pre class=\" language-java\"><code class=\"language-java\"> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerCache</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n     ……\n     <span class=\"token keyword\">static</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//创建Integer对象存储</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cache<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                cache<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         ……\n     <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h3 id=\"37-String-怎么转成-Integer-的？原理？\"><a href=\"#37-String-怎么转成-Integer-的？原理？\" class=\"headerlink\" title=\"37.String 怎么转成 Integer 的？原理？\"></a>37.String 怎么转成 Integer 的？原理？</h3><p>PS: 这道题印象中在一些面经中出场过几次。</p>\n<p>String 转成 Integer，主要有两个方法：</p>\n<ul>\n<li>Integer.parseInt(String s)</li>\n<li>Integer.valueOf(String s)</li>\n</ul>\n<p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p>\n<p>抛去一些边界之类的看看核心代码：</p>\n<pre><code>public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    &#123;\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len &gt; 0) &#123;\n            …… \n            while (i &lt; len) &#123;\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            &#125;\n        &#125; \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    &#125;\n\n\n</code></pre>\n<p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png\">parseInt 示意图</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"38-Object-类的常见方法\"><a href=\"#38-Object-类的常见方法\" class=\"headerlink\" title=\"38.Object 类的常见方法?\"></a>38.Object 类的常见方法?</h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png\">Object 类的方法</p>\n<p><strong>对象比较</strong>：</p>\n<ul>\n<li>public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。</li>\n<li>public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。</li>\n</ul>\n<p><strong>对象拷贝</strong>：</p>\n<ul>\n<li>protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。</li>\n</ul>\n<p><strong>对象转字符串：</strong></p>\n<ul>\n<li>public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li>\n</ul>\n<p><strong>多线程调度：</strong></p>\n<ul>\n<li>public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li>\n<li>public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li>\n<li>public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li>\n<li>public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。</li>\n<li>public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</li>\n</ul>\n<p><strong>反射：</strong></p>\n<ul>\n<li>public final native Class&lt;?&gt; getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</li>\n</ul>\n<p><strong>垃圾回收：</strong></p>\n<ul>\n<li>protected void finalize() throws Throwable ：通知垃圾收集器回收对象。</li>\n</ul>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h3 id=\"39-Java-中异常处理体系\"><a href=\"#39-Java-中异常处理体系\" class=\"headerlink\" title=\"39.Java 中异常处理体系?\"></a>39.Java 中异常处理体系?</h3><p>Java 的异常体系是分为多层的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png\">Java 异常体系</p>\n<p><code>Throwable</code>是 Java 语言中所有错误或异常的基类。Throwable 又分为<code>Error</code>和<code>Exception</code>，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。<code>Exception</code>是程序问题导致的异常，又分为两种：</p>\n<ul>\n<li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。</li>\n<li>RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li>\n</ul>\n<h3 id=\"40-异常的处理方式？\"><a href=\"#40-异常的处理方式？\" class=\"headerlink\" title=\"40. 异常的处理方式？\"></a>40. 异常的处理方式？</h3><p>针对异常的处理主要有两种方式：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png\">异常处理</p>\n<ul>\n<li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li>\n</ul>\n<p>抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。</p>\n<p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p>\n<ul>\n<li><strong>try catch 捕获异常</strong></li>\n</ul>\n<p>在 catch 语句块中补货发生的异常，并进行处理。</p>\n<pre class=\" language-java\"><code class=\"language-java\">       <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//包含可能会出现异常的代码以及声明异常的方法</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//捕获异常并进行处理</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>                                                       <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//可选，必执行的代码</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p>\n<h3 id=\"41-三道经典异常处理代码题\"><a href=\"#41-三道经典异常处理代码题\" class=\"headerlink\" title=\"41. 三道经典异常处理代码题\"></a>41. 三道经典异常处理代码题</h3><blockquote>\n<p>题目 1</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：31。</p>\n<p>try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。</p>\n<blockquote>\n<p>题目 2</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：3。</p>\n<p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p>\n<p>finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。</p>\n<blockquote>\n<p>题目 3</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>执行结果：2。</p>\n<p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p>\n<p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><h3 id=\"42-Java-中-IO-流分为几种\"><a href=\"#42-Java-中-IO-流分为几种\" class=\"headerlink\" title=\"42.Java 中 IO 流分为几种?\"></a>42.Java 中 IO 流分为几种?</h3><p>流按照不同的特点，有很多种划分方式。</p>\n<ul>\n<li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li>\n</ul>\n<p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p>\n<ul>\n<li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>\n<li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg\">IO - 操作方式分类 - 图片来源参考 [2]</p>\n<blockquote>\n<p>IO 流用到了什么设计模式？</p>\n</blockquote>\n<p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p>\n<p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png\">Java IO 流用到装饰器模式</p>\n<h3 id=\"43-既然有了字节流-为什么还要有字符流\"><a href=\"#43-既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"43. 既然有了字节流, 为什么还要有字符流?\"></a>43. 既然有了字节流, 为什么还要有字符流?</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p>\n<p>所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h3 id=\"44-BIO、NIO、AIO？\"><a href=\"#44-BIO、NIO、AIO？\" class=\"headerlink\" title=\"44.BIO、NIO、AIO？\"></a>44.BIO、NIO、AIO？</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png\">BIO、NIO、AIO</p>\n<p><strong>BIO</strong>(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png\">BIO、NIO、AIO</p>\n<p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>\n<p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。</p>\n<p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png\">NIO 线程</p>\n<p>NIO 的数据是面向<strong>缓冲区 Buffer</strong> 的，必须从 Buffer 中读取或写入。</p>\n<p>所以完整的 NIO 示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png\">NIO 完整示意图</p>\n<p>可以看出，NIO 的运行机制：</p>\n<ul>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 是内存块，底层是数据。</li>\n</ul>\n<p><strong>AIO</strong>：JDK 7 引入了 Asynchronous I/O，是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n<p>PS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect\">面试字节，被操作系统问挂了</a></p>\n<h1 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h1><h3 id=\"45-什么是序列化？什么是反序列化？\"><a href=\"#45-什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"45. 什么是序列化？什么是反序列化？\"></a>45. 什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p>\n<p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png\">序列化和反序列化</p>\n<p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p>\n<blockquote>\n<p>Serializable 接口有什么用？</p>\n</blockquote>\n<p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p>\n<blockquote>\n<p>serialVersionUID 又有什么用？</p>\n</blockquote>\n<p>serialVersionUID 就是起验证作用。</p>\n<pre><code>private static final long serialVersionUID = 1L;\n\n</code></pre>\n<p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p>\n<p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p>\n<p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p>\n<p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p>\n<p>因为类的结构变了，所以 serialVersionUID 就不一致。</p>\n<blockquote>\n<p>Java 序列化不包含静态变量？</p>\n</blockquote>\n<p>序列化的时候是不包含静态变量的。</p>\n<blockquote>\n<p>如果有些变量不想序列化，怎么办？</p>\n</blockquote>\n<p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p>\n<p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p>\n<h3 id=\"46-说说有几种序列化方式？\"><a href=\"#46-说说有几种序列化方式？\" class=\"headerlink\" title=\"46. 说说有几种序列化方式？\"></a>46. 说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png\">Java 常见序列化方式</p>\n<ul>\n<li>Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectI叩utStream</code>。</li>\n<li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li>\n<li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li>\n</ul>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"><a href=\"#47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\" class=\"headerlink\" title=\"47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"></a>47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><blockquote>\n<p>什么是泛型？</p>\n</blockquote>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(&quot;a&quot;);\nClass&lt;? extends List&gt; clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(&quot;add&quot;, Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, &quot;kl&quot;);\n\nSystem.out.println(list);\n\n</code></pre>\n<p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png\">泛型类、泛型接口、泛型方法</p>\n<p><strong>1. 泛型类</strong>：</p>\n<pre><code>//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic&lt;T&gt;&#123;\n\n    private T key;\n\n    public Generic(T key) &#123;\n        this.key = key;\n    &#125;\n\n    public T getKey()&#123;\n        return key;\n    &#125;\n&#125;\n\n</code></pre>\n<p>如何实例化泛型类：</p>\n<pre><code>Generic&lt;Integer&gt; genericInteger = new Generic&lt;Integer&gt;(123456);\n\n</code></pre>\n<p><strong>2. 泛型接口</strong> ：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;T&gt;&#123;\n    @Override\n    public T method() &#123;\n        return null;\n    &#125;\n&#125;\n\n</code></pre>\n<p>实现泛型接口，指定类型：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;\n    @Override\n    public String method() &#123;\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>3. 泛型方法</strong> ：</p>\n<pre><code>   public static &lt; E &gt; void printArray( E[] inputArray )\n   &#123;\n         for ( E element : inputArray )&#123;\n            System.out.printf( &quot;%s &quot;, element );\n         &#125;\n         System.out.println();\n    &#125;\n\n</code></pre>\n<p>使用：</p>\n<pre><code>// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = &#123; 1, 2, 3 &#125;;\nString[] stringArray = &#123; &quot;Hello&quot;, &quot;World&quot; &#125;;\nprintArray( intArray  );\nprintArray( stringArray  );\n\n</code></pre>\n<blockquote>\n<p>泛型常用的通配符有哪些？</p>\n</blockquote>\n<p><strong>常用的通配符为：T，E，K，V，？</strong></p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个 java 类型</li>\n<li>K V (key value) 分别代表 java 键值中的 Key Value</li>\n<li>E (element) 代表 Element</li>\n</ul>\n<blockquote>\n<p>什么是泛型擦除？</p>\n</blockquote>\n<p>所谓的泛型擦除，官方名叫 “类型擦除”。</p>\n<p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p>\n<p>也就是说，在运行的时候是没有泛型的。</p>\n<p>例如这段代码，往一群猫里放条狗：</p>\n<pre><code>LinkedList&lt;Cat&gt; cats = new LinkedList&lt;Cat&gt;();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n</code></pre>\n<p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java <strong>运行</strong>环境）看来和下面这段没区别：</p>\n<pre><code>LinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n</code></pre>\n<p>为什么要类型擦除呢？</p>\n<p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h3 id=\"48-说一下你对注解的理解？\"><a href=\"#48-说一下你对注解的理解？\" class=\"headerlink\" title=\"48. 说一下你对注解的理解？\"></a>48. 说一下你对注解的理解？</h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png\">Java 注解和帽子</p>\n<p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p>\n<p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p>\n<p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p>\n<p>注解生命周期有三大类，分别是：</p>\n<ul>\n<li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li>\n<li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li>\n<li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li>\n</ul>\n<p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p>\n<p>像常见的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png\">Override 注解</p>\n<p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p>\n<p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png\">Autowired 注解</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h3 id=\"49-什么是反射？应用？原理？\"><a href=\"#49-什么是反射？应用？原理？\" class=\"headerlink\" title=\"49. 什么是反射？应用？原理？\"></a>49. 什么是反射？应用？原理？</h3><blockquote>\n<p>什么是反射？</p>\n</blockquote>\n<p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。</p>\n<p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p>\n<p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>\n<p>反射最核心的四个类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png\">Java 反射相关类</p>\n<blockquote>\n<p>反射的应用场景？</p>\n</blockquote>\n<p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p>\n<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p>\n<p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p>\n<p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>\n<p>这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p>\n<blockquote>\n<p>反射的原理？</p>\n</blockquote>\n<p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p>\n<h1 id=\"JDK1-8-新特性\"><a href=\"#JDK1-8-新特性\" class=\"headerlink\" title=\"JDK1.8 新特性\"></a>JDK1.8 新特性</h1><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p>\n<h3 id=\"50-JDK1-8-都有哪些新特性？\"><a href=\"#50-JDK1-8-都有哪些新特性？\" class=\"headerlink\" title=\"50.JDK1.8 都有哪些新特性？\"></a>50.JDK1.8 都有哪些新特性？</h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png\">JDK1.8 主要新特性</p>\n<ul>\n<li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p>\n</li>\n<li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p>\n</li>\n<li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p>\n<p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p>\n<p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n</li>\n<li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p>\n</li>\n<li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p>\n</li>\n</ul>\n<h3 id=\"51-Lambda-表达式了解多少？\"><a href=\"#51-Lambda-表达式了解多少？\" class=\"headerlink\" title=\"51.Lambda 表达式了解多少？\"></a>51.Lambda 表达式了解多少？</h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p>\n<p>比如我们以前使用 Runnable 创建并运行线程：</p>\n<pre><code>        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                System.out.println(&quot;Thread is running before Java8!&quot;);\n            &#125;\n        &#125;).start();\n\n</code></pre>\n<p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p>\n<pre><code>new Thread( () -&gt; System.out.println(&quot;Thread is running since Java8!&quot;) ).start();\n\n</code></pre>\n<p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p>\n<p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p>\n<blockquote>\n<p>Java8 有哪些内置函数式接口？</p>\n</blockquote>\n<p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p>\n<p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p>\n<h3 id=\"52-Optional-了解吗？\"><a href=\"#52-Optional-了解吗？\" class=\"headerlink\" title=\"52.Optional 了解吗？\"></a>52.Optional 了解吗？</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p>\n<p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p>\n<pre><code>Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);\n\noptional.isPresent();           // true\noptional.get();                 // &quot;bam&quot;\noptional.orElse(&quot;fallback&quot;);    // &quot;bam&quot;\n\noptional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // &quot;b&quot;\n\n</code></pre>\n<h3 id=\"53-Stream-流用过吗？\"><a href=\"#53-Stream-流用过吗？\" class=\"headerlink\" title=\"53.Stream 流用过吗？\"></a>53.Stream 流用过吗？</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p>\n<p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p>\n<pre><code>List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();\nstringCollection.add(&quot;ddd2&quot;);\nstringCollection.add(&quot;aaa2&quot;);\nstringCollection.add(&quot;bbb1&quot;);\nstringCollection.add(&quot;aaa1&quot;);\nstringCollection.add(&quot;bbb3&quot;);\nstringCollection.add(&quot;ccc&quot;);\nstringCollection.add(&quot;bbb2&quot;);\nstringCollection.add(&quot;ddd1&quot;);\n\n</code></pre>\n<ul>\n<li><strong>Filter 过滤</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa2&quot;, &quot;aaa1&quot;\n\n\n</code></pre>\n<ul>\n<li><strong>Sorted 排序</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .sorted()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa1&quot;, &quot;aaa2&quot;\n\n</code></pre>\n<ul>\n<li><strong>Map 转换</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -&gt; b.compareTo(a))\n    .forEach(System.out::println);\n\n// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;\n\n</code></pre>\n<ul>\n<li><strong>Match 匹配</strong></li>\n</ul>\n<pre><code>// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -&gt; s.startsWith(&quot;z&quot;));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n</code></pre>\n<ul>\n<li><strong>Count 计数</strong></li>\n</ul>\n<p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p>\n<pre><code>// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -&gt; s.startsWith(&quot;b&quot;))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n</code></pre>\n<ul>\n<li><strong>Reduce</strong></li>\n</ul>\n<p><code>Reduce</code> 中文翻译为：_减少、缩小_。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p>\n<pre><code>Optional&lt;String&gt; reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -&gt; s1 + &quot;#&quot; + s2);\n\nreduced.ifPresent(System.out::println);\n// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;\n\n</code></pre>\n<p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png\">Java Stream 流</p>\n<blockquote>\n<p>简单事情重复做，重复事情认真做，认真事情有创造性地做。</p>\n<p>我是<strong>三分恶</strong>，一个能文能武的程序员，<strong>点赞</strong>、<strong>关注</strong>不迷路，咱们下期见！</p>\n</blockquote>\n<p><strong>参考：</strong></p>\n<ul>\n<li>[1]. Java 基础高频面试题（2021 年最新版）：<a href=\"https://blog.csdn.net/v123411739/article/details/115364158\">https://blog.csdn.net/v123411739/article/details/115364158</a></li>\n<li>[2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：<a href=\"https://segmentfault.com/a/1190000039897611\">https://segmentfault.com/a/1190000039897611</a></li>\n<li>[3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：<a href=\"https://blog.csdn.net/wo541075754/article/details/108604389\">https://blog.csdn.net/wo541075754/article/details/108604389</a></li>\n<li>[4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：<a href=\"https://cloud.tencent.com/developer/article/1686226\">https://cloud.tencent.com/developer/article/1686226</a></li>\n<li>[5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：<a href=\"https://hello.blog.csdn.net/article/details/108374856\">https://hello.blog.csdn.net/article/details/108374856</a></li>\n<li>[6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：<a href=\"https://juejin.cn/post/6938224339347046408#heading-12\">https://juejin.cn/post/6938224339347046408#heading-12</a></li>\n<li>[7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：<a href=\"https://juejin.cn/post/6844904125700784136\">https://juejin.cn/post/6844904125700784136</a></li>\n<li>[8]. Java 基础知识面试题（2020 最新版）：<a href=\"https://thinkwon.blog.csdn.net/article/details/104390612\">https://thinkwon.blog.csdn.net/article/details/104390612</a></li>\n<li>[9].Java 基础面试题（2021 最新版）：<a href=\"https://www.jianshu.com/p/7687559d29a3\">https://www.jianshu.com/p/7687559d29a3</a></li>\n<li>[10]. 干货 | Java8 新特性教程 ：<a href=\"https://juejin.cn/post/6844903761547100168#heading-5\">https://juejin.cn/post/6844903761547100168#heading-5</a></li>\n<li>[11]. 面向对象和面向过程分别是什么？：<a href=\"https://www.zhihu.com/question/28790424\">https://www.zhihu.com/question/28790424</a>)</li>\n<li>[12]. 《疯狂 Java 讲义》</li>\n<li>[13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：<a href=\"https://segmentfault.com/a/1190000021047883\">https://segmentfault.com/a/1190000021047883</a></li>\n<li>[14]. 什么是泛型擦除？：<a href=\"https://www.zhihu.com/question/452958728/answer/1817841881\">https://www.zhihu.com/question/452958728/answer/1817841881</a></li>\n<li>[15]. 学会反射后，我被录取了（干货）：<a href=\"https://www.cnblogs.com/cxuanBlog/p/13551797.html\">https://www.cnblogs.com/cxuanBlog/p/13551797.html</a></li>\n</ul>\n<p>··········  END  ··············</p>\n<p>公众号</p>\n<p>专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球</strong></a>。这是星球的详细介绍以及加入方法：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球详细介绍</strong></a> （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</p>\n<p>如果本文对你有帮助的话，欢迎<strong>点赞</strong> &amp; <strong>在看</strong> &amp; <strong>分享</strong>，这对我继续分享 &amp; 创作优质文章非常重要。感谢🙏🏻</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png\"></a></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021715489.jpg\" alt=\"题图\"></p>\n<h1 id=\"Java系列-Java基础（一-基础语法\"><a href=\"#Java系列-Java基础（一-基础语法\" class=\"headerlink\" title=\"Java系列 | Java基础（一)| 基础语法\"></a>Java系列 | Java基础（一)| 基础语法</h1><p>今天让我们回到梦开始的地方——<strong>Java 基础</strong>，其实过了萌新阶段，面试问基础就问的不多，但是保不齐突然问一下。想一下，总不能张口高并发、闭口分布式，结果什么是面向对象，说不清，那多少有点魔幻。所以赶紧来看看，这些基础有没有你不会的！</p>\n<h1 id=\"Java-概述\"><a href=\"#Java-概述\" class=\"headerlink\" title=\"Java 概述\"></a>Java 概述</h1><h3 id=\"1-什么是-Java？\"><a href=\"#1-什么是-Java？\" class=\"headerlink\" title=\"1. 什么是 Java？\"></a>1. 什么是 Java？</h3><p>Java 是一门面向对象的编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p>\n<h3 id=\"2-Java-语言有哪些特点？\"><a href=\"#2-Java-语言有哪些特点？\" class=\"headerlink\" title=\"2.Java 语言有哪些特点？\"></a>2.Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641482.png\"><strong>Java 语言特点</strong></p>\n<ul>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性，平台无关性的具体表现在于，Java 是 “一次编写，到处运行（Write Once，Run any Where）” 的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li>\n<li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li>\n<li>编译与解释并存；</li>\n</ul>\n<h3 id=\"3-JVM、JDK-和-JRE-有什么区别？\"><a href=\"#3-JVM、JDK-和-JRE-有什么区别？\" class=\"headerlink\" title=\"3.JVM、JDK 和 JRE 有什么区别？\"></a>3.JVM、JDK 和 JRE 有什么区别？</h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p><strong>JRE</strong>：Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641391.png\" alt=\"JDK、JRE、JVM 关系\"></p>\n<h3 id=\"4-说说什么是跨平台性？原理是什么\"><a href=\"#4-说说什么是跨平台性？原理是什么\" class=\"headerlink\" title=\"4. 说说什么是跨平台性？原理是什么\"></a>4. 说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p>\n<p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p>\n<h3 id=\"5-什么是字节码？采用字节码的好处是什么\"><a href=\"#5-什么是字节码？采用字节码的好处是什么\" class=\"headerlink\" title=\"5. 什么是字节码？采用字节码的好处是什么?\"></a>5. 什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的. class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p>\n<p><strong>Java</strong> 程序从源代码到运行主要有三步：</p>\n<ul>\n<li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码 (.class)</li>\n<li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li>\n<li><strong>执行</strong>：对应的机器执行二进制机器码</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641227.png\" alt=\"Java 程序执行过程\"></p>\n<p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p>\n<h3 id=\"6-为什么说-Java-语言-“编译与解释并存”？\"><a href=\"#6-为什么说-Java-语言-“编译与解释并存”？\" class=\"headerlink\" title=\"6. 为什么说 Java 语言 “编译与解释并存”？\"></a>6. 为什么说 Java 语言 “编译与解释并存”？</h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p>\n<p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p>\n<p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p>\n<p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641639.png\" alt=\"编译与解释\"></p>\n<h1 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h1><h3 id=\"7-Java-有哪些数据类型？\"><a href=\"#7-Java-有哪些数据类型？\" class=\"headerlink\" title=\"7.Java 有哪些数据类型？\"></a>7.Java 有哪些数据类型？</h3><p><strong>定义：</strong>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p>\n<p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641466.png\" alt=\"Java 数据类型\"></p>\n<p><strong>基本数据类型：</strong></p>\n<ul>\n<li>数值型</li>\n<li>整数类型（byte、short、long）</li>\n<li>浮点类型（float、long）</li>\n<li>字符型（char）</li>\n<li>布尔型（boolean）</li>\n</ul>\n<p>Java 基本数据类型范围和默认值：</p>\n<table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>'u0000'</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td><br></td><td>false</td></tr></tbody></table>\n\n<p><strong>引用数据类型：</strong></p>\n<ul>\n<li>类（class）</li>\n<li>接口（interface）</li>\n<li>数组 ([])</li>\n</ul>\n<h3 id=\"8-自动类型转换、强制类型转换？看看这几行代码？\"><a href=\"#8-自动类型转换、强制类型转换？看看这几行代码？\" class=\"headerlink\" title=\"8. 自动类型转换、强制类型转换？看看这几行代码？\"></a>8. 自动类型转换、强制类型转换？看看这几行代码？</h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641473.png\" alt=\"Java 自动类型转换方向\"></p>\n<p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p>\n<blockquote>\n<p><code>float f=3.4</code>，对吗？</p>\n</blockquote>\n<p>不正确。3.4 是单精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p>\n<blockquote>\n<p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p>\n</blockquote>\n<p>对于 short s1 = 1; s1 = s1 + 1; 编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>\n<p>而 short s1 = 1; s1 += 1; 可以正确编译，因为 s1+= 1; 相当于 s1 = (short(s1 + 1); 其中有隐含的强制类型转换。</p>\n<h3 id=\"9-什么是自动拆箱-封箱？\"><a href=\"#9-什么是自动拆箱-封箱？\" class=\"headerlink\" title=\"9. 什么是自动拆箱 / 封箱？\"></a>9. 什么是自动拆箱 / 封箱？</h3><ul>\n<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642042.png\" alt=\"装箱和拆箱\"></p>\n<p>举例：</p>\n<pre><code>Integer i = 10;  //装箱\nint n = i;   //拆箱\n\n</code></pre>\n<h3 id=\"10-amp-和-amp-amp-有什么区别？\"><a href=\"#10-amp-和-amp-amp-有什么区别？\" class=\"headerlink\" title=\"10.&amp; 和 &amp;&amp; 有什么区别？\"></a>10.&amp; 和 &amp;&amp; 有什么区别？</h3><p>&amp; 运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p>\n<p>&amp;&amp; 运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p>\n<p>&amp;&amp; 之所以称为短路运算是因为，如果 &amp;&amp; 左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用 &amp;&amp; 而不是 &amp;。</p>\n<p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用 &amp; 运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p>\n<p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p>\n<h3 id=\"11-switch-是否能作用在-byte-long-String-上？\"><a href=\"#11-switch-是否能作用在-byte-long-String-上？\" class=\"headerlink\" title=\"11.switch 是否能作用在 byte/long/String 上？\"></a>11.switch 是否能作用在 byte/long/String 上？</h3><p>Java5 以前 switch(expr) 中，expr 只能是 byte、short、char、int。</p>\n<p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p>\n<p>从 Java 7 开始，expr 还可以是字符串 (String)，但是长整型(long) 在目前所有的版本中都是不可以的。</p>\n<h3 id=\"12-break-continue-return-的区别及作用？\"><a href=\"#12-break-continue-return-的区别及作用？\" class=\"headerlink\" title=\"12.break ,continue ,return 的区别及作用？\"></a>12.break ,continue ,return 的区别及作用？</h3><ul>\n<li>break 跳出整个循环，不再执行循环 (<strong>结束当前的循环体</strong>)</li>\n<li>continue 跳出本次循环，继续执行下次循环 (<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li>\n<li>return 程序返回，不再执行下面的代码 (<strong>结束当前的方法 直接返回</strong>)</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642283.png\" alt=\"break 、continue 、return\"></p>\n<h3 id=\"13-用最有效率的方法计算-2-乘以-8？\"><a href=\"#13-用最有效率的方法计算-2-乘以-8？\" class=\"headerlink\" title=\"13. 用最有效率的方法计算 2 乘以 8？\"></a>13. 用最有效率的方法计算 2 乘以 8？</h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p>\n<h3 id=\"14-说说自增自减运算？看下这几个代码运行结果？\"><a href=\"#14-说说自增自减运算？看下这几个代码运行结果？\" class=\"headerlink\" title=\"14. 说说自增自减运算？看下这几个代码运行结果？\"></a>14. 说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++) 和自减运算符（–）。</p>\n<p>++ 和 – 运算符可以放在变量之前，也可以放在变量之后。</p>\n<p>当运算符放在变量之前时 (前缀)，先自增 / 减，再赋值；当运算符放在变量之后时 (后缀)，先赋值，再自增 / 减。</p>\n<p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值 (赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++ 输出的是 a 值。</p>\n<p>用一句口诀就是：“符号在前就先加 / 减，符号在后就后加 / 减”。</p>\n<blockquote>\n<p>看一下这段代码运行结果？</p>\n</blockquote>\n<pre><code class=\"java\">int i  = 1;\ni = i++;\nSystem.out.println(i);\n</code></pre>\n<p>答案是 1。有点离谱对不对。</p>\n<p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p>\n<p>相当于这样的代码：</p>\n<pre><code class=\"java\">int i = 1；\nint temp = i;\ni++；\ni = temp;\nSystem.out.println(i);\n</code></pre>\n<blockquote>\n<p>这段代码会输出什么？</p>\n</blockquote>\n<pre><code class=\"java\">int count = 0;\nfor(int i = 0;i &lt; 100;i++)\n&#123;\n    count = count++;\n&#125;\nSystem.out.println(&quot;count = &quot;+count);\n</code></pre>\n<p>答案是 0。</p>\n<p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p>\n<pre><code class=\"java\">int autoAdd(int count)\n&#123;\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n&#125;\n</code></pre>\n<p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h3 id=\"15-⾯向对象和⾯向过程的区别\"><a href=\"#15-⾯向对象和⾯向过程的区别\" class=\"headerlink\" title=\"15. ⾯向对象和⾯向过程的区别?\"></a>15. ⾯向对象和⾯向过程的区别?</h3><ul>\n<li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li>\n<li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li>\n</ul>\n<p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642679.png\" alt=\"面向对象和面向过程的区别\"></p>\n<h3 id=\"16-面向对象有哪些特性\"><a href=\"#16-面向对象有哪些特性\" class=\"headerlink\" title=\"16. 面向对象有哪些特性\"></a>16. 面向对象有哪些特性</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642081.png\" alt=\"面向对象三大特征\"></p>\n<ul>\n<li><p><strong>封装</strong></p>\n<p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p>\n</li>\n<li><p><strong>继承</strong></p>\n<p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p>\n</li>\n</ul>\n<blockquote>\n<p>关于继承有以下三个要点：</p>\n</blockquote>\n<ol>\n<li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</li>\n<li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</li>\n<li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</li>\n</ol>\n<ul>\n<li><p><strong>多态</strong></p>\n<p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p>\n<p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p>\n</li>\n</ul>\n<h3 id=\"17-重载（overload）和重写（override）的区别？\"><a href=\"#17-重载（overload）和重写（override）的区别？\" class=\"headerlink\" title=\"17. 重载（overload）和重写（override）的区别？\"></a>17. 重载（overload）和重写（override）的区别？</h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p>\n<ul>\n<li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li>\n<li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</li>\n</ul>\n<p>方法重载的规则：</p>\n<ol>\n<li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li>\n<li>重载与方法的返回值无关，存在于父类和子类，同类中。</li>\n<li>可以抛出不同的异常，可以有不同修饰符。</li>\n</ol>\n<h3 id=\"18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\"><a href=\"#18-访问修饰符-public、private、protected、以及不写（默认）时的区别？\" class=\"headerlink\" title=\"18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？\"></a>18. 访问修饰符 public、private、protected、以及不写（默认）时的区别？</h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031642672.png\" alt=\"访问修饰符和可见性\"></p>\n<h3 id=\"19-this-关键字有什么作用？\"><a href=\"#19-this-关键字有什么作用？\" class=\"headerlink\" title=\"19.this 关键字有什么作用？\"></a>19.this 关键字有什么作用？</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p>\n<p>this 的用法在 Java 中大体可以分为 3 种：</p>\n<ol>\n<li>普通的直接引用，this 相当于是指向当前对象本身</li>\n<li>形参与成员变量名字重名，用 this 来区分：</li>\n</ol>\n<pre><code class=\"java\">public Person(String name,int age)&#123;\n    this.name=name;\n    this.age=age;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>引用本类的构造函数</li>\n</ol>\n<h3 id=\"20-抽象类-abstract-class-和接口-interface-有什么区别？\"><a href=\"#20-抽象类-abstract-class-和接口-interface-有什么区别？\" class=\"headerlink\" title=\"20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？\"></a>20. 抽象类 (abstract class) 和接口 (interface) 有什么区别？</h3><ol>\n<li>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现 (Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</li>\n<li>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</li>\n<li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</li>\n<li>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</li>\n<li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</li>\n</ol>\n<blockquote>\n<ol>\n<li>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</li>\n<li>jdk9 的接⼝被允许定义私有⽅法 。</li>\n</ol>\n</blockquote>\n<p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p>\n<ol>\n<li>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</li>\n<li>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</li>\n<li>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</li>\n</ol>\n<h3 id=\"21-成员变量与局部变量的区别有哪些？\"><a href=\"#21-成员变量与局部变量的区别有哪些？\" class=\"headerlink\" title=\"21. 成员变量与局部变量的区别有哪些？\"></a>21. 成员变量与局部变量的区别有哪些？</h3><ol>\n<li><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</li>\n<li><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</li>\n<li><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外: 被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</li>\n</ol>\n<h3 id=\"22-静态变量和实例变量的区别？静态方法、实例方法呢？\"><a href=\"#22-静态变量和实例变量的区别？静态方法、实例方法呢？\" class=\"headerlink\" title=\"22. 静态变量和实例变量的区别？静态方法、实例方法呢？\"></a>22. 静态变量和实例变量的区别？静态方法、实例方法呢？</h3><blockquote>\n<p>静态变量和实例变量的区别？</p>\n</blockquote>\n<p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p>\n<p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p>\n<blockquote>\n<p>静态⽅法和实例⽅法有何不同?</p>\n</blockquote>\n<p>类似地。</p>\n<p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤ “ <strong>类名. ⽅法名</strong> “的⽅式，也可以使⽤” <strong>对象名. ⽅法名</strong> “ 的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p>\n<p><strong>实例⽅法</strong>：依存于类的实例，需要使用 “ <strong>对象名. ⽅法名</strong> “ 的⽅式调用；可以访问类的所有成员变量和方法。</p>\n<h3 id=\"24-final-关键字有什么作用？\"><a href=\"#24-final-关键字有什么作用？\" class=\"headerlink\" title=\"24.final 关键字有什么作用？\"></a>24.final 关键字有什么作用？</h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n<p>例如：</p>\n<pre><code class=\"java\">        final StringBuilder sb = new StringBuilder(&quot;abc&quot;);\n        sb.append(&quot;d&quot;);\n        System.out.println(sb);  //abcd\n</code></pre>\n<p>一张图说明：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643611.png\">final 修饰变量</p>\n</li>\n</ul>\n<h3 id=\"25-final、finally、finalize-的区别？\"><a href=\"#25-final、finally、finalize-的区别？\" class=\"headerlink\" title=\"25.final、finally、finalize 的区别？\"></a>25.final、finally、finalize 的区别？</h3><ul>\n<li><p>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p>\n</li>\n<li><p>finally 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p>\n</li>\n<li><p>finalize 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p>\n<p>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p>\n</li>\n</ul>\n<h3 id=\"26-和-equals-的区别？\"><a href=\"#26-和-equals-的区别？\" class=\"headerlink\" title=\"26.== 和 equals 的区别？\"></a>26.== 和 equals 的区别？</h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象 (基本数据类型 <strong>== <strong>比较的是值，引⽤数据类型</strong> ==</strong> 比较的是内存地址)。</p>\n<p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个 “相等” 一般也分两种情况：</p>\n<ul>\n<li>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过 “**==**” 比较这两个对象，还是相当于比较内存地址。</li>\n<li>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals() 方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</li>\n</ul>\n<p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p>\n<pre><code class=\"java\">public class Person &#123;\n    private String no;\n    private String name;\n\n    @Override\n    public boolean equals(Object o) &#123;\n        if (this == o) return true;\n        if (!(o instanceof Person)) return false;\n        Person person = (Person) o;\n        return Objects.equals(no, person.no) &amp;&amp;\n                Objects.equals(name, person.name);\n    &#125;\n\n    @Override\n    public int hashCode() &#123;\n        return Objects.hash(no, name);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"27-hashCode-与-equals\"><a href=\"#27-hashCode-与-equals\" class=\"headerlink\" title=\"27.hashCode 与 equals?\"></a>27.hashCode 与 equals?</h3><p>这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p>\n<blockquote>\n<p>什么是 HashCode？</p>\n</blockquote>\n<p>hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p>\n<pre><code class=\"java\">public native int hashCode();\n</code></pre>\n<p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对 (key-value)，它的特点是：能根据“键” 快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p>\n<blockquote>\n<p>为什么要有 hashCode？</p>\n</blockquote>\n<p>上面已经讲了，主要是在哈希表这种结构中用的到。</p>\n<p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。详细可见：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488788&idx=1&sn=01875e3e45515c2d57593cb7a01d0b6b&scene=21#wechat_redirect\">面渣逆袭：Java 集合连环三十问</a></p>\n<blockquote>\n<p>为什么重写 quals 时必须重写 hashCode ⽅法？</p>\n</blockquote>\n<p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p>\n<p>hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<blockquote>\n<p>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</p>\n</blockquote>\n<p>因为可能会<strong>碰撞</strong>， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。</p>\n<h3 id=\"28-Java-是值传递，还是引用传递？\"><a href=\"#28-Java-是值传递，还是引用传递？\" class=\"headerlink\" title=\"28.Java 是值传递，还是引用传递？\"></a>28.Java 是值传递，还是引用传递？</h3><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p>\n<p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p>\n<p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643980.png\">Java 引用数据值传递示意图</p>\n<h3 id=\"29-深拷贝和浅拷贝\"><a href=\"#29-深拷贝和浅拷贝\" class=\"headerlink\" title=\"29. 深拷贝和浅拷贝?\"></a>29. 深拷贝和浅拷贝?</h3><ul>\n<li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li>\n<li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li>\n</ul>\n<p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643003.png\">浅拷贝和深拷贝示意图</p>\n<p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p>\n<blockquote>\n<p>浅拷贝如何实现呢？</p>\n</blockquote>\n<p>Object 类提供的 clone() 方法可以非常简单地实现对象的浅拷贝。</p>\n<blockquote>\n<p>深拷贝如何实现呢？</p>\n</blockquote>\n<ul>\n<li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li>\n<li>序列化：可以先讲原对象序列化，再反序列化成拷贝对象。</li>\n</ul>\n<h3 id=\"30-Java-创建对象有哪几种方式？\"><a href=\"#30-Java-创建对象有哪几种方式？\" class=\"headerlink\" title=\"30.Java 创建对象有哪几种方式？\"></a>30.Java 创建对象有哪几种方式？</h3><p>Java 中有以下四种创建对象的方式:</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641345.png\">Java 创建对象的四种方式</p>\n<ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<p>前两者都需要显式地调用构造方法。对于 clone 机制, 需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p>\n<h1 id=\"常用类\"><a href=\"#常用类\" class=\"headerlink\" title=\"常用类\"></a>常用类</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"31-String-是-Java-基本数据类型吗？可以被继承吗？\"><a href=\"#31-String-是-Java-基本数据类型吗？可以被继承吗？\" class=\"headerlink\" title=\"31.String 是 Java 基本数据类型吗？可以被继承吗？\"></a>31.String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote>\n<p>String 是 Java 基本数据类型吗？</p>\n</blockquote>\n<p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p>\n<p>String 是一个比较特殊的引用数据类型。</p>\n<blockquote>\n<p>String 类可以继承吗？</p>\n</blockquote>\n<p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p>\n<h3 id=\"32-String-和-StringBuilder、StringBuffer-的区别？\"><a href=\"#32-String-和-StringBuilder、StringBuffer-的区别？\" class=\"headerlink\" title=\"32.String 和 StringBuilder、StringBuffer 的区别？\"></a>32.String 和 StringBuilder、StringBuffer 的区别？</h3><ul>\n<li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li>\n<li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li>\n<li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</li>\n</ul>\n<h3 id=\"33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\"><a href=\"#33-String-str1-new-String-“abc”-和-String-str2-“abc”-和-区别？\" class=\"headerlink\" title=\"33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？\"></a>33.String str1 = new String(“abc”) 和 String str2 = “abc” 和  区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643815.png\">堆与常量池中的 String</p>\n<p>但是不同的是，String str1 = new String(“abc”) 还会通过 new String() 在堆里创建一个 “abc” 字符串对象实例。所以后者可以理解为被前者包含。</p>\n<blockquote>\n<p>String s = new String(“abc”) 创建了几个对象？</p>\n</blockquote>\n<p>很明显，一个或两个。如果字符串常量池已经有 “abc”，则是一个；否则，两个。</p>\n<p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p>\n<ul>\n<li>一个是字符串字面量 “abc” 所对应的、字符串常量池中的实例</li>\n<li>另一个是通过 new String() 创建并初始化的，内容与 “abc” 相同的实例，在堆中。</li>\n</ul>\n<h3 id=\"34-String-不是不可变类吗？字符串拼接是如何实现的？\"><a href=\"#34-String-不是不可变类吗？字符串拼接是如何实现的？\" class=\"headerlink\" title=\"34.String 不是不可变类吗？字符串拼接是如何实现的？\"></a>34.String 不是不可变类吗？字符串拼接是如何实现的？</h3><p>String 的确是不可变的，“**+**” 的拼接操作，其实是会生成新的对象。</p>\n<p>例如：</p>\n<pre><code>String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nString ab = a + b;\n\n</code></pre>\n<p>在 <strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p>\n<p>内存如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643474.png\">jdk1.8 之前的字符串拼接</p>\n<p>在 <strong>Java8 时</strong> JDK 对 “+” 号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对 “+” 号进行处理。</p>\n<p>下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。</p>\n<pre><code class=\"java\">stack=2, locals=4, args_size=1\n     0: ldc           #2                  // String hello\n     2: astore_1\n     3: ldc           #3                  // String world!\n     5: astore_2\n     6: new           #4                  // class java/lang/StringBuilder\n     9: dup\n    10: invokespecial #5                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V\n    13: aload_1\n    14: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    17: aload_2\n    18: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n    24: astore_3\n    25: return\n\n\n</code></pre>\n<p>也就是说其实上面的代码其实相当于：</p>\n<pre><code class=\"java\">String a = &quot;hello &quot;;\nString b = &quot;world!&quot;;\nStringBuilder sb = new StringBuilder();\nsb.append(a);\nsb.append(b);\nString ab = sb.toString();\n\n</code></pre>\n<p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。</p>\n<p>当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。</p>\n<h3 id=\"35-intern-方法有什么作用？\"><a href=\"#35-intern-方法有什么作用？\" class=\"headerlink\" title=\"35.intern 方法有什么作用？\"></a>35.intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p>\n<pre><code class=\"java\">     * &lt;p&gt;\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this &#123;@code String&#125; object as determined by\n     * the &#123;@link #equals(Object)&#125; method, then the string from the pool is\n     * returned. Otherwise, this &#123;@code String&#125; object is added to the\n     * pool and a reference to this &#123;@code String&#125; object is returned.\n     * &lt;p&gt;\n\n</code></pre>\n<p>意思也很好懂：</p>\n<ul>\n<li>如果当前字符串内容存在于字符串常量池（即 equals() 方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li>\n<li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li>\n</ul>\n<h2 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h2><h3 id=\"36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\"><a href=\"#36-Integer-a-127，Integer-b-127；Integer-c-128，Integer-d-128；，相等吗\" class=\"headerlink\" title=\"36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?\"></a>36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h3><p>答案是 a 和 b 相等，c 和 d 不相等。</p>\n<ul>\n<li>对于基本数据类型 == 比较的值</li>\n<li>对于引用数据类型 == 比较的是地址</li>\n</ul>\n<p>Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。</p>\n<p>如果整型字面量的值在 - 128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false</p>\n<pre><code class=\"java\">    public static void main(String[] args) &#123;\n        Integer a = 127;\n        Integer b = 127;\n        Integer b1 = new Integer(127);\n        System.out.println(a == b); //true\n        System.out.println(b==b1);  //false\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d);  //false\n    &#125;\n\n</code></pre>\n<blockquote>\n<p>什么是 Integer 缓存？</p>\n</blockquote>\n<p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p>\n<p>实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031643743.png\">Integer.valueOf</p>\n<p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。</p>\n<p>IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。</p>\n<pre><code class=\"java\"> private static class IntegerCache &#123;\n     ……\n     static &#123;\n            //创建Integer对象存储\n            for(int k = 0; k &lt; cache.length; k++)\n                cache[k] = new Integer(j++);\n         ……\n     &#125; \n &#125;\n\n</code></pre>\n<h3 id=\"37-String-怎么转成-Integer-的？原理？\"><a href=\"#37-String-怎么转成-Integer-的？原理？\" class=\"headerlink\" title=\"37.String 怎么转成 Integer 的？原理？\"></a>37.String 怎么转成 Integer 的？原理？</h3><p>PS: 这道题印象中在一些面经中出场过几次。</p>\n<p>String 转成 Integer，主要有两个方法：</p>\n<ul>\n<li>Integer.parseInt(String s)</li>\n<li>Integer.valueOf(String s)</li>\n</ul>\n<p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p>\n<p>抛去一些边界之类的看看核心代码：</p>\n<pre><code>public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    &#123;\n\n        int result = 0;\n        //是否是负数\n        boolean negative = false;\n        //char字符数组下标和长度\n        int i = 0, len = s.length();\n        ……\n        int digit;\n        //判断字符长度是否大于0，否则抛出异常\n        if (len &gt; 0) &#123;\n            …… \n            while (i &lt; len) &#123;\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                //返回指定基数中字符表示的数值。（此处是十进制数值）\n                digit = Character.digit(s.charAt(i++),radix);\n                //进制位乘以数值\n                result *= radix;      \n                result -= digit;\n            &#125;\n        &#125; \n        //根据上面得到的是否负数，返回相应的值\n        return negative ? result : -result;\n    &#125;\n\n\n</code></pre>\n<p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644037.png\">parseInt 示意图</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"38-Object-类的常见方法\"><a href=\"#38-Object-类的常见方法\" class=\"headerlink\" title=\"38.Object 类的常见方法?\"></a>38.Object 类的常见方法?</h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644047.png\">Object 类的方法</p>\n<p><strong>对象比较</strong>：</p>\n<ul>\n<li>public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。</li>\n<li>public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。</li>\n</ul>\n<p><strong>对象拷贝</strong>：</p>\n<ul>\n<li>protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。</li>\n</ul>\n<p><strong>对象转字符串：</strong></p>\n<ul>\n<li>public String toString()：返回类的名字 @实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li>\n</ul>\n<p><strong>多线程调度：</strong></p>\n<ul>\n<li>public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程 (监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li>\n<li>public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li>\n<li>public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li>\n<li>public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上 nanos 毫秒。</li>\n<li>public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</li>\n</ul>\n<p><strong>反射：</strong></p>\n<ul>\n<li>public final native Class&lt;?&gt; getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</li>\n</ul>\n<p><strong>垃圾回收：</strong></p>\n<ul>\n<li>protected void finalize() throws Throwable ：通知垃圾收集器回收对象。</li>\n</ul>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h3 id=\"39-Java-中异常处理体系\"><a href=\"#39-Java-中异常处理体系\" class=\"headerlink\" title=\"39.Java 中异常处理体系?\"></a>39.Java 中异常处理体系?</h3><p>Java 的异常体系是分为多层的。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644491.png\">Java 异常体系</p>\n<p><code>Throwable</code>是 Java 语言中所有错误或异常的基类。Throwable 又分为<code>Error</code>和<code>Exception</code>，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。<code>Exception</code>是程序问题导致的异常，又分为两种：</p>\n<ul>\n<li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。</li>\n<li>RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li>\n</ul>\n<h3 id=\"40-异常的处理方式？\"><a href=\"#40-异常的处理方式？\" class=\"headerlink\" title=\"40. 异常的处理方式？\"></a>40. 异常的处理方式？</h3><p>针对异常的处理主要有两种方式：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644904.png\">异常处理</p>\n<ul>\n<li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li>\n</ul>\n<p>抛出异常有三种形式，一是 throw, 一个 throws，还有一种系统自动抛异常。</p>\n<p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p>\n<ul>\n<li><strong>try catch 捕获异常</strong></li>\n</ul>\n<p>在 catch 语句块中补货发生的异常，并进行处理。</p>\n<pre><code class=\"java\">       try &#123;\n            //包含可能会出现异常的代码以及声明异常的方法\n        &#125;catch(Exception e) &#123;\n            //捕获异常并进行处理\n        &#125;finally &#123;                                                       &#125;\n            //可选，必执行的代码\n        &#125;\n\n</code></pre>\n<p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p>\n<h3 id=\"41-三道经典异常处理代码题\"><a href=\"#41-三道经典异常处理代码题\" class=\"headerlink\" title=\"41. 三道经典异常处理代码题\"></a>41. 三道经典异常处理代码题</h3><blockquote>\n<p>题目 1</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test());\n    &#125;\n    public static int test() &#123;\n        try &#123;\n            return 1;\n        &#125; catch (Exception e) &#123;\n            return 2;\n        &#125; finally &#123;\n            System.out.print(&quot;3&quot;);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：31。</p>\n<p>try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。</p>\n<blockquote>\n<p>题目 2</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test1());\n    &#125;\n    public static int test1() &#123;\n        try &#123;\n            return 2;\n        &#125; finally &#123;\n            return 3;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：3。</p>\n<p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p>\n<p>finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。</p>\n<blockquote>\n<p>题目 3</p>\n</blockquote>\n<pre><code class=\"java\">public class TryDemo &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(test1());\n    &#125;\n    public static int test1() &#123;\n        int i = 0;\n        try &#123;\n            i = 2;\n            return i;\n        &#125; finally &#123;\n            i = 3;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>执行结果：2。</p>\n<p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p>\n<p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p>\n<h1 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I/O\"></a>I/O</h1><h3 id=\"42-Java-中-IO-流分为几种\"><a href=\"#42-Java-中-IO-流分为几种\" class=\"headerlink\" title=\"42.Java 中 IO 流分为几种?\"></a>42.Java 中 IO 流分为几种?</h3><p>流按照不同的特点，有很多种划分方式。</p>\n<ul>\n<li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li>\n</ul>\n<p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p>\n<ul>\n<li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>\n<li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>\n</ul>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644073.jpeg\">IO - 操作方式分类 - 图片来源参考 [2]</p>\n<blockquote>\n<p>IO 流用到了什么设计模式？</p>\n</blockquote>\n<p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p>\n<p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644242.png\">Java IO 流用到装饰器模式</p>\n<h3 id=\"43-既然有了字节流-为什么还要有字符流\"><a href=\"#43-既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"43. 既然有了字节流, 为什么还要有字符流?\"></a>43. 既然有了字节流, 为什么还要有字符流?</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p>\n<p>所以， I/O  流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h3 id=\"44-BIO、NIO、AIO？\"><a href=\"#44-BIO、NIO、AIO？\" class=\"headerlink\" title=\"44.BIO、NIO、AIO？\"></a>44.BIO、NIO、AIO？</h3><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644132.png\">BIO、NIO、AIO</p>\n<p><strong>BIO</strong>(blocking I/O) ：就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善 (实现多个客户连接服务器)。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644898.png\">BIO、NIO、AIO</p>\n<p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p>\n<p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入 / 输出的新特性，被统称为 NIO(即 New IO)。</p>\n<p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644133.png\">NIO 线程</p>\n<p>NIO 的数据是面向<strong>缓冲区 Buffer</strong> 的，必须从 Buffer 中读取或写入。</p>\n<p>所以完整的 NIO 示意图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644272.png\">NIO 完整示意图</p>\n<p>可以看出，NIO 的运行机制：</p>\n<ul>\n<li>每个 Channel 对应一个 Buffer。</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel。</li>\n<li>Selector 会根据不同的事件，在各个通道上切换。</li>\n<li>Buffer 是内存块，底层是数据。</li>\n</ul>\n<p><strong>AIO</strong>：JDK 7 引入了 Asynchronous I/O，是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p>\n<p>PS：关于同步阻塞 IO、同步不阻塞 IO、异步不阻塞 IO 的相关概念可以查看：<a href=\"https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247488406&idx=1&sn=93e2435b319c42497a4efa966ddc9237&scene=21#wechat_redirect\">面试字节，被操作系统问挂了</a></p>\n<h1 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h1><h3 id=\"45-什么是序列化？什么是反序列化？\"><a href=\"#45-什么是序列化？什么是反序列化？\" class=\"headerlink\" title=\"45. 什么是序列化？什么是反序列化？\"></a>45. 什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p>\n<p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641251.png\">序列化和反序列化</p>\n<p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p>\n<blockquote>\n<p>Serializable 接口有什么用？</p>\n</blockquote>\n<p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p>\n<blockquote>\n<p>serialVersionUID 又有什么用？</p>\n</blockquote>\n<p>serialVersionUID 就是起验证作用。</p>\n<pre><code>private static final long serialVersionUID = 1L;\n\n</code></pre>\n<p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p>\n<p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p>\n<p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p>\n<p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p>\n<p>因为类的结构变了，所以 serialVersionUID 就不一致。</p>\n<blockquote>\n<p>Java 序列化不包含静态变量？</p>\n</blockquote>\n<p>序列化的时候是不包含静态变量的。</p>\n<blockquote>\n<p>如果有些变量不想序列化，怎么办？</p>\n</blockquote>\n<p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p>\n<p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p>\n<h3 id=\"46-说说有几种序列化方式？\"><a href=\"#46-说说有几种序列化方式？\" class=\"headerlink\" title=\"46. 说说有几种序列化方式？\"></a>46. 说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644610.png\">Java 常见序列化方式</p>\n<ul>\n<li>Java 对象流列化 ：Java 原生序列化方法即通过 Java 原生流 (InputStream 和 OutputStream 之间的转化) 的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectI叩utStream</code>。</li>\n<li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li>\n<li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li>\n</ul>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><h3 id=\"47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"><a href=\"#47-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？\" class=\"headerlink\" title=\"47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\"></a>47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><blockquote>\n<p>什么是泛型？</p>\n</blockquote>\n<p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\nlist.add(12);\n//这里直接添加会报错\nlist.add(&quot;a&quot;);\nClass&lt;? extends List&gt; clazz = list.getClass();\nMethod add = clazz.getDeclaredMethod(&quot;add&quot;, Object.class);\n//但是通过反射添加，是可以的\nadd.invoke(list, &quot;kl&quot;);\n\nSystem.out.println(list);\n\n</code></pre>\n<p>泛型一般有三种使用方式: <strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644473.png\">泛型类、泛型接口、泛型方法</p>\n<p><strong>1. 泛型类</strong>：</p>\n<pre><code>//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic&lt;T&gt;&#123;\n\n    private T key;\n\n    public Generic(T key) &#123;\n        this.key = key;\n    &#125;\n\n    public T getKey()&#123;\n        return key;\n    &#125;\n&#125;\n\n</code></pre>\n<p>如何实例化泛型类：</p>\n<pre><code>Generic&lt;Integer&gt; genericInteger = new Generic&lt;Integer&gt;(123456);\n\n</code></pre>\n<p><strong>2. 泛型接口</strong> ：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;T&gt;&#123;\n    @Override\n    public T method() &#123;\n        return null;\n    &#125;\n&#125;\n\n</code></pre>\n<p>实现泛型接口，指定类型：</p>\n<pre><code>class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;\n    @Override\n    public String method() &#123;\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>3. 泛型方法</strong> ：</p>\n<pre><code>   public static &lt; E &gt; void printArray( E[] inputArray )\n   &#123;\n         for ( E element : inputArray )&#123;\n            System.out.printf( &quot;%s &quot;, element );\n         &#125;\n         System.out.println();\n    &#125;\n\n</code></pre>\n<p>使用：</p>\n<pre><code>// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = &#123; 1, 2, 3 &#125;;\nString[] stringArray = &#123; &quot;Hello&quot;, &quot;World&quot; &#125;;\nprintArray( intArray  );\nprintArray( stringArray  );\n\n</code></pre>\n<blockquote>\n<p>泛型常用的通配符有哪些？</p>\n</blockquote>\n<p><strong>常用的通配符为：T，E，K，V，？</strong></p>\n<ul>\n<li>？表示不确定的 java 类型</li>\n<li>T (type) 表示具体的一个 java 类型</li>\n<li>K V (key value) 分别代表 java 键值中的 Key Value</li>\n<li>E (element) 代表 Element</li>\n</ul>\n<blockquote>\n<p>什么是泛型擦除？</p>\n</blockquote>\n<p>所谓的泛型擦除，官方名叫 “类型擦除”。</p>\n<p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p>\n<p>也就是说，在运行的时候是没有泛型的。</p>\n<p>例如这段代码，往一群猫里放条狗：</p>\n<pre><code>LinkedList&lt;Cat&gt; cats = new LinkedList&lt;Cat&gt;();\nLinkedList list = cats;  // 注意我在这里把范型去掉了，但是list和cats是同一个链表！\nlist.add(new Dog());  // 完全没问题！\n\n</code></pre>\n<p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java <strong>运行</strong>环境）看来和下面这段没区别：</p>\n<pre><code>LinkedList cats = new LinkedList();  // 注意：没有范型！\nLinkedList list = cats;\nlist.add(new Dog());\n\n</code></pre>\n<p>为什么要类型擦除呢？</p>\n<p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h3 id=\"48-说一下你对注解的理解？\"><a href=\"#48-说一下你对注解的理解？\" class=\"headerlink\" title=\"48. 说一下你对注解的理解？\"></a>48. 说一下你对注解的理解？</h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644374.png\">Java 注解和帽子</p>\n<p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p>\n<p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p>\n<p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p>\n<p>注解生命周期有三大类，分别是：</p>\n<ul>\n<li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li>\n<li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li>\n<li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li>\n</ul>\n<p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p>\n<p>像常见的：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641804.png\">Override 注解</p>\n<p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p>\n<p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031644704.png\">Autowired 注解</p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><h3 id=\"49-什么是反射？应用？原理？\"><a href=\"#49-什么是反射？应用？原理？\" class=\"headerlink\" title=\"49. 什么是反射？应用？原理？\"></a>49. 什么是反射？应用？原理？</h3><blockquote>\n<p>什么是反射？</p>\n</blockquote>\n<p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种 “正射”，这种方式在编译时候就确定了类型信息。</p>\n<p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p>\n<p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>\n<p>反射最核心的四个类：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641099.png\">Java 反射相关类</p>\n<blockquote>\n<p>反射的应用场景？</p>\n</blockquote>\n<p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p>\n<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p>\n<p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p>\n<p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p>\n<p>这些都是因为我们可以基于反射操作类，然后获取到类 / 属性 / 方法 / 方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类 / 属性 / 方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p>\n<blockquote>\n<p>反射的原理？</p>\n</blockquote>\n<p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码 (.class) 文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p>\n<h1 id=\"JDK1-8-新特性\"><a href=\"#JDK1-8-新特性\" class=\"headerlink\" title=\"JDK1.8 新特性\"></a>JDK1.8 新特性</h1><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p>\n<h3 id=\"50-JDK1-8-都有哪些新特性？\"><a href=\"#50-JDK1-8-都有哪些新特性？\" class=\"headerlink\" title=\"50.JDK1.8 都有哪些新特性？\"></a>50.JDK1.8 都有哪些新特性？</h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645536.png\">JDK1.8 主要新特性</p>\n<ul>\n<li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p>\n</li>\n<li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p>\n</li>\n<li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p>\n<p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p>\n<p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>\n</li>\n<li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p>\n</li>\n<li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p>\n</li>\n</ul>\n<h3 id=\"51-Lambda-表达式了解多少？\"><a href=\"#51-Lambda-表达式了解多少？\" class=\"headerlink\" title=\"51.Lambda 表达式了解多少？\"></a>51.Lambda 表达式了解多少？</h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p>\n<p>比如我们以前使用 Runnable 创建并运行线程：</p>\n<pre><code>        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                System.out.println(&quot;Thread is running before Java8!&quot;);\n            &#125;\n        &#125;).start();\n\n</code></pre>\n<p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p>\n<pre><code>new Thread( () -&gt; System.out.println(&quot;Thread is running since Java8!&quot;) ).start();\n\n</code></pre>\n<p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p>\n<p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p>\n<blockquote>\n<p>Java8 有哪些内置函数式接口？</p>\n</blockquote>\n<p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p>\n<p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p>\n<h3 id=\"52-Optional-了解吗？\"><a href=\"#52-Optional-了解吗？\" class=\"headerlink\" title=\"52.Optional 了解吗？\"></a>52.Optional 了解吗？</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p>\n<p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p>\n<pre><code>Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);\n\noptional.isPresent();           // true\noptional.get();                 // &quot;bam&quot;\noptional.orElse(&quot;fallback&quot;);    // &quot;bam&quot;\n\noptional.ifPresent((s) -&gt; System.out.println(s.charAt(0)));     // &quot;b&quot;\n\n</code></pre>\n<h3 id=\"53-Stream-流用过吗？\"><a href=\"#53-Stream-流用过吗？\" class=\"headerlink\" title=\"53.Stream 流用过吗？\"></a>53.Stream 流用过吗？</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 _终端操作_。终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p>\n<p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p>\n<pre><code>List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();\nstringCollection.add(&quot;ddd2&quot;);\nstringCollection.add(&quot;aaa2&quot;);\nstringCollection.add(&quot;bbb1&quot;);\nstringCollection.add(&quot;aaa1&quot;);\nstringCollection.add(&quot;bbb3&quot;);\nstringCollection.add(&quot;ccc&quot;);\nstringCollection.add(&quot;bbb2&quot;);\nstringCollection.add(&quot;ddd1&quot;);\n\n</code></pre>\n<ul>\n<li><strong>Filter 过滤</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa2&quot;, &quot;aaa1&quot;\n\n\n</code></pre>\n<ul>\n<li><strong>Sorted 排序</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .sorted()\n    .filter((s) -&gt; s.startsWith(&quot;a&quot;))\n    .forEach(System.out::println);\n\n// &quot;aaa1&quot;, &quot;aaa2&quot;\n\n</code></pre>\n<ul>\n<li><strong>Map 转换</strong></li>\n</ul>\n<pre><code>stringCollection\n    .stream()\n    .map(String::toUpperCase)\n    .sorted((a, b) -&gt; b.compareTo(a))\n    .forEach(System.out::println);\n\n// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;\n\n</code></pre>\n<ul>\n<li><strong>Match 匹配</strong></li>\n</ul>\n<pre><code>// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true\nboolean anyStartsWithA =\n    stringCollection\n        .stream()\n        .anyMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(anyStartsWithA);      // true\n\n// 验证 list 中 string 是否都是以 a 开头的\nboolean allStartsWithA =\n    stringCollection\n        .stream()\n        .allMatch((s) -&gt; s.startsWith(&quot;a&quot;));\n\nSystem.out.println(allStartsWithA);      // false\n\n// 验证 list 中 string 是否都不是以 z 开头的,\nboolean noneStartsWithZ =\n    stringCollection\n        .stream()\n        .noneMatch((s) -&gt; s.startsWith(&quot;z&quot;));\n\nSystem.out.println(noneStartsWithZ);      // true\n\n</code></pre>\n<ul>\n<li><strong>Count 计数</strong></li>\n</ul>\n<p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p>\n<pre><code>// 先对 list 中字符串开头为 b 进行过滤，让后统计数量\nlong startsWithB =\n    stringCollection\n        .stream()\n        .filter((s) -&gt; s.startsWith(&quot;b&quot;))\n        .count();\n\nSystem.out.println(startsWithB);    // 3\n\n</code></pre>\n<ul>\n<li><strong>Reduce</strong></li>\n</ul>\n<p><code>Reduce</code> 中文翻译为：_减少、缩小_。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p>\n<pre><code>Optional&lt;String&gt; reduced =\n    stringCollection\n        .stream()\n        .sorted()\n        .reduce((s1, s2) -&gt; s1 + &quot;#&quot; + s2);\n\nreduced.ifPresent(System.out::println);\n// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;\n\n</code></pre>\n<p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031645480.png\">Java Stream 流</p>\n<blockquote>\n<p>简单事情重复做，重复事情认真做，认真事情有创造性地做。</p>\n<p>我是<strong>三分恶</strong>，一个能文能武的程序员，<strong>点赞</strong>、<strong>关注</strong>不迷路，咱们下期见！</p>\n</blockquote>\n<p><strong>参考：</strong></p>\n<ul>\n<li>[1]. Java 基础高频面试题（2021 年最新版）：<a href=\"https://blog.csdn.net/v123411739/article/details/115364158\">https://blog.csdn.net/v123411739/article/details/115364158</a></li>\n<li>[2].2.7w 字！Java 基础面试题 / 知识点总结！（2021 最新版）：<a href=\"https://segmentfault.com/a/1190000039897611\">https://segmentfault.com/a/1190000039897611</a></li>\n<li>[3]. 面试题系列第 8 篇：谈谈 String、StringBuffer、StringBuilder 的区别？：<a href=\"https://blog.csdn.net/wo541075754/article/details/108604389\">https://blog.csdn.net/wo541075754/article/details/108604389</a></li>\n<li>[4]. 面试题系列第 2 篇：new String() 创建几个对象？有你不知道的：<a href=\"https://cloud.tencent.com/developer/article/1686226\">https://cloud.tencent.com/developer/article/1686226</a></li>\n<li>[5]. 面试题系列第 6 篇：JVM 字符串常量池及 String 的 intern 方法详解？：<a href=\"https://hello.blog.csdn.net/article/details/108374856\">https://hello.blog.csdn.net/article/details/108374856</a></li>\n<li>[6]. 2W 字，52 道 Java 热点必考题，含答案，图文并茂：<a href=\"https://juejin.cn/post/6938224339347046408#heading-12\">https://juejin.cn/post/6938224339347046408#heading-12</a></li>\n<li>[7]. BIO、NIO、AIO、Netty 面试题（总结最全面的面试题！！！）：<a href=\"https://juejin.cn/post/6844904125700784136\">https://juejin.cn/post/6844904125700784136</a></li>\n<li>[8]. Java 基础知识面试题（2020 最新版）：<a href=\"https://thinkwon.blog.csdn.net/article/details/104390612\">https://thinkwon.blog.csdn.net/article/details/104390612</a></li>\n<li>[9].Java 基础面试题（2021 最新版）：<a href=\"https://www.jianshu.com/p/7687559d29a3\">https://www.jianshu.com/p/7687559d29a3</a></li>\n<li>[10]. 干货 | Java8 新特性教程 ：<a href=\"https://juejin.cn/post/6844903761547100168#heading-5\">https://juejin.cn/post/6844903761547100168#heading-5</a></li>\n<li>[11]. 面向对象和面向过程分别是什么？：<a href=\"https://www.zhihu.com/question/28790424\">https://www.zhihu.com/question/28790424</a>)</li>\n<li>[12]. 《疯狂 Java 讲义》</li>\n<li>[13].3. 彤哥说 netty 系列之 Java BIO NIO AIO 进化史：<a href=\"https://segmentfault.com/a/1190000021047883\">https://segmentfault.com/a/1190000021047883</a></li>\n<li>[14]. 什么是泛型擦除？：<a href=\"https://www.zhihu.com/question/452958728/answer/1817841881\">https://www.zhihu.com/question/452958728/answer/1817841881</a></li>\n<li>[15]. 学会反射后，我被录取了（干货）：<a href=\"https://www.cnblogs.com/cxuanBlog/p/13551797.html\">https://www.cnblogs.com/cxuanBlog/p/13551797.html</a></li>\n</ul>\n<p>··········  END  ··············</p>\n<p>公众号</p>\n<p>专属面试小册 / 一对一交流 / 简历修改 / 专属求职指南，欢迎加入 <a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球</strong></a>。这是星球的详细介绍以及加入方法：<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&token=1647609083&lang=zh_CN&scene=21#wechat_redirect\"><strong>JavaGuide 知识星球详细介绍</strong></a> （一定一定一定确定自己真的需要再加入，一定一定要看完详细介绍之后再加我）。</p>\n<p>如果本文对你有帮助的话，欢迎<strong>点赞</strong> &amp; <strong>在看</strong> &amp; <strong>分享</strong>，这对我继续分享 &amp; 创作优质文章非常重要。感谢🙏🏻</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247517286&idx=1&sn=5d6a6e0f82ce6cb7b3164a48d5f95e71&chksm=cea1cbadf9d642bb74c69d6b8e7ecea879d440587d561563cfdcfadb87cfe7014e4caf6b388b&scene=21#wechat_redirect\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203031641283.png\"></a></p>\n"},{"title":"深入理解幂等性","summary":"一或多次请求某个资源对资源本身应具同样结果","abbrlink":16712,"date":"2022-02-24T03:41:03.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![cow-g348e762cd_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021721701.jpg)\n\n<!--more-->\n\n# 什么是幂等性\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.cnblogs.com](https://www.cnblogs.com/javalyy/p/8882144.html)\n\n​\tHTTP/1.1 中对幂等性的定义是：一次和多次请求某一个资源**对于资源本身**应该具有同样的结果（网络超时等问题除外）。也就是说，**其任意多次执行对资源本身所产生的影响均与一次执行的影响相同**。\n\n\n这里需要关注几个重点：\n\n1.  幂等不仅仅只是一次（或多次）请求对资源没有副作用（比如查询数据库操作，没有增删改，因此没有对数据库有任何影响）。\n\n2.  幂等还包括第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。\n\n3.  幂等关注的是以后的多次请求是否对资源产生的副作用，而不关注结果。\n\n4.  网络超时等问题，不是幂等的讨论范围。\n\n幂等性是系统服务对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。\n\n什么情况下需要幂等\n---------\n\n业务开发中，经常会遇到重复提交的情况，无论是由于网络问题无法收到请求结果而重新发起请求，或是前端的操作抖动而造成重复提交情况。 在交易系统，支付系统这种重复提交造成的问题有尤其明显，比如：\n\n1.  用户在 APP 上连续点击了多次提交订单，后台应该只产生一个订单；\n\n2.  向支付宝发起支付请求，由于网络问题或系统 BUG 重发，支付宝应该只扣一次钱。 **很显然，声明幂等的服务认为，外部调用者会存在多次调用的情况，为了防止外部多次调用对系统数据状态的发生多次改变，将服务设计成幂等。**\n\n幂等 VS 防重\n--------\n\n上面例子中小明遇到的问题，只是重复提交的情况，和服务幂等的初衷是不同的。重复提交是在第一次请求已经成功的情况下，人为的进行多次操作，导致不满足幂等要求的服务多次改变状态。而幂等更多使用的情况是第一次请求不知道结果（比如超时）或者失败的异常情况下，发起多次请求，目的是多次确认第一次请求成功，却不会因多次请求而出现多次的状态变化。\n\n什么情况下需要保证幂等性\n------------\n\n以 SQL 为例，有下面三种场景，只有第三种场景需要开发人员使用其他策略保证幂等性：\n\n1.  `SELECT col1 FROM tab1 WHER col2=2`，无论执行多少次都不会改变状态，是天然的幂等。\n\n2.  `UPDATE tab1 SET col1=1 WHERE col2=2`，无论执行**成功**多少次**状态**都是一致的，因此也是幂等操作。\n\n3.  `UPDATE tab1 SET col1=col1+1 WHERE col2=2`，每次执行的结果都会发生变化，这种不是幂等的。\n\n为什么要设计幂等性的服务\n------------\n\n幂等可以使得客户端逻辑处理变得简单，但是却以服务逻辑变得复杂为代价。满足幂等服务的需要在逻辑中至少包含两点：\n\n1.  首先去查询上一次的执行状态，如果没有则认为是第一次请求\n\n2.  在服务改变状态的业务逻辑前，保证防重复提交的逻辑\n\n幂等的不足\n-----\n\n幂等是为了简化客户端逻辑处理，却增加了服务提供者的逻辑和成本，是否有必要，需要根据具体场景具体分析，因此除了业务上的特殊要求外，尽量不提供幂等的接口。\n\n1.  增加了额外控制幂等的业务逻辑，复杂化了业务功能；\n\n2.  把并行执行的功能改为串行执行，降低了执行效率。\n\n保证幂等策略\n------\n\n幂等需要通过**唯一的业务单号**来保证。也就是说相同的业务单号，认为是同一笔业务。使用这个唯一的业务单号来确保，后面多次的相同的业务单号的处理逻辑和执行效果是一致的。 下面以支付为例，在不考虑并发的情况下，实现幂等很简单：①先查询一下订单是否已经支付过，②如果已经支付过，则返回支付成功；如果没有支付，进行支付流程，修改订单状态为‘已支付’。\n\n防重复提交策略\n-------\n\n上述的保证幂等方案是分成两步的，第②步依赖第①步的查询结果，无法保证原子性的。在高并发下就会出现下面的情况：第二次请求在第一次请求第②步订单状态还没有修改为‘已支付状态’的情况下到来。既然得出了这个结论，余下的问题也就变得简单：把查询和变更状态操作加锁，将并行操作改为串行操作。\n\n### 乐观锁\n\n如果只是更新**已有**的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过 version 来做乐观锁，这样既能保证执行效率，又能保证幂等。例如： `UPDATE tab1 SET col1=1,version=version+1 WHERE version=#version#` 不过，乐观锁存在失效的情况，就是常说的 ABA 问题，不过如果 version 版本一直是自增的就不会出现 ABA 的情况。（从网上找了一张图片很能说明乐观锁，引用过来，出自 Mybatis 对乐观锁的支持）\n\n### 防重表\n\n使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，当然订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。**可以看出防重表作用是加锁的功能。**\n\n### 分布式锁\n\n这里使用的防重表可以使用分布式锁代替，比如 Redis。订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号。查询订单支付已经支付，如果没有则进行支付，支付完成后删除该订单号的 Key。通过 Redis 做到了分布式锁，只有这次订单订单支付请求完成，下次请求才能进来。相比去重表，将放并发做到了缓存中，较为高效。思路相同，**同一时间只能完成一次支付请求**。\n\n### token 令牌\n\n这种方式分成两个阶段：申请 token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 token 的请求，支付系统将 token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 token 发起支付请求，支付系统会检查 Redis 中是否存在该 token，如果存在，表示第一次发起支付请求，删除缓存中 token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。 实际上这里的 token 是一个信物，支付系统根据 token 确认，你是你妈的孩子。不足是需要系统间交互两次，流程较上述方法复杂。\n\n### 支付缓冲区\n\n把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。","source":"_posts/2022-02-24-深入理解幂等性.md","raw":"---\ntitle: 深入理解幂等性\ntags: 幂等性\ncategories: 后端\nsummary: 一或多次请求某个资源对资源本身应具同样结果\nabbrlink: 16712\ndate: 2022-02-24 11:41:03\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![cow-g348e762cd_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021721701.jpg)\n\n<!--more-->\n\n# 什么是幂等性\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.cnblogs.com](https://www.cnblogs.com/javalyy/p/8882144.html)\n\n​\tHTTP/1.1 中对幂等性的定义是：一次和多次请求某一个资源**对于资源本身**应该具有同样的结果（网络超时等问题除外）。也就是说，**其任意多次执行对资源本身所产生的影响均与一次执行的影响相同**。\n\n\n这里需要关注几个重点：\n\n1.  幂等不仅仅只是一次（或多次）请求对资源没有副作用（比如查询数据库操作，没有增删改，因此没有对数据库有任何影响）。\n\n2.  幂等还包括第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。\n\n3.  幂等关注的是以后的多次请求是否对资源产生的副作用，而不关注结果。\n\n4.  网络超时等问题，不是幂等的讨论范围。\n\n幂等性是系统服务对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。\n\n什么情况下需要幂等\n---------\n\n业务开发中，经常会遇到重复提交的情况，无论是由于网络问题无法收到请求结果而重新发起请求，或是前端的操作抖动而造成重复提交情况。 在交易系统，支付系统这种重复提交造成的问题有尤其明显，比如：\n\n1.  用户在 APP 上连续点击了多次提交订单，后台应该只产生一个订单；\n\n2.  向支付宝发起支付请求，由于网络问题或系统 BUG 重发，支付宝应该只扣一次钱。 **很显然，声明幂等的服务认为，外部调用者会存在多次调用的情况，为了防止外部多次调用对系统数据状态的发生多次改变，将服务设计成幂等。**\n\n幂等 VS 防重\n--------\n\n上面例子中小明遇到的问题，只是重复提交的情况，和服务幂等的初衷是不同的。重复提交是在第一次请求已经成功的情况下，人为的进行多次操作，导致不满足幂等要求的服务多次改变状态。而幂等更多使用的情况是第一次请求不知道结果（比如超时）或者失败的异常情况下，发起多次请求，目的是多次确认第一次请求成功，却不会因多次请求而出现多次的状态变化。\n\n什么情况下需要保证幂等性\n------------\n\n以 SQL 为例，有下面三种场景，只有第三种场景需要开发人员使用其他策略保证幂等性：\n\n1.  `SELECT col1 FROM tab1 WHER col2=2`，无论执行多少次都不会改变状态，是天然的幂等。\n\n2.  `UPDATE tab1 SET col1=1 WHERE col2=2`，无论执行**成功**多少次**状态**都是一致的，因此也是幂等操作。\n\n3.  `UPDATE tab1 SET col1=col1+1 WHERE col2=2`，每次执行的结果都会发生变化，这种不是幂等的。\n\n为什么要设计幂等性的服务\n------------\n\n幂等可以使得客户端逻辑处理变得简单，但是却以服务逻辑变得复杂为代价。满足幂等服务的需要在逻辑中至少包含两点：\n\n1.  首先去查询上一次的执行状态，如果没有则认为是第一次请求\n\n2.  在服务改变状态的业务逻辑前，保证防重复提交的逻辑\n\n幂等的不足\n-----\n\n幂等是为了简化客户端逻辑处理，却增加了服务提供者的逻辑和成本，是否有必要，需要根据具体场景具体分析，因此除了业务上的特殊要求外，尽量不提供幂等的接口。\n\n1.  增加了额外控制幂等的业务逻辑，复杂化了业务功能；\n\n2.  把并行执行的功能改为串行执行，降低了执行效率。\n\n保证幂等策略\n------\n\n幂等需要通过**唯一的业务单号**来保证。也就是说相同的业务单号，认为是同一笔业务。使用这个唯一的业务单号来确保，后面多次的相同的业务单号的处理逻辑和执行效果是一致的。 下面以支付为例，在不考虑并发的情况下，实现幂等很简单：①先查询一下订单是否已经支付过，②如果已经支付过，则返回支付成功；如果没有支付，进行支付流程，修改订单状态为‘已支付’。\n\n防重复提交策略\n-------\n\n上述的保证幂等方案是分成两步的，第②步依赖第①步的查询结果，无法保证原子性的。在高并发下就会出现下面的情况：第二次请求在第一次请求第②步订单状态还没有修改为‘已支付状态’的情况下到来。既然得出了这个结论，余下的问题也就变得简单：把查询和变更状态操作加锁，将并行操作改为串行操作。\n\n### 乐观锁\n\n如果只是更新**已有**的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过 version 来做乐观锁，这样既能保证执行效率，又能保证幂等。例如： `UPDATE tab1 SET col1=1,version=version+1 WHERE version=#version#` 不过，乐观锁存在失效的情况，就是常说的 ABA 问题，不过如果 version 版本一直是自增的就不会出现 ABA 的情况。（从网上找了一张图片很能说明乐观锁，引用过来，出自 Mybatis 对乐观锁的支持）\n\n### 防重表\n\n使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，当然订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。**可以看出防重表作用是加锁的功能。**\n\n### 分布式锁\n\n这里使用的防重表可以使用分布式锁代替，比如 Redis。订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号。查询订单支付已经支付，如果没有则进行支付，支付完成后删除该订单号的 Key。通过 Redis 做到了分布式锁，只有这次订单订单支付请求完成，下次请求才能进来。相比去重表，将放并发做到了缓存中，较为高效。思路相同，**同一时间只能完成一次支付请求**。\n\n### token 令牌\n\n这种方式分成两个阶段：申请 token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 token 的请求，支付系统将 token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 token 发起支付请求，支付系统会检查 Redis 中是否存在该 token，如果存在，表示第一次发起支付请求，删除缓存中 token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。 实际上这里的 token 是一个信物，支付系统根据 token 确认，你是你妈的孩子。不足是需要系统间交互两次，流程较上述方法复杂。\n\n### 支付缓冲区\n\n把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。","slug":"深入理解幂等性","published":1,"updated":"2024-12-16T12:11:11.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypl002aj0krgvn3ew27","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021721701.jpg\" alt=\"cow-g348e762cd_1920\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"什么是幂等性\"><a href=\"#什么是幂等性\" class=\"headerlink\" title=\"什么是幂等性\"></a>什么是幂等性</h1><blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.cnblogs.com/javalyy/p/8882144.html\">www.cnblogs.com</a></p>\n</blockquote>\n<p>​    HTTP/1.1 中对幂等性的定义是：一次和多次请求某一个资源<strong>对于资源本身</strong>应该具有同样的结果（网络超时等问题除外）。也就是说，<strong>其任意多次执行对资源本身所产生的影响均与一次执行的影响相同</strong>。</p>\n<p>这里需要关注几个重点：</p>\n<ol>\n<li><p> 幂等不仅仅只是一次（或多次）请求对资源没有副作用（比如查询数据库操作，没有增删改，因此没有对数据库有任何影响）。</p>\n</li>\n<li><p> 幂等还包括第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。</p>\n</li>\n<li><p> 幂等关注的是以后的多次请求是否对资源产生的副作用，而不关注结果。</p>\n</li>\n<li><p> 网络超时等问题，不是幂等的讨论范围。</p>\n</li>\n</ol>\n<p>幂等性是系统服务对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。</p>\n<h2 id=\"什么情况下需要幂等\"><a href=\"#什么情况下需要幂等\" class=\"headerlink\" title=\"什么情况下需要幂等\"></a>什么情况下需要幂等</h2><p>业务开发中，经常会遇到重复提交的情况，无论是由于网络问题无法收到请求结果而重新发起请求，或是前端的操作抖动而造成重复提交情况。 在交易系统，支付系统这种重复提交造成的问题有尤其明显，比如：</p>\n<ol>\n<li><p> 用户在 APP 上连续点击了多次提交订单，后台应该只产生一个订单；</p>\n</li>\n<li><p> 向支付宝发起支付请求，由于网络问题或系统 BUG 重发，支付宝应该只扣一次钱。 <strong>很显然，声明幂等的服务认为，外部调用者会存在多次调用的情况，为了防止外部多次调用对系统数据状态的发生多次改变，将服务设计成幂等。</strong></p>\n</li>\n</ol>\n<h2 id=\"幂等-VS-防重\"><a href=\"#幂等-VS-防重\" class=\"headerlink\" title=\"幂等 VS 防重\"></a>幂等 VS 防重</h2><p>上面例子中小明遇到的问题，只是重复提交的情况，和服务幂等的初衷是不同的。重复提交是在第一次请求已经成功的情况下，人为的进行多次操作，导致不满足幂等要求的服务多次改变状态。而幂等更多使用的情况是第一次请求不知道结果（比如超时）或者失败的异常情况下，发起多次请求，目的是多次确认第一次请求成功，却不会因多次请求而出现多次的状态变化。</p>\n<h2 id=\"什么情况下需要保证幂等性\"><a href=\"#什么情况下需要保证幂等性\" class=\"headerlink\" title=\"什么情况下需要保证幂等性\"></a>什么情况下需要保证幂等性</h2><p>以 SQL 为例，有下面三种场景，只有第三种场景需要开发人员使用其他策略保证幂等性：</p>\n<ol>\n<li><p> <code>SELECT col1 FROM tab1 WHER col2=2</code>，无论执行多少次都不会改变状态，是天然的幂等。</p>\n</li>\n<li><p> <code>UPDATE tab1 SET col1=1 WHERE col2=2</code>，无论执行<strong>成功</strong>多少次<strong>状态</strong>都是一致的，因此也是幂等操作。</p>\n</li>\n<li><p> <code>UPDATE tab1 SET col1=col1+1 WHERE col2=2</code>，每次执行的结果都会发生变化，这种不是幂等的。</p>\n</li>\n</ol>\n<h2 id=\"为什么要设计幂等性的服务\"><a href=\"#为什么要设计幂等性的服务\" class=\"headerlink\" title=\"为什么要设计幂等性的服务\"></a>为什么要设计幂等性的服务</h2><p>幂等可以使得客户端逻辑处理变得简单，但是却以服务逻辑变得复杂为代价。满足幂等服务的需要在逻辑中至少包含两点：</p>\n<ol>\n<li><p> 首先去查询上一次的执行状态，如果没有则认为是第一次请求</p>\n</li>\n<li><p> 在服务改变状态的业务逻辑前，保证防重复提交的逻辑</p>\n</li>\n</ol>\n<h2 id=\"幂等的不足\"><a href=\"#幂等的不足\" class=\"headerlink\" title=\"幂等的不足\"></a>幂等的不足</h2><p>幂等是为了简化客户端逻辑处理，却增加了服务提供者的逻辑和成本，是否有必要，需要根据具体场景具体分析，因此除了业务上的特殊要求外，尽量不提供幂等的接口。</p>\n<ol>\n<li><p> 增加了额外控制幂等的业务逻辑，复杂化了业务功能；</p>\n</li>\n<li><p> 把并行执行的功能改为串行执行，降低了执行效率。</p>\n</li>\n</ol>\n<h2 id=\"保证幂等策略\"><a href=\"#保证幂等策略\" class=\"headerlink\" title=\"保证幂等策略\"></a>保证幂等策略</h2><p>幂等需要通过<strong>唯一的业务单号</strong>来保证。也就是说相同的业务单号，认为是同一笔业务。使用这个唯一的业务单号来确保，后面多次的相同的业务单号的处理逻辑和执行效果是一致的。 下面以支付为例，在不考虑并发的情况下，实现幂等很简单：①先查询一下订单是否已经支付过，②如果已经支付过，则返回支付成功；如果没有支付，进行支付流程，修改订单状态为‘已支付’。</p>\n<h2 id=\"防重复提交策略\"><a href=\"#防重复提交策略\" class=\"headerlink\" title=\"防重复提交策略\"></a>防重复提交策略</h2><p>上述的保证幂等方案是分成两步的，第②步依赖第①步的查询结果，无法保证原子性的。在高并发下就会出现下面的情况：第二次请求在第一次请求第②步订单状态还没有修改为‘已支付状态’的情况下到来。既然得出了这个结论，余下的问题也就变得简单：把查询和变更状态操作加锁，将并行操作改为串行操作。</p>\n<h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>如果只是更新<strong>已有</strong>的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过 version 来做乐观锁，这样既能保证执行效率，又能保证幂等。例如： <code>UPDATE tab1 SET col1=1,version=version+1 WHERE version=#version#</code> 不过，乐观锁存在失效的情况，就是常说的 ABA 问题，不过如果 version 版本一直是自增的就不会出现 ABA 的情况。（从网上找了一张图片很能说明乐观锁，引用过来，出自 Mybatis 对乐观锁的支持）</p>\n<h3 id=\"防重表\"><a href=\"#防重表\" class=\"headerlink\" title=\"防重表\"></a>防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，当然订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。<strong>可以看出防重表作用是加锁的功能。</strong></p>\n<h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>这里使用的防重表可以使用分布式锁代替，比如 Redis。订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号。查询订单支付已经支付，如果没有则进行支付，支付完成后删除该订单号的 Key。通过 Redis 做到了分布式锁，只有这次订单订单支付请求完成，下次请求才能进来。相比去重表，将放并发做到了缓存中，较为高效。思路相同，<strong>同一时间只能完成一次支付请求</strong>。</p>\n<h3 id=\"token-令牌\"><a href=\"#token-令牌\" class=\"headerlink\" title=\"token 令牌\"></a>token 令牌</h3><p>这种方式分成两个阶段：申请 token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 token 的请求，支付系统将 token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 token 发起支付请求，支付系统会检查 Redis 中是否存在该 token，如果存在，表示第一次发起支付请求，删除缓存中 token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。 实际上这里的 token 是一个信物，支付系统根据 token 确认，你是你妈的孩子。不足是需要系统间交互两次，流程较上述方法复杂。</p>\n<h3 id=\"支付缓冲区\"><a href=\"#支付缓冲区\" class=\"headerlink\" title=\"支付缓冲区\"></a>支付缓冲区</h3><p>把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021721701.jpg\" alt=\"cow-g348e762cd_1920\"></p>","more":"<h1 id=\"什么是幂等性\"><a href=\"#什么是幂等性\" class=\"headerlink\" title=\"什么是幂等性\"></a>什么是幂等性</h1><blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.cnblogs.com/javalyy/p/8882144.html\">www.cnblogs.com</a></p>\n</blockquote>\n<p>​    HTTP/1.1 中对幂等性的定义是：一次和多次请求某一个资源<strong>对于资源本身</strong>应该具有同样的结果（网络超时等问题除外）。也就是说，<strong>其任意多次执行对资源本身所产生的影响均与一次执行的影响相同</strong>。</p>\n<p>这里需要关注几个重点：</p>\n<ol>\n<li><p> 幂等不仅仅只是一次（或多次）请求对资源没有副作用（比如查询数据库操作，没有增删改，因此没有对数据库有任何影响）。</p>\n</li>\n<li><p> 幂等还包括第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。</p>\n</li>\n<li><p> 幂等关注的是以后的多次请求是否对资源产生的副作用，而不关注结果。</p>\n</li>\n<li><p> 网络超时等问题，不是幂等的讨论范围。</p>\n</li>\n</ol>\n<p>幂等性是系统服务对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的。声明为幂等的服务会认为外部调用失败是常态，并且失败之后必然会有重试。</p>\n<h2 id=\"什么情况下需要幂等\"><a href=\"#什么情况下需要幂等\" class=\"headerlink\" title=\"什么情况下需要幂等\"></a>什么情况下需要幂等</h2><p>业务开发中，经常会遇到重复提交的情况，无论是由于网络问题无法收到请求结果而重新发起请求，或是前端的操作抖动而造成重复提交情况。 在交易系统，支付系统这种重复提交造成的问题有尤其明显，比如：</p>\n<ol>\n<li><p> 用户在 APP 上连续点击了多次提交订单，后台应该只产生一个订单；</p>\n</li>\n<li><p> 向支付宝发起支付请求，由于网络问题或系统 BUG 重发，支付宝应该只扣一次钱。 <strong>很显然，声明幂等的服务认为，外部调用者会存在多次调用的情况，为了防止外部多次调用对系统数据状态的发生多次改变，将服务设计成幂等。</strong></p>\n</li>\n</ol>\n<h2 id=\"幂等-VS-防重\"><a href=\"#幂等-VS-防重\" class=\"headerlink\" title=\"幂等 VS 防重\"></a>幂等 VS 防重</h2><p>上面例子中小明遇到的问题，只是重复提交的情况，和服务幂等的初衷是不同的。重复提交是在第一次请求已经成功的情况下，人为的进行多次操作，导致不满足幂等要求的服务多次改变状态。而幂等更多使用的情况是第一次请求不知道结果（比如超时）或者失败的异常情况下，发起多次请求，目的是多次确认第一次请求成功，却不会因多次请求而出现多次的状态变化。</p>\n<h2 id=\"什么情况下需要保证幂等性\"><a href=\"#什么情况下需要保证幂等性\" class=\"headerlink\" title=\"什么情况下需要保证幂等性\"></a>什么情况下需要保证幂等性</h2><p>以 SQL 为例，有下面三种场景，只有第三种场景需要开发人员使用其他策略保证幂等性：</p>\n<ol>\n<li><p> <code>SELECT col1 FROM tab1 WHER col2=2</code>，无论执行多少次都不会改变状态，是天然的幂等。</p>\n</li>\n<li><p> <code>UPDATE tab1 SET col1=1 WHERE col2=2</code>，无论执行<strong>成功</strong>多少次<strong>状态</strong>都是一致的，因此也是幂等操作。</p>\n</li>\n<li><p> <code>UPDATE tab1 SET col1=col1+1 WHERE col2=2</code>，每次执行的结果都会发生变化，这种不是幂等的。</p>\n</li>\n</ol>\n<h2 id=\"为什么要设计幂等性的服务\"><a href=\"#为什么要设计幂等性的服务\" class=\"headerlink\" title=\"为什么要设计幂等性的服务\"></a>为什么要设计幂等性的服务</h2><p>幂等可以使得客户端逻辑处理变得简单，但是却以服务逻辑变得复杂为代价。满足幂等服务的需要在逻辑中至少包含两点：</p>\n<ol>\n<li><p> 首先去查询上一次的执行状态，如果没有则认为是第一次请求</p>\n</li>\n<li><p> 在服务改变状态的业务逻辑前，保证防重复提交的逻辑</p>\n</li>\n</ol>\n<h2 id=\"幂等的不足\"><a href=\"#幂等的不足\" class=\"headerlink\" title=\"幂等的不足\"></a>幂等的不足</h2><p>幂等是为了简化客户端逻辑处理，却增加了服务提供者的逻辑和成本，是否有必要，需要根据具体场景具体分析，因此除了业务上的特殊要求外，尽量不提供幂等的接口。</p>\n<ol>\n<li><p> 增加了额外控制幂等的业务逻辑，复杂化了业务功能；</p>\n</li>\n<li><p> 把并行执行的功能改为串行执行，降低了执行效率。</p>\n</li>\n</ol>\n<h2 id=\"保证幂等策略\"><a href=\"#保证幂等策略\" class=\"headerlink\" title=\"保证幂等策略\"></a>保证幂等策略</h2><p>幂等需要通过<strong>唯一的业务单号</strong>来保证。也就是说相同的业务单号，认为是同一笔业务。使用这个唯一的业务单号来确保，后面多次的相同的业务单号的处理逻辑和执行效果是一致的。 下面以支付为例，在不考虑并发的情况下，实现幂等很简单：①先查询一下订单是否已经支付过，②如果已经支付过，则返回支付成功；如果没有支付，进行支付流程，修改订单状态为‘已支付’。</p>\n<h2 id=\"防重复提交策略\"><a href=\"#防重复提交策略\" class=\"headerlink\" title=\"防重复提交策略\"></a>防重复提交策略</h2><p>上述的保证幂等方案是分成两步的，第②步依赖第①步的查询结果，无法保证原子性的。在高并发下就会出现下面的情况：第二次请求在第一次请求第②步订单状态还没有修改为‘已支付状态’的情况下到来。既然得出了这个结论，余下的问题也就变得简单：把查询和变更状态操作加锁，将并行操作改为串行操作。</p>\n<h3 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h3><p>如果只是更新<strong>已有</strong>的数据，没有必要对业务进行加锁，设计表结构时使用乐观锁，一般通过 version 来做乐观锁，这样既能保证执行效率，又能保证幂等。例如： <code>UPDATE tab1 SET col1=1,version=version+1 WHERE version=#version#</code> 不过，乐观锁存在失效的情况，就是常说的 ABA 问题，不过如果 version 版本一直是自增的就不会出现 ABA 的情况。（从网上找了一张图片很能说明乐观锁，引用过来，出自 Mybatis 对乐观锁的支持）</p>\n<h3 id=\"防重表\"><a href=\"#防重表\" class=\"headerlink\" title=\"防重表\"></a>防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，每次请求都根据订单号向去重表中插入一条数据。第一次请求查询订单支付状态，当然订单没有支付，进行支付操作，无论成功与否，执行完后更新订单状态为成功或失败，删除去重表中的数据。后续的订单因为表中唯一索引而插入失败，则返回操作失败，直到第一次的请求完成（成功或失败）。<strong>可以看出防重表作用是加锁的功能。</strong></p>\n<h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>这里使用的防重表可以使用分布式锁代替，比如 Redis。订单发起支付请求，支付系统会去 Redis 缓存中查询是否存在该订单号的 Key，如果不存在，则向 Redis 增加 Key 为订单号。查询订单支付已经支付，如果没有则进行支付，支付完成后删除该订单号的 Key。通过 Redis 做到了分布式锁，只有这次订单订单支付请求完成，下次请求才能进来。相比去重表，将放并发做到了缓存中，较为高效。思路相同，<strong>同一时间只能完成一次支付请求</strong>。</p>\n<h3 id=\"token-令牌\"><a href=\"#token-令牌\" class=\"headerlink\" title=\"token 令牌\"></a>token 令牌</h3><p>这种方式分成两个阶段：申请 token 阶段和支付阶段。 第一阶段，在进入到提交订单页面之前，需要订单系统根据用户信息向支付系统发起一次申请 token 的请求，支付系统将 token 保存到 Redis 缓存中，为第二阶段支付使用。 第二阶段，订单系统拿着申请到的 token 发起支付请求，支付系统会检查 Redis 中是否存在该 token，如果存在，表示第一次发起支付请求，删除缓存中 token 后开始支付逻辑处理；如果缓存中不存在，表示非法请求。 实际上这里的 token 是一个信物，支付系统根据 token 确认，你是你妈的孩子。不足是需要系统间交互两次，流程较上述方法复杂。</p>\n<h3 id=\"支付缓冲区\"><a href=\"#支付缓冲区\" class=\"headerlink\" title=\"支付缓冲区\"></a>支付缓冲区</h3><p>把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。</p>"},{"title":"深入理解Spring MVC架构","date":"2022-03-08T07:39:34.000Z","description":"了解 Spring MVC 是什么？原理是什么？","_content":"\n<!--more-->\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203081541602.jpg)\n","source":"_drafts/2022-03-08-深入理解Spring-MVC架构.md","raw":"---\ntitle: 深入理解Spring MVC架构\ndate: 2022-03-08 15:39:34\ntags: Spring \ncategories: Spring\ndescription: 了解 Spring MVC 是什么？原理是什么？\n---\n\n<!--more-->\n![](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203081541602.jpg)\n","slug":"深入理解Spring-MVC架构","published":0,"updated":"2024-12-15T14:28:27.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypn002cj0kr7fgnehnc","content":"<span id=\"more\"></span>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203081541602.jpg\"></p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203081541602.jpg\"></p>"},{"title":"SpringMVC 框架","date":"2022-04-28T02:10:35.000Z","description":"正文","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n## 0x01 MVC 是什么\n\n- 模型： Model(Dao/Service)\n\n- 视图：view (jsp/html)\n- 控制器：Controller(Servlet)\n\n## 0x02 图解原理\n\n![SpringMVC 原理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281426985.jpeg) \n\n如图所示SpringMVC工作原理：\n\n1. 客户端发起请求（Http）通过 **web.xml** 找到 DispatchServlet（前端控制器）；\n2. 由 DispatchServlet 控制器通过 **配置文件**（servletName-servlet.xml）寻找到一个或多个 HandlerMapping（映射处理器），找到用于处理请求的Controller（后端控制器）；\n3. DispatchServlet 将请求提交到 Controller；\n4. Controller 处理业务逻辑后，\n5. Controller 返回数据 ModelAndView 给 DispatchServlet；\n6. DispatchServlet 寻找到一个或多个 ViewResolver（视图解析器），找到 ModelAndView 指定的视图；\n7. DispatchServlet 负责将结果返给 View（客户端 JSP 页面），封装 Http；\n8. View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。\n\n## 0x03 配置原理\n\n### **1. 配置 web.xml 注册 DispatcherServlet**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <!--1.配置web.xml 注册 DispatcherServlet -->\n    <servlet>\t\t\n        <servlet-name>srpingmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!--关联一个springmvc 的配置文件:spring-servlet.xml -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvc-servlet.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <!-- / 匹配所有的请求，不包括.jsp -->\n    <!-- /* 匹配所有的请求，包括.jsp -->\n    <servlet-mapping>\n        <servlet-name>srpingmvc</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n### 2. 编写 SpringMVC 的配置文件\n\n```xml\n<!-- springmvc-servlet.xml-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    \n</beans>\n```\n\n### 3.  添加处理映射器\n\n```xml\n<!--添加处理映射器 -->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n```\n\n### 4. 添加处理器适配器\n\n```xml\n<!--添加处理器适配器 -->\n<bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n```\n\n### 5. 添加视图解析器\n\n```xml\n<!-- 视图解析器-->\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"internalResourceViewResolver\">\n    <!-- 前缀-->\n    <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n    <!-- 后缀-->\n    <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n### 6.编写业务操作Controller\n\n> 要么实现Controller接口，要么增加注解，需要返回一个ModelAndView，封装数据，视图\n\n```Java\npublic class HelloController implements Controller {\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {\n        //ModelAndView  模型和视图\n        ModelAndView mv = new ModelAndView();\n\n        //封装对象，放到ModelAndView中\n        mv.addObject(\"msg\",\"HelloSpringMvc\");\n\n        //封装要跳转的视图，放到ModelAndView中\n        mv.setViewName(\"hello\");  //:/WEB-INF/jsp/hello.jsp\n\n        return mv;\n\n    }\n}\n```\n\n## 0x04 分析SpringMVC的执行流程\n\n### 1. DispatcherServlet\n\n> 表示前置控制器，是整个SpringMVC 的控制中心。用户发出请求 DispatchedServlet接收请求并拦截请求\n\n- 假设请求的url为：http://localhost:8080/SpringMVC/hello\n\n- 如上url拆分成三部分：\n  - http://localhost:8080 指的是**服务器域名**\n  - SpringMVC 是指部署在服务器上的**web站点**\n  - hello 表示**控制器**\n- 如上 URL 表示为：请求位于服务器localhost:8080上的 SpringMVC 站点的 hello 控制器\n\n### 2. HandlerMapping\n\n> 表示处理器映射，DispatcherServlet 调用它，HandlerMapping 根据请求 URL 去查找 Handler（处理器)\n\n### 3.HandlerExecution\n\n 表示具体的 Handler ，作用是根据 URL 查找控制器，如 上URL 被查找控制器为（hello)\n\n### 4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。\n\n### 5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)\n\n### 6.Handler 让具体的 Controller 执行\n\n### 7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）\n\n### 8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）\n\n### 9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\n\n- 获取了Model的数据\n- 解析了View的视图名字\n- 拼接前缀后缀视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp\n- 将数据渲染到这个视图上\n\n##### 10.视图解析器将解析的逻辑视图名传给DispatcherServlet\n\n##### 11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\n\n##### 12.最终视图呈现给用户\n\n","source":"_drafts/2022-04-28-ssm-项目搭建.md","raw":"---\ntitle: SpringMVC 框架\ndate: 2022-04-28 10:10:35\ntags: ssm\ncategories: 学习\ndescription: 正文\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n## 0x01 MVC 是什么\n\n- 模型： Model(Dao/Service)\n\n- 视图：view (jsp/html)\n- 控制器：Controller(Servlet)\n\n## 0x02 图解原理\n\n![SpringMVC 原理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281426985.jpeg) \n\n如图所示SpringMVC工作原理：\n\n1. 客户端发起请求（Http）通过 **web.xml** 找到 DispatchServlet（前端控制器）；\n2. 由 DispatchServlet 控制器通过 **配置文件**（servletName-servlet.xml）寻找到一个或多个 HandlerMapping（映射处理器），找到用于处理请求的Controller（后端控制器）；\n3. DispatchServlet 将请求提交到 Controller；\n4. Controller 处理业务逻辑后，\n5. Controller 返回数据 ModelAndView 给 DispatchServlet；\n6. DispatchServlet 寻找到一个或多个 ViewResolver（视图解析器），找到 ModelAndView 指定的视图；\n7. DispatchServlet 负责将结果返给 View（客户端 JSP 页面），封装 Http；\n8. View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。\n\n## 0x03 配置原理\n\n### **1. 配置 web.xml 注册 DispatcherServlet**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <!--1.配置web.xml 注册 DispatcherServlet -->\n    <servlet>\t\t\n        <servlet-name>srpingmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!--关联一个springmvc 的配置文件:spring-servlet.xml -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvc-servlet.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <!-- / 匹配所有的请求，不包括.jsp -->\n    <!-- /* 匹配所有的请求，包括.jsp -->\n    <servlet-mapping>\n        <servlet-name>srpingmvc</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n### 2. 编写 SpringMVC 的配置文件\n\n```xml\n<!-- springmvc-servlet.xml-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    \n</beans>\n```\n\n### 3.  添加处理映射器\n\n```xml\n<!--添加处理映射器 -->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n```\n\n### 4. 添加处理器适配器\n\n```xml\n<!--添加处理器适配器 -->\n<bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n```\n\n### 5. 添加视图解析器\n\n```xml\n<!-- 视图解析器-->\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"internalResourceViewResolver\">\n    <!-- 前缀-->\n    <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n    <!-- 后缀-->\n    <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n### 6.编写业务操作Controller\n\n> 要么实现Controller接口，要么增加注解，需要返回一个ModelAndView，封装数据，视图\n\n```Java\npublic class HelloController implements Controller {\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {\n        //ModelAndView  模型和视图\n        ModelAndView mv = new ModelAndView();\n\n        //封装对象，放到ModelAndView中\n        mv.addObject(\"msg\",\"HelloSpringMvc\");\n\n        //封装要跳转的视图，放到ModelAndView中\n        mv.setViewName(\"hello\");  //:/WEB-INF/jsp/hello.jsp\n\n        return mv;\n\n    }\n}\n```\n\n## 0x04 分析SpringMVC的执行流程\n\n### 1. DispatcherServlet\n\n> 表示前置控制器，是整个SpringMVC 的控制中心。用户发出请求 DispatchedServlet接收请求并拦截请求\n\n- 假设请求的url为：http://localhost:8080/SpringMVC/hello\n\n- 如上url拆分成三部分：\n  - http://localhost:8080 指的是**服务器域名**\n  - SpringMVC 是指部署在服务器上的**web站点**\n  - hello 表示**控制器**\n- 如上 URL 表示为：请求位于服务器localhost:8080上的 SpringMVC 站点的 hello 控制器\n\n### 2. HandlerMapping\n\n> 表示处理器映射，DispatcherServlet 调用它，HandlerMapping 根据请求 URL 去查找 Handler（处理器)\n\n### 3.HandlerExecution\n\n 表示具体的 Handler ，作用是根据 URL 查找控制器，如 上URL 被查找控制器为（hello)\n\n### 4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。\n\n### 5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)\n\n### 6.Handler 让具体的 Controller 执行\n\n### 7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）\n\n### 8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）\n\n### 9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\n\n- 获取了Model的数据\n- 解析了View的视图名字\n- 拼接前缀后缀视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp\n- 将数据渲染到这个视图上\n\n##### 10.视图解析器将解析的逻辑视图名传给DispatcherServlet\n\n##### 11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\n\n##### 12.最终视图呈现给用户\n\n","slug":"ssm-项目搭建","published":0,"updated":"2024-12-15T14:28:27.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypp002hj0kr6kwog0xq","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n<h2 id=\"0x01-MVC-是什么\"><a href=\"#0x01-MVC-是什么\" class=\"headerlink\" title=\"0x01 MVC 是什么\"></a>0x01 MVC 是什么</h2><ul>\n<li><p>模型： Model(Dao/Service)</p>\n</li>\n<li><p>视图：view (jsp/html)</p>\n</li>\n<li><p>控制器：Controller(Servlet)</p>\n</li>\n</ul>\n<h2 id=\"0x02-图解原理\"><a href=\"#0x02-图解原理\" class=\"headerlink\" title=\"0x02 图解原理\"></a>0x02 图解原理</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281426985.jpeg\" alt=\"SpringMVC 原理\"> </p>\n<p>如图所示SpringMVC工作原理：</p>\n<ol>\n<li>客户端发起请求（Http）通过 <strong>web.xml</strong> 找到 DispatchServlet（前端控制器）；</li>\n<li>由 DispatchServlet 控制器通过 <strong>配置文件</strong>（servletName-servlet.xml）寻找到一个或多个 HandlerMapping（映射处理器），找到用于处理请求的Controller（后端控制器）；</li>\n<li>DispatchServlet 将请求提交到 Controller；</li>\n<li>Controller 处理业务逻辑后，</li>\n<li>Controller 返回数据 ModelAndView 给 DispatchServlet；</li>\n<li>DispatchServlet 寻找到一个或多个 ViewResolver（视图解析器），找到 ModelAndView 指定的视图；</li>\n<li>DispatchServlet 负责将结果返给 View（客户端 JSP 页面），封装 Http；</li>\n<li>View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。</li>\n</ol>\n<h2 id=\"0x03-配置原理\"><a href=\"#0x03-配置原理\" class=\"headerlink\" title=\"0x03 配置原理\"></a>0x03 配置原理</h2><h3 id=\"1-配置-web-xml-注册-DispatcherServlet\"><a href=\"#1-配置-web-xml-注册-DispatcherServlet\" class=\"headerlink\" title=\"1. 配置 web.xml 注册 DispatcherServlet\"></a><strong>1. 配置 web.xml 注册 DispatcherServlet</strong></h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--1.配置web.xml 注册 DispatcherServlet --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>        \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>srpingmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--关联一个springmvc 的配置文件:spring-servlet.xml --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:springmvc-servlet.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- / 匹配所有的请求，不包括.jsp --></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- /* 匹配所有的请求，包括.jsp --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>srpingmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"2-编写-SpringMVC-的配置文件\"><a href=\"#2-编写-SpringMVC-的配置文件\" class=\"headerlink\" title=\"2. 编写 SpringMVC 的配置文件\"></a>2. 编写 SpringMVC 的配置文件</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- springmvc-servlet.xml--></span>\n<span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"3-添加处理映射器\"><a href=\"#3-添加处理映射器\" class=\"headerlink\" title=\"3.  添加处理映射器\"></a>3.  添加处理映射器</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--添加处理映射器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<h3 id=\"4-添加处理器适配器\"><a href=\"#4-添加处理器适配器\" class=\"headerlink\" title=\"4. 添加处理器适配器\"></a>4. 添加处理器适配器</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--添加处理器适配器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<h3 id=\"5-添加视图解析器\"><a href=\"#5-添加视图解析器\" class=\"headerlink\" title=\"5. 添加视图解析器\"></a>5. 添加视图解析器</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- 视图解析器--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>internalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 前缀--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/jsp/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 后缀--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"6-编写业务操作Controller\"><a href=\"#6-编写业务操作Controller\" class=\"headerlink\" title=\"6.编写业务操作Controller\"></a>6.编写业务操作Controller</h3><blockquote>\n<p>要么实现Controller接口，要么增加注解，需要返回一个ModelAndView，封装数据，视图</p>\n</blockquote>\n<pre class=\" language-Java\"><code class=\"language-Java\">public class HelloController implements Controller &#123;\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        //ModelAndView  模型和视图\n        ModelAndView mv = new ModelAndView();\n\n        //封装对象，放到ModelAndView中\n        mv.addObject(\"msg\",\"HelloSpringMvc\");\n\n        //封装要跳转的视图，放到ModelAndView中\n        mv.setViewName(\"hello\");  //:/WEB-INF/jsp/hello.jsp\n\n        return mv;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"0x04-分析SpringMVC的执行流程\"><a href=\"#0x04-分析SpringMVC的执行流程\" class=\"headerlink\" title=\"0x04 分析SpringMVC的执行流程\"></a>0x04 分析SpringMVC的执行流程</h2><h3 id=\"1-DispatcherServlet\"><a href=\"#1-DispatcherServlet\" class=\"headerlink\" title=\"1. DispatcherServlet\"></a>1. DispatcherServlet</h3><blockquote>\n<p>表示前置控制器，是整个SpringMVC 的控制中心。用户发出请求 DispatchedServlet接收请求并拦截请求</p>\n</blockquote>\n<ul>\n<li><p>假设请求的url为：<a href=\"http://localhost:8080/SpringMVC/hello\">http://localhost:8080/SpringMVC/hello</a></p>\n</li>\n<li><p>如上url拆分成三部分：</p>\n<ul>\n<li><a href=\"http://localhost:8080/\">http://localhost:8080</a> 指的是<strong>服务器域名</strong></li>\n<li>SpringMVC 是指部署在服务器上的<strong>web站点</strong></li>\n<li>hello 表示<strong>控制器</strong></li>\n</ul>\n</li>\n<li><p>如上 URL 表示为：请求位于服务器localhost:8080上的 SpringMVC 站点的 hello 控制器</p>\n</li>\n</ul>\n<h3 id=\"2-HandlerMapping\"><a href=\"#2-HandlerMapping\" class=\"headerlink\" title=\"2. HandlerMapping\"></a>2. HandlerMapping</h3><blockquote>\n<p>表示处理器映射，DispatcherServlet 调用它，HandlerMapping 根据请求 URL 去查找 Handler（处理器)</p>\n</blockquote>\n<h3 id=\"3-HandlerExecution\"><a href=\"#3-HandlerExecution\" class=\"headerlink\" title=\"3.HandlerExecution\"></a>3.HandlerExecution</h3><p> 表示具体的 Handler ，作用是根据 URL 查找控制器，如 上URL 被查找控制器为（hello)</p>\n<h3 id=\"4-HandlerExecution-将解析后的信息传递给-DispatcherServlet，如解析控制器等。\"><a href=\"#4-HandlerExecution-将解析后的信息传递给-DispatcherServlet，如解析控制器等。\" class=\"headerlink\" title=\"4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。\"></a>4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。</h3><h3 id=\"5-HanderlAdapter-表示处理器适配器，其按照特定的规则去执行Handeler-hello请求\"><a href=\"#5-HanderlAdapter-表示处理器适配器，其按照特定的规则去执行Handeler-hello请求\" class=\"headerlink\" title=\"5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)\"></a>5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)</h3><h3 id=\"6-Handler-让具体的-Controller-执行\"><a href=\"#6-Handler-让具体的-Controller-执行\" class=\"headerlink\" title=\"6.Handler 让具体的 Controller 执行\"></a>6.Handler 让具体的 Controller 执行</h3><h3 id=\"7-Controller-将具体的执行信息返回给-HanderAdapter，如-ModelView（存的数据及要跳转的页面）\"><a href=\"#7-Controller-将具体的执行信息返回给-HanderAdapter，如-ModelView（存的数据及要跳转的页面）\" class=\"headerlink\" title=\"7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）\"></a>7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）</h3><h3 id=\"8-HandlerAdapter-将视图逻辑名和模型传递给-DispatcherServlet。（ModelView）\"><a href=\"#8-HandlerAdapter-将视图逻辑名和模型传递给-DispatcherServlet。（ModelView）\" class=\"headerlink\" title=\"8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）\"></a>8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）</h3><h3 id=\"9-DispatcherServlet-调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\"><a href=\"#9-DispatcherServlet-调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\" class=\"headerlink\" title=\"9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\"></a>9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名</h3><ul>\n<li>获取了Model的数据</li>\n<li>解析了View的视图名字</li>\n<li>拼接前缀后缀视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp</li>\n<li>将数据渲染到这个视图上</li>\n</ul>\n<h5 id=\"10-视图解析器将解析的逻辑视图名传给DispatcherServlet\"><a href=\"#10-视图解析器将解析的逻辑视图名传给DispatcherServlet\" class=\"headerlink\" title=\"10.视图解析器将解析的逻辑视图名传给DispatcherServlet\"></a>10.视图解析器将解析的逻辑视图名传给DispatcherServlet</h5><h5 id=\"11-DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\"><a href=\"#11-DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\" class=\"headerlink\" title=\"11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\"></a>11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</h5><h5 id=\"12-最终视图呈现给用户\"><a href=\"#12-最终视图呈现给用户\" class=\"headerlink\" title=\"12.最终视图呈现给用户\"></a>12.最终视图呈现给用户</h5>","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n\n\n<h2 id=\"0x01-MVC-是什么\"><a href=\"#0x01-MVC-是什么\" class=\"headerlink\" title=\"0x01 MVC 是什么\"></a>0x01 MVC 是什么</h2><ul>\n<li><p>模型： Model(Dao/Service)</p>\n</li>\n<li><p>视图：view (jsp/html)</p>\n</li>\n<li><p>控制器：Controller(Servlet)</p>\n</li>\n</ul>\n<h2 id=\"0x02-图解原理\"><a href=\"#0x02-图解原理\" class=\"headerlink\" title=\"0x02 图解原理\"></a>0x02 图解原理</h2><p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281426985.jpeg\" alt=\"SpringMVC 原理\"> </p>\n<p>如图所示SpringMVC工作原理：</p>\n<ol>\n<li>客户端发起请求（Http）通过 <strong>web.xml</strong> 找到 DispatchServlet（前端控制器）；</li>\n<li>由 DispatchServlet 控制器通过 <strong>配置文件</strong>（servletName-servlet.xml）寻找到一个或多个 HandlerMapping（映射处理器），找到用于处理请求的Controller（后端控制器）；</li>\n<li>DispatchServlet 将请求提交到 Controller；</li>\n<li>Controller 处理业务逻辑后，</li>\n<li>Controller 返回数据 ModelAndView 给 DispatchServlet；</li>\n<li>DispatchServlet 寻找到一个或多个 ViewResolver（视图解析器），找到 ModelAndView 指定的视图；</li>\n<li>DispatchServlet 负责将结果返给 View（客户端 JSP 页面），封装 Http；</li>\n<li>View 响应页面的 HTTP 请求，返回响应数据，浏览器绘制页面。</li>\n</ol>\n<h2 id=\"0x03-配置原理\"><a href=\"#0x03-配置原理\" class=\"headerlink\" title=\"0x03 配置原理\"></a>0x03 配置原理</h2><h3 id=\"1-配置-web-xml-注册-DispatcherServlet\"><a href=\"#1-配置-web-xml-注册-DispatcherServlet\" class=\"headerlink\" title=\"1. 配置 web.xml 注册 DispatcherServlet\"></a><strong>1. 配置 web.xml 注册 DispatcherServlet</strong></h3><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n\n    &lt;!--1.配置web.xml 注册 DispatcherServlet --&gt;\n    &lt;servlet&gt;        \n        &lt;servlet-name&gt;srpingmvc&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;!--关联一个springmvc 的配置文件:spring-servlet.xml --&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/servlet&gt;\n\n    &lt;!-- / 匹配所有的请求，不包括.jsp --&gt;\n    &lt;!-- /* 匹配所有的请求，包括.jsp --&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;srpingmvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n<h3 id=\"2-编写-SpringMVC-的配置文件\"><a href=\"#2-编写-SpringMVC-的配置文件\" class=\"headerlink\" title=\"2. 编写 SpringMVC 的配置文件\"></a>2. 编写 SpringMVC 的配置文件</h3><pre><code class=\"xml\">&lt;!-- springmvc-servlet.xml--&gt;\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n    \n&lt;/beans&gt;\n</code></pre>\n<h3 id=\"3-添加处理映射器\"><a href=\"#3-添加处理映射器\" class=\"headerlink\" title=\"3.  添加处理映射器\"></a>3.  添加处理映射器</h3><pre><code class=\"xml\">&lt;!--添加处理映射器 --&gt;\n&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;\n</code></pre>\n<h3 id=\"4-添加处理器适配器\"><a href=\"#4-添加处理器适配器\" class=\"headerlink\" title=\"4. 添加处理器适配器\"></a>4. 添加处理器适配器</h3><pre><code class=\"xml\">&lt;!--添加处理器适配器 --&gt;\n&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;\n</code></pre>\n<h3 id=\"5-添加视图解析器\"><a href=\"#5-添加视图解析器\" class=\"headerlink\" title=\"5. 添加视图解析器\"></a>5. 添加视图解析器</h3><pre><code class=\"xml\">&lt;!-- 视图解析器--&gt;\n&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id=&quot;internalResourceViewResolver&quot;&gt;\n    &lt;!-- 前缀--&gt;\n    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;\n    &lt;!-- 后缀--&gt;\n    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h3 id=\"6-编写业务操作Controller\"><a href=\"#6-编写业务操作Controller\" class=\"headerlink\" title=\"6.编写业务操作Controller\"></a>6.编写业务操作Controller</h3><blockquote>\n<p>要么实现Controller接口，要么增加注解，需要返回一个ModelAndView，封装数据，视图</p>\n</blockquote>\n<pre><code class=\"Java\">public class HelloController implements Controller &#123;\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        //ModelAndView  模型和视图\n        ModelAndView mv = new ModelAndView();\n\n        //封装对象，放到ModelAndView中\n        mv.addObject(&quot;msg&quot;,&quot;HelloSpringMvc&quot;);\n\n        //封装要跳转的视图，放到ModelAndView中\n        mv.setViewName(&quot;hello&quot;);  //:/WEB-INF/jsp/hello.jsp\n\n        return mv;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"0x04-分析SpringMVC的执行流程\"><a href=\"#0x04-分析SpringMVC的执行流程\" class=\"headerlink\" title=\"0x04 分析SpringMVC的执行流程\"></a>0x04 分析SpringMVC的执行流程</h2><h3 id=\"1-DispatcherServlet\"><a href=\"#1-DispatcherServlet\" class=\"headerlink\" title=\"1. DispatcherServlet\"></a>1. DispatcherServlet</h3><blockquote>\n<p>表示前置控制器，是整个SpringMVC 的控制中心。用户发出请求 DispatchedServlet接收请求并拦截请求</p>\n</blockquote>\n<ul>\n<li><p>假设请求的url为：<a href=\"http://localhost:8080/SpringMVC/hello\">http://localhost:8080/SpringMVC/hello</a></p>\n</li>\n<li><p>如上url拆分成三部分：</p>\n<ul>\n<li><a href=\"http://localhost:8080/\">http://localhost:8080</a> 指的是<strong>服务器域名</strong></li>\n<li>SpringMVC 是指部署在服务器上的<strong>web站点</strong></li>\n<li>hello 表示<strong>控制器</strong></li>\n</ul>\n</li>\n<li><p>如上 URL 表示为：请求位于服务器localhost:8080上的 SpringMVC 站点的 hello 控制器</p>\n</li>\n</ul>\n<h3 id=\"2-HandlerMapping\"><a href=\"#2-HandlerMapping\" class=\"headerlink\" title=\"2. HandlerMapping\"></a>2. HandlerMapping</h3><blockquote>\n<p>表示处理器映射，DispatcherServlet 调用它，HandlerMapping 根据请求 URL 去查找 Handler（处理器)</p>\n</blockquote>\n<h3 id=\"3-HandlerExecution\"><a href=\"#3-HandlerExecution\" class=\"headerlink\" title=\"3.HandlerExecution\"></a>3.HandlerExecution</h3><p> 表示具体的 Handler ，作用是根据 URL 查找控制器，如 上URL 被查找控制器为（hello)</p>\n<h3 id=\"4-HandlerExecution-将解析后的信息传递给-DispatcherServlet，如解析控制器等。\"><a href=\"#4-HandlerExecution-将解析后的信息传递给-DispatcherServlet，如解析控制器等。\" class=\"headerlink\" title=\"4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。\"></a>4.HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器等。</h3><h3 id=\"5-HanderlAdapter-表示处理器适配器，其按照特定的规则去执行Handeler-hello请求\"><a href=\"#5-HanderlAdapter-表示处理器适配器，其按照特定的规则去执行Handeler-hello请求\" class=\"headerlink\" title=\"5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)\"></a>5.HanderlAdapter 表示处理器适配器，其按照特定的规则去执行Handeler(hello请求)</h3><h3 id=\"6-Handler-让具体的-Controller-执行\"><a href=\"#6-Handler-让具体的-Controller-执行\" class=\"headerlink\" title=\"6.Handler 让具体的 Controller 执行\"></a>6.Handler 让具体的 Controller 执行</h3><h3 id=\"7-Controller-将具体的执行信息返回给-HanderAdapter，如-ModelView（存的数据及要跳转的页面）\"><a href=\"#7-Controller-将具体的执行信息返回给-HanderAdapter，如-ModelView（存的数据及要跳转的页面）\" class=\"headerlink\" title=\"7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）\"></a>7.Controller 将具体的执行信息返回给 HanderAdapter，如 ModelView（存的数据及要跳转的页面）</h3><h3 id=\"8-HandlerAdapter-将视图逻辑名和模型传递给-DispatcherServlet。（ModelView）\"><a href=\"#8-HandlerAdapter-将视图逻辑名和模型传递给-DispatcherServlet。（ModelView）\" class=\"headerlink\" title=\"8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）\"></a>8.HandlerAdapter 将视图逻辑名和模型传递给 DispatcherServlet。（ModelView）</h3><h3 id=\"9-DispatcherServlet-调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\"><a href=\"#9-DispatcherServlet-调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\" class=\"headerlink\" title=\"9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名\"></a>9.DispatcherServlet 调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名</h3><ul>\n<li>获取了Model的数据</li>\n<li>解析了View的视图名字</li>\n<li>拼接前缀后缀视图名字，找到对应的视图 /WEB-INF/jsp/hello.jsp</li>\n<li>将数据渲染到这个视图上</li>\n</ul>\n<h5 id=\"10-视图解析器将解析的逻辑视图名传给DispatcherServlet\"><a href=\"#10-视图解析器将解析的逻辑视图名传给DispatcherServlet\" class=\"headerlink\" title=\"10.视图解析器将解析的逻辑视图名传给DispatcherServlet\"></a>10.视图解析器将解析的逻辑视图名传给DispatcherServlet</h5><h5 id=\"11-DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\"><a href=\"#11-DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\" class=\"headerlink\" title=\"11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图\"></a>11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</h5><h5 id=\"12-最终视图呈现给用户\"><a href=\"#12-最终视图呈现给用户\" class=\"headerlink\" title=\"12.最终视图呈现给用户\"></a>12.最终视图呈现给用户</h5>"},{"title":"浅谈SpringMVC 框架","date":"2022-04-28T06:42:42.000Z","description":"介绍SpringMVC框架开发的原理以及开发流程的配置相关学习","_content":"\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<!--more-->\n\n> 本文介绍SpringMVC 框架的作用、原理和开发流程\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.cnblogs.com](https://www.cnblogs.com/xiaoxi/p/6164383.html)\n\n# SpringMVC 原理\n\nSpringMVC 的工作原理图：\n\n![SpringMVC工作原理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281522150.jpeg)\n\n## SpringMVC 流程\n\n1、  用户发送请求至前端控制器 DispatcherServlet。\n\n2、  DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。\n\n3、  处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成) 一并返回给 DispatcherServlet。\n\n4、  DispatcherServlet 调用 HandlerAdapter 处理器适配器。\n\n5、  HandlerAdapter 经过适配调用具体的处理器 (Controller，也叫后端控制器)。\n\n6、  Controller 执行完成返回 ModelAndView。\n\n7、  HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。\n\n8、  DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。\n\n9、  ViewReslover 解析后返回具体 View。\n\n10、DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。\n\n11、 DispatcherServlet 响应用户。\n\n## 组件说明\n\n以下组件通常使用框架提供实现：\n\n- DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。\n\n- HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：**配置文件方式，实现接口方式，注解方式** 等。 \n\n- HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。\n\n- ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：**jsp、freemarker、pdf、excel** 等。\n\n### 组件  \n\n#### **1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供**  \n\n作用：接收请求，响应结果，相当于转发器，中央处理器。有了 dispatcherServlet **减少**了其它组件之间的**耦合度**。  \n用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它**调用其它组件处理用户的请求**，dispatcherServlet 的存在降低了组件之间的耦合性。\n\n#### **2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供**  \n\n作用：根据请求的 url 查找 Handler  \nHandlerMapping 负责根据用户请求找到 Handler 即处理器，springmvc 提供了不同的映射器实现不同的映射方式，例如：**配置文件方式，实现接口方式，注解方式**等。\n\n#### **3、处理器适配器 HandlerAdapter**  \n\n作用：按照特定规则（HandlerAdapter 要求的规则）去执行 Handler  \n通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n#### **4、处理器 Handler(需要工程师开发)**  \n\n**注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler**  \nHandler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。  \n由于 Handler 涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发 Handler。\n\n#### **5、视图解析器 View resolver(不需要工程师开发), 由框架提供**  \n\n作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  \nView Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 springmvc 框架提供了很多的 View 视图类型，包括：jstlView、freemarkerView、pdfView 等。  \n一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n#### **6、视图 View(需要工程师开发 jsp...)**  \n\nView 是一个接口，实现类支持不同的 View 类型（jsp、freemarker、pdf...）","source":"_drafts/2022-04-28-浅谈SpringMVC-框架.md","raw":"---\ntitle: 浅谈SpringMVC 框架\ndate: 2022-04-28 14:42:42\ntags: SpringMVC \ncategories: SpringMVC\ndescription:  介绍SpringMVC框架开发的原理以及开发流程的配置相关学习\n---\n\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<!--more-->\n\n> 本文介绍SpringMVC 框架的作用、原理和开发流程\n\n> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.cnblogs.com](https://www.cnblogs.com/xiaoxi/p/6164383.html)\n\n# SpringMVC 原理\n\nSpringMVC 的工作原理图：\n\n![SpringMVC工作原理](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281522150.jpeg)\n\n## SpringMVC 流程\n\n1、  用户发送请求至前端控制器 DispatcherServlet。\n\n2、  DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。\n\n3、  处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成) 一并返回给 DispatcherServlet。\n\n4、  DispatcherServlet 调用 HandlerAdapter 处理器适配器。\n\n5、  HandlerAdapter 经过适配调用具体的处理器 (Controller，也叫后端控制器)。\n\n6、  Controller 执行完成返回 ModelAndView。\n\n7、  HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。\n\n8、  DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。\n\n9、  ViewReslover 解析后返回具体 View。\n\n10、DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。\n\n11、 DispatcherServlet 响应用户。\n\n## 组件说明\n\n以下组件通常使用框架提供实现：\n\n- DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。\n\n- HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：**配置文件方式，实现接口方式，注解方式** 等。 \n\n- HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。\n\n- ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：**jsp、freemarker、pdf、excel** 等。\n\n### 组件  \n\n#### **1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供**  \n\n作用：接收请求，响应结果，相当于转发器，中央处理器。有了 dispatcherServlet **减少**了其它组件之间的**耦合度**。  \n用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它**调用其它组件处理用户的请求**，dispatcherServlet 的存在降低了组件之间的耦合性。\n\n#### **2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供**  \n\n作用：根据请求的 url 查找 Handler  \nHandlerMapping 负责根据用户请求找到 Handler 即处理器，springmvc 提供了不同的映射器实现不同的映射方式，例如：**配置文件方式，实现接口方式，注解方式**等。\n\n#### **3、处理器适配器 HandlerAdapter**  \n\n作用：按照特定规则（HandlerAdapter 要求的规则）去执行 Handler  \n通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n#### **4、处理器 Handler(需要工程师开发)**  \n\n**注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler**  \nHandler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。  \n由于 Handler 涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发 Handler。\n\n#### **5、视图解析器 View resolver(不需要工程师开发), 由框架提供**  \n\n作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）  \nView Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 springmvc 框架提供了很多的 View 视图类型，包括：jstlView、freemarkerView、pdfView 等。  \n一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n#### **6、视图 View(需要工程师开发 jsp...)**  \n\nView 是一个接口，实现类支持不同的 View 类型（jsp、freemarker、pdf...）","slug":"浅谈SpringMVC-框架","published":0,"updated":"2024-12-15T14:28:27.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllyps002kj0krb8oueter","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<span id=\"more\"></span>\n\n<blockquote>\n<p>本文介绍SpringMVC 框架的作用、原理和开发流程</p>\n</blockquote>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.cnblogs.com/xiaoxi/p/6164383.html\">www.cnblogs.com</a></p>\n</blockquote>\n<h1 id=\"SpringMVC-原理\"><a href=\"#SpringMVC-原理\" class=\"headerlink\" title=\"SpringMVC 原理\"></a>SpringMVC 原理</h1><p>SpringMVC 的工作原理图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281522150.jpeg\" alt=\"SpringMVC工作原理\"></p>\n<h2 id=\"SpringMVC-流程\"><a href=\"#SpringMVC-流程\" class=\"headerlink\" title=\"SpringMVC 流程\"></a>SpringMVC 流程</h2><p>1、  用户发送请求至前端控制器 DispatcherServlet。</p>\n<p>2、  DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</p>\n<p>3、  处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成) 一并返回给 DispatcherServlet。</p>\n<p>4、  DispatcherServlet 调用 HandlerAdapter 处理器适配器。</p>\n<p>5、  HandlerAdapter 经过适配调用具体的处理器 (Controller，也叫后端控制器)。</p>\n<p>6、  Controller 执行完成返回 ModelAndView。</p>\n<p>7、  HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。</p>\n<p>8、  DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</p>\n<p>9、  ViewReslover 解析后返回具体 View。</p>\n<p>10、DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</p>\n<p>11、 DispatcherServlet 响应用户。</p>\n<h2 id=\"组件说明\"><a href=\"#组件说明\" class=\"headerlink\" title=\"组件说明\"></a>组件说明</h2><p>以下组件通常使用框架提供实现：</p>\n<ul>\n<li><p>DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p>\n</li>\n<li><p>HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：<strong>配置文件方式，实现接口方式，注解方式</strong> 等。 </p>\n</li>\n<li><p>HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。</p>\n</li>\n<li><p>ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：<strong>jsp、freemarker、pdf、excel</strong> 等。</p>\n</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><h4 id=\"1、前端控制器-DispatcherServlet（不需要工程师开发）-由框架提供\"><a href=\"#1、前端控制器-DispatcherServlet（不需要工程师开发）-由框架提供\" class=\"headerlink\" title=\"1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供\"></a><strong>1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供</strong></h4><p>作用：接收请求，响应结果，相当于转发器，中央处理器。有了 dispatcherServlet <strong>减少</strong>了其它组件之间的<strong>耦合度</strong>。<br>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它<strong>调用其它组件处理用户的请求</strong>，dispatcherServlet 的存在降低了组件之间的耦合性。</p>\n<h4 id=\"2、处理器映射器-HandlerMapping-不需要工程师开发-由框架提供\"><a href=\"#2、处理器映射器-HandlerMapping-不需要工程师开发-由框架提供\" class=\"headerlink\" title=\"2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供\"></a><strong>2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供</strong></h4><p>作用：根据请求的 url 查找 Handler<br>HandlerMapping 负责根据用户请求找到 Handler 即处理器，springmvc 提供了不同的映射器实现不同的映射方式，例如：<strong>配置文件方式，实现接口方式，注解方式</strong>等。</p>\n<h4 id=\"3、处理器适配器-HandlerAdapter\"><a href=\"#3、处理器适配器-HandlerAdapter\" class=\"headerlink\" title=\"3、处理器适配器 HandlerAdapter\"></a><strong>3、处理器适配器 HandlerAdapter</strong></h4><p>作用：按照特定规则（HandlerAdapter 要求的规则）去执行 Handler<br>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n<h4 id=\"4、处理器-Handler-需要工程师开发\"><a href=\"#4、处理器-Handler-需要工程师开发\" class=\"headerlink\" title=\"4、处理器 Handler(需要工程师开发)\"></a><strong>4、处理器 Handler(需要工程师开发)</strong></h4><p><strong>注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler</strong><br>Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。<br>由于 Handler 涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发 Handler。</p>\n<h4 id=\"5、视图解析器-View-resolver-不需要工程师开发-由框架提供\"><a href=\"#5、视图解析器-View-resolver-不需要工程师开发-由框架提供\" class=\"headerlink\" title=\"5、视图解析器 View resolver(不需要工程师开发), 由框架提供\"></a><strong>5、视图解析器 View resolver(不需要工程师开发), 由框架提供</strong></h4><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 springmvc 框架提供了很多的 View 视图类型，包括：jstlView、freemarkerView、pdfView 等。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n<h4 id=\"6、视图-View-需要工程师开发-jsp…\"><a href=\"#6、视图-View-需要工程师开发-jsp…\" class=\"headerlink\" title=\"6、视图 View(需要工程师开发 jsp…)\"></a><strong>6、视图 View(需要工程师开发 jsp…)</strong></h4><p>View 是一个接口，实现类支持不同的 View 类型（jsp、freemarker、pdf…）</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>","more":"<blockquote>\n<p>本文介绍SpringMVC 框架的作用、原理和开发流程</p>\n</blockquote>\n<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://www.cnblogs.com/xiaoxi/p/6164383.html\">www.cnblogs.com</a></p>\n</blockquote>\n<h1 id=\"SpringMVC-原理\"><a href=\"#SpringMVC-原理\" class=\"headerlink\" title=\"SpringMVC 原理\"></a>SpringMVC 原理</h1><p>SpringMVC 的工作原理图：</p>\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281522150.jpeg\" alt=\"SpringMVC工作原理\"></p>\n<h2 id=\"SpringMVC-流程\"><a href=\"#SpringMVC-流程\" class=\"headerlink\" title=\"SpringMVC 流程\"></a>SpringMVC 流程</h2><p>1、  用户发送请求至前端控制器 DispatcherServlet。</p>\n<p>2、  DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</p>\n<p>3、  处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成) 一并返回给 DispatcherServlet。</p>\n<p>4、  DispatcherServlet 调用 HandlerAdapter 处理器适配器。</p>\n<p>5、  HandlerAdapter 经过适配调用具体的处理器 (Controller，也叫后端控制器)。</p>\n<p>6、  Controller 执行完成返回 ModelAndView。</p>\n<p>7、  HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。</p>\n<p>8、  DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</p>\n<p>9、  ViewReslover 解析后返回具体 View。</p>\n<p>10、DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</p>\n<p>11、 DispatcherServlet 响应用户。</p>\n<h2 id=\"组件说明\"><a href=\"#组件说明\" class=\"headerlink\" title=\"组件说明\"></a>组件说明</h2><p>以下组件通常使用框架提供实现：</p>\n<ul>\n<li><p>DispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p>\n</li>\n<li><p>HandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：<strong>配置文件方式，实现接口方式，注解方式</strong> 等。 </p>\n</li>\n<li><p>HandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。</p>\n</li>\n<li><p>ViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：<strong>jsp、freemarker、pdf、excel</strong> 等。</p>\n</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><h4 id=\"1、前端控制器-DispatcherServlet（不需要工程师开发）-由框架提供\"><a href=\"#1、前端控制器-DispatcherServlet（不需要工程师开发）-由框架提供\" class=\"headerlink\" title=\"1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供\"></a><strong>1、前端控制器 DispatcherServlet（不需要工程师开发）, 由框架提供</strong></h4><p>作用：接收请求，响应结果，相当于转发器，中央处理器。有了 dispatcherServlet <strong>减少</strong>了其它组件之间的<strong>耦合度</strong>。<br>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它<strong>调用其它组件处理用户的请求</strong>，dispatcherServlet 的存在降低了组件之间的耦合性。</p>\n<h4 id=\"2、处理器映射器-HandlerMapping-不需要工程师开发-由框架提供\"><a href=\"#2、处理器映射器-HandlerMapping-不需要工程师开发-由框架提供\" class=\"headerlink\" title=\"2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供\"></a><strong>2、处理器映射器 HandlerMapping(不需要工程师开发), 由框架提供</strong></h4><p>作用：根据请求的 url 查找 Handler<br>HandlerMapping 负责根据用户请求找到 Handler 即处理器，springmvc 提供了不同的映射器实现不同的映射方式，例如：<strong>配置文件方式，实现接口方式，注解方式</strong>等。</p>\n<h4 id=\"3、处理器适配器-HandlerAdapter\"><a href=\"#3、处理器适配器-HandlerAdapter\" class=\"headerlink\" title=\"3、处理器适配器 HandlerAdapter\"></a><strong>3、处理器适配器 HandlerAdapter</strong></h4><p>作用：按照特定规则（HandlerAdapter 要求的规则）去执行 Handler<br>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p>\n<h4 id=\"4、处理器-Handler-需要工程师开发\"><a href=\"#4、处理器-Handler-需要工程师开发\" class=\"headerlink\" title=\"4、处理器 Handler(需要工程师开发)\"></a><strong>4、处理器 Handler(需要工程师开发)</strong></h4><p><strong>注意：编写 Handler 时按照 HandlerAdapter 的要求去做，这样适配器才可以去正确执行 Handler</strong><br>Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。<br>由于 Handler 涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发 Handler。</p>\n<h4 id=\"5、视图解析器-View-resolver-不需要工程师开发-由框架提供\"><a href=\"#5、视图解析器-View-resolver-不需要工程师开发-由框架提供\" class=\"headerlink\" title=\"5、视图解析器 View resolver(不需要工程师开发), 由框架提供\"></a><strong>5、视图解析器 View resolver(不需要工程师开发), 由框架提供</strong></h4><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 springmvc 框架提供了很多的 View 视图类型，包括：jstlView、freemarkerView、pdfView 等。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。</p>\n<h4 id=\"6、视图-View-需要工程师开发-jsp…\"><a href=\"#6、视图-View-需要工程师开发-jsp…\" class=\"headerlink\" title=\"6、视图 View(需要工程师开发 jsp…)\"></a><strong>6、视图 View(需要工程师开发 jsp…)</strong></h4><p>View 是一个接口，实现类支持不同的 View 类型（jsp、freemarker、pdf…）</p>"},{"title":"SpringMVC 系列| 视图解析器 InternalResourceViewResolver","date":"2022-04-28T09:08:31.000Z","description":"视图解析器通过内部服务器进行转发的形式访问资源，解决了由于安全问题考虑将JSP放置在/WEB-INF/目录下使得外部不能直接访问的情况","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg)\n<!--more-->\n\n## 配置文件 springmvc.xml\n\n​\t为了使用 InternalResourceViewResolver 我们都会在 SpringMVC 的配置文件中进行如下配置\n\n```xml\n<!--  自定义视图解析器  -->\n<bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n    <property name=\"prefix\" value=\"/WEB-INF/\"/>\n    <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n然后我们想访问一个WEB-INF目录下的文件就可以直接输入这个文件的名字即可\n\n例如：view  视图解析器就会在底层帮我们解析为 /WEB-INF/view.jsp \n\n那么，它的底层究竟是如何来实现的呢？\n\n------\n \n## 底层实现\nInternalResourceViewResolver：它是UrlBasedViewResolver的子类，那么也就是说UrlBasedViewResolver所有的特性它全部支持，\n\n　　那么InternalResourceViewResolver到底有什么特性呢？我们从它的字面意义上来看，可以理解为内部资源视图解析器，也正是如此，它也是应用最广泛的视图解析器。\n\n![img](https://img2018.cnblogs.com/blog/1760573/201909/1760573-20190913171016769-311318391.png)\n\n \n\n \n\n \n\n来让我们来看一下，它的底层源码\n\n\n\n```\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage org.springframework.web.servlet.view;\n\nimport org.springframework.util.ClassUtils;\n\npublic class InternalResourceViewResolver extends UrlBasedViewResolver {\n    private static final boolean jstlPresent = ClassUtils.isPresent(\"javax.servlet.jsp.jstl.core.Config\", InternalResourceViewResolver.class.getClassLoader());\n    private Boolean alwaysInclude;\n\n    public InternalResourceViewResolver() {\n        Class<?> viewClass = this.requiredViewClass();\n        if (viewClass.equals(InternalResourceView.class) && jstlPresent) {\n            viewClass = JstlView.class;\n        }\n\n        this.setViewClass(viewClass);\n    }\n\n    protected Class<?> requiredViewClass() {\n        return InternalResourceView.class;\n    }\n\n    public void setAlwaysInclude(boolean alwaysInclude) {\n        this.alwaysInclude = alwaysInclude;\n    }\n\n    protected AbstractUrlBasedView buildView(String viewName) throws Exception {\n        InternalResourceView view = (InternalResourceView)super.buildView(viewName);\n        if (this.alwaysInclude != null) {\n            view.setAlwaysInclude(this.alwaysInclude);\n        }\n\n        view.setPreventDispatchLoop(true);\n        return view;\n    }\n}\n```\n\n\n\nInternalResourceViewResolver会通过 执行buildView方法然后调用父类的vuildView方法，把我们返回的请求或返回的viewname传过去，我们来看下这个方法的实现\n\n```\n//将不重要的代码部分已删除 protected AbstractUrlBasedView buildView(String viewName) throws Exception {\n        AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(this.getViewClass());//获得一个视图类  有继承关系\n        view.setUrl(this.getPrefix() + viewName + this.getSuffix());//获取我们在配置文件中配置的prefix 和suffix和传进来的viewName \n        String contentType = this.getContentType();\n        if (contentType != null) {\n            view.setContentType(contentType);//视图类型\n        }\n\n        return view;//返回我们的视图\n    }\n```\n\n我们通过这个方法可以发现，首选这个方法创建了一个视图，虽然我们不认识，但是他们间接的有继承关系，我们可以自行查看继承结构。\n\n然后就是获取我们在SpringMVC中配置的InternalResourceViewResolver的prefix和suffix还有viewName名，构成一个完整的url例如：/WEB-INF/a.jsp，最后把构成的视图返回构成了一个\n\n```\nInternalResourceView视图。然后InternalResourceView视图会把Controller处理器返回的模型属性全部都放到HttpServletRequest里面，让我们看下底层的执行\n```\n\n\n\n```\n//调用的是InternalResourceView对象的方法\n\n protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        this.exposeModelAsRequestAttributes(model, request);//通过调用这个方法然后执行放置到request，看接下来下面片段的代码\n        this.exposeHelpers(request);\n        String dispatcherPath = this.prepareForRendering(request, response);\n        RequestDispatcher rd = this.getRequestDispatcher(request, dispatcherPath);\n        if (rd == null) {\n            throw new ServletException(\"Could not get RequestDispatcher for [\" + this.getUrl() + \"]: Check that the corresponding file exists within your web application archive!\");\n        } else {\n            if (this.useInclude(request, response)) {\n                response.setContentType(this.getContentType());\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Including resource [\" + this.getUrl() + \"] in InternalResourceView '\" + this.getBeanName() + \"'\");\n                }\n\n                rd.include(request, response);\n            } else {\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Forwarding to resource [\" + this.getUrl() + \"] in InternalResourceView '\" + this.getBeanName() + \"'\");\n                }\n\n                rd.forward(request, response);\n            }\n\n        }\n    }\n\n//调用的是AbstractView 类\n\nprotected void exposeModelAsRequestAttributes(Map<String, Object> model, HttpServletRequest request) throws Exception {\n        Iterator var3 = model.entrySet().iterator();\n\n        while(var3.hasNext()) {\n            Entry<String, Object> entry = (Entry)var3.next();\n            String modelName = (String)entry.getKey();\n            Object modelValue = entry.getValue();\n            if (modelValue != null) {\n                request.setAttribute(modelName, modelValue);//把Controller返回的模型属性值放入\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Added model object '\" + modelName + \"' of type [\" + modelValue.getClass().getName() + \"] to request in view with name '\" + this.getBeanName() + \"'\");\n                }\n            } else {\n                request.removeAttribute(modelName);\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Removed model object '\" + modelName + \"' from request in view with name '\" + this.getBeanName() + \"'\");\n                }\n            }\n        }\n\n    }\n```\n\n[![复制代码](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281715735.gif)](javascript:void(0);)\n\n**然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL**\n\n**以上就是InternalResourceViewResolver解析流程**\n\n**连贯起来就是**\n\nInternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/a.jsp。\n\n###  \n\n### **最后我们在总结下总体的视图解析流程：**\n\n1、调用目标方法，SpringMVC将目标方法返回的String、View、ModelMap或是ModelAndView都转换为一个ModelAndView对象；\n\n2、然后通过视图解析器（ViewResolver）对ModelAndView对象中的View对象进行解析，将该逻辑视图View对象解析为一个物理视图View对象；\n\n3、最后调用物理视图View对象的render()方法进行视图渲染，得到响应结果。","source":"_drafts/2022-04-28-SpringMVC-系列-视图解析器-InternalResourceViewResolver.md","raw":"---\ntitle: SpringMVC 系列| 视图解析器 InternalResourceViewResolver\ndate: 2022-04-28 17:08:31\ntags: \n    - SpringMVC\n    - 后端\ncategories: SpringMVC\ndescription: 视图解析器通过内部服务器进行转发的形式访问资源，解决了由于安全问题考虑将JSP放置在/WEB-INF/目录下使得外部不能直接访问的情况\n\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![题图](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg)\n<!--more-->\n\n## 配置文件 springmvc.xml\n\n​\t为了使用 InternalResourceViewResolver 我们都会在 SpringMVC 的配置文件中进行如下配置\n\n```xml\n<!--  自定义视图解析器  -->\n<bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n    <property name=\"prefix\" value=\"/WEB-INF/\"/>\n    <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n然后我们想访问一个WEB-INF目录下的文件就可以直接输入这个文件的名字即可\n\n例如：view  视图解析器就会在底层帮我们解析为 /WEB-INF/view.jsp \n\n那么，它的底层究竟是如何来实现的呢？\n\n------\n \n## 底层实现\nInternalResourceViewResolver：它是UrlBasedViewResolver的子类，那么也就是说UrlBasedViewResolver所有的特性它全部支持，\n\n　　那么InternalResourceViewResolver到底有什么特性呢？我们从它的字面意义上来看，可以理解为内部资源视图解析器，也正是如此，它也是应用最广泛的视图解析器。\n\n![img](https://img2018.cnblogs.com/blog/1760573/201909/1760573-20190913171016769-311318391.png)\n\n \n\n \n\n \n\n来让我们来看一下，它的底层源码\n\n\n\n```\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage org.springframework.web.servlet.view;\n\nimport org.springframework.util.ClassUtils;\n\npublic class InternalResourceViewResolver extends UrlBasedViewResolver {\n    private static final boolean jstlPresent = ClassUtils.isPresent(\"javax.servlet.jsp.jstl.core.Config\", InternalResourceViewResolver.class.getClassLoader());\n    private Boolean alwaysInclude;\n\n    public InternalResourceViewResolver() {\n        Class<?> viewClass = this.requiredViewClass();\n        if (viewClass.equals(InternalResourceView.class) && jstlPresent) {\n            viewClass = JstlView.class;\n        }\n\n        this.setViewClass(viewClass);\n    }\n\n    protected Class<?> requiredViewClass() {\n        return InternalResourceView.class;\n    }\n\n    public void setAlwaysInclude(boolean alwaysInclude) {\n        this.alwaysInclude = alwaysInclude;\n    }\n\n    protected AbstractUrlBasedView buildView(String viewName) throws Exception {\n        InternalResourceView view = (InternalResourceView)super.buildView(viewName);\n        if (this.alwaysInclude != null) {\n            view.setAlwaysInclude(this.alwaysInclude);\n        }\n\n        view.setPreventDispatchLoop(true);\n        return view;\n    }\n}\n```\n\n\n\nInternalResourceViewResolver会通过 执行buildView方法然后调用父类的vuildView方法，把我们返回的请求或返回的viewname传过去，我们来看下这个方法的实现\n\n```\n//将不重要的代码部分已删除 protected AbstractUrlBasedView buildView(String viewName) throws Exception {\n        AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(this.getViewClass());//获得一个视图类  有继承关系\n        view.setUrl(this.getPrefix() + viewName + this.getSuffix());//获取我们在配置文件中配置的prefix 和suffix和传进来的viewName \n        String contentType = this.getContentType();\n        if (contentType != null) {\n            view.setContentType(contentType);//视图类型\n        }\n\n        return view;//返回我们的视图\n    }\n```\n\n我们通过这个方法可以发现，首选这个方法创建了一个视图，虽然我们不认识，但是他们间接的有继承关系，我们可以自行查看继承结构。\n\n然后就是获取我们在SpringMVC中配置的InternalResourceViewResolver的prefix和suffix还有viewName名，构成一个完整的url例如：/WEB-INF/a.jsp，最后把构成的视图返回构成了一个\n\n```\nInternalResourceView视图。然后InternalResourceView视图会把Controller处理器返回的模型属性全部都放到HttpServletRequest里面，让我们看下底层的执行\n```\n\n\n\n```\n//调用的是InternalResourceView对象的方法\n\n protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        this.exposeModelAsRequestAttributes(model, request);//通过调用这个方法然后执行放置到request，看接下来下面片段的代码\n        this.exposeHelpers(request);\n        String dispatcherPath = this.prepareForRendering(request, response);\n        RequestDispatcher rd = this.getRequestDispatcher(request, dispatcherPath);\n        if (rd == null) {\n            throw new ServletException(\"Could not get RequestDispatcher for [\" + this.getUrl() + \"]: Check that the corresponding file exists within your web application archive!\");\n        } else {\n            if (this.useInclude(request, response)) {\n                response.setContentType(this.getContentType());\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Including resource [\" + this.getUrl() + \"] in InternalResourceView '\" + this.getBeanName() + \"'\");\n                }\n\n                rd.include(request, response);\n            } else {\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Forwarding to resource [\" + this.getUrl() + \"] in InternalResourceView '\" + this.getBeanName() + \"'\");\n                }\n\n                rd.forward(request, response);\n            }\n\n        }\n    }\n\n//调用的是AbstractView 类\n\nprotected void exposeModelAsRequestAttributes(Map<String, Object> model, HttpServletRequest request) throws Exception {\n        Iterator var3 = model.entrySet().iterator();\n\n        while(var3.hasNext()) {\n            Entry<String, Object> entry = (Entry)var3.next();\n            String modelName = (String)entry.getKey();\n            Object modelValue = entry.getValue();\n            if (modelValue != null) {\n                request.setAttribute(modelName, modelValue);//把Controller返回的模型属性值放入\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Added model object '\" + modelName + \"' of type [\" + modelValue.getClass().getName() + \"] to request in view with name '\" + this.getBeanName() + \"'\");\n                }\n            } else {\n                request.removeAttribute(modelName);\n                if (this.logger.isDebugEnabled()) {\n                    this.logger.debug(\"Removed model object '\" + modelName + \"' from request in view with name '\" + this.getBeanName() + \"'\");\n                }\n            }\n        }\n\n    }\n```\n\n[![复制代码](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281715735.gif)](javascript:void(0);)\n\n**然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL**\n\n**以上就是InternalResourceViewResolver解析流程**\n\n**连贯起来就是**\n\nInternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/a.jsp。\n\n###  \n\n### **最后我们在总结下总体的视图解析流程：**\n\n1、调用目标方法，SpringMVC将目标方法返回的String、View、ModelMap或是ModelAndView都转换为一个ModelAndView对象；\n\n2、然后通过视图解析器（ViewResolver）对ModelAndView对象中的View对象进行解析，将该逻辑视图View对象解析为一个物理视图View对象；\n\n3、最后调用物理视图View对象的render()方法进行视图渲染，得到响应结果。","slug":"SpringMVC-系列-视图解析器-InternalResourceViewResolver","published":0,"updated":"2024-12-15T14:28:27.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypu002pj0kr4iil9hc4","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg\" alt=\"题图\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置文件-springmvc-xml\"><a href=\"#配置文件-springmvc-xml\" class=\"headerlink\" title=\"配置文件 springmvc.xml\"></a>配置文件 springmvc.xml</h2><p>​    为了使用 InternalResourceViewResolver 我们都会在 SpringMVC 的配置文件中进行如下配置</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--  自定义视图解析器  --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewResolver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>然后我们想访问一个WEB-INF目录下的文件就可以直接输入这个文件的名字即可</p>\n<p>例如：view  视图解析器就会在底层帮我们解析为 /WEB-INF/view.jsp </p>\n<p>那么，它的底层究竟是如何来实现的呢？</p>\n<hr>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><p>InternalResourceViewResolver：它是UrlBasedViewResolver的子类，那么也就是说UrlBasedViewResolver所有的特性它全部支持，</p>\n<p>　　那么InternalResourceViewResolver到底有什么特性呢？我们从它的字面意义上来看，可以理解为内部资源视图解析器，也正是如此，它也是应用最广泛的视图解析器。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1760573/201909/1760573-20190913171016769-311318391.png\" alt=\"img\"></p>\n<p>来让我们来看一下，它的底层源码</p>\n<pre><code>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage org.springframework.web.servlet.view;\n\nimport org.springframework.util.ClassUtils;\n\npublic class InternalResourceViewResolver extends UrlBasedViewResolver &#123;\n    private static final boolean jstlPresent = ClassUtils.isPresent(&quot;javax.servlet.jsp.jstl.core.Config&quot;, InternalResourceViewResolver.class.getClassLoader());\n    private Boolean alwaysInclude;\n\n    public InternalResourceViewResolver() &#123;\n        Class&lt;?&gt; viewClass = this.requiredViewClass();\n        if (viewClass.equals(InternalResourceView.class) &amp;&amp; jstlPresent) &#123;\n            viewClass = JstlView.class;\n        &#125;\n\n        this.setViewClass(viewClass);\n    &#125;\n\n    protected Class&lt;?&gt; requiredViewClass() &#123;\n        return InternalResourceView.class;\n    &#125;\n\n    public void setAlwaysInclude(boolean alwaysInclude) &#123;\n        this.alwaysInclude = alwaysInclude;\n    &#125;\n\n    protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;\n        InternalResourceView view = (InternalResourceView)super.buildView(viewName);\n        if (this.alwaysInclude != null) &#123;\n            view.setAlwaysInclude(this.alwaysInclude);\n        &#125;\n\n        view.setPreventDispatchLoop(true);\n        return view;\n    &#125;\n&#125;\n</code></pre>\n<p>InternalResourceViewResolver会通过 执行buildView方法然后调用父类的vuildView方法，把我们返回的请求或返回的viewname传过去，我们来看下这个方法的实现</p>\n<pre><code>//将不重要的代码部分已删除 protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;\n        AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(this.getViewClass());//获得一个视图类  有继承关系\n        view.setUrl(this.getPrefix() + viewName + this.getSuffix());//获取我们在配置文件中配置的prefix 和suffix和传进来的viewName \n        String contentType = this.getContentType();\n        if (contentType != null) &#123;\n            view.setContentType(contentType);//视图类型\n        &#125;\n\n        return view;//返回我们的视图\n    &#125;\n</code></pre>\n<p>我们通过这个方法可以发现，首选这个方法创建了一个视图，虽然我们不认识，但是他们间接的有继承关系，我们可以自行查看继承结构。</p>\n<p>然后就是获取我们在SpringMVC中配置的InternalResourceViewResolver的prefix和suffix还有viewName名，构成一个完整的url例如：/WEB-INF/a.jsp，最后把构成的视图返回构成了一个</p>\n<pre><code>InternalResourceView视图。然后InternalResourceView视图会把Controller处理器返回的模型属性全部都放到HttpServletRequest里面，让我们看下底层的执行\n</code></pre>\n<pre><code>//调用的是InternalResourceView对象的方法\n\n protected void renderMergedOutputModel(Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n        this.exposeModelAsRequestAttributes(model, request);//通过调用这个方法然后执行放置到request，看接下来下面片段的代码\n        this.exposeHelpers(request);\n        String dispatcherPath = this.prepareForRendering(request, response);\n        RequestDispatcher rd = this.getRequestDispatcher(request, dispatcherPath);\n        if (rd == null) &#123;\n            throw new ServletException(&quot;Could not get RequestDispatcher for [&quot; + this.getUrl() + &quot;]: Check that the corresponding file exists within your web application archive!&quot;);\n        &#125; else &#123;\n            if (this.useInclude(request, response)) &#123;\n                response.setContentType(this.getContentType());\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Including resource [&quot; + this.getUrl() + &quot;] in InternalResourceView &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n\n                rd.include(request, response);\n            &#125; else &#123;\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Forwarding to resource [&quot; + this.getUrl() + &quot;] in InternalResourceView &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n\n                rd.forward(request, response);\n            &#125;\n\n        &#125;\n    &#125;\n\n//调用的是AbstractView 类\n\nprotected void exposeModelAsRequestAttributes(Map&lt;String, Object&gt; model, HttpServletRequest request) throws Exception &#123;\n        Iterator var3 = model.entrySet().iterator();\n\n        while(var3.hasNext()) &#123;\n            Entry&lt;String, Object&gt; entry = (Entry)var3.next();\n            String modelName = (String)entry.getKey();\n            Object modelValue = entry.getValue();\n            if (modelValue != null) &#123;\n                request.setAttribute(modelName, modelValue);//把Controller返回的模型属性值放入\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Added model object &#39;&quot; + modelName + &quot;&#39; of type [&quot; + modelValue.getClass().getName() + &quot;] to request in view with name &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n            &#125; else &#123;\n                request.removeAttribute(modelName);\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Removed model object &#39;&quot; + modelName + &quot;&#39; from request in view with name &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n            &#125;\n        &#125;\n\n    &#125;\n</code></pre>\n<p><a href=\"javascript:void(0);\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281715735.gif\" alt=\"复制代码\"></a></p>\n<p><strong>然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL</strong></p>\n<p><strong>以上就是InternalResourceViewResolver解析流程</strong></p>\n<p><strong>连贯起来就是</strong></p>\n<p>InternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/a.jsp。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"最后我们在总结下总体的视图解析流程：\"><a href=\"#最后我们在总结下总体的视图解析流程：\" class=\"headerlink\" title=\"最后我们在总结下总体的视图解析流程：\"></a><strong>最后我们在总结下总体的视图解析流程：</strong></h3><p>1、调用目标方法，SpringMVC将目标方法返回的String、View、ModelMap或是ModelAndView都转换为一个ModelAndView对象；</p>\n<p>2、然后通过视图解析器（ViewResolver）对ModelAndView对象中的View对象进行解析，将该逻辑视图View对象解析为一个物理视图View对象；</p>\n<p>3、最后调用物理视图View对象的render()方法进行视图渲染，得到响应结果。</p>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021639302.jpg\" alt=\"题图\"></p>","more":"<h2 id=\"配置文件-springmvc-xml\"><a href=\"#配置文件-springmvc-xml\" class=\"headerlink\" title=\"配置文件 springmvc.xml\"></a>配置文件 springmvc.xml</h2><p>​    为了使用 InternalResourceViewResolver 我们都会在 SpringMVC 的配置文件中进行如下配置</p>\n<pre><code class=\"xml\">&lt;!--  自定义视图解析器  --&gt;\n&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;\n    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/&quot;/&gt;\n    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>然后我们想访问一个WEB-INF目录下的文件就可以直接输入这个文件的名字即可</p>\n<p>例如：view  视图解析器就会在底层帮我们解析为 /WEB-INF/view.jsp </p>\n<p>那么，它的底层究竟是如何来实现的呢？</p>\n<hr>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><p>InternalResourceViewResolver：它是UrlBasedViewResolver的子类，那么也就是说UrlBasedViewResolver所有的特性它全部支持，</p>\n<p>　　那么InternalResourceViewResolver到底有什么特性呢？我们从它的字面意义上来看，可以理解为内部资源视图解析器，也正是如此，它也是应用最广泛的视图解析器。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1760573/201909/1760573-20190913171016769-311318391.png\" alt=\"img\"></p>\n<p>来让我们来看一下，它的底层源码</p>\n<pre><code>//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage org.springframework.web.servlet.view;\n\nimport org.springframework.util.ClassUtils;\n\npublic class InternalResourceViewResolver extends UrlBasedViewResolver &#123;\n    private static final boolean jstlPresent = ClassUtils.isPresent(&quot;javax.servlet.jsp.jstl.core.Config&quot;, InternalResourceViewResolver.class.getClassLoader());\n    private Boolean alwaysInclude;\n\n    public InternalResourceViewResolver() &#123;\n        Class&lt;?&gt; viewClass = this.requiredViewClass();\n        if (viewClass.equals(InternalResourceView.class) &amp;&amp; jstlPresent) &#123;\n            viewClass = JstlView.class;\n        &#125;\n\n        this.setViewClass(viewClass);\n    &#125;\n\n    protected Class&lt;?&gt; requiredViewClass() &#123;\n        return InternalResourceView.class;\n    &#125;\n\n    public void setAlwaysInclude(boolean alwaysInclude) &#123;\n        this.alwaysInclude = alwaysInclude;\n    &#125;\n\n    protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;\n        InternalResourceView view = (InternalResourceView)super.buildView(viewName);\n        if (this.alwaysInclude != null) &#123;\n            view.setAlwaysInclude(this.alwaysInclude);\n        &#125;\n\n        view.setPreventDispatchLoop(true);\n        return view;\n    &#125;\n&#125;\n</code></pre>\n<p>InternalResourceViewResolver会通过 执行buildView方法然后调用父类的vuildView方法，把我们返回的请求或返回的viewname传过去，我们来看下这个方法的实现</p>\n<pre><code>//将不重要的代码部分已删除 protected AbstractUrlBasedView buildView(String viewName) throws Exception &#123;\n        AbstractUrlBasedView view = (AbstractUrlBasedView)BeanUtils.instantiateClass(this.getViewClass());//获得一个视图类  有继承关系\n        view.setUrl(this.getPrefix() + viewName + this.getSuffix());//获取我们在配置文件中配置的prefix 和suffix和传进来的viewName \n        String contentType = this.getContentType();\n        if (contentType != null) &#123;\n            view.setContentType(contentType);//视图类型\n        &#125;\n\n        return view;//返回我们的视图\n    &#125;\n</code></pre>\n<p>我们通过这个方法可以发现，首选这个方法创建了一个视图，虽然我们不认识，但是他们间接的有继承关系，我们可以自行查看继承结构。</p>\n<p>然后就是获取我们在SpringMVC中配置的InternalResourceViewResolver的prefix和suffix还有viewName名，构成一个完整的url例如：/WEB-INF/a.jsp，最后把构成的视图返回构成了一个</p>\n<pre><code>InternalResourceView视图。然后InternalResourceView视图会把Controller处理器返回的模型属性全部都放到HttpServletRequest里面，让我们看下底层的执行\n</code></pre>\n<pre><code>//调用的是InternalResourceView对象的方法\n\n protected void renderMergedOutputModel(Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n        this.exposeModelAsRequestAttributes(model, request);//通过调用这个方法然后执行放置到request，看接下来下面片段的代码\n        this.exposeHelpers(request);\n        String dispatcherPath = this.prepareForRendering(request, response);\n        RequestDispatcher rd = this.getRequestDispatcher(request, dispatcherPath);\n        if (rd == null) &#123;\n            throw new ServletException(&quot;Could not get RequestDispatcher for [&quot; + this.getUrl() + &quot;]: Check that the corresponding file exists within your web application archive!&quot;);\n        &#125; else &#123;\n            if (this.useInclude(request, response)) &#123;\n                response.setContentType(this.getContentType());\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Including resource [&quot; + this.getUrl() + &quot;] in InternalResourceView &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n\n                rd.include(request, response);\n            &#125; else &#123;\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Forwarding to resource [&quot; + this.getUrl() + &quot;] in InternalResourceView &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n\n                rd.forward(request, response);\n            &#125;\n\n        &#125;\n    &#125;\n\n//调用的是AbstractView 类\n\nprotected void exposeModelAsRequestAttributes(Map&lt;String, Object&gt; model, HttpServletRequest request) throws Exception &#123;\n        Iterator var3 = model.entrySet().iterator();\n\n        while(var3.hasNext()) &#123;\n            Entry&lt;String, Object&gt; entry = (Entry)var3.next();\n            String modelName = (String)entry.getKey();\n            Object modelValue = entry.getValue();\n            if (modelValue != null) &#123;\n                request.setAttribute(modelName, modelValue);//把Controller返回的模型属性值放入\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Added model object &#39;&quot; + modelName + &quot;&#39; of type [&quot; + modelValue.getClass().getName() + &quot;] to request in view with name &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n            &#125; else &#123;\n                request.removeAttribute(modelName);\n                if (this.logger.isDebugEnabled()) &#123;\n                    this.logger.debug(&quot;Removed model object &#39;&quot; + modelName + &quot;&#39; from request in view with name &#39;&quot; + this.getBeanName() + &quot;&#39;&quot;);\n                &#125;\n            &#125;\n        &#125;\n\n    &#125;\n</code></pre>\n<p><a href=\"javascript:void(0);\"><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202204281715735.gif\" alt=\"复制代码\"></a></p>\n<p><strong>然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL</strong></p>\n<p><strong>以上就是InternalResourceViewResolver解析流程</strong></p>\n<p><strong>连贯起来就是</strong></p>\n<p>InternalResourceViewResolver会把返回的视图名称都解析为InternalResourceView对象，InternalResourceView会把Controller处理器方法返回的模型属性都存放到对应的request属性中，然后通过RequestDispatcher在服务器端把请求forword重定向到目标URL。比如在InternalResourceViewResolver中定义了prefix=/WEB-INF/，suffix=.jsp，然后请求的Controller处理器方法返回的视图名称为test，那么这个时候InternalResourceViewResolver就会把test解析为一个InternalResourceView对象，先把返回的模型属性都存放到对应的HttpServletRequest属性中，然后利用RequestDispatcher在服务器端把请求forword到/WEB-INF/a.jsp。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"最后我们在总结下总体的视图解析流程：\"><a href=\"#最后我们在总结下总体的视图解析流程：\" class=\"headerlink\" title=\"最后我们在总结下总体的视图解析流程：\"></a><strong>最后我们在总结下总体的视图解析流程：</strong></h3><p>1、调用目标方法，SpringMVC将目标方法返回的String、View、ModelMap或是ModelAndView都转换为一个ModelAndView对象；</p>\n<p>2、然后通过视图解析器（ViewResolver）对ModelAndView对象中的View对象进行解析，将该逻辑视图View对象解析为一个物理视图View对象；</p>\n<p>3、最后调用物理视图View对象的render()方法进行视图渲染，得到响应结果。</p>"},{"title":"miniprogram","_content":"\n# 微信小程序\n\n\n","source":"_drafts/miniprogram.md","raw":"---\ntitle: miniprogram\ntags: 小程序\ncategories: 小程序\n---\n\n# 微信小程序\n\n\n","slug":"miniprogram","published":0,"date":"2021-09-28T03:33:27.453Z","updated":"2021-09-28T03:35:51.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypw002sj0kr8ng418yh","content":"<h1 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h1>","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"","more":"<h1 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h1>"},{"title":"Hexo 显示文章摘要","summary":"hexo 配置","abbrlink":2889,"date":"2022-07-24T05:47:10.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![animal-6997104_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714215.jpg)\n\n<!-- more -->\n\n# 前言\n\n> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n# Start\n> Hexo 中有两种形式添加摘要：\n>   - 文章开头配置 `description`  \n>   - 在文章中直接添加 `<!-- more -->`\n\n## 添加 `description`      \nHexo 每篇文章的开头可以表示文章的信息,其中可以添加 `descrption` 来表示正篇文章的摘要 \n```markdown\n---\ntitle: Hexo 显示文章摘要\ndate: 2021-09-24 13:47:10\ntags: Hexo\ncategories: Hexo\ndescription: 显示文章摘要 # 这里表示添加文章摘要\n---\n```\n## 添加 more\n在文章的适当处直接添加\n```markdown\n---\n# 前言\n> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n# Start\n> Hexo 中有两种形式添加摘要：\n>   - 文章开头配置 `description`  \n>   - 在文章中直接添加 `<!-- more -->`\n\n<!-- more -->\n```\n## 效果\n![more.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241407073.png)\n\n# End\n到这里就结束了\n\n# 参考：\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n","source":"_posts/2021-09-24-Hexo-显示文章摘要.md","raw":"---\ntitle: Hexo 显示文章摘要\ntags: Hexo\ncategories: Hexo\nsummary: hexo 配置\nabbrlink: 2889\ndate: 2022-07-24 13:47:10\n---\n<meta name=\"referrer\" content=\"no-referrer\"/>\n\n![animal-6997104_1920](https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714215.jpg)\n\n<!-- more -->\n\n# 前言\n\n> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n# Start\n> Hexo 中有两种形式添加摘要：\n>   - 文章开头配置 `description`  \n>   - 在文章中直接添加 `<!-- more -->`\n\n## 添加 `description`      \nHexo 每篇文章的开头可以表示文章的信息,其中可以添加 `descrption` 来表示正篇文章的摘要 \n```markdown\n---\ntitle: Hexo 显示文章摘要\ndate: 2021-09-24 13:47:10\ntags: Hexo\ncategories: Hexo\ndescription: 显示文章摘要 # 这里表示添加文章摘要\n---\n```\n## 添加 more\n在文章的适当处直接添加\n```markdown\n---\n# 前言\n> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n# Start\n> Hexo 中有两种形式添加摘要：\n>   - 文章开头配置 `description`  \n>   - 在文章中直接添加 `<!-- more -->`\n\n<!-- more -->\n```\n## 效果\n![more.png](https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241407073.png)\n\n# End\n到这里就结束了\n\n# 参考：\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n","slug":"Hexo-显示文章摘要","published":1,"updated":"2024-12-16T12:11:11.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm4sllypy002wj0kr898nb6fv","content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714215.jpg\" alt=\"animal-6997104_1920\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容</p>\n</blockquote>\n<h1 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h1><blockquote>\n<p>Hexo 中有两种形式添加摘要：</p>\n<ul>\n<li>文章开头配置 <code>description</code>  </li>\n<li>在文章中直接添加 <code>&lt;!-- more --&gt;</code></li>\n</ul>\n</blockquote>\n<h2 id=\"添加-description\"><a href=\"#添加-description\" class=\"headerlink\" title=\"添加 description\"></a>添加 <code>description</code></h2><p>Hexo 每篇文章的开头可以表示文章的信息,其中可以添加 <code>descrption</code> 来表示正篇文章的摘要 </p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: Hexo 显示文章摘要\ndate: 2021-09-24 13:47:10\ntags: Hexo\ncategories: Hexo\n<span class=\"token title important\">description: 显示文章摘要 # 这里表示添加文章摘要\n<span class=\"token punctuation\">---</span></span>\n</code></pre>\n<h2 id=\"添加-more\"><a href=\"#添加-more\" class=\"headerlink\" title=\"添加 more\"></a>添加 more</h2><p>在文章的适当处直接添加</p>\n<pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 前言</span>\n<span class=\"token blockquote punctuation\">></span> Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> Start</span>\n<span class=\"token blockquote punctuation\">></span> Hexo 中有两种形式添加摘要：\n<span class=\"token blockquote punctuation\">></span>   <span class=\"token list punctuation\">-</span> 文章开头配置 <span class=\"token code keyword\">`description`</span>  \n<span class=\"token blockquote punctuation\">></span>   <span class=\"token list punctuation\">-</span> 在文章中直接添加 `<span class=\"token comment\" spellcheck=\"true\">&lt;!-- more --></span>`\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- more --></span>\n</code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241407073.png\" alt=\"more.png\"></p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>到这里就结束了</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"五月雨变奏电音","artist":"AnimeVibe","url":"http://xxx.com/music1.mp3","cover":"http://xxx.com/music-cover1.png"},{"name":"Take me hand","artist":"DAISHI DANCE,Cecile Corbel","url":"/medias/music/music2.mp3","cover":"/medias/music/cover2.png"},{"name":"Shape of You","artist":"J.Fla","url":"http://xxx.com/music3.mp3","cover":"http://xxx.com/music-cover3.png"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"cover":false,"excerpt":"<meta name=\"referrer\" content=\"no-referrer\"/>\n\n<p><img src=\"https://gcore.jsdelivr.net/gh/lingzhexi/blogImage/img/2022/03/202203021714215.jpg\" alt=\"animal-6997104_1920\"></p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容</p>\n</blockquote>\n<h1 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h1><blockquote>\n<p>Hexo 中有两种形式添加摘要：</p>\n<ul>\n<li>文章开头配置 <code>description</code>  </li>\n<li>在文章中直接添加 <code>&lt;!-- more --&gt;</code></li>\n</ul>\n</blockquote>\n<h2 id=\"添加-description\"><a href=\"#添加-description\" class=\"headerlink\" title=\"添加 description\"></a>添加 <code>description</code></h2><p>Hexo 每篇文章的开头可以表示文章的信息,其中可以添加 <code>descrption</code> 来表示正篇文章的摘要 </p>\n<pre><code class=\"markdown\">---\ntitle: Hexo 显示文章摘要\ndate: 2021-09-24 13:47:10\ntags: Hexo\ncategories: Hexo\ndescription: 显示文章摘要 # 这里表示添加文章摘要\n---\n</code></pre>\n<h2 id=\"添加-more\"><a href=\"#添加-more\" class=\"headerlink\" title=\"添加 more\"></a>添加 more</h2><p>在文章的适当处直接添加</p>\n<pre><code class=\"markdown\">---\n# 前言\n&gt; Hexo 默认的文章是全部展示，对于阅读的体验感很差，所以就需要对文章进行摘要显示部分文章内容\n\n# Start\n&gt; Hexo 中有两种形式添加摘要：\n&gt;   - 文章开头配置 `description`  \n&gt;   - 在文章中直接添加 `&lt;!-- more --&gt;`\n\n&lt;!-- more --&gt;\n</code></pre>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"https://gitee.com/lingzhexi/blogImage/raw/2021/09/24/202109241407073.png\" alt=\"more.png\"></p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>到这里就结束了</p>\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm4sllyn00001j0krgrt0hig6","category_id":"cm4sllynd0004j0krgexaf7oz","_id":"cm4sllyo1000jj0kr9l811o07"},{"post_id":"cm4sllyn90003j0krgwcv778f","category_id":"cm4sllynd0004j0krgexaf7oz","_id":"cm4sllyo7000qj0krc41ogay1"},{"post_id":"cm4sllyo3000mj0kr5f71bvit","category_id":"cm4sllynd0004j0krgexaf7oz","_id":"cm4sllyoe000yj0kr0l1w01a7"},{"post_id":"cm4sllyni0007j0krh6ipgkh7","category_id":"cm4sllyo0000ij0kr8oogg2qv","_id":"cm4sllyoh0013j0kr7w72fiwq"},{"post_id":"cm4sllynm0009j0krc5codcfk","category_id":"cm4sllyo0000ij0kr8oogg2qv","_id":"cm4sllyol0016j0krfs8lciiq"},{"post_id":"cm4sllynq000bj0kr7hsmd7r8","category_id":"cm4sllyof000zj0kr3xqf1mko","_id":"cm4sllyoq001fj0kr00infzim"},{"post_id":"cm4sllyoj0015j0kranrm7myj","category_id":"cm4sllynd0004j0krgexaf7oz","_id":"cm4sllyot001kj0krgmgm7gyp"},{"post_id":"cm4sllynv000fj0kr2mg1ep8w","category_id":"cm4sllyol0017j0kr6zprfmj4","_id":"cm4sllyow001oj0kr8yu48v7y"},{"post_id":"cm4sllynz000hj0kr99b5365r","category_id":"cm4sllyo0000ij0kr8oogg2qv","_id":"cm4sllyp1001tj0kr9evu9erz"},{"post_id":"cm4sllyo6000pj0krca68b6ql","category_id":"cm4sllyov001nj0krbi4ibhd4","_id":"cm4sllypg0023j0krb7ck133v"},{"post_id":"cm4sllyob000vj0krejvkgvde","category_id":"cm4sllyov001nj0krbi4ibhd4","_id":"cm4sllypk0027j0kreudrg3jr"},{"post_id":"cm4sllypi0025j0kr55fybua1","category_id":"cm4sllyo0000ij0kr8oogg2qv","_id":"cm4sllypo002dj0krg8bf1ftw"},{"post_id":"cm4sllyod000xj0kravj3frif","category_id":"cm4sllypg0022j0kr3i81gl2f","_id":"cm4sllypr002ij0krhwefgebt"},{"post_id":"cm4sllypj0026j0kran5f217j","category_id":"cm4sllynd0004j0krgexaf7oz","_id":"cm4sllypt002lj0kr14h1g1r1"},{"post_id":"cm4sllyog0012j0krfm8c6821","category_id":"cm4sllyov001nj0krbi4ibhd4","_id":"cm4sllypv002qj0kr13zc03ln"},{"post_id":"cm4sllyon001aj0krdauagdri","category_id":"cm4sllypp002ej0krckvva10w","_id":"cm4sllypx002uj0kr91cec472"},{"post_id":"cm4sllyop001dj0kr1xihhoe4","category_id":"cm4sllypt002nj0krbpbi4ycr","_id":"cm4sllyq00030j0kr3ibpehz0"},{"post_id":"cm4sllypy002wj0kr898nb6fv","category_id":"cm4sllyo0000ij0kr8oogg2qv","_id":"cm4sllyq30034j0kr49s05qeg"},{"post_id":"cm4sllyor001ij0krdlj2d9y3","category_id":"cm4sllypx002vj0kr3py672wo","_id":"cm4sllyq30036j0krfdg9enel"},{"post_id":"cm4sllyot001lj0kr037u709i","category_id":"cm4sllyq00031j0krcnsz4og8","_id":"cm4sllyq5003cj0kred45105x"},{"post_id":"cm4sllyow001pj0kr05lx9r99","category_id":"cm4sllypt002nj0krbpbi4ycr","_id":"cm4sllyq6003fj0kr4e4q0qnf"},{"post_id":"cm4sllyoz001sj0kr1bof4fbu","category_id":"cm4sllyq5003bj0kr80gc9t0c","_id":"cm4sllyq7003jj0krfu77fero"},{"post_id":"cm4sllyp2001vj0kr0jw55491","category_id":"cm4sllyq6003gj0krgfetb15p","_id":"cm4sllyq8003nj0kresjedl28"},{"post_id":"cm4sllyp5001zj0krc4wh6g7p","category_id":"cm4sllyq7003kj0krhmdkf3gt","_id":"cm4sllyqa003rj0kr2agg8axf"},{"post_id":"cm4sllypl002aj0krgvn3ew27","category_id":"cm4sllypt002nj0krbpbi4ycr","_id":"cm4sllyqb003tj0kr5vuc3twa"},{"post_id":"cm4sllypn002cj0kr7fgnehnc","category_id":"cm4sllyqa003qj0krb37v5dyv","_id":"cm4sllyqc003xj0kr93p2bcqx"},{"post_id":"cm4sllypp002hj0kr6kwog0xq","category_id":"cm4sllyqb003uj0kr6k7eec2b","_id":"cm4sllyqd0043j0kr30yyaff5"},{"post_id":"cm4sllyps002kj0krb8oueter","category_id":"cm4sllyqc003zj0krgb9mha0g","_id":"cm4sllyqf0049j0kr7k7lhi9q"},{"post_id":"cm4sllypu002pj0kr4iil9hc4","category_id":"cm4sllyqc003zj0krgb9mha0g","_id":"cm4sllyqg004bj0kr8als7loz"},{"post_id":"cm4sllypw002sj0kr8ng418yh","category_id":"cm4sllyqf0048j0krcreles3f","_id":"cm4sllyqh004ej0kr25yfeh6n"}],"PostTag":[{"post_id":"cm4sllyn00001j0krgrt0hig6","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllyo5000nj0krgeq2d8oc"},{"post_id":"cm4sllyn00001j0krgrt0hig6","tag_id":"cm4sllyns000dj0kr53hb0xi2","_id":"cm4sllyo8000rj0kr2o3qhzq7"},{"post_id":"cm4sllyn90003j0krgwcv778f","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllyoo001bj0kr6lx7hjr7"},{"post_id":"cm4sllyn90003j0krgwcv778f","tag_id":"cm4sllyns000dj0kr53hb0xi2","_id":"cm4sllyoq001ej0krffst5mfd"},{"post_id":"cm4sllyn90003j0krgwcv778f","tag_id":"cm4sllyof0010j0kr77l8eev0","_id":"cm4sllyot001jj0krft1c36zc"},{"post_id":"cm4sllyoj0015j0kranrm7myj","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllyov001mj0kr3u9y8cms"},{"post_id":"cm4sllyni0007j0krh6ipgkh7","tag_id":"cm4sllyol0018j0kr97dm3zrf","_id":"cm4sllyoy001rj0kr6i6ohdnq"},{"post_id":"cm4sllyni0007j0krh6ipgkh7","tag_id":"cm4sllyor001hj0kr2lbzf7f0","_id":"cm4sllyp1001uj0kr7u4iefti"},{"post_id":"cm4sllyow001pj0kr05lx9r99","tag_id":"cm4sllyns000dj0kr53hb0xi2","_id":"cm4sllyp5001yj0kr72iz1li4"},{"post_id":"cm4sllynm0009j0krc5codcfk","tag_id":"cm4sllyor001hj0kr2lbzf7f0","_id":"cm4sllyp70020j0kr8r5142ex"},{"post_id":"cm4sllynq000bj0kr7hsmd7r8","tag_id":"cm4sllyp3001xj0krgbxh3bof","_id":"cm4sllypn002bj0kr8jhxaqhu"},{"post_id":"cm4sllynq000bj0kr7hsmd7r8","tag_id":"cm4sllyph0024j0kr7tjbe8aa","_id":"cm4sllypp002fj0krb6uh9ds2"},{"post_id":"cm4sllypj0026j0kran5f217j","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllypr002jj0kr8f6o8uts"},{"post_id":"cm4sllypj0026j0kran5f217j","tag_id":"cm4sllyns000dj0kr53hb0xi2","_id":"cm4sllypt002mj0kre8ygfuk1"},{"post_id":"cm4sllypj0026j0kran5f217j","tag_id":"cm4sllyof0010j0kr77l8eev0","_id":"cm4sllypv002rj0krha0x5swb"},{"post_id":"cm4sllynv000fj0kr2mg1ep8w","tag_id":"cm4sllypl0029j0kr9w1150ae","_id":"cm4sllypx002tj0krforaarr5"},{"post_id":"cm4sllynz000hj0kr99b5365r","tag_id":"cm4sllyor001hj0kr2lbzf7f0","_id":"cm4sllypz002yj0kr1xpt2n9y"},{"post_id":"cm4sllyo3000mj0kr5f71bvit","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllyq0002zj0kr11953vuv"},{"post_id":"cm4sllyo3000mj0kr5f71bvit","tag_id":"cm4sllypu002oj0krc7fah5p0","_id":"cm4sllyq20033j0kr3t400bbo"},{"post_id":"cm4sllypy002wj0kr898nb6fv","tag_id":"cm4sllyor001hj0kr2lbzf7f0","_id":"cm4sllyq30035j0kr9z912gpk"},{"post_id":"cm4sllyo6000pj0krca68b6ql","tag_id":"cm4sllypz002xj0krhmurb12m","_id":"cm4sllyq40039j0kr7kku43j5"},{"post_id":"cm4sllyob000vj0krejvkgvde","tag_id":"cm4sllypz002xj0krhmurb12m","_id":"cm4sllyq4003aj0krgxfq971n"},{"post_id":"cm4sllyod000xj0kravj3frif","tag_id":"cm4sllyq30038j0kr9my5b95b","_id":"cm4sllyq6003ej0kre777g7lb"},{"post_id":"cm4sllyog0012j0krfm8c6821","tag_id":"cm4sllypz002xj0krhmurb12m","_id":"cm4sllyq7003ij0kre90agnij"},{"post_id":"cm4sllyon001aj0krdauagdri","tag_id":"cm4sllyq6003hj0kr5qz58l4i","_id":"cm4sllyq8003mj0kree3h58ye"},{"post_id":"cm4sllyop001dj0kr1xihhoe4","tag_id":"cm4sllyq8003lj0krgil4g13u","_id":"cm4sllyqc003wj0krh1kkaps4"},{"post_id":"cm4sllyop001dj0kr1xihhoe4","tag_id":"cm4sllyq9003pj0kr4xsw1yww","_id":"cm4sllyqc003yj0kr1yzr5mil"},{"post_id":"cm4sllyop001dj0kr1xihhoe4","tag_id":"cm4sllyqa003sj0krf53uhdco","_id":"cm4sllyqd0041j0krfsgo5e57"},{"post_id":"cm4sllyor001ij0krdlj2d9y3","tag_id":"cm4sllyng0005j0kr0t3qbh0e","_id":"cm4sllyqd0042j0krhnijfb1q"},{"post_id":"cm4sllyor001ij0krdlj2d9y3","tag_id":"cm4sllyqb003vj0kr0fly5lyp","_id":"cm4sllyqe0046j0kr4k69gwrz"},{"post_id":"cm4sllyot001lj0kr037u709i","tag_id":"cm4sllyqd0040j0kr63txe68x","_id":"cm4sllyqf0047j0krh7bncnmd"},{"post_id":"cm4sllyoz001sj0kr1bof4fbu","tag_id":"cm4sllyqe0045j0kr43a2ew84","_id":"cm4sllyqh004dj0kr9muy4x9c"},{"post_id":"cm4sllyoz001sj0kr1bof4fbu","tag_id":"cm4sllyqf004aj0krai0y4r9f","_id":"cm4sllyqh004fj0kr8yk94mqj"},{"post_id":"cm4sllyp2001vj0kr0jw55491","tag_id":"cm4sllypz002xj0krhmurb12m","_id":"cm4sllyqh004hj0krgholf32b"},{"post_id":"cm4sllyp5001zj0krc4wh6g7p","tag_id":"cm4sllyqh004gj0krfqq2a6lf","_id":"cm4sllyqi004jj0krblmieiqj"},{"post_id":"cm4sllyp70021j0kr7fftdjho","tag_id":"cm4sllyqi004ij0krhggzhdag","_id":"cm4sllyqj004lj0kr37tz8vuq"},{"post_id":"cm4sllypi0025j0kr55fybua1","tag_id":"cm4sllyor001hj0kr2lbzf7f0","_id":"cm4sllyqj004nj0krfy8199w1"},{"post_id":"cm4sllypi0025j0kr55fybua1","tag_id":"cm4sllyqi004kj0kr2nyd6t3a","_id":"cm4sllyqj004oj0krasaa9lbw"},{"post_id":"cm4sllypl002aj0krgvn3ew27","tag_id":"cm4sllyqj004mj0krb6dgetm4","_id":"cm4sllyqk004qj0kr1d688bz5"},{"post_id":"cm4sllypn002cj0kr7fgnehnc","tag_id":"cm4sllyqj004pj0kr1ryjh3u9","_id":"cm4sllyqk004sj0krh5z33dqr"},{"post_id":"cm4sllypp002hj0kr6kwog0xq","tag_id":"cm4sllyqk004rj0kr7kpval89","_id":"cm4sllyql004uj0krctnuaoxu"},{"post_id":"cm4sllyps002kj0krb8oueter","tag_id":"cm4sllyqk004tj0kr0vwk2xju","_id":"cm4sllyqm004wj0kreat90e5u"},{"post_id":"cm4sllypu002pj0kr4iil9hc4","tag_id":"cm4sllyqk004tj0kr0vwk2xju","_id":"cm4sllyqn004zj0kr673jbm3h"},{"post_id":"cm4sllypu002pj0kr4iil9hc4","tag_id":"cm4sllyq8003lj0krgil4g13u","_id":"cm4sllyqn0050j0kr30tz06o9"},{"post_id":"cm4sllypw002sj0kr8ng418yh","tag_id":"cm4sllyqm004yj0kr01zwgeby","_id":"cm4sllyqn0051j0kr3q2d8x7e"}],"Tag":[{"name":"JAVA","_id":"cm4sllyng0005j0kr0t3qbh0e"},{"name":"JVM","_id":"cm4sllyns000dj0kr53hb0xi2"},{"name":"JAVA基础","_id":"cm4sllyof0010j0kr77l8eev0"},{"name":"GitPage","_id":"cm4sllyol0018j0kr97dm3zrf"},{"name":"Hexo","_id":"cm4sllyor001hj0kr2lbzf7f0"},{"name":"Typora","_id":"cm4sllyp3001xj0krgbxh3bof"},{"name":"Markdown","_id":"cm4sllyph0024j0kr7tjbe8aa"},{"name":"Vue系列","_id":"cm4sllypl0029j0kr9w1150ae"},{"name":"日志系统","_id":"cm4sllypu002oj0krc7fah5p0"},{"name":"面试","_id":"cm4sllypz002xj0krhmurb12m"},{"name":"书籍","_id":"cm4sllyq30038j0kr9my5b95b"},{"name":"地铁AFC","_id":"cm4sllyq6003hj0kr5qz58l4i"},{"name":"后端","_id":"cm4sllyq8003lj0krgil4g13u"},{"name":"消息队列","_id":"cm4sllyq9003pj0kr4xsw1yww"},{"name":"MQ","_id":"cm4sllyqa003sj0krf53uhdco"},{"name":"项目","_id":"cm4sllyqb003vj0kr0fly5lyp"},{"name":"网络","_id":"cm4sllyqd0040j0kr63txe68x"},{"name":"空难","_id":"cm4sllyqe0045j0kr43a2ew84"},{"name":"哀悼","_id":"cm4sllyqf004aj0krai0y4r9f"},{"name":"Spring Cloud","_id":"cm4sllyqh004gj0krfqq2a6lf"},{"name":"多线程","_id":"cm4sllyqi004ij0krhggzhdag"},{"name":"Post","_id":"cm4sllyqi004kj0kr2nyd6t3a"},{"name":"幂等性","_id":"cm4sllyqj004mj0krb6dgetm4"},{"name":"Spring","_id":"cm4sllyqj004pj0kr1ryjh3u9"},{"name":"ssm","_id":"cm4sllyqk004rj0kr7kpval89"},{"name":"SpringMVC","_id":"cm4sllyqk004tj0kr0vwk2xju"},{"name":"小程序","_id":"cm4sllyqm004yj0kr01zwgeby"}]}}